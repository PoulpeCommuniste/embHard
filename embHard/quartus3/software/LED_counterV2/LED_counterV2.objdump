
LED_counterV2.elf:     file format elf32-littlenios2
LED_counterV2.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x01000244

Program Header:
    LOAD off    0x00001000 vaddr 0x01000000 paddr 0x01000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x01000020 paddr 0x01000020 align 2**12
         filesz 0x0000f668 memsz 0x0000f668 flags r-x
    LOAD off    0x00010688 vaddr 0x0100f688 paddr 0x01011174 align 2**12
         filesz 0x00001aec memsz 0x00001aec flags rw-
    LOAD off    0x00012c60 vaddr 0x01012c60 paddr 0x01012c60 align 2**12
         filesz 0x00000000 memsz 0x00000164 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  01000000  01000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  01000020  01000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000f124  01000244  01000244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000320  0100f368  0100f368  00010368  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001aec  0100f688  01011174  00010688  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000164  01012c60  01012c60  00012c60  2**2
                  ALLOC, SMALL_DATA
  6 .SDRAM_controller 00000000  01012dc4  01012dc4  00012174  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00012174  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000e98  00000000  00000000  00012198  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   000232b2  00000000  00000000  00013030  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00008ee8  00000000  00000000  000362e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000b3b9  00000000  00000000  0003f1ca  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00002078  00000000  00000000  0004a584  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0000376e  00000000  00000000  0004c5fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00017868  00000000  00000000  0004fd6a  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000030  00000000  00000000  000675d4  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000018c0  00000000  00000000  00067608  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0006bf96  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  0006bf99  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0006bf9c  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0006bf9d  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  0006bf9e  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  0006bfa2  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  0006bfa6  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  0006bfaa  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  0006bfb3  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  0006bfbc  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000005  00000000  00000000  0006bfc5  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 0000002f  00000000  00000000  0006bfca  2**0
                  CONTENTS, READONLY
 29 .jdi          000047cf  00000000  00000000  0006bff9  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     0003e6e9  00000000  00000000  000707c8  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
01000000 l    d  .entry	00000000 .entry
01000020 l    d  .exceptions	00000000 .exceptions
01000244 l    d  .text	00000000 .text
0100f368 l    d  .rodata	00000000 .rodata
0100f688 l    d  .rwdata	00000000 .rwdata
01012c60 l    d  .bss	00000000 .bss
01012dc4 l    d  .SDRAM_controller	00000000 .SDRAM_controller
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../LED_counterV2_bsp//obj/HAL/src/crt0.o
0100028c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 counter.c
01000290 l     F .text	00000054 timer_interrupt
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
0100f3d6 l     O .rodata	00000010 zeroes.4404
01002790 l     F .text	000000bc __sbprintf
0100f3e6 l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
010029a0 l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
010044d0 l     F .text	00000008 __fp_unlock
010044e4 l     F .text	0000019c __sinit.part.1
01004680 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
0100f688 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
0100facc l     O .rwdata	00000020 lc_ctype_charset
0100faac l     O .rwdata	00000020 lc_message_charset
0100faec l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
0100f418 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
01007a7c l     F .text	000000fc __sprint_r.part.0
0100f54c l     O .rodata	00000010 blanks.4348
0100f53c l     O .rodata	00000010 zeroes.4349
01009008 l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
0100ccc4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0100cdd0 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0100cdfc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_isatty.c
0100d188 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0100d268 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0100d354 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0100d528 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
01011168 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0100d774 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0100d8a8 l     F .text	00000034 alt_dev_reg
010100d4 l     O .rwdata	00001060 jtag_uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0100db84 l     F .text	0000020c altera_avalon_jtag_uart_irq
0100dd90 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0100e53c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0100e7ac l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
0100e8ec l     F .text	0000003c alt_get_errno
0100e928 l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
01012c90 g     O .bss	00000004 alt_instruction_exception_handler
010070c0 g     F .text	00000074 _mprec_log10
010071ac g     F .text	0000008c __any_on
010095a4 g     F .text	00000054 _isatty_r
0100f424 g     O .rodata	00000028 __mprec_tinytens
0100d464 g     F .text	0000007c alt_main
01000410 g     F .text	000000c0 _puts_r
01012cc4 g     O .bss	00000100 alt_irq
010095f8 g     F .text	00000060 _lseek_r
01011174 g       *ABS*	00000000 __flash_rwdata_start
0100b7f0 g     F .text	00000088 .hidden __eqdf2
01012dc4 g       *ABS*	00000000 __alt_heap_start
010003d4 g     F .text	0000003c printf
01009810 g     F .text	0000009c _wcrtomb_r
0100793c g     F .text	0000005c __sseek
01004820 g     F .text	00000010 __sinit
010096b8 g     F .text	00000140 __swbuf_r
010052e8 g     F .text	0000007c _setlocale_r
01004688 g     F .text	00000068 __sfmoreglue
0100d504 g     F .text	00000024 __malloc_unlock
01005fb8 g     F .text	0000015c memmove
01004808 g     F .text	00000018 _cleanup
0100623c g     F .text	000000a8 _Balloc
0100b878 g     F .text	000000dc .hidden __gtdf2
0100ece4 g     F .text	00000024 altera_nios2_gen2_irq_init
01000000 g     F .entry	0000001c __reset
01000020 g       *ABS*	00000000 __flash_exceptions_start
01009548 g     F .text	0000005c _fstat_r
01012c7c g     O .bss	00000004 errno
010078b8 g     F .text	00000008 __seofread
01012c88 g     O .bss	00000004 alt_argv
01019134 g       *ABS*	00000000 _gp
0100ff54 g     O .rwdata	00000180 alt_fd_list
0100ed08 g     F .text	00000090 alt_find_dev
01005e70 g     F .text	00000148 memcpy
010044d8 g     F .text	0000000c _cleanup_r
0100cadc g     F .text	000000dc .hidden __floatsidf
0100e870 g     F .text	0000007c alt_io_redirect
0100b954 g     F .text	000000f4 .hidden __ltdf2
0100f368 g       *ABS*	00000000 __DTOR_END__
010004d0 g     F .text	00000014 puts
0100e710 g     F .text	0000009c alt_exception_cause_generated_bad_addr
0100779c g     F .text	00000074 __fpclassifyd
0100701c g     F .text	000000a4 __ratio
01008fec g     F .text	0000001c __vfiprintf_internal
0100df88 g     F .text	0000021c altera_avalon_jtag_uart_read
010003a4 g     F .text	00000030 _printf_r
0100a5a0 g     F .text	00000064 .hidden __udivsi3
0100d1c4 g     F .text	000000a4 isatty
0100f474 g     O .rodata	000000c8 __mprec_tens
01005364 g     F .text	0000000c __locale_charset
0100ef44 g     F .text	00000090 alt_icache_flush
01012c78 g     O .bss	00000004 __malloc_top_pad
0101113c g     O .rwdata	00000004 __mb_cur_max
01005394 g     F .text	0000000c _localeconv_r
01006648 g     F .text	0000003c __i2b
01004ca4 g     F .text	000004bc __sfvwrite_r
01007810 g     F .text	00000054 _sbrk_r
01009658 g     F .text	00000060 _read_r
0101115c g     O .rwdata	00000004 alt_max_fd
0100923c g     F .text	000000f0 _fclose_r
010044a0 g     F .text	00000030 fflush
01012c74 g     O .bss	00000004 __malloc_max_sbrked_mem
0100a65c g     F .text	000008ac .hidden __adddf3
01006dc4 g     F .text	0000010c __b2d
01009f70 g     F .text	00000538 .hidden __umoddi3
0100d390 g     F .text	000000d4 lseek
01000314 g     F .text	00000054 initIRQ
01011134 g     O .rwdata	00000004 _global_impure_ptr
01007238 g     F .text	00000564 _realloc_r
01012dc4 g       *ABS*	00000000 __bss_end
0100d098 g     F .text	000000f0 alt_iic_isr_register
0100ebdc g     F .text	00000108 alt_tick
010099f8 g     F .text	00000578 .hidden __udivdi3
010094a4 g     F .text	00000024 _fputwc_r
0100f44c g     O .rodata	00000028 __mprec_bigtens
0100642c g     F .text	00000104 __s2b
0100cbb8 g     F .text	000000a8 .hidden __floatunsidf
01006b04 g     F .text	00000060 __mcmp
01004840 g     F .text	00000018 __fp_lock_all
0100d04c g     F .text	0000004c alt_ic_irq_enabled
0100eb40 g     F .text	0000009c alt_alarm_stop
01012c80 g     O .bss	00000004 alt_irq_active
010000fc g     F .exceptions	000000d4 alt_irq_handler
0100ff2c g     O .rwdata	00000028 alt_dev_null
0100e4f4 g     F .text	00000048 alt_dcache_flush_all
01006530 g     F .text	00000068 __hi0bits
0100ca5c g     F .text	00000080 .hidden __fixdfsi
01011174 g       *ABS*	00000000 __ram_rwdata_end
01011154 g     O .rwdata	00000008 alt_dev_list
0100d7b0 g     F .text	000000f8 write
0100f688 g       *ABS*	00000000 __ram_rodata_end
0100ce38 g     F .text	000000b0 fstat
0100b954 g     F .text	000000f4 .hidden __ledf2
0100687c g     F .text	00000140 __pow5mult
01007b90 g     F .text	0000145c ___vfiprintf_internal_r
01012c6c g     O .bss	00000004 __nlocale_changed
0100a604 g     F .text	00000058 .hidden __umodsi3
01012dc4 g       *ABS*	00000000 end
0100dac4 g     F .text	000000c0 altera_avalon_jtag_uart_init
010001d0 g     F .exceptions	00000074 alt_instruction_exception_entry
0100f368 g       *ABS*	00000000 __CTOR_LIST__
02000000 g       *ABS*	00000000 __alt_stack_pointer
0100cc60 g     F .text	00000064 .hidden __clzsi2
0100e1a4 g     F .text	00000224 altera_avalon_jtag_uart_write
01004830 g     F .text	00000004 __sfp_lock_acquire
01005d8c g     F .text	000000e4 memchr
0100057c g     F .text	000021f8 ___vfprintf_internal_r
01004994 g     F .text	00000310 _free_r
01005370 g     F .text	00000010 __locale_mb_cur_max
0100f1b4 g     F .text	00000180 __call_exitprocs
01012c68 g     O .bss	00000004 __mlocale_changed
01011140 g     O .rwdata	00000004 __malloc_sbrk_base
01000244 g     F .text	0000004c _start
01012c94 g     O .bss	00000004 _alt_tick_rate
010069bc g     F .text	00000148 __lshift
01012c98 g     O .bss	00000004 _alt_nticks
0100d564 g     F .text	000000fc read
0100d914 g     F .text	0000004c alt_sys_init
0100f09c g     F .text	00000118 __register_exitproc
01006684 g     F .text	000001f8 __multiply
0100de30 g     F .text	00000068 altera_avalon_jtag_uart_close
0100f688 g       *ABS*	00000000 __ram_rwdata_start
0100f368 g       *ABS*	00000000 __ram_rodata_start
01012c9c g     O .bss	00000028 __malloc_current_mallinfo
01006ed0 g     F .text	0000014c __d2b
0100d960 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0100eea0 g     F .text	000000a4 alt_get_fd
01009124 g     F .text	00000054 _close_r
0100f020 g     F .text	0000007c memcmp
0100da20 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
01012dc4 g       *ABS*	00000000 __alt_stack_base
0100da70 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
0100284c g     F .text	00000154 __swsetup_r
0100af08 g     F .text	000008e8 .hidden __divdf3
010046f0 g     F .text	00000118 __sfp
01007134 g     F .text	00000078 __copybits
0100fb24 g     O .rwdata	00000408 __malloc_av_
0100483c g     F .text	00000004 __sinit_lock_release
0100ba48 g     F .text	00000718 .hidden __muldf3
01007864 g     F .text	00000054 __sread
01012c60 g     O .bss	00000004 counter
0100ed98 g     F .text	00000108 alt_find_file
0100e578 g     F .text	000000a4 alt_dev_llist_insert
0100d4e0 g     F .text	00000024 __malloc_lock
0100d6c4 g     F .text	000000b0 sbrk
01004444 g     F .text	0000005c _fflush_r
01009178 g     F .text	000000c4 _calloc_r
01012c60 g       *ABS*	00000000 __bss_start
01006114 g     F .text	00000128 memset
01000368 g     F .text	0000003c main
01012c8c g     O .bss	00000004 alt_envp
01012c70 g     O .bss	00000004 __malloc_max_total_mem
0100d9c0 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
010097f8 g     F .text	00000018 __swbuf
01007998 g     F .text	00000008 __sclose
02000000 g       *ABS*	00000000 __alt_heap_limit
0100932c g     F .text	00000014 fclose
01002ba0 g     F .text	00001688 _dtoa_r
01005580 g     F .text	0000080c _malloc_r
0100996c g     F .text	00000030 __ascii_wctomb
01011160 g     O .rwdata	00000004 alt_errno
01005160 g     F .text	000000c4 _fwalk
0100a4a8 g     F .text	00000084 .hidden __divsi3
01004870 g     F .text	00000124 _malloc_trim_r
0100f368 g       *ABS*	00000000 __CTOR_END__
010079a0 g     F .text	000000dc strcmp
010002e4 g     F .text	00000030 initLEDs
0100f368 g       *ABS*	00000000 __flash_rodata_start
0100f368 g       *ABS*	00000000 __DTOR_LIST__
0100b7f0 g     F .text	00000088 .hidden __nedf2
01000000 g       *ABS*	00000000 __alt_mem_SDRAM_controller
0100d8dc g     F .text	00000038 alt_irq_init
0100d660 g     F .text	00000064 alt_release_fd
0100f55c g     O .rodata	00000100 .hidden __clz_tab
01012c64 g     O .bss	00000004 _PathLocale
0100efd4 g     F .text	00000014 atexit
010090c4 g     F .text	00000060 _write_r
010053a0 g     F .text	00000018 setlocale
01011138 g     O .rwdata	00000004 _impure_ptr
01012c84 g     O .bss	00000004 alt_argc
01004228 g     F .text	0000021c __sflush_r
0100e67c g     F .text	00000060 _do_dtors
0100538c g     F .text	00000008 __locale_cjk_lang
01000020 g       .exceptions	00000000 alt_irq_entry
01006d60 g     F .text	00000064 __ulp
01004858 g     F .text	00000018 __fp_unlock_all
0101114c g     O .rwdata	00000008 alt_fs_list
01000020 g       *ABS*	00000000 __ram_exceptions_start
010053b8 g     F .text	0000000c localeconv
0100cee8 g     F .text	00000050 alt_ic_isr_register
01011174 g       *ABS*	00000000 _edata
01012dc4 g       *ABS*	00000000 _end
01009340 g     F .text	00000164 __fputwc
01000244 g       *ABS*	00000000 __ram_exceptions_end
0100de98 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
0100cfc0 g     F .text	0000008c alt_ic_irq_disable
010078c0 g     F .text	0000007c __swrite
01011144 g     O .rwdata	00000004 __malloc_trim_threshold
01005380 g     F .text	0000000c __locale_msgcharset
0100efe8 g     F .text	00000038 exit
01005224 g     F .text	000000c4 _fwalk_reent
01006b64 g     F .text	000001fc __mdiff
0100a52c g     F .text	00000074 .hidden __modsi3
02000000 g       *ABS*	00000000 __alt_data_end
01000020 g     F .exceptions	00000000 alt_exception
01004834 g     F .text	00000004 __sfp_lock_release
0100f334 g     F .text	00000034 _exit
0100e3c8 g     F .text	0000012c alt_alarm_start
010053c4 g     F .text	000001bc __smakebuf_r
010004e4 g     F .text	00000098 strlen
0100e9ec g     F .text	00000154 open
0100b878 g     F .text	000000dc .hidden __gedf2
01011148 g     O .rwdata	00000004 __wctomb
01007b78 g     F .text	00000018 __sprint_r
0100e6dc g     F .text	00000034 alt_icache_flush_all
01011164 g     O .rwdata	00000004 alt_priority_mask
0100cf38 g     F .text	00000088 alt_ic_irq_enable
01002774 g     F .text	0000001c __vfprintf_internal
0100999c g     F .text	0000005c _wctomb_r
0100c160 g     F .text	000008fc .hidden __subdf3
01006598 g     F .text	000000b0 __lo0bits
0101116c g     O .rwdata	00000008 alt_alarm_list
0100e61c g     F .text	00000060 _do_ctors
010098ac g     F .text	000000c0 wcrtomb
0100cd00 g     F .text	000000d0 close
0100d2d0 g     F .text	00000084 alt_load
010094c8 g     F .text	00000080 fputwc
01004838 g     F .text	00000004 __sinit_lock_acquire
0100630c g     F .text	00000120 __multadd
010062e4 g     F .text	00000028 _Bfree



Disassembly of section .entry:

01000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
 1000000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
 1000004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
 1000008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
 100000c:	00bffd16 	blt	zero,r2,1000004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 1000010:	00404034 	movhi	at,256
    ori r1, r1, %lo(_start)
 1000014:	08409114 	ori	at,at,580
    jmp r1
 1000018:	0800683a 	jmp	at
 100001c:	00000000 	call	0 <__alt_mem_SDRAM_controller-0x1000000>

Disassembly of section .exceptions:

01000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 1000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 1000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 1000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 100002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 1000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 1000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 1000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 100003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 1000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 1000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 1000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 100004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 1000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 1000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 1000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 100005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 1000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 1000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 1000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 100006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 1000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 1000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 1000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 100007c:	10000326 	beq	r2,zero,100008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 1000080:	20000226 	beq	r4,zero,100008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 1000084:	10000fc0 	call	10000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 1000088:	00000706 	br	10000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
 100008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
 1000090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
 1000094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
 1000098:	10001d00 	call	10001d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
 100009c:	1000021e 	bne	r2,zero,10000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
 10000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 10000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 10000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 10000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 10000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 10000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 10000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 10000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 10000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 10000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 10000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 10000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 10000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 10000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 10000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 10000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 10000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 10000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 10000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 10000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 10000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 10000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 10000f8:	ef80083a 	eret

010000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 10000fc:	defff904 	addi	sp,sp,-28
 1000100:	dfc00615 	stw	ra,24(sp)
 1000104:	df000515 	stw	fp,20(sp)
 1000108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 100010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 1000110:	0005313a 	rdctl	r2,ipending
 1000114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 1000118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 100011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 1000120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 1000124:	00800044 	movi	r2,1
 1000128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 100012c:	e0fffb17 	ldw	r3,-20(fp)
 1000130:	e0bffc17 	ldw	r2,-16(fp)
 1000134:	1884703a 	and	r2,r3,r2
 1000138:	10001426 	beq	r2,zero,100018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 100013c:	00804074 	movhi	r2,257
 1000140:	108b3104 	addi	r2,r2,11460
 1000144:	e0fffd17 	ldw	r3,-12(fp)
 1000148:	180690fa 	slli	r3,r3,3
 100014c:	10c5883a 	add	r2,r2,r3
 1000150:	10c00017 	ldw	r3,0(r2)
 1000154:	00804074 	movhi	r2,257
 1000158:	108b3104 	addi	r2,r2,11460
 100015c:	e13ffd17 	ldw	r4,-12(fp)
 1000160:	200890fa 	slli	r4,r4,3
 1000164:	1105883a 	add	r2,r2,r4
 1000168:	10800104 	addi	r2,r2,4
 100016c:	10800017 	ldw	r2,0(r2)
 1000170:	1009883a 	mov	r4,r2
 1000174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 1000178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 100017c:	0005313a 	rdctl	r2,ipending
 1000180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 1000184:	e0bfff17 	ldw	r2,-4(fp)
 1000188:	00000706 	br	10001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 100018c:	e0bffc17 	ldw	r2,-16(fp)
 1000190:	1085883a 	add	r2,r2,r2
 1000194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 1000198:	e0bffd17 	ldw	r2,-12(fp)
 100019c:	10800044 	addi	r2,r2,1
 10001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 10001a4:	003fe106 	br	100012c <alt_irq_handler+0x30>

    active = alt_irq_pending ();
 10001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 10001ac:	e0bffb17 	ldw	r2,-20(fp)
 10001b0:	103fdb1e 	bne	r2,zero,1000120 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 10001b4:	0001883a 	nop
}
 10001b8:	0001883a 	nop
 10001bc:	e037883a 	mov	sp,fp
 10001c0:	dfc00117 	ldw	ra,4(sp)
 10001c4:	df000017 	ldw	fp,0(sp)
 10001c8:	dec00204 	addi	sp,sp,8
 10001cc:	f800283a 	ret

010001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 10001d0:	defffb04 	addi	sp,sp,-20
 10001d4:	dfc00415 	stw	ra,16(sp)
 10001d8:	df000315 	stw	fp,12(sp)
 10001dc:	df000304 	addi	fp,sp,12
 10001e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
 10001e4:	000531fa 	rdctl	r2,exception
 10001e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
 10001ec:	e0bffd17 	ldw	r2,-12(fp)
 10001f0:	10801f0c 	andi	r2,r2,124
 10001f4:	1004d0ba 	srli	r2,r2,2
 10001f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
 10001fc:	0005333a 	rdctl	r2,badaddr
 1000200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 1000204:	d0a6d717 	ldw	r2,-25764(gp)
 1000208:	10000726 	beq	r2,zero,1000228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 100020c:	d0a6d717 	ldw	r2,-25764(gp)
 1000210:	e0fffd17 	ldw	r3,-12(fp)
 1000214:	e1bffe17 	ldw	r6,-8(fp)
 1000218:	e17fff17 	ldw	r5,-4(fp)
 100021c:	1809883a 	mov	r4,r3
 1000220:	103ee83a 	callr	r2
 1000224:	00000206 	br	1000230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 1000228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 100022c:	0005883a 	mov	r2,zero
}
 1000230:	e037883a 	mov	sp,fp
 1000234:	dfc00117 	ldw	ra,4(sp)
 1000238:	df000017 	ldw	fp,0(sp)
 100023c:	dec00204 	addi	sp,sp,8
 1000240:	f800283a 	ret

Disassembly of section .text:

01000244 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
 1000244:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
 1000248:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
 100024c:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
 1000250:	00bffd16 	blt	zero,r2,1000248 <_start+0x4>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 1000254:	06c08034 	movhi	sp,512
    ori sp, sp, %lo(__alt_stack_pointer)
 1000258:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 100025c:	06804074 	movhi	gp,257
    ori gp, gp, %lo(_gp)
 1000260:	d6a44d14 	ori	gp,gp,37172
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 1000264:	00804074 	movhi	r2,257
    ori r2, r2, %lo(__bss_start)
 1000268:	108b1814 	ori	r2,r2,11360

    movhi r3, %hi(__bss_end)
 100026c:	00c04074 	movhi	r3,257
    ori r3, r3, %lo(__bss_end)
 1000270:	18cb7114 	ori	r3,r3,11716

    beq r2, r3, 1f
 1000274:	10c00326 	beq	r2,r3,1000284 <_start+0x40>

0:
    stw zero, (r2)
 1000278:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 100027c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 1000280:	10fffd36 	bltu	r2,r3,1000278 <_start+0x34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 1000284:	100d2d00 	call	100d2d0 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 1000288:	100d4640 	call	100d464 <alt_main>

0100028c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 100028c:	003fff06 	br	100028c <alt_after_alt_main>

01000290 <timer_interrupt>:
#include <altera_avalon_timer_regs.h>
#include <priv/alt_legacy_irq.h>
#define SIZEOF32INT 4
int counter = 0;
//int test;
static void timer_interrupt(void *context, alt_u32 id){
 1000290:	defffd04 	addi	sp,sp,-12
 1000294:	df000215 	stw	fp,8(sp)
 1000298:	df000204 	addi	fp,sp,8
 100029c:	e13ffe15 	stw	r4,-8(fp)
 10002a0:	e17fff15 	stw	r5,-4(fp)
    //printf("HAllo \n");
    counter++; // increase counter
 10002a4:	d0a6cb17 	ldw	r2,-25812(gp)
 10002a8:	10800044 	addi	r2,r2,1
 10002ac:	d0a6cb15 	stw	r2,-25812(gp)
    IOWR_32DIRECT(LEDS_CONTROLLER_0_BASE,SIZEOF32INT*2,counter);
 10002b0:	d0e6cb17 	ldw	r3,-25812(gp)
 10002b4:	00808034 	movhi	r2,512
 10002b8:	10840a04 	addi	r2,r2,4136
 10002bc:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_0_BASE,0);
 10002c0:	0007883a 	mov	r3,zero
 10002c4:	00808034 	movhi	r2,512
 10002c8:	10840004 	addi	r2,r2,4096
 10002cc:	10c00035 	stwio	r3,0(r2)
}
 10002d0:	0001883a 	nop
 10002d4:	e037883a 	mov	sp,fp
 10002d8:	df000017 	ldw	fp,0(sp)
 10002dc:	dec00104 	addi	sp,sp,4
 10002e0:	f800283a 	ret

010002e4 <initLEDs>:
void initLEDs(void){
 10002e4:	deffff04 	addi	sp,sp,-4
 10002e8:	df000015 	stw	fp,0(sp)
 10002ec:	d839883a 	mov	fp,sp
    IOWR_32DIRECT(LEDS_CONTROLLER_0_BASE,0,0xFFFF);
 10002f0:	00ffffd4 	movui	r3,65535
 10002f4:	00808034 	movhi	r2,512
 10002f8:	10840804 	addi	r2,r2,4128
 10002fc:	10c00035 	stwio	r3,0(r2)
}
 1000300:	0001883a 	nop
 1000304:	e037883a 	mov	sp,fp
 1000308:	df000017 	ldw	fp,0(sp)
 100030c:	dec00104 	addi	sp,sp,4
 1000310:	f800283a 	ret

01000314 <initIRQ>:
void initIRQ(void){
 1000314:	defffd04 	addi	sp,sp,-12
 1000318:	dfc00215 	stw	ra,8(sp)
 100031c:	df000115 	stw	fp,4(sp)
 1000320:	df000104 	addi	fp,sp,4
    alt_ic_isr_register(TIMER_0_IRQ_INTERRUPT_CONTROLLER_ID,TIMER_0_IRQ,(void*)timer_interrupt,NULL,0x0);
 1000324:	d8000015 	stw	zero,0(sp)
 1000328:	000f883a 	mov	r7,zero
 100032c:	01804034 	movhi	r6,256
 1000330:	3180a404 	addi	r6,r6,656
 1000334:	01400044 	movi	r5,1
 1000338:	0009883a 	mov	r4,zero
 100033c:	100cee80 	call	100cee8 <alt_ic_isr_register>
    IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_0_BASE,
 1000340:	00c001c4 	movi	r3,7
 1000344:	00808034 	movhi	r2,512
 1000348:	10840104 	addi	r2,r2,4100
 100034c:	10c00035 	stwio	r3,0(r2)
                                     ALTERA_AVALON_TIMER_CONTROL_ITO_MSK);
    /*alt_irq_init(NULL);
     *	//alt_irq_cpu_enable_interrupts();
     *	alt_irq_enable(1);
     *	alt_irq_register(1,(void*)2,(alt_isr_func)timer_interrupt);*/
}
 1000350:	0001883a 	nop
 1000354:	e037883a 	mov	sp,fp
 1000358:	dfc00117 	ldw	ra,4(sp)
 100035c:	df000017 	ldw	fp,0(sp)
 1000360:	dec00204 	addi	sp,sp,8
 1000364:	f800283a 	ret

01000368 <main>:
int main()
{
 1000368:	defffe04 	addi	sp,sp,-8
 100036c:	dfc00115 	stw	ra,4(sp)
 1000370:	df000015 	stw	fp,0(sp)
 1000374:	d839883a 	mov	fp,sp
    printf("Lets start counting \n");
 1000378:	01004074 	movhi	r4,257
 100037c:	213cda04 	addi	r4,r4,-3224
 1000380:	10004d00 	call	10004d0 <puts>
    initLEDs();
 1000384:	10002e40 	call	10002e4 <initLEDs>
    initIRQ();
 1000388:	10003140 	call	1000314 <initIRQ>

    //test = alt_irq_enabled();TIMER_0_BASE
    while(1)
    {
        printf("counter = %d \n",counter);
 100038c:	d0a6cb17 	ldw	r2,-25812(gp)
 1000390:	100b883a 	mov	r5,r2
 1000394:	01004074 	movhi	r4,257
 1000398:	213ce004 	addi	r4,r4,-3200
 100039c:	10003d40 	call	10003d4 <printf>
        //printf("test = %d \n",test);
    }
 10003a0:	003ffa06 	br	100038c <main+0x24>

010003a4 <_printf_r>:
 10003a4:	defffd04 	addi	sp,sp,-12
 10003a8:	2805883a 	mov	r2,r5
 10003ac:	dfc00015 	stw	ra,0(sp)
 10003b0:	d9800115 	stw	r6,4(sp)
 10003b4:	d9c00215 	stw	r7,8(sp)
 10003b8:	21400217 	ldw	r5,8(r4)
 10003bc:	d9c00104 	addi	r7,sp,4
 10003c0:	100d883a 	mov	r6,r2
 10003c4:	100057c0 	call	100057c <___vfprintf_internal_r>
 10003c8:	dfc00017 	ldw	ra,0(sp)
 10003cc:	dec00304 	addi	sp,sp,12
 10003d0:	f800283a 	ret

010003d4 <printf>:
 10003d4:	defffc04 	addi	sp,sp,-16
 10003d8:	dfc00015 	stw	ra,0(sp)
 10003dc:	d9400115 	stw	r5,4(sp)
 10003e0:	d9800215 	stw	r6,8(sp)
 10003e4:	d9c00315 	stw	r7,12(sp)
 10003e8:	00804074 	movhi	r2,257
 10003ec:	10844e04 	addi	r2,r2,4408
 10003f0:	10800017 	ldw	r2,0(r2)
 10003f4:	200b883a 	mov	r5,r4
 10003f8:	d9800104 	addi	r6,sp,4
 10003fc:	11000217 	ldw	r4,8(r2)
 1000400:	10027740 	call	1002774 <__vfprintf_internal>
 1000404:	dfc00017 	ldw	ra,0(sp)
 1000408:	dec00404 	addi	sp,sp,16
 100040c:	f800283a 	ret

01000410 <_puts_r>:
 1000410:	defff604 	addi	sp,sp,-40
 1000414:	dc000715 	stw	r16,28(sp)
 1000418:	2021883a 	mov	r16,r4
 100041c:	2809883a 	mov	r4,r5
 1000420:	dc400815 	stw	r17,32(sp)
 1000424:	dfc00915 	stw	ra,36(sp)
 1000428:	2823883a 	mov	r17,r5
 100042c:	10004e40 	call	10004e4 <strlen>
 1000430:	10c00044 	addi	r3,r2,1
 1000434:	d8800115 	stw	r2,4(sp)
 1000438:	00804074 	movhi	r2,257
 100043c:	10bce404 	addi	r2,r2,-3184
 1000440:	d8800215 	stw	r2,8(sp)
 1000444:	00800044 	movi	r2,1
 1000448:	d8800315 	stw	r2,12(sp)
 100044c:	00800084 	movi	r2,2
 1000450:	dc400015 	stw	r17,0(sp)
 1000454:	d8c00615 	stw	r3,24(sp)
 1000458:	dec00415 	stw	sp,16(sp)
 100045c:	d8800515 	stw	r2,20(sp)
 1000460:	80000226 	beq	r16,zero,100046c <_puts_r+0x5c>
 1000464:	80800e17 	ldw	r2,56(r16)
 1000468:	10001426 	beq	r2,zero,10004bc <_puts_r+0xac>
 100046c:	81400217 	ldw	r5,8(r16)
 1000470:	2880030b 	ldhu	r2,12(r5)
 1000474:	10c8000c 	andi	r3,r2,8192
 1000478:	1800061e 	bne	r3,zero,1000494 <_puts_r+0x84>
 100047c:	29001917 	ldw	r4,100(r5)
 1000480:	00f7ffc4 	movi	r3,-8193
 1000484:	10880014 	ori	r2,r2,8192
 1000488:	20c6703a 	and	r3,r4,r3
 100048c:	2880030d 	sth	r2,12(r5)
 1000490:	28c01915 	stw	r3,100(r5)
 1000494:	d9800404 	addi	r6,sp,16
 1000498:	8009883a 	mov	r4,r16
 100049c:	1004ca40 	call	1004ca4 <__sfvwrite_r>
 10004a0:	1000091e 	bne	r2,zero,10004c8 <_puts_r+0xb8>
 10004a4:	00800284 	movi	r2,10
 10004a8:	dfc00917 	ldw	ra,36(sp)
 10004ac:	dc400817 	ldw	r17,32(sp)
 10004b0:	dc000717 	ldw	r16,28(sp)
 10004b4:	dec00a04 	addi	sp,sp,40
 10004b8:	f800283a 	ret
 10004bc:	8009883a 	mov	r4,r16
 10004c0:	10048200 	call	1004820 <__sinit>
 10004c4:	003fe906 	br	100046c <_puts_r+0x5c>
 10004c8:	00bfffc4 	movi	r2,-1
 10004cc:	003ff606 	br	10004a8 <_puts_r+0x98>

010004d0 <puts>:
 10004d0:	00804074 	movhi	r2,257
 10004d4:	10844e04 	addi	r2,r2,4408
 10004d8:	200b883a 	mov	r5,r4
 10004dc:	11000017 	ldw	r4,0(r2)
 10004e0:	10004101 	jmpi	1000410 <_puts_r>

010004e4 <strlen>:
 10004e4:	208000cc 	andi	r2,r4,3
 10004e8:	10002026 	beq	r2,zero,100056c <strlen+0x88>
 10004ec:	20800007 	ldb	r2,0(r4)
 10004f0:	10002026 	beq	r2,zero,1000574 <strlen+0x90>
 10004f4:	2005883a 	mov	r2,r4
 10004f8:	00000206 	br	1000504 <strlen+0x20>
 10004fc:	10c00007 	ldb	r3,0(r2)
 1000500:	18001826 	beq	r3,zero,1000564 <strlen+0x80>
 1000504:	10800044 	addi	r2,r2,1
 1000508:	10c000cc 	andi	r3,r2,3
 100050c:	183ffb1e 	bne	r3,zero,10004fc <strlen+0x18>
 1000510:	10c00017 	ldw	r3,0(r2)
 1000514:	01ffbff4 	movhi	r7,65279
 1000518:	39ffbfc4 	addi	r7,r7,-257
 100051c:	00ca303a 	nor	r5,zero,r3
 1000520:	01a02074 	movhi	r6,32897
 1000524:	19c7883a 	add	r3,r3,r7
 1000528:	31a02004 	addi	r6,r6,-32640
 100052c:	1946703a 	and	r3,r3,r5
 1000530:	1986703a 	and	r3,r3,r6
 1000534:	1800091e 	bne	r3,zero,100055c <strlen+0x78>
 1000538:	10800104 	addi	r2,r2,4
 100053c:	10c00017 	ldw	r3,0(r2)
 1000540:	19cb883a 	add	r5,r3,r7
 1000544:	00c6303a 	nor	r3,zero,r3
 1000548:	28c6703a 	and	r3,r5,r3
 100054c:	1986703a 	and	r3,r3,r6
 1000550:	183ff926 	beq	r3,zero,1000538 <strlen+0x54>
 1000554:	00000106 	br	100055c <strlen+0x78>
 1000558:	10800044 	addi	r2,r2,1
 100055c:	10c00007 	ldb	r3,0(r2)
 1000560:	183ffd1e 	bne	r3,zero,1000558 <strlen+0x74>
 1000564:	1105c83a 	sub	r2,r2,r4
 1000568:	f800283a 	ret
 100056c:	2005883a 	mov	r2,r4
 1000570:	003fe706 	br	1000510 <strlen+0x2c>
 1000574:	0005883a 	mov	r2,zero
 1000578:	f800283a 	ret

0100057c <___vfprintf_internal_r>:
 100057c:	deffb804 	addi	sp,sp,-288
 1000580:	dfc04715 	stw	ra,284(sp)
 1000584:	ddc04515 	stw	r23,276(sp)
 1000588:	dd404315 	stw	r21,268(sp)
 100058c:	d9002c15 	stw	r4,176(sp)
 1000590:	282f883a 	mov	r23,r5
 1000594:	302b883a 	mov	r21,r6
 1000598:	d9c02d15 	stw	r7,180(sp)
 100059c:	df004615 	stw	fp,280(sp)
 10005a0:	dd804415 	stw	r22,272(sp)
 10005a4:	dd004215 	stw	r20,264(sp)
 10005a8:	dcc04115 	stw	r19,260(sp)
 10005ac:	dc804015 	stw	r18,256(sp)
 10005b0:	dc403f15 	stw	r17,252(sp)
 10005b4:	dc003e15 	stw	r16,248(sp)
 10005b8:	10053940 	call	1005394 <_localeconv_r>
 10005bc:	10800017 	ldw	r2,0(r2)
 10005c0:	1009883a 	mov	r4,r2
 10005c4:	d8803415 	stw	r2,208(sp)
 10005c8:	10004e40 	call	10004e4 <strlen>
 10005cc:	d8803715 	stw	r2,220(sp)
 10005d0:	d8802c17 	ldw	r2,176(sp)
 10005d4:	10000226 	beq	r2,zero,10005e0 <___vfprintf_internal_r+0x64>
 10005d8:	10800e17 	ldw	r2,56(r2)
 10005dc:	1000f926 	beq	r2,zero,10009c4 <___vfprintf_internal_r+0x448>
 10005e0:	b880030b 	ldhu	r2,12(r23)
 10005e4:	10c8000c 	andi	r3,r2,8192
 10005e8:	1800061e 	bne	r3,zero,1000604 <___vfprintf_internal_r+0x88>
 10005ec:	b9001917 	ldw	r4,100(r23)
 10005f0:	00f7ffc4 	movi	r3,-8193
 10005f4:	10880014 	ori	r2,r2,8192
 10005f8:	20c6703a 	and	r3,r4,r3
 10005fc:	b880030d 	sth	r2,12(r23)
 1000600:	b8c01915 	stw	r3,100(r23)
 1000604:	10c0020c 	andi	r3,r2,8
 1000608:	1800c126 	beq	r3,zero,1000910 <___vfprintf_internal_r+0x394>
 100060c:	b8c00417 	ldw	r3,16(r23)
 1000610:	1800bf26 	beq	r3,zero,1000910 <___vfprintf_internal_r+0x394>
 1000614:	1080068c 	andi	r2,r2,26
 1000618:	00c00284 	movi	r3,10
 100061c:	10c0c426 	beq	r2,r3,1000930 <___vfprintf_internal_r+0x3b4>
 1000620:	d8c00404 	addi	r3,sp,16
 1000624:	05004074 	movhi	r20,257
 1000628:	d9001e04 	addi	r4,sp,120
 100062c:	a53cf584 	addi	r20,r20,-3114
 1000630:	d8c01e15 	stw	r3,120(sp)
 1000634:	d8002015 	stw	zero,128(sp)
 1000638:	d8001f15 	stw	zero,124(sp)
 100063c:	d8003315 	stw	zero,204(sp)
 1000640:	d8003615 	stw	zero,216(sp)
 1000644:	d8003815 	stw	zero,224(sp)
 1000648:	1811883a 	mov	r8,r3
 100064c:	d8003915 	stw	zero,228(sp)
 1000650:	d8003a15 	stw	zero,232(sp)
 1000654:	d8002f15 	stw	zero,188(sp)
 1000658:	d9002815 	stw	r4,160(sp)
 100065c:	a8800007 	ldb	r2,0(r21)
 1000660:	10027b26 	beq	r2,zero,1001050 <___vfprintf_internal_r+0xad4>
 1000664:	00c00944 	movi	r3,37
 1000668:	a821883a 	mov	r16,r21
 100066c:	10c0021e 	bne	r2,r3,1000678 <___vfprintf_internal_r+0xfc>
 1000670:	00001406 	br	10006c4 <___vfprintf_internal_r+0x148>
 1000674:	10c00326 	beq	r2,r3,1000684 <___vfprintf_internal_r+0x108>
 1000678:	84000044 	addi	r16,r16,1
 100067c:	80800007 	ldb	r2,0(r16)
 1000680:	103ffc1e 	bne	r2,zero,1000674 <___vfprintf_internal_r+0xf8>
 1000684:	8563c83a 	sub	r17,r16,r21
 1000688:	88000e26 	beq	r17,zero,10006c4 <___vfprintf_internal_r+0x148>
 100068c:	d8c02017 	ldw	r3,128(sp)
 1000690:	d8801f17 	ldw	r2,124(sp)
 1000694:	45400015 	stw	r21,0(r8)
 1000698:	1c47883a 	add	r3,r3,r17
 100069c:	10800044 	addi	r2,r2,1
 10006a0:	d8c02015 	stw	r3,128(sp)
 10006a4:	44400115 	stw	r17,4(r8)
 10006a8:	d8801f15 	stw	r2,124(sp)
 10006ac:	00c001c4 	movi	r3,7
 10006b0:	1880a716 	blt	r3,r2,1000950 <___vfprintf_internal_r+0x3d4>
 10006b4:	42000204 	addi	r8,r8,8
 10006b8:	d9402f17 	ldw	r5,188(sp)
 10006bc:	2c4b883a 	add	r5,r5,r17
 10006c0:	d9402f15 	stw	r5,188(sp)
 10006c4:	80800007 	ldb	r2,0(r16)
 10006c8:	1000a826 	beq	r2,zero,100096c <___vfprintf_internal_r+0x3f0>
 10006cc:	84400047 	ldb	r17,1(r16)
 10006d0:	00bfffc4 	movi	r2,-1
 10006d4:	85400044 	addi	r21,r16,1
 10006d8:	d8002785 	stb	zero,158(sp)
 10006dc:	0007883a 	mov	r3,zero
 10006e0:	000f883a 	mov	r7,zero
 10006e4:	d8802915 	stw	r2,164(sp)
 10006e8:	d8003115 	stw	zero,196(sp)
 10006ec:	0025883a 	mov	r18,zero
 10006f0:	01401604 	movi	r5,88
 10006f4:	01800244 	movi	r6,9
 10006f8:	02800a84 	movi	r10,42
 10006fc:	02401b04 	movi	r9,108
 1000700:	ad400044 	addi	r21,r21,1
 1000704:	88bff804 	addi	r2,r17,-32
 1000708:	28830436 	bltu	r5,r2,100131c <___vfprintf_internal_r+0xda0>
 100070c:	100490ba 	slli	r2,r2,2
 1000710:	01004034 	movhi	r4,256
 1000714:	2101c904 	addi	r4,r4,1828
 1000718:	1105883a 	add	r2,r2,r4
 100071c:	10800017 	ldw	r2,0(r2)
 1000720:	1000683a 	jmp	r2
 1000724:	0100123c 	xorhi	r4,zero,72
 1000728:	0100131c 	xori	r4,zero,76
 100072c:	0100131c 	xori	r4,zero,76
 1000730:	0100125c 	xori	r4,zero,73
 1000734:	0100131c 	xori	r4,zero,76
 1000738:	0100131c 	xori	r4,zero,76
 100073c:	0100131c 	xori	r4,zero,76
 1000740:	0100131c 	xori	r4,zero,76
 1000744:	0100131c 	xori	r4,zero,76
 1000748:	0100131c 	xori	r4,zero,76
 100074c:	010009d0 	cmplti	r4,zero,39
 1000750:	01001178 	rdprs	r4,zero,69
 1000754:	0100131c 	xori	r4,zero,76
 1000758:	01000898 	cmpnei	r4,zero,34
 100075c:	010009f8 	rdprs	r4,zero,39
 1000760:	0100131c 	xori	r4,zero,76
 1000764:	01000a38 	rdprs	r4,zero,40
 1000768:	01000a44 	movi	r4,41
 100076c:	01000a44 	movi	r4,41
 1000770:	01000a44 	movi	r4,41
 1000774:	01000a44 	movi	r4,41
 1000778:	01000a44 	movi	r4,41
 100077c:	01000a44 	movi	r4,41
 1000780:	01000a44 	movi	r4,41
 1000784:	01000a44 	movi	r4,41
 1000788:	01000a44 	movi	r4,41
 100078c:	0100131c 	xori	r4,zero,76
 1000790:	0100131c 	xori	r4,zero,76
 1000794:	0100131c 	xori	r4,zero,76
 1000798:	0100131c 	xori	r4,zero,76
 100079c:	0100131c 	xori	r4,zero,76
 10007a0:	0100131c 	xori	r4,zero,76
 10007a4:	0100131c 	xori	r4,zero,76
 10007a8:	0100131c 	xori	r4,zero,76
 10007ac:	0100131c 	xori	r4,zero,76
 10007b0:	0100131c 	xori	r4,zero,76
 10007b4:	01000a78 	rdprs	r4,zero,41
 10007b8:	01000b34 	movhi	r4,44
 10007bc:	0100131c 	xori	r4,zero,76
 10007c0:	01000b34 	movhi	r4,44
 10007c4:	0100131c 	xori	r4,zero,76
 10007c8:	0100131c 	xori	r4,zero,76
 10007cc:	0100131c 	xori	r4,zero,76
 10007d0:	0100131c 	xori	r4,zero,76
 10007d4:	01000bd4 	movui	r4,47
 10007d8:	0100131c 	xori	r4,zero,76
 10007dc:	0100131c 	xori	r4,zero,76
 10007e0:	01000be0 	cmpeqi	r4,zero,47
 10007e4:	0100131c 	xori	r4,zero,76
 10007e8:	0100131c 	xori	r4,zero,76
 10007ec:	0100131c 	xori	r4,zero,76
 10007f0:	0100131c 	xori	r4,zero,76
 10007f4:	0100131c 	xori	r4,zero,76
 10007f8:	01001058 	cmpnei	r4,zero,65
 10007fc:	0100131c 	xori	r4,zero,76
 1000800:	0100131c 	xori	r4,zero,76
 1000804:	010010b8 	rdprs	r4,zero,66
 1000808:	0100131c 	xori	r4,zero,76
 100080c:	0100131c 	xori	r4,zero,76
 1000810:	0100131c 	xori	r4,zero,76
 1000814:	0100131c 	xori	r4,zero,76
 1000818:	0100131c 	xori	r4,zero,76
 100081c:	0100131c 	xori	r4,zero,76
 1000820:	0100131c 	xori	r4,zero,76
 1000824:	0100131c 	xori	r4,zero,76
 1000828:	0100131c 	xori	r4,zero,76
 100082c:	0100131c 	xori	r4,zero,76
 1000830:	010012c8 	cmpgei	r4,zero,75
 1000834:	01001268 	cmpgeui	r4,zero,73
 1000838:	01000b34 	movhi	r4,44
 100083c:	01000b34 	movhi	r4,44
 1000840:	01000b34 	movhi	r4,44
 1000844:	01001278 	rdprs	r4,zero,73
 1000848:	01001268 	cmpgeui	r4,zero,73
 100084c:	0100131c 	xori	r4,zero,76
 1000850:	0100131c 	xori	r4,zero,76
 1000854:	01001284 	movi	r4,74
 1000858:	0100131c 	xori	r4,zero,76
 100085c:	01001294 	movui	r4,74
 1000860:	01001168 	cmpgeui	r4,zero,69
 1000864:	010008a4 	muli	r4,zero,34
 1000868:	01001188 	cmpgei	r4,zero,70
 100086c:	0100131c 	xori	r4,zero,76
 1000870:	01001194 	movui	r4,70
 1000874:	0100131c 	xori	r4,zero,76
 1000878:	010011f0 	cmpltui	r4,zero,71
 100087c:	0100131c 	xori	r4,zero,76
 1000880:	0100131c 	xori	r4,zero,76
 1000884:	01001200 	call	100120 <__alt_mem_SDRAM_controller-0xeffee0>
 1000888:	d9003117 	ldw	r4,196(sp)
 100088c:	d8802d15 	stw	r2,180(sp)
 1000890:	0109c83a 	sub	r4,zero,r4
 1000894:	d9003115 	stw	r4,196(sp)
 1000898:	94800114 	ori	r18,r18,4
 100089c:	ac400007 	ldb	r17,0(r21)
 10008a0:	003f9706 	br	1000700 <___vfprintf_internal_r+0x184>
 10008a4:	00800c04 	movi	r2,48
 10008a8:	d9002d17 	ldw	r4,180(sp)
 10008ac:	d9402917 	ldw	r5,164(sp)
 10008b0:	d8802705 	stb	r2,156(sp)
 10008b4:	00801e04 	movi	r2,120
 10008b8:	d8802745 	stb	r2,157(sp)
 10008bc:	d8002785 	stb	zero,158(sp)
 10008c0:	20c00104 	addi	r3,r4,4
 10008c4:	24c00017 	ldw	r19,0(r4)
 10008c8:	002d883a 	mov	r22,zero
 10008cc:	90800094 	ori	r2,r18,2
 10008d0:	28029a16 	blt	r5,zero,100133c <___vfprintf_internal_r+0xdc0>
 10008d4:	00bfdfc4 	movi	r2,-129
 10008d8:	90a4703a 	and	r18,r18,r2
 10008dc:	d8c02d15 	stw	r3,180(sp)
 10008e0:	94800094 	ori	r18,r18,2
 10008e4:	9802871e 	bne	r19,zero,1001304 <___vfprintf_internal_r+0xd88>
 10008e8:	00804074 	movhi	r2,257
 10008ec:	10bcee04 	addi	r2,r2,-3144
 10008f0:	d8803915 	stw	r2,228(sp)
 10008f4:	04401e04 	movi	r17,120
 10008f8:	d8802917 	ldw	r2,164(sp)
 10008fc:	0039883a 	mov	fp,zero
 1000900:	1001e926 	beq	r2,zero,10010a8 <___vfprintf_internal_r+0xb2c>
 1000904:	0027883a 	mov	r19,zero
 1000908:	002d883a 	mov	r22,zero
 100090c:	00020506 	br	1001124 <___vfprintf_internal_r+0xba8>
 1000910:	d9002c17 	ldw	r4,176(sp)
 1000914:	b80b883a 	mov	r5,r23
 1000918:	100284c0 	call	100284c <__swsetup_r>
 100091c:	1005ac1e 	bne	r2,zero,1001fd0 <___vfprintf_internal_r+0x1a54>
 1000920:	b880030b 	ldhu	r2,12(r23)
 1000924:	00c00284 	movi	r3,10
 1000928:	1080068c 	andi	r2,r2,26
 100092c:	10ff3c1e 	bne	r2,r3,1000620 <___vfprintf_internal_r+0xa4>
 1000930:	b880038f 	ldh	r2,14(r23)
 1000934:	103f3a16 	blt	r2,zero,1000620 <___vfprintf_internal_r+0xa4>
 1000938:	d9c02d17 	ldw	r7,180(sp)
 100093c:	d9002c17 	ldw	r4,176(sp)
 1000940:	a80d883a 	mov	r6,r21
 1000944:	b80b883a 	mov	r5,r23
 1000948:	10027900 	call	1002790 <__sbprintf>
 100094c:	00001106 	br	1000994 <___vfprintf_internal_r+0x418>
 1000950:	d9002c17 	ldw	r4,176(sp)
 1000954:	d9801e04 	addi	r6,sp,120
 1000958:	b80b883a 	mov	r5,r23
 100095c:	1007b780 	call	1007b78 <__sprint_r>
 1000960:	1000081e 	bne	r2,zero,1000984 <___vfprintf_internal_r+0x408>
 1000964:	da000404 	addi	r8,sp,16
 1000968:	003f5306 	br	10006b8 <___vfprintf_internal_r+0x13c>
 100096c:	d8802017 	ldw	r2,128(sp)
 1000970:	10000426 	beq	r2,zero,1000984 <___vfprintf_internal_r+0x408>
 1000974:	d9002c17 	ldw	r4,176(sp)
 1000978:	d9801e04 	addi	r6,sp,120
 100097c:	b80b883a 	mov	r5,r23
 1000980:	1007b780 	call	1007b78 <__sprint_r>
 1000984:	b880030b 	ldhu	r2,12(r23)
 1000988:	1080100c 	andi	r2,r2,64
 100098c:	1005901e 	bne	r2,zero,1001fd0 <___vfprintf_internal_r+0x1a54>
 1000990:	d8802f17 	ldw	r2,188(sp)
 1000994:	dfc04717 	ldw	ra,284(sp)
 1000998:	df004617 	ldw	fp,280(sp)
 100099c:	ddc04517 	ldw	r23,276(sp)
 10009a0:	dd804417 	ldw	r22,272(sp)
 10009a4:	dd404317 	ldw	r21,268(sp)
 10009a8:	dd004217 	ldw	r20,264(sp)
 10009ac:	dcc04117 	ldw	r19,260(sp)
 10009b0:	dc804017 	ldw	r18,256(sp)
 10009b4:	dc403f17 	ldw	r17,252(sp)
 10009b8:	dc003e17 	ldw	r16,248(sp)
 10009bc:	dec04804 	addi	sp,sp,288
 10009c0:	f800283a 	ret
 10009c4:	d9002c17 	ldw	r4,176(sp)
 10009c8:	10048200 	call	1004820 <__sinit>
 10009cc:	003f0406 	br	10005e0 <___vfprintf_internal_r+0x64>
 10009d0:	d8802d17 	ldw	r2,180(sp)
 10009d4:	d9002d17 	ldw	r4,180(sp)
 10009d8:	10800017 	ldw	r2,0(r2)
 10009dc:	d8803115 	stw	r2,196(sp)
 10009e0:	20800104 	addi	r2,r4,4
 10009e4:	d9003117 	ldw	r4,196(sp)
 10009e8:	203fa716 	blt	r4,zero,1000888 <___vfprintf_internal_r+0x30c>
 10009ec:	d8802d15 	stw	r2,180(sp)
 10009f0:	ac400007 	ldb	r17,0(r21)
 10009f4:	003f4206 	br	1000700 <___vfprintf_internal_r+0x184>
 10009f8:	ac400007 	ldb	r17,0(r21)
 10009fc:	aac00044 	addi	r11,r21,1
 1000a00:	8a872826 	beq	r17,r10,10026a4 <___vfprintf_internal_r+0x2128>
 1000a04:	88bff404 	addi	r2,r17,-48
 1000a08:	0009883a 	mov	r4,zero
 1000a0c:	30867d36 	bltu	r6,r2,1002404 <___vfprintf_internal_r+0x1e88>
 1000a10:	5c400007 	ldb	r17,0(r11)
 1000a14:	210002a4 	muli	r4,r4,10
 1000a18:	5d400044 	addi	r21,r11,1
 1000a1c:	a817883a 	mov	r11,r21
 1000a20:	2089883a 	add	r4,r4,r2
 1000a24:	88bff404 	addi	r2,r17,-48
 1000a28:	30bff92e 	bgeu	r6,r2,1000a10 <___vfprintf_internal_r+0x494>
 1000a2c:	2005c916 	blt	r4,zero,1002154 <___vfprintf_internal_r+0x1bd8>
 1000a30:	d9002915 	stw	r4,164(sp)
 1000a34:	003f3306 	br	1000704 <___vfprintf_internal_r+0x188>
 1000a38:	94802014 	ori	r18,r18,128
 1000a3c:	ac400007 	ldb	r17,0(r21)
 1000a40:	003f2f06 	br	1000700 <___vfprintf_internal_r+0x184>
 1000a44:	a809883a 	mov	r4,r21
 1000a48:	d8003115 	stw	zero,196(sp)
 1000a4c:	88bff404 	addi	r2,r17,-48
 1000a50:	0017883a 	mov	r11,zero
 1000a54:	24400007 	ldb	r17,0(r4)
 1000a58:	5ac002a4 	muli	r11,r11,10
 1000a5c:	ad400044 	addi	r21,r21,1
 1000a60:	a809883a 	mov	r4,r21
 1000a64:	12d7883a 	add	r11,r2,r11
 1000a68:	88bff404 	addi	r2,r17,-48
 1000a6c:	30bff92e 	bgeu	r6,r2,1000a54 <___vfprintf_internal_r+0x4d8>
 1000a70:	dac03115 	stw	r11,196(sp)
 1000a74:	003f2306 	br	1000704 <___vfprintf_internal_r+0x188>
 1000a78:	18c03fcc 	andi	r3,r3,255
 1000a7c:	18072b1e 	bne	r3,zero,100272c <___vfprintf_internal_r+0x21b0>
 1000a80:	94800414 	ori	r18,r18,16
 1000a84:	9080080c 	andi	r2,r18,32
 1000a88:	10037b26 	beq	r2,zero,1001878 <___vfprintf_internal_r+0x12fc>
 1000a8c:	d9402d17 	ldw	r5,180(sp)
 1000a90:	28800117 	ldw	r2,4(r5)
 1000a94:	2cc00017 	ldw	r19,0(r5)
 1000a98:	29400204 	addi	r5,r5,8
 1000a9c:	d9402d15 	stw	r5,180(sp)
 1000aa0:	102d883a 	mov	r22,r2
 1000aa4:	10044b16 	blt	r2,zero,1001bd4 <___vfprintf_internal_r+0x1658>
 1000aa8:	d9402917 	ldw	r5,164(sp)
 1000aac:	df002783 	ldbu	fp,158(sp)
 1000ab0:	2803bc16 	blt	r5,zero,10019a4 <___vfprintf_internal_r+0x1428>
 1000ab4:	00ffdfc4 	movi	r3,-129
 1000ab8:	9d84b03a 	or	r2,r19,r22
 1000abc:	90e4703a 	and	r18,r18,r3
 1000ac0:	10017726 	beq	r2,zero,10010a0 <___vfprintf_internal_r+0xb24>
 1000ac4:	b0038326 	beq	r22,zero,10018d4 <___vfprintf_internal_r+0x1358>
 1000ac8:	dc402a15 	stw	r17,168(sp)
 1000acc:	dc001e04 	addi	r16,sp,120
 1000ad0:	b023883a 	mov	r17,r22
 1000ad4:	402d883a 	mov	r22,r8
 1000ad8:	9809883a 	mov	r4,r19
 1000adc:	880b883a 	mov	r5,r17
 1000ae0:	01800284 	movi	r6,10
 1000ae4:	000f883a 	mov	r7,zero
 1000ae8:	1009f700 	call	1009f70 <__umoddi3>
 1000aec:	10800c04 	addi	r2,r2,48
 1000af0:	843fffc4 	addi	r16,r16,-1
 1000af4:	9809883a 	mov	r4,r19
 1000af8:	880b883a 	mov	r5,r17
 1000afc:	80800005 	stb	r2,0(r16)
 1000b00:	01800284 	movi	r6,10
 1000b04:	000f883a 	mov	r7,zero
 1000b08:	10099f80 	call	10099f8 <__udivdi3>
 1000b0c:	1027883a 	mov	r19,r2
 1000b10:	10c4b03a 	or	r2,r2,r3
 1000b14:	1823883a 	mov	r17,r3
 1000b18:	103fef1e 	bne	r2,zero,1000ad8 <___vfprintf_internal_r+0x55c>
 1000b1c:	d8c02817 	ldw	r3,160(sp)
 1000b20:	dc402a17 	ldw	r17,168(sp)
 1000b24:	b011883a 	mov	r8,r22
 1000b28:	1c07c83a 	sub	r3,r3,r16
 1000b2c:	d8c02e15 	stw	r3,184(sp)
 1000b30:	00005906 	br	1000c98 <___vfprintf_internal_r+0x71c>
 1000b34:	18c03fcc 	andi	r3,r3,255
 1000b38:	1806fa1e 	bne	r3,zero,1002724 <___vfprintf_internal_r+0x21a8>
 1000b3c:	9080020c 	andi	r2,r18,8
 1000b40:	10048a26 	beq	r2,zero,1001d6c <___vfprintf_internal_r+0x17f0>
 1000b44:	d8c02d17 	ldw	r3,180(sp)
 1000b48:	d9002d17 	ldw	r4,180(sp)
 1000b4c:	d9402d17 	ldw	r5,180(sp)
 1000b50:	18c00017 	ldw	r3,0(r3)
 1000b54:	21000117 	ldw	r4,4(r4)
 1000b58:	29400204 	addi	r5,r5,8
 1000b5c:	d8c03615 	stw	r3,216(sp)
 1000b60:	d9003815 	stw	r4,224(sp)
 1000b64:	d9402d15 	stw	r5,180(sp)
 1000b68:	d9003617 	ldw	r4,216(sp)
 1000b6c:	d9403817 	ldw	r5,224(sp)
 1000b70:	da003d15 	stw	r8,244(sp)
 1000b74:	04000044 	movi	r16,1
 1000b78:	100779c0 	call	100779c <__fpclassifyd>
 1000b7c:	da003d17 	ldw	r8,244(sp)
 1000b80:	14041f1e 	bne	r2,r16,1001c00 <___vfprintf_internal_r+0x1684>
 1000b84:	d9003617 	ldw	r4,216(sp)
 1000b88:	d9403817 	ldw	r5,224(sp)
 1000b8c:	000d883a 	mov	r6,zero
 1000b90:	000f883a 	mov	r7,zero
 1000b94:	100b9540 	call	100b954 <__ledf2>
 1000b98:	da003d17 	ldw	r8,244(sp)
 1000b9c:	1005be16 	blt	r2,zero,1002298 <___vfprintf_internal_r+0x1d1c>
 1000ba0:	df002783 	ldbu	fp,158(sp)
 1000ba4:	008011c4 	movi	r2,71
 1000ba8:	1445330e 	bge	r2,r17,1002078 <___vfprintf_internal_r+0x1afc>
 1000bac:	04004074 	movhi	r16,257
 1000bb0:	843ce604 	addi	r16,r16,-3176
 1000bb4:	00c000c4 	movi	r3,3
 1000bb8:	00bfdfc4 	movi	r2,-129
 1000bbc:	d8c02a15 	stw	r3,168(sp)
 1000bc0:	90a4703a 	and	r18,r18,r2
 1000bc4:	d8c02e15 	stw	r3,184(sp)
 1000bc8:	d8002915 	stw	zero,164(sp)
 1000bcc:	d8003215 	stw	zero,200(sp)
 1000bd0:	00003706 	br	1000cb0 <___vfprintf_internal_r+0x734>
 1000bd4:	94800214 	ori	r18,r18,8
 1000bd8:	ac400007 	ldb	r17,0(r21)
 1000bdc:	003ec806 	br	1000700 <___vfprintf_internal_r+0x184>
 1000be0:	18c03fcc 	andi	r3,r3,255
 1000be4:	1806db1e 	bne	r3,zero,1002754 <___vfprintf_internal_r+0x21d8>
 1000be8:	94800414 	ori	r18,r18,16
 1000bec:	9080080c 	andi	r2,r18,32
 1000bf0:	1002d826 	beq	r2,zero,1001754 <___vfprintf_internal_r+0x11d8>
 1000bf4:	d9402d17 	ldw	r5,180(sp)
 1000bf8:	d8c02917 	ldw	r3,164(sp)
 1000bfc:	d8002785 	stb	zero,158(sp)
 1000c00:	28800204 	addi	r2,r5,8
 1000c04:	2cc00017 	ldw	r19,0(r5)
 1000c08:	2d800117 	ldw	r22,4(r5)
 1000c0c:	18048f16 	blt	r3,zero,1001e4c <___vfprintf_internal_r+0x18d0>
 1000c10:	013fdfc4 	movi	r4,-129
 1000c14:	9d86b03a 	or	r3,r19,r22
 1000c18:	d8802d15 	stw	r2,180(sp)
 1000c1c:	9124703a 	and	r18,r18,r4
 1000c20:	1802d91e 	bne	r3,zero,1001788 <___vfprintf_internal_r+0x120c>
 1000c24:	d8c02917 	ldw	r3,164(sp)
 1000c28:	0039883a 	mov	fp,zero
 1000c2c:	1805c326 	beq	r3,zero,100233c <___vfprintf_internal_r+0x1dc0>
 1000c30:	0027883a 	mov	r19,zero
 1000c34:	002d883a 	mov	r22,zero
 1000c38:	dc001e04 	addi	r16,sp,120
 1000c3c:	9806d0fa 	srli	r3,r19,3
 1000c40:	b008977a 	slli	r4,r22,29
 1000c44:	b02cd0fa 	srli	r22,r22,3
 1000c48:	9cc001cc 	andi	r19,r19,7
 1000c4c:	98800c04 	addi	r2,r19,48
 1000c50:	843fffc4 	addi	r16,r16,-1
 1000c54:	20e6b03a 	or	r19,r4,r3
 1000c58:	80800005 	stb	r2,0(r16)
 1000c5c:	9d86b03a 	or	r3,r19,r22
 1000c60:	183ff61e 	bne	r3,zero,1000c3c <___vfprintf_internal_r+0x6c0>
 1000c64:	90c0004c 	andi	r3,r18,1
 1000c68:	18013b26 	beq	r3,zero,1001158 <___vfprintf_internal_r+0xbdc>
 1000c6c:	10803fcc 	andi	r2,r2,255
 1000c70:	1080201c 	xori	r2,r2,128
 1000c74:	10bfe004 	addi	r2,r2,-128
 1000c78:	00c00c04 	movi	r3,48
 1000c7c:	10c13626 	beq	r2,r3,1001158 <___vfprintf_internal_r+0xbdc>
 1000c80:	80ffffc5 	stb	r3,-1(r16)
 1000c84:	d8c02817 	ldw	r3,160(sp)
 1000c88:	80bfffc4 	addi	r2,r16,-1
 1000c8c:	1021883a 	mov	r16,r2
 1000c90:	1887c83a 	sub	r3,r3,r2
 1000c94:	d8c02e15 	stw	r3,184(sp)
 1000c98:	d8802e17 	ldw	r2,184(sp)
 1000c9c:	d9002917 	ldw	r4,164(sp)
 1000ca0:	1100010e 	bge	r2,r4,1000ca8 <___vfprintf_internal_r+0x72c>
 1000ca4:	2005883a 	mov	r2,r4
 1000ca8:	d8802a15 	stw	r2,168(sp)
 1000cac:	d8003215 	stw	zero,200(sp)
 1000cb0:	e7003fcc 	andi	fp,fp,255
 1000cb4:	e700201c 	xori	fp,fp,128
 1000cb8:	e73fe004 	addi	fp,fp,-128
 1000cbc:	e0000326 	beq	fp,zero,1000ccc <___vfprintf_internal_r+0x750>
 1000cc0:	d8c02a17 	ldw	r3,168(sp)
 1000cc4:	18c00044 	addi	r3,r3,1
 1000cc8:	d8c02a15 	stw	r3,168(sp)
 1000ccc:	90c0008c 	andi	r3,r18,2
 1000cd0:	d8c02b15 	stw	r3,172(sp)
 1000cd4:	18000326 	beq	r3,zero,1000ce4 <___vfprintf_internal_r+0x768>
 1000cd8:	d8c02a17 	ldw	r3,168(sp)
 1000cdc:	18c00084 	addi	r3,r3,2
 1000ce0:	d8c02a15 	stw	r3,168(sp)
 1000ce4:	90c0210c 	andi	r3,r18,132
 1000ce8:	d8c03015 	stw	r3,192(sp)
 1000cec:	1801a31e 	bne	r3,zero,100137c <___vfprintf_internal_r+0xe00>
 1000cf0:	d9003117 	ldw	r4,196(sp)
 1000cf4:	d8c02a17 	ldw	r3,168(sp)
 1000cf8:	20e7c83a 	sub	r19,r4,r3
 1000cfc:	04c19f0e 	bge	zero,r19,100137c <___vfprintf_internal_r+0xe00>
 1000d00:	02400404 	movi	r9,16
 1000d04:	d8c02017 	ldw	r3,128(sp)
 1000d08:	d8801f17 	ldw	r2,124(sp)
 1000d0c:	4cc50d0e 	bge	r9,r19,1002144 <___vfprintf_internal_r+0x1bc8>
 1000d10:	01404074 	movhi	r5,257
 1000d14:	297cf984 	addi	r5,r5,-3098
 1000d18:	dc403b15 	stw	r17,236(sp)
 1000d1c:	d9403515 	stw	r5,212(sp)
 1000d20:	9823883a 	mov	r17,r19
 1000d24:	482d883a 	mov	r22,r9
 1000d28:	9027883a 	mov	r19,r18
 1000d2c:	070001c4 	movi	fp,7
 1000d30:	8025883a 	mov	r18,r16
 1000d34:	dc002c17 	ldw	r16,176(sp)
 1000d38:	00000306 	br	1000d48 <___vfprintf_internal_r+0x7cc>
 1000d3c:	8c7ffc04 	addi	r17,r17,-16
 1000d40:	42000204 	addi	r8,r8,8
 1000d44:	b440130e 	bge	r22,r17,1000d94 <___vfprintf_internal_r+0x818>
 1000d48:	01004074 	movhi	r4,257
 1000d4c:	18c00404 	addi	r3,r3,16
 1000d50:	10800044 	addi	r2,r2,1
 1000d54:	213cf984 	addi	r4,r4,-3098
 1000d58:	41000015 	stw	r4,0(r8)
 1000d5c:	45800115 	stw	r22,4(r8)
 1000d60:	d8c02015 	stw	r3,128(sp)
 1000d64:	d8801f15 	stw	r2,124(sp)
 1000d68:	e0bff40e 	bge	fp,r2,1000d3c <___vfprintf_internal_r+0x7c0>
 1000d6c:	d9801e04 	addi	r6,sp,120
 1000d70:	b80b883a 	mov	r5,r23
 1000d74:	8009883a 	mov	r4,r16
 1000d78:	1007b780 	call	1007b78 <__sprint_r>
 1000d7c:	103f011e 	bne	r2,zero,1000984 <___vfprintf_internal_r+0x408>
 1000d80:	8c7ffc04 	addi	r17,r17,-16
 1000d84:	d8c02017 	ldw	r3,128(sp)
 1000d88:	d8801f17 	ldw	r2,124(sp)
 1000d8c:	da000404 	addi	r8,sp,16
 1000d90:	b47fed16 	blt	r22,r17,1000d48 <___vfprintf_internal_r+0x7cc>
 1000d94:	9021883a 	mov	r16,r18
 1000d98:	9825883a 	mov	r18,r19
 1000d9c:	8827883a 	mov	r19,r17
 1000da0:	dc403b17 	ldw	r17,236(sp)
 1000da4:	d9403517 	ldw	r5,212(sp)
 1000da8:	98c7883a 	add	r3,r19,r3
 1000dac:	10800044 	addi	r2,r2,1
 1000db0:	41400015 	stw	r5,0(r8)
 1000db4:	44c00115 	stw	r19,4(r8)
 1000db8:	d8c02015 	stw	r3,128(sp)
 1000dbc:	d8801f15 	stw	r2,124(sp)
 1000dc0:	010001c4 	movi	r4,7
 1000dc4:	2082a316 	blt	r4,r2,1001854 <___vfprintf_internal_r+0x12d8>
 1000dc8:	df002787 	ldb	fp,158(sp)
 1000dcc:	42000204 	addi	r8,r8,8
 1000dd0:	e0000c26 	beq	fp,zero,1000e04 <___vfprintf_internal_r+0x888>
 1000dd4:	d8801f17 	ldw	r2,124(sp)
 1000dd8:	d9002784 	addi	r4,sp,158
 1000ddc:	18c00044 	addi	r3,r3,1
 1000de0:	10800044 	addi	r2,r2,1
 1000de4:	41000015 	stw	r4,0(r8)
 1000de8:	01000044 	movi	r4,1
 1000dec:	41000115 	stw	r4,4(r8)
 1000df0:	d8c02015 	stw	r3,128(sp)
 1000df4:	d8801f15 	stw	r2,124(sp)
 1000df8:	010001c4 	movi	r4,7
 1000dfc:	20823c16 	blt	r4,r2,10016f0 <___vfprintf_internal_r+0x1174>
 1000e00:	42000204 	addi	r8,r8,8
 1000e04:	d8802b17 	ldw	r2,172(sp)
 1000e08:	10000c26 	beq	r2,zero,1000e3c <___vfprintf_internal_r+0x8c0>
 1000e0c:	d8801f17 	ldw	r2,124(sp)
 1000e10:	d9002704 	addi	r4,sp,156
 1000e14:	18c00084 	addi	r3,r3,2
 1000e18:	10800044 	addi	r2,r2,1
 1000e1c:	41000015 	stw	r4,0(r8)
 1000e20:	01000084 	movi	r4,2
 1000e24:	41000115 	stw	r4,4(r8)
 1000e28:	d8c02015 	stw	r3,128(sp)
 1000e2c:	d8801f15 	stw	r2,124(sp)
 1000e30:	010001c4 	movi	r4,7
 1000e34:	20823616 	blt	r4,r2,1001710 <___vfprintf_internal_r+0x1194>
 1000e38:	42000204 	addi	r8,r8,8
 1000e3c:	d9003017 	ldw	r4,192(sp)
 1000e40:	00802004 	movi	r2,128
 1000e44:	20819926 	beq	r4,r2,10014ac <___vfprintf_internal_r+0xf30>
 1000e48:	d9402917 	ldw	r5,164(sp)
 1000e4c:	d8802e17 	ldw	r2,184(sp)
 1000e50:	28adc83a 	sub	r22,r5,r2
 1000e54:	0580310e 	bge	zero,r22,1000f1c <___vfprintf_internal_r+0x9a0>
 1000e58:	07000404 	movi	fp,16
 1000e5c:	d8801f17 	ldw	r2,124(sp)
 1000e60:	e584140e 	bge	fp,r22,1001eb4 <___vfprintf_internal_r+0x1938>
 1000e64:	01404074 	movhi	r5,257
 1000e68:	297cf584 	addi	r5,r5,-3114
 1000e6c:	dc402915 	stw	r17,164(sp)
 1000e70:	d9402b15 	stw	r5,172(sp)
 1000e74:	b023883a 	mov	r17,r22
 1000e78:	04c001c4 	movi	r19,7
 1000e7c:	a82d883a 	mov	r22,r21
 1000e80:	902b883a 	mov	r21,r18
 1000e84:	8025883a 	mov	r18,r16
 1000e88:	dc002c17 	ldw	r16,176(sp)
 1000e8c:	00000306 	br	1000e9c <___vfprintf_internal_r+0x920>
 1000e90:	8c7ffc04 	addi	r17,r17,-16
 1000e94:	42000204 	addi	r8,r8,8
 1000e98:	e440110e 	bge	fp,r17,1000ee0 <___vfprintf_internal_r+0x964>
 1000e9c:	18c00404 	addi	r3,r3,16
 1000ea0:	10800044 	addi	r2,r2,1
 1000ea4:	45000015 	stw	r20,0(r8)
 1000ea8:	47000115 	stw	fp,4(r8)
 1000eac:	d8c02015 	stw	r3,128(sp)
 1000eb0:	d8801f15 	stw	r2,124(sp)
 1000eb4:	98bff60e 	bge	r19,r2,1000e90 <___vfprintf_internal_r+0x914>
 1000eb8:	d9801e04 	addi	r6,sp,120
 1000ebc:	b80b883a 	mov	r5,r23
 1000ec0:	8009883a 	mov	r4,r16
 1000ec4:	1007b780 	call	1007b78 <__sprint_r>
 1000ec8:	103eae1e 	bne	r2,zero,1000984 <___vfprintf_internal_r+0x408>
 1000ecc:	8c7ffc04 	addi	r17,r17,-16
 1000ed0:	d8c02017 	ldw	r3,128(sp)
 1000ed4:	d8801f17 	ldw	r2,124(sp)
 1000ed8:	da000404 	addi	r8,sp,16
 1000edc:	e47fef16 	blt	fp,r17,1000e9c <___vfprintf_internal_r+0x920>
 1000ee0:	9021883a 	mov	r16,r18
 1000ee4:	a825883a 	mov	r18,r21
 1000ee8:	b02b883a 	mov	r21,r22
 1000eec:	882d883a 	mov	r22,r17
 1000ef0:	dc402917 	ldw	r17,164(sp)
 1000ef4:	d9002b17 	ldw	r4,172(sp)
 1000ef8:	1d87883a 	add	r3,r3,r22
 1000efc:	10800044 	addi	r2,r2,1
 1000f00:	41000015 	stw	r4,0(r8)
 1000f04:	45800115 	stw	r22,4(r8)
 1000f08:	d8c02015 	stw	r3,128(sp)
 1000f0c:	d8801f15 	stw	r2,124(sp)
 1000f10:	010001c4 	movi	r4,7
 1000f14:	2081ee16 	blt	r4,r2,10016d0 <___vfprintf_internal_r+0x1154>
 1000f18:	42000204 	addi	r8,r8,8
 1000f1c:	9080400c 	andi	r2,r18,256
 1000f20:	1001181e 	bne	r2,zero,1001384 <___vfprintf_internal_r+0xe08>
 1000f24:	d9402e17 	ldw	r5,184(sp)
 1000f28:	d8801f17 	ldw	r2,124(sp)
 1000f2c:	44000015 	stw	r16,0(r8)
 1000f30:	1947883a 	add	r3,r3,r5
 1000f34:	10800044 	addi	r2,r2,1
 1000f38:	41400115 	stw	r5,4(r8)
 1000f3c:	d8c02015 	stw	r3,128(sp)
 1000f40:	d8801f15 	stw	r2,124(sp)
 1000f44:	010001c4 	movi	r4,7
 1000f48:	2081d316 	blt	r4,r2,1001698 <___vfprintf_internal_r+0x111c>
 1000f4c:	42000204 	addi	r8,r8,8
 1000f50:	9480010c 	andi	r18,r18,4
 1000f54:	90003226 	beq	r18,zero,1001020 <___vfprintf_internal_r+0xaa4>
 1000f58:	d9403117 	ldw	r5,196(sp)
 1000f5c:	d8802a17 	ldw	r2,168(sp)
 1000f60:	28a1c83a 	sub	r16,r5,r2
 1000f64:	04002e0e 	bge	zero,r16,1001020 <___vfprintf_internal_r+0xaa4>
 1000f68:	04400404 	movi	r17,16
 1000f6c:	d8801f17 	ldw	r2,124(sp)
 1000f70:	8c04a20e 	bge	r17,r16,10021fc <___vfprintf_internal_r+0x1c80>
 1000f74:	01404074 	movhi	r5,257
 1000f78:	297cf984 	addi	r5,r5,-3098
 1000f7c:	d9403515 	stw	r5,212(sp)
 1000f80:	048001c4 	movi	r18,7
 1000f84:	dcc02c17 	ldw	r19,176(sp)
 1000f88:	00000306 	br	1000f98 <___vfprintf_internal_r+0xa1c>
 1000f8c:	843ffc04 	addi	r16,r16,-16
 1000f90:	42000204 	addi	r8,r8,8
 1000f94:	8c00130e 	bge	r17,r16,1000fe4 <___vfprintf_internal_r+0xa68>
 1000f98:	01004074 	movhi	r4,257
 1000f9c:	18c00404 	addi	r3,r3,16
 1000fa0:	10800044 	addi	r2,r2,1
 1000fa4:	213cf984 	addi	r4,r4,-3098
 1000fa8:	41000015 	stw	r4,0(r8)
 1000fac:	44400115 	stw	r17,4(r8)
 1000fb0:	d8c02015 	stw	r3,128(sp)
 1000fb4:	d8801f15 	stw	r2,124(sp)
 1000fb8:	90bff40e 	bge	r18,r2,1000f8c <___vfprintf_internal_r+0xa10>
 1000fbc:	d9801e04 	addi	r6,sp,120
 1000fc0:	b80b883a 	mov	r5,r23
 1000fc4:	9809883a 	mov	r4,r19
 1000fc8:	1007b780 	call	1007b78 <__sprint_r>
 1000fcc:	103e6d1e 	bne	r2,zero,1000984 <___vfprintf_internal_r+0x408>
 1000fd0:	843ffc04 	addi	r16,r16,-16
 1000fd4:	d8c02017 	ldw	r3,128(sp)
 1000fd8:	d8801f17 	ldw	r2,124(sp)
 1000fdc:	da000404 	addi	r8,sp,16
 1000fe0:	8c3fed16 	blt	r17,r16,1000f98 <___vfprintf_internal_r+0xa1c>
 1000fe4:	d9403517 	ldw	r5,212(sp)
 1000fe8:	1c07883a 	add	r3,r3,r16
 1000fec:	10800044 	addi	r2,r2,1
 1000ff0:	41400015 	stw	r5,0(r8)
 1000ff4:	44000115 	stw	r16,4(r8)
 1000ff8:	d8c02015 	stw	r3,128(sp)
 1000ffc:	d8801f15 	stw	r2,124(sp)
 1001000:	010001c4 	movi	r4,7
 1001004:	2080060e 	bge	r4,r2,1001020 <___vfprintf_internal_r+0xaa4>
 1001008:	d9002c17 	ldw	r4,176(sp)
 100100c:	d9801e04 	addi	r6,sp,120
 1001010:	b80b883a 	mov	r5,r23
 1001014:	1007b780 	call	1007b78 <__sprint_r>
 1001018:	103e5a1e 	bne	r2,zero,1000984 <___vfprintf_internal_r+0x408>
 100101c:	d8c02017 	ldw	r3,128(sp)
 1001020:	d8803117 	ldw	r2,196(sp)
 1001024:	d9002a17 	ldw	r4,168(sp)
 1001028:	1100010e 	bge	r2,r4,1001030 <___vfprintf_internal_r+0xab4>
 100102c:	2005883a 	mov	r2,r4
 1001030:	d9402f17 	ldw	r5,188(sp)
 1001034:	288b883a 	add	r5,r5,r2
 1001038:	d9402f15 	stw	r5,188(sp)
 100103c:	18019e1e 	bne	r3,zero,10016b8 <___vfprintf_internal_r+0x113c>
 1001040:	a8800007 	ldb	r2,0(r21)
 1001044:	d8001f15 	stw	zero,124(sp)
 1001048:	da000404 	addi	r8,sp,16
 100104c:	103d851e 	bne	r2,zero,1000664 <___vfprintf_internal_r+0xe8>
 1001050:	a821883a 	mov	r16,r21
 1001054:	003d9b06 	br	10006c4 <___vfprintf_internal_r+0x148>
 1001058:	18c03fcc 	andi	r3,r3,255
 100105c:	1805c11e 	bne	r3,zero,1002764 <___vfprintf_internal_r+0x21e8>
 1001060:	94800414 	ori	r18,r18,16
 1001064:	9080080c 	andi	r2,r18,32
 1001068:	10020c26 	beq	r2,zero,100189c <___vfprintf_internal_r+0x1320>
 100106c:	d8802d17 	ldw	r2,180(sp)
 1001070:	d9002917 	ldw	r4,164(sp)
 1001074:	d8002785 	stb	zero,158(sp)
 1001078:	10c00204 	addi	r3,r2,8
 100107c:	14c00017 	ldw	r19,0(r2)
 1001080:	15800117 	ldw	r22,4(r2)
 1001084:	20040f16 	blt	r4,zero,10020c4 <___vfprintf_internal_r+0x1b48>
 1001088:	013fdfc4 	movi	r4,-129
 100108c:	9d84b03a 	or	r2,r19,r22
 1001090:	d8c02d15 	stw	r3,180(sp)
 1001094:	9124703a 	and	r18,r18,r4
 1001098:	0039883a 	mov	fp,zero
 100109c:	103e891e 	bne	r2,zero,1000ac4 <___vfprintf_internal_r+0x548>
 10010a0:	d9002917 	ldw	r4,164(sp)
 10010a4:	2002c11e 	bne	r4,zero,1001bac <___vfprintf_internal_r+0x1630>
 10010a8:	d8002915 	stw	zero,164(sp)
 10010ac:	d8002e15 	stw	zero,184(sp)
 10010b0:	dc001e04 	addi	r16,sp,120
 10010b4:	003ef806 	br	1000c98 <___vfprintf_internal_r+0x71c>
 10010b8:	18c03fcc 	andi	r3,r3,255
 10010bc:	18059d1e 	bne	r3,zero,1002734 <___vfprintf_internal_r+0x21b8>
 10010c0:	01404074 	movhi	r5,257
 10010c4:	297ce904 	addi	r5,r5,-3164
 10010c8:	d9403915 	stw	r5,228(sp)
 10010cc:	9080080c 	andi	r2,r18,32
 10010d0:	10005226 	beq	r2,zero,100121c <___vfprintf_internal_r+0xca0>
 10010d4:	d8802d17 	ldw	r2,180(sp)
 10010d8:	14c00017 	ldw	r19,0(r2)
 10010dc:	15800117 	ldw	r22,4(r2)
 10010e0:	10800204 	addi	r2,r2,8
 10010e4:	d8802d15 	stw	r2,180(sp)
 10010e8:	9080004c 	andi	r2,r18,1
 10010ec:	10019026 	beq	r2,zero,1001730 <___vfprintf_internal_r+0x11b4>
 10010f0:	9d84b03a 	or	r2,r19,r22
 10010f4:	10036926 	beq	r2,zero,1001e9c <___vfprintf_internal_r+0x1920>
 10010f8:	d8c02917 	ldw	r3,164(sp)
 10010fc:	00800c04 	movi	r2,48
 1001100:	d8802705 	stb	r2,156(sp)
 1001104:	dc402745 	stb	r17,157(sp)
 1001108:	d8002785 	stb	zero,158(sp)
 100110c:	90800094 	ori	r2,r18,2
 1001110:	18045d16 	blt	r3,zero,1002288 <___vfprintf_internal_r+0x1d0c>
 1001114:	00bfdfc4 	movi	r2,-129
 1001118:	90a4703a 	and	r18,r18,r2
 100111c:	94800094 	ori	r18,r18,2
 1001120:	0039883a 	mov	fp,zero
 1001124:	d9003917 	ldw	r4,228(sp)
 1001128:	dc001e04 	addi	r16,sp,120
 100112c:	988003cc 	andi	r2,r19,15
 1001130:	b006973a 	slli	r3,r22,28
 1001134:	2085883a 	add	r2,r4,r2
 1001138:	9826d13a 	srli	r19,r19,4
 100113c:	10800003 	ldbu	r2,0(r2)
 1001140:	b02cd13a 	srli	r22,r22,4
 1001144:	843fffc4 	addi	r16,r16,-1
 1001148:	1ce6b03a 	or	r19,r3,r19
 100114c:	80800005 	stb	r2,0(r16)
 1001150:	9d84b03a 	or	r2,r19,r22
 1001154:	103ff51e 	bne	r2,zero,100112c <___vfprintf_internal_r+0xbb0>
 1001158:	d8c02817 	ldw	r3,160(sp)
 100115c:	1c07c83a 	sub	r3,r3,r16
 1001160:	d8c02e15 	stw	r3,184(sp)
 1001164:	003ecc06 	br	1000c98 <___vfprintf_internal_r+0x71c>
 1001168:	18c03fcc 	andi	r3,r3,255
 100116c:	183e9f26 	beq	r3,zero,1000bec <___vfprintf_internal_r+0x670>
 1001170:	d9c02785 	stb	r7,158(sp)
 1001174:	003e9d06 	br	1000bec <___vfprintf_internal_r+0x670>
 1001178:	00c00044 	movi	r3,1
 100117c:	01c00ac4 	movi	r7,43
 1001180:	ac400007 	ldb	r17,0(r21)
 1001184:	003d5e06 	br	1000700 <___vfprintf_internal_r+0x184>
 1001188:	94800814 	ori	r18,r18,32
 100118c:	ac400007 	ldb	r17,0(r21)
 1001190:	003d5b06 	br	1000700 <___vfprintf_internal_r+0x184>
 1001194:	d8c02d17 	ldw	r3,180(sp)
 1001198:	d8002785 	stb	zero,158(sp)
 100119c:	1c000017 	ldw	r16,0(r3)
 10011a0:	1cc00104 	addi	r19,r3,4
 10011a4:	80041926 	beq	r16,zero,100220c <___vfprintf_internal_r+0x1c90>
 10011a8:	d9002917 	ldw	r4,164(sp)
 10011ac:	2003d016 	blt	r4,zero,10020f0 <___vfprintf_internal_r+0x1b74>
 10011b0:	200d883a 	mov	r6,r4
 10011b4:	000b883a 	mov	r5,zero
 10011b8:	8009883a 	mov	r4,r16
 10011bc:	da003d15 	stw	r8,244(sp)
 10011c0:	1005d8c0 	call	1005d8c <memchr>
 10011c4:	da003d17 	ldw	r8,244(sp)
 10011c8:	10045426 	beq	r2,zero,100231c <___vfprintf_internal_r+0x1da0>
 10011cc:	1405c83a 	sub	r2,r2,r16
 10011d0:	d8802e15 	stw	r2,184(sp)
 10011d4:	1003cc16 	blt	r2,zero,1002108 <___vfprintf_internal_r+0x1b8c>
 10011d8:	df002783 	ldbu	fp,158(sp)
 10011dc:	d8802a15 	stw	r2,168(sp)
 10011e0:	dcc02d15 	stw	r19,180(sp)
 10011e4:	d8002915 	stw	zero,164(sp)
 10011e8:	d8003215 	stw	zero,200(sp)
 10011ec:	003eb006 	br	1000cb0 <___vfprintf_internal_r+0x734>
 10011f0:	18c03fcc 	andi	r3,r3,255
 10011f4:	183f9b26 	beq	r3,zero,1001064 <___vfprintf_internal_r+0xae8>
 10011f8:	d9c02785 	stb	r7,158(sp)
 10011fc:	003f9906 	br	1001064 <___vfprintf_internal_r+0xae8>
 1001200:	18c03fcc 	andi	r3,r3,255
 1001204:	1805551e 	bne	r3,zero,100275c <___vfprintf_internal_r+0x21e0>
 1001208:	01404074 	movhi	r5,257
 100120c:	297cee04 	addi	r5,r5,-3144
 1001210:	d9403915 	stw	r5,228(sp)
 1001214:	9080080c 	andi	r2,r18,32
 1001218:	103fae1e 	bne	r2,zero,10010d4 <___vfprintf_internal_r+0xb58>
 100121c:	9080040c 	andi	r2,r18,16
 1001220:	1002de26 	beq	r2,zero,1001d9c <___vfprintf_internal_r+0x1820>
 1001224:	d8c02d17 	ldw	r3,180(sp)
 1001228:	002d883a 	mov	r22,zero
 100122c:	1cc00017 	ldw	r19,0(r3)
 1001230:	18c00104 	addi	r3,r3,4
 1001234:	d8c02d15 	stw	r3,180(sp)
 1001238:	003fab06 	br	10010e8 <___vfprintf_internal_r+0xb6c>
 100123c:	38803fcc 	andi	r2,r7,255
 1001240:	1080201c 	xori	r2,r2,128
 1001244:	10bfe004 	addi	r2,r2,-128
 1001248:	1002d21e 	bne	r2,zero,1001d94 <___vfprintf_internal_r+0x1818>
 100124c:	00c00044 	movi	r3,1
 1001250:	01c00804 	movi	r7,32
 1001254:	ac400007 	ldb	r17,0(r21)
 1001258:	003d2906 	br	1000700 <___vfprintf_internal_r+0x184>
 100125c:	94800054 	ori	r18,r18,1
 1001260:	ac400007 	ldb	r17,0(r21)
 1001264:	003d2606 	br	1000700 <___vfprintf_internal_r+0x184>
 1001268:	18c03fcc 	andi	r3,r3,255
 100126c:	183e0526 	beq	r3,zero,1000a84 <___vfprintf_internal_r+0x508>
 1001270:	d9c02785 	stb	r7,158(sp)
 1001274:	003e0306 	br	1000a84 <___vfprintf_internal_r+0x508>
 1001278:	94801014 	ori	r18,r18,64
 100127c:	ac400007 	ldb	r17,0(r21)
 1001280:	003d1f06 	br	1000700 <___vfprintf_internal_r+0x184>
 1001284:	ac400007 	ldb	r17,0(r21)
 1001288:	8a438726 	beq	r17,r9,10020a8 <___vfprintf_internal_r+0x1b2c>
 100128c:	94800414 	ori	r18,r18,16
 1001290:	003d1b06 	br	1000700 <___vfprintf_internal_r+0x184>
 1001294:	18c03fcc 	andi	r3,r3,255
 1001298:	1805341e 	bne	r3,zero,100276c <___vfprintf_internal_r+0x21f0>
 100129c:	9080080c 	andi	r2,r18,32
 10012a0:	1002cd26 	beq	r2,zero,1001dd8 <___vfprintf_internal_r+0x185c>
 10012a4:	d9402d17 	ldw	r5,180(sp)
 10012a8:	d9002f17 	ldw	r4,188(sp)
 10012ac:	28800017 	ldw	r2,0(r5)
 10012b0:	2007d7fa 	srai	r3,r4,31
 10012b4:	29400104 	addi	r5,r5,4
 10012b8:	d9402d15 	stw	r5,180(sp)
 10012bc:	11000015 	stw	r4,0(r2)
 10012c0:	10c00115 	stw	r3,4(r2)
 10012c4:	003ce506 	br	100065c <___vfprintf_internal_r+0xe0>
 10012c8:	d8c02d17 	ldw	r3,180(sp)
 10012cc:	d9002d17 	ldw	r4,180(sp)
 10012d0:	d8002785 	stb	zero,158(sp)
 10012d4:	18800017 	ldw	r2,0(r3)
 10012d8:	21000104 	addi	r4,r4,4
 10012dc:	00c00044 	movi	r3,1
 10012e0:	d8c02a15 	stw	r3,168(sp)
 10012e4:	d8801405 	stb	r2,80(sp)
 10012e8:	d9002d15 	stw	r4,180(sp)
 10012ec:	d8c02e15 	stw	r3,184(sp)
 10012f0:	d8002915 	stw	zero,164(sp)
 10012f4:	d8003215 	stw	zero,200(sp)
 10012f8:	dc001404 	addi	r16,sp,80
 10012fc:	0039883a 	mov	fp,zero
 1001300:	003e7206 	br	1000ccc <___vfprintf_internal_r+0x750>
 1001304:	01004074 	movhi	r4,257
 1001308:	213cee04 	addi	r4,r4,-3144
 100130c:	0039883a 	mov	fp,zero
 1001310:	d9003915 	stw	r4,228(sp)
 1001314:	04401e04 	movi	r17,120
 1001318:	003f8206 	br	1001124 <___vfprintf_internal_r+0xba8>
 100131c:	18c03fcc 	andi	r3,r3,255
 1001320:	1805061e 	bne	r3,zero,100273c <___vfprintf_internal_r+0x21c0>
 1001324:	883d9126 	beq	r17,zero,100096c <___vfprintf_internal_r+0x3f0>
 1001328:	00c00044 	movi	r3,1
 100132c:	d8c02a15 	stw	r3,168(sp)
 1001330:	dc401405 	stb	r17,80(sp)
 1001334:	d8002785 	stb	zero,158(sp)
 1001338:	003fec06 	br	10012ec <___vfprintf_internal_r+0xd70>
 100133c:	01404074 	movhi	r5,257
 1001340:	297cee04 	addi	r5,r5,-3144
 1001344:	d9403915 	stw	r5,228(sp)
 1001348:	d8c02d15 	stw	r3,180(sp)
 100134c:	1025883a 	mov	r18,r2
 1001350:	04401e04 	movi	r17,120
 1001354:	9d84b03a 	or	r2,r19,r22
 1001358:	1000fc1e 	bne	r2,zero,100174c <___vfprintf_internal_r+0x11d0>
 100135c:	0039883a 	mov	fp,zero
 1001360:	00800084 	movi	r2,2
 1001364:	10803fcc 	andi	r2,r2,255
 1001368:	00c00044 	movi	r3,1
 100136c:	10c20f26 	beq	r2,r3,1001bac <___vfprintf_internal_r+0x1630>
 1001370:	00c00084 	movi	r3,2
 1001374:	10fd6326 	beq	r2,r3,1000904 <___vfprintf_internal_r+0x388>
 1001378:	003e2d06 	br	1000c30 <___vfprintf_internal_r+0x6b4>
 100137c:	d8c02017 	ldw	r3,128(sp)
 1001380:	003e9306 	br	1000dd0 <___vfprintf_internal_r+0x854>
 1001384:	00801944 	movi	r2,101
 1001388:	14407e0e 	bge	r2,r17,1001584 <___vfprintf_internal_r+0x1008>
 100138c:	d9003617 	ldw	r4,216(sp)
 1001390:	d9403817 	ldw	r5,224(sp)
 1001394:	000d883a 	mov	r6,zero
 1001398:	000f883a 	mov	r7,zero
 100139c:	d8c03c15 	stw	r3,240(sp)
 10013a0:	da003d15 	stw	r8,244(sp)
 10013a4:	100b7f00 	call	100b7f0 <__eqdf2>
 10013a8:	d8c03c17 	ldw	r3,240(sp)
 10013ac:	da003d17 	ldw	r8,244(sp)
 10013b0:	1000f71e 	bne	r2,zero,1001790 <___vfprintf_internal_r+0x1214>
 10013b4:	d8801f17 	ldw	r2,124(sp)
 10013b8:	01004074 	movhi	r4,257
 10013bc:	213cf504 	addi	r4,r4,-3116
 10013c0:	18c00044 	addi	r3,r3,1
 10013c4:	10800044 	addi	r2,r2,1
 10013c8:	41000015 	stw	r4,0(r8)
 10013cc:	01000044 	movi	r4,1
 10013d0:	41000115 	stw	r4,4(r8)
 10013d4:	d8c02015 	stw	r3,128(sp)
 10013d8:	d8801f15 	stw	r2,124(sp)
 10013dc:	010001c4 	movi	r4,7
 10013e0:	2082b816 	blt	r4,r2,1001ec4 <___vfprintf_internal_r+0x1948>
 10013e4:	42000204 	addi	r8,r8,8
 10013e8:	d8802617 	ldw	r2,152(sp)
 10013ec:	d9403317 	ldw	r5,204(sp)
 10013f0:	11400216 	blt	r2,r5,10013fc <___vfprintf_internal_r+0xe80>
 10013f4:	9080004c 	andi	r2,r18,1
 10013f8:	103ed526 	beq	r2,zero,1000f50 <___vfprintf_internal_r+0x9d4>
 10013fc:	d8803717 	ldw	r2,220(sp)
 1001400:	d9003417 	ldw	r4,208(sp)
 1001404:	d9403717 	ldw	r5,220(sp)
 1001408:	1887883a 	add	r3,r3,r2
 100140c:	d8801f17 	ldw	r2,124(sp)
 1001410:	41000015 	stw	r4,0(r8)
 1001414:	41400115 	stw	r5,4(r8)
 1001418:	10800044 	addi	r2,r2,1
 100141c:	d8c02015 	stw	r3,128(sp)
 1001420:	d8801f15 	stw	r2,124(sp)
 1001424:	010001c4 	movi	r4,7
 1001428:	20832916 	blt	r4,r2,10020d0 <___vfprintf_internal_r+0x1b54>
 100142c:	42000204 	addi	r8,r8,8
 1001430:	d8803317 	ldw	r2,204(sp)
 1001434:	143fffc4 	addi	r16,r2,-1
 1001438:	043ec50e 	bge	zero,r16,1000f50 <___vfprintf_internal_r+0x9d4>
 100143c:	04400404 	movi	r17,16
 1001440:	d8801f17 	ldw	r2,124(sp)
 1001444:	8c00880e 	bge	r17,r16,1001668 <___vfprintf_internal_r+0x10ec>
 1001448:	01404074 	movhi	r5,257
 100144c:	297cf584 	addi	r5,r5,-3114
 1001450:	d9402b15 	stw	r5,172(sp)
 1001454:	058001c4 	movi	r22,7
 1001458:	dcc02c17 	ldw	r19,176(sp)
 100145c:	00000306 	br	100146c <___vfprintf_internal_r+0xef0>
 1001460:	42000204 	addi	r8,r8,8
 1001464:	843ffc04 	addi	r16,r16,-16
 1001468:	8c00820e 	bge	r17,r16,1001674 <___vfprintf_internal_r+0x10f8>
 100146c:	18c00404 	addi	r3,r3,16
 1001470:	10800044 	addi	r2,r2,1
 1001474:	45000015 	stw	r20,0(r8)
 1001478:	44400115 	stw	r17,4(r8)
 100147c:	d8c02015 	stw	r3,128(sp)
 1001480:	d8801f15 	stw	r2,124(sp)
 1001484:	b0bff60e 	bge	r22,r2,1001460 <___vfprintf_internal_r+0xee4>
 1001488:	d9801e04 	addi	r6,sp,120
 100148c:	b80b883a 	mov	r5,r23
 1001490:	9809883a 	mov	r4,r19
 1001494:	1007b780 	call	1007b78 <__sprint_r>
 1001498:	103d3a1e 	bne	r2,zero,1000984 <___vfprintf_internal_r+0x408>
 100149c:	d8c02017 	ldw	r3,128(sp)
 10014a0:	d8801f17 	ldw	r2,124(sp)
 10014a4:	da000404 	addi	r8,sp,16
 10014a8:	003fee06 	br	1001464 <___vfprintf_internal_r+0xee8>
 10014ac:	d9403117 	ldw	r5,196(sp)
 10014b0:	d8802a17 	ldw	r2,168(sp)
 10014b4:	28adc83a 	sub	r22,r5,r2
 10014b8:	05be630e 	bge	zero,r22,1000e48 <___vfprintf_internal_r+0x8cc>
 10014bc:	07000404 	movi	fp,16
 10014c0:	d8801f17 	ldw	r2,124(sp)
 10014c4:	e5838f0e 	bge	fp,r22,1002304 <___vfprintf_internal_r+0x1d88>
 10014c8:	01404074 	movhi	r5,257
 10014cc:	297cf584 	addi	r5,r5,-3114
 10014d0:	dc403015 	stw	r17,192(sp)
 10014d4:	d9402b15 	stw	r5,172(sp)
 10014d8:	b023883a 	mov	r17,r22
 10014dc:	04c001c4 	movi	r19,7
 10014e0:	a82d883a 	mov	r22,r21
 10014e4:	902b883a 	mov	r21,r18
 10014e8:	8025883a 	mov	r18,r16
 10014ec:	dc002c17 	ldw	r16,176(sp)
 10014f0:	00000306 	br	1001500 <___vfprintf_internal_r+0xf84>
 10014f4:	8c7ffc04 	addi	r17,r17,-16
 10014f8:	42000204 	addi	r8,r8,8
 10014fc:	e440110e 	bge	fp,r17,1001544 <___vfprintf_internal_r+0xfc8>
 1001500:	18c00404 	addi	r3,r3,16
 1001504:	10800044 	addi	r2,r2,1
 1001508:	45000015 	stw	r20,0(r8)
 100150c:	47000115 	stw	fp,4(r8)
 1001510:	d8c02015 	stw	r3,128(sp)
 1001514:	d8801f15 	stw	r2,124(sp)
 1001518:	98bff60e 	bge	r19,r2,10014f4 <___vfprintf_internal_r+0xf78>
 100151c:	d9801e04 	addi	r6,sp,120
 1001520:	b80b883a 	mov	r5,r23
 1001524:	8009883a 	mov	r4,r16
 1001528:	1007b780 	call	1007b78 <__sprint_r>
 100152c:	103d151e 	bne	r2,zero,1000984 <___vfprintf_internal_r+0x408>
 1001530:	8c7ffc04 	addi	r17,r17,-16
 1001534:	d8c02017 	ldw	r3,128(sp)
 1001538:	d8801f17 	ldw	r2,124(sp)
 100153c:	da000404 	addi	r8,sp,16
 1001540:	e47fef16 	blt	fp,r17,1001500 <___vfprintf_internal_r+0xf84>
 1001544:	9021883a 	mov	r16,r18
 1001548:	a825883a 	mov	r18,r21
 100154c:	b02b883a 	mov	r21,r22
 1001550:	882d883a 	mov	r22,r17
 1001554:	dc403017 	ldw	r17,192(sp)
 1001558:	d9002b17 	ldw	r4,172(sp)
 100155c:	1d87883a 	add	r3,r3,r22
 1001560:	10800044 	addi	r2,r2,1
 1001564:	41000015 	stw	r4,0(r8)
 1001568:	45800115 	stw	r22,4(r8)
 100156c:	d8c02015 	stw	r3,128(sp)
 1001570:	d8801f15 	stw	r2,124(sp)
 1001574:	010001c4 	movi	r4,7
 1001578:	20818e16 	blt	r4,r2,1001bb4 <___vfprintf_internal_r+0x1638>
 100157c:	42000204 	addi	r8,r8,8
 1001580:	003e3106 	br	1000e48 <___vfprintf_internal_r+0x8cc>
 1001584:	d9403317 	ldw	r5,204(sp)
 1001588:	00800044 	movi	r2,1
 100158c:	18c00044 	addi	r3,r3,1
 1001590:	1141530e 	bge	r2,r5,1001ae0 <___vfprintf_internal_r+0x1564>
 1001594:	dc401f17 	ldw	r17,124(sp)
 1001598:	00800044 	movi	r2,1
 100159c:	40800115 	stw	r2,4(r8)
 10015a0:	8c400044 	addi	r17,r17,1
 10015a4:	44000015 	stw	r16,0(r8)
 10015a8:	d8c02015 	stw	r3,128(sp)
 10015ac:	dc401f15 	stw	r17,124(sp)
 10015b0:	008001c4 	movi	r2,7
 10015b4:	14416b16 	blt	r2,r17,1001b64 <___vfprintf_internal_r+0x15e8>
 10015b8:	42000204 	addi	r8,r8,8
 10015bc:	d8803717 	ldw	r2,220(sp)
 10015c0:	d9003417 	ldw	r4,208(sp)
 10015c4:	8c400044 	addi	r17,r17,1
 10015c8:	10c7883a 	add	r3,r2,r3
 10015cc:	40800115 	stw	r2,4(r8)
 10015d0:	41000015 	stw	r4,0(r8)
 10015d4:	d8c02015 	stw	r3,128(sp)
 10015d8:	dc401f15 	stw	r17,124(sp)
 10015dc:	008001c4 	movi	r2,7
 10015e0:	14416916 	blt	r2,r17,1001b88 <___vfprintf_internal_r+0x160c>
 10015e4:	45800204 	addi	r22,r8,8
 10015e8:	d9003617 	ldw	r4,216(sp)
 10015ec:	d9403817 	ldw	r5,224(sp)
 10015f0:	000d883a 	mov	r6,zero
 10015f4:	000f883a 	mov	r7,zero
 10015f8:	d8c03c15 	stw	r3,240(sp)
 10015fc:	100b7f00 	call	100b7f0 <__eqdf2>
 1001600:	d8c03c17 	ldw	r3,240(sp)
 1001604:	1000bc26 	beq	r2,zero,10018f8 <___vfprintf_internal_r+0x137c>
 1001608:	d9403317 	ldw	r5,204(sp)
 100160c:	84000044 	addi	r16,r16,1
 1001610:	8c400044 	addi	r17,r17,1
 1001614:	28bfffc4 	addi	r2,r5,-1
 1001618:	1887883a 	add	r3,r3,r2
 100161c:	b0800115 	stw	r2,4(r22)
 1001620:	b4000015 	stw	r16,0(r22)
 1001624:	d8c02015 	stw	r3,128(sp)
 1001628:	dc401f15 	stw	r17,124(sp)
 100162c:	008001c4 	movi	r2,7
 1001630:	14414316 	blt	r2,r17,1001b40 <___vfprintf_internal_r+0x15c4>
 1001634:	b5800204 	addi	r22,r22,8
 1001638:	d9003a17 	ldw	r4,232(sp)
 100163c:	df0022c4 	addi	fp,sp,139
 1001640:	8c400044 	addi	r17,r17,1
 1001644:	20c7883a 	add	r3,r4,r3
 1001648:	b7000015 	stw	fp,0(r22)
 100164c:	b1000115 	stw	r4,4(r22)
 1001650:	d8c02015 	stw	r3,128(sp)
 1001654:	dc401f15 	stw	r17,124(sp)
 1001658:	008001c4 	movi	r2,7
 100165c:	14400e16 	blt	r2,r17,1001698 <___vfprintf_internal_r+0x111c>
 1001660:	b2000204 	addi	r8,r22,8
 1001664:	003e3a06 	br	1000f50 <___vfprintf_internal_r+0x9d4>
 1001668:	01004074 	movhi	r4,257
 100166c:	213cf584 	addi	r4,r4,-3114
 1001670:	d9002b15 	stw	r4,172(sp)
 1001674:	d9002b17 	ldw	r4,172(sp)
 1001678:	1c07883a 	add	r3,r3,r16
 100167c:	44000115 	stw	r16,4(r8)
 1001680:	41000015 	stw	r4,0(r8)
 1001684:	10800044 	addi	r2,r2,1
 1001688:	d8c02015 	stw	r3,128(sp)
 100168c:	d8801f15 	stw	r2,124(sp)
 1001690:	010001c4 	movi	r4,7
 1001694:	20be2d0e 	bge	r4,r2,1000f4c <___vfprintf_internal_r+0x9d0>
 1001698:	d9002c17 	ldw	r4,176(sp)
 100169c:	d9801e04 	addi	r6,sp,120
 10016a0:	b80b883a 	mov	r5,r23
 10016a4:	1007b780 	call	1007b78 <__sprint_r>
 10016a8:	103cb61e 	bne	r2,zero,1000984 <___vfprintf_internal_r+0x408>
 10016ac:	d8c02017 	ldw	r3,128(sp)
 10016b0:	da000404 	addi	r8,sp,16
 10016b4:	003e2606 	br	1000f50 <___vfprintf_internal_r+0x9d4>
 10016b8:	d9002c17 	ldw	r4,176(sp)
 10016bc:	d9801e04 	addi	r6,sp,120
 10016c0:	b80b883a 	mov	r5,r23
 10016c4:	1007b780 	call	1007b78 <__sprint_r>
 10016c8:	103e5d26 	beq	r2,zero,1001040 <___vfprintf_internal_r+0xac4>
 10016cc:	003cad06 	br	1000984 <___vfprintf_internal_r+0x408>
 10016d0:	d9002c17 	ldw	r4,176(sp)
 10016d4:	d9801e04 	addi	r6,sp,120
 10016d8:	b80b883a 	mov	r5,r23
 10016dc:	1007b780 	call	1007b78 <__sprint_r>
 10016e0:	103ca81e 	bne	r2,zero,1000984 <___vfprintf_internal_r+0x408>
 10016e4:	d8c02017 	ldw	r3,128(sp)
 10016e8:	da000404 	addi	r8,sp,16
 10016ec:	003e0b06 	br	1000f1c <___vfprintf_internal_r+0x9a0>
 10016f0:	d9002c17 	ldw	r4,176(sp)
 10016f4:	d9801e04 	addi	r6,sp,120
 10016f8:	b80b883a 	mov	r5,r23
 10016fc:	1007b780 	call	1007b78 <__sprint_r>
 1001700:	103ca01e 	bne	r2,zero,1000984 <___vfprintf_internal_r+0x408>
 1001704:	d8c02017 	ldw	r3,128(sp)
 1001708:	da000404 	addi	r8,sp,16
 100170c:	003dbd06 	br	1000e04 <___vfprintf_internal_r+0x888>
 1001710:	d9002c17 	ldw	r4,176(sp)
 1001714:	d9801e04 	addi	r6,sp,120
 1001718:	b80b883a 	mov	r5,r23
 100171c:	1007b780 	call	1007b78 <__sprint_r>
 1001720:	103c981e 	bne	r2,zero,1000984 <___vfprintf_internal_r+0x408>
 1001724:	d8c02017 	ldw	r3,128(sp)
 1001728:	da000404 	addi	r8,sp,16
 100172c:	003dc306 	br	1000e3c <___vfprintf_internal_r+0x8c0>
 1001730:	d8802917 	ldw	r2,164(sp)
 1001734:	d8002785 	stb	zero,158(sp)
 1001738:	103f0616 	blt	r2,zero,1001354 <___vfprintf_internal_r+0xdd8>
 100173c:	00ffdfc4 	movi	r3,-129
 1001740:	9d84b03a 	or	r2,r19,r22
 1001744:	90e4703a 	and	r18,r18,r3
 1001748:	103c6b26 	beq	r2,zero,10008f8 <___vfprintf_internal_r+0x37c>
 100174c:	0039883a 	mov	fp,zero
 1001750:	003e7406 	br	1001124 <___vfprintf_internal_r+0xba8>
 1001754:	9080040c 	andi	r2,r18,16
 1001758:	1001b326 	beq	r2,zero,1001e28 <___vfprintf_internal_r+0x18ac>
 100175c:	d9002d17 	ldw	r4,180(sp)
 1001760:	d9402917 	ldw	r5,164(sp)
 1001764:	d8002785 	stb	zero,158(sp)
 1001768:	20800104 	addi	r2,r4,4
 100176c:	24c00017 	ldw	r19,0(r4)
 1001770:	002d883a 	mov	r22,zero
 1001774:	2801b516 	blt	r5,zero,1001e4c <___vfprintf_internal_r+0x18d0>
 1001778:	00ffdfc4 	movi	r3,-129
 100177c:	d8802d15 	stw	r2,180(sp)
 1001780:	90e4703a 	and	r18,r18,r3
 1001784:	983d2726 	beq	r19,zero,1000c24 <___vfprintf_internal_r+0x6a8>
 1001788:	0039883a 	mov	fp,zero
 100178c:	003d2a06 	br	1000c38 <___vfprintf_internal_r+0x6bc>
 1001790:	dc402617 	ldw	r17,152(sp)
 1001794:	0441d30e 	bge	zero,r17,1001ee4 <___vfprintf_internal_r+0x1968>
 1001798:	dc403217 	ldw	r17,200(sp)
 100179c:	d8803317 	ldw	r2,204(sp)
 10017a0:	1440010e 	bge	r2,r17,10017a8 <___vfprintf_internal_r+0x122c>
 10017a4:	1023883a 	mov	r17,r2
 10017a8:	04400a0e 	bge	zero,r17,10017d4 <___vfprintf_internal_r+0x1258>
 10017ac:	d8801f17 	ldw	r2,124(sp)
 10017b0:	1c47883a 	add	r3,r3,r17
 10017b4:	44000015 	stw	r16,0(r8)
 10017b8:	10800044 	addi	r2,r2,1
 10017bc:	44400115 	stw	r17,4(r8)
 10017c0:	d8c02015 	stw	r3,128(sp)
 10017c4:	d8801f15 	stw	r2,124(sp)
 10017c8:	010001c4 	movi	r4,7
 10017cc:	20826516 	blt	r4,r2,1002164 <___vfprintf_internal_r+0x1be8>
 10017d0:	42000204 	addi	r8,r8,8
 10017d4:	88026116 	blt	r17,zero,100215c <___vfprintf_internal_r+0x1be0>
 10017d8:	d9003217 	ldw	r4,200(sp)
 10017dc:	2463c83a 	sub	r17,r4,r17
 10017e0:	04407b0e 	bge	zero,r17,10019d0 <___vfprintf_internal_r+0x1454>
 10017e4:	05800404 	movi	r22,16
 10017e8:	d8801f17 	ldw	r2,124(sp)
 10017ec:	b4419d0e 	bge	r22,r17,1001e64 <___vfprintf_internal_r+0x18e8>
 10017f0:	01004074 	movhi	r4,257
 10017f4:	213cf584 	addi	r4,r4,-3114
 10017f8:	d9002b15 	stw	r4,172(sp)
 10017fc:	070001c4 	movi	fp,7
 1001800:	dcc02c17 	ldw	r19,176(sp)
 1001804:	00000306 	br	1001814 <___vfprintf_internal_r+0x1298>
 1001808:	42000204 	addi	r8,r8,8
 100180c:	8c7ffc04 	addi	r17,r17,-16
 1001810:	b441970e 	bge	r22,r17,1001e70 <___vfprintf_internal_r+0x18f4>
 1001814:	18c00404 	addi	r3,r3,16
 1001818:	10800044 	addi	r2,r2,1
 100181c:	45000015 	stw	r20,0(r8)
 1001820:	45800115 	stw	r22,4(r8)
 1001824:	d8c02015 	stw	r3,128(sp)
 1001828:	d8801f15 	stw	r2,124(sp)
 100182c:	e0bff60e 	bge	fp,r2,1001808 <___vfprintf_internal_r+0x128c>
 1001830:	d9801e04 	addi	r6,sp,120
 1001834:	b80b883a 	mov	r5,r23
 1001838:	9809883a 	mov	r4,r19
 100183c:	1007b780 	call	1007b78 <__sprint_r>
 1001840:	103c501e 	bne	r2,zero,1000984 <___vfprintf_internal_r+0x408>
 1001844:	d8c02017 	ldw	r3,128(sp)
 1001848:	d8801f17 	ldw	r2,124(sp)
 100184c:	da000404 	addi	r8,sp,16
 1001850:	003fee06 	br	100180c <___vfprintf_internal_r+0x1290>
 1001854:	d9002c17 	ldw	r4,176(sp)
 1001858:	d9801e04 	addi	r6,sp,120
 100185c:	b80b883a 	mov	r5,r23
 1001860:	1007b780 	call	1007b78 <__sprint_r>
 1001864:	103c471e 	bne	r2,zero,1000984 <___vfprintf_internal_r+0x408>
 1001868:	d8c02017 	ldw	r3,128(sp)
 100186c:	df002787 	ldb	fp,158(sp)
 1001870:	da000404 	addi	r8,sp,16
 1001874:	003d5606 	br	1000dd0 <___vfprintf_internal_r+0x854>
 1001878:	9080040c 	andi	r2,r18,16
 100187c:	10016126 	beq	r2,zero,1001e04 <___vfprintf_internal_r+0x1888>
 1001880:	d8802d17 	ldw	r2,180(sp)
 1001884:	14c00017 	ldw	r19,0(r2)
 1001888:	10800104 	addi	r2,r2,4
 100188c:	d8802d15 	stw	r2,180(sp)
 1001890:	982dd7fa 	srai	r22,r19,31
 1001894:	b005883a 	mov	r2,r22
 1001898:	003c8206 	br	1000aa4 <___vfprintf_internal_r+0x528>
 100189c:	9080040c 	andi	r2,r18,16
 10018a0:	10003526 	beq	r2,zero,1001978 <___vfprintf_internal_r+0x13fc>
 10018a4:	d9402d17 	ldw	r5,180(sp)
 10018a8:	d8c02917 	ldw	r3,164(sp)
 10018ac:	d8002785 	stb	zero,158(sp)
 10018b0:	28800104 	addi	r2,r5,4
 10018b4:	2cc00017 	ldw	r19,0(r5)
 10018b8:	002d883a 	mov	r22,zero
 10018bc:	18003716 	blt	r3,zero,100199c <___vfprintf_internal_r+0x1420>
 10018c0:	00ffdfc4 	movi	r3,-129
 10018c4:	d8802d15 	stw	r2,180(sp)
 10018c8:	90e4703a 	and	r18,r18,r3
 10018cc:	0039883a 	mov	fp,zero
 10018d0:	983df326 	beq	r19,zero,10010a0 <___vfprintf_internal_r+0xb24>
 10018d4:	00800244 	movi	r2,9
 10018d8:	14fc7b36 	bltu	r2,r19,1000ac8 <___vfprintf_internal_r+0x54c>
 10018dc:	d8c02817 	ldw	r3,160(sp)
 10018e0:	dc001dc4 	addi	r16,sp,119
 10018e4:	9cc00c04 	addi	r19,r19,48
 10018e8:	1c07c83a 	sub	r3,r3,r16
 10018ec:	dcc01dc5 	stb	r19,119(sp)
 10018f0:	d8c02e15 	stw	r3,184(sp)
 10018f4:	003ce806 	br	1000c98 <___vfprintf_internal_r+0x71c>
 10018f8:	d8803317 	ldw	r2,204(sp)
 10018fc:	143fffc4 	addi	r16,r2,-1
 1001900:	043f4d0e 	bge	zero,r16,1001638 <___vfprintf_internal_r+0x10bc>
 1001904:	07000404 	movi	fp,16
 1001908:	e400810e 	bge	fp,r16,1001b10 <___vfprintf_internal_r+0x1594>
 100190c:	01404074 	movhi	r5,257
 1001910:	297cf584 	addi	r5,r5,-3114
 1001914:	d9402b15 	stw	r5,172(sp)
 1001918:	01c001c4 	movi	r7,7
 100191c:	dcc02c17 	ldw	r19,176(sp)
 1001920:	00000306 	br	1001930 <___vfprintf_internal_r+0x13b4>
 1001924:	b5800204 	addi	r22,r22,8
 1001928:	843ffc04 	addi	r16,r16,-16
 100192c:	e4007b0e 	bge	fp,r16,1001b1c <___vfprintf_internal_r+0x15a0>
 1001930:	18c00404 	addi	r3,r3,16
 1001934:	8c400044 	addi	r17,r17,1
 1001938:	b5000015 	stw	r20,0(r22)
 100193c:	b7000115 	stw	fp,4(r22)
 1001940:	d8c02015 	stw	r3,128(sp)
 1001944:	dc401f15 	stw	r17,124(sp)
 1001948:	3c7ff60e 	bge	r7,r17,1001924 <___vfprintf_internal_r+0x13a8>
 100194c:	d9801e04 	addi	r6,sp,120
 1001950:	b80b883a 	mov	r5,r23
 1001954:	9809883a 	mov	r4,r19
 1001958:	d9c03c15 	stw	r7,240(sp)
 100195c:	1007b780 	call	1007b78 <__sprint_r>
 1001960:	d9c03c17 	ldw	r7,240(sp)
 1001964:	103c071e 	bne	r2,zero,1000984 <___vfprintf_internal_r+0x408>
 1001968:	d8c02017 	ldw	r3,128(sp)
 100196c:	dc401f17 	ldw	r17,124(sp)
 1001970:	dd800404 	addi	r22,sp,16
 1001974:	003fec06 	br	1001928 <___vfprintf_internal_r+0x13ac>
 1001978:	9080100c 	andi	r2,r18,64
 100197c:	d8002785 	stb	zero,158(sp)
 1001980:	10010e26 	beq	r2,zero,1001dbc <___vfprintf_internal_r+0x1840>
 1001984:	d9002d17 	ldw	r4,180(sp)
 1001988:	d9402917 	ldw	r5,164(sp)
 100198c:	002d883a 	mov	r22,zero
 1001990:	20800104 	addi	r2,r4,4
 1001994:	24c0000b 	ldhu	r19,0(r4)
 1001998:	283fc90e 	bge	r5,zero,10018c0 <___vfprintf_internal_r+0x1344>
 100199c:	d8802d15 	stw	r2,180(sp)
 10019a0:	0039883a 	mov	fp,zero
 10019a4:	9d84b03a 	or	r2,r19,r22
 10019a8:	103c461e 	bne	r2,zero,1000ac4 <___vfprintf_internal_r+0x548>
 10019ac:	00800044 	movi	r2,1
 10019b0:	003e6c06 	br	1001364 <___vfprintf_internal_r+0xde8>
 10019b4:	d9002c17 	ldw	r4,176(sp)
 10019b8:	d9801e04 	addi	r6,sp,120
 10019bc:	b80b883a 	mov	r5,r23
 10019c0:	1007b780 	call	1007b78 <__sprint_r>
 10019c4:	103bef1e 	bne	r2,zero,1000984 <___vfprintf_internal_r+0x408>
 10019c8:	d8c02017 	ldw	r3,128(sp)
 10019cc:	da000404 	addi	r8,sp,16
 10019d0:	d9003217 	ldw	r4,200(sp)
 10019d4:	d8802617 	ldw	r2,152(sp)
 10019d8:	d9403317 	ldw	r5,204(sp)
 10019dc:	8123883a 	add	r17,r16,r4
 10019e0:	11400216 	blt	r2,r5,10019ec <___vfprintf_internal_r+0x1470>
 10019e4:	9100004c 	andi	r4,r18,1
 10019e8:	20000d26 	beq	r4,zero,1001a20 <___vfprintf_internal_r+0x14a4>
 10019ec:	d9003717 	ldw	r4,220(sp)
 10019f0:	d9403417 	ldw	r5,208(sp)
 10019f4:	1907883a 	add	r3,r3,r4
 10019f8:	d9001f17 	ldw	r4,124(sp)
 10019fc:	41400015 	stw	r5,0(r8)
 1001a00:	d9403717 	ldw	r5,220(sp)
 1001a04:	21000044 	addi	r4,r4,1
 1001a08:	d8c02015 	stw	r3,128(sp)
 1001a0c:	41400115 	stw	r5,4(r8)
 1001a10:	d9001f15 	stw	r4,124(sp)
 1001a14:	014001c4 	movi	r5,7
 1001a18:	2901e816 	blt	r5,r4,10021bc <___vfprintf_internal_r+0x1c40>
 1001a1c:	42000204 	addi	r8,r8,8
 1001a20:	d9003317 	ldw	r4,204(sp)
 1001a24:	8121883a 	add	r16,r16,r4
 1001a28:	2085c83a 	sub	r2,r4,r2
 1001a2c:	8461c83a 	sub	r16,r16,r17
 1001a30:	1400010e 	bge	r2,r16,1001a38 <___vfprintf_internal_r+0x14bc>
 1001a34:	1021883a 	mov	r16,r2
 1001a38:	04000a0e 	bge	zero,r16,1001a64 <___vfprintf_internal_r+0x14e8>
 1001a3c:	d9001f17 	ldw	r4,124(sp)
 1001a40:	1c07883a 	add	r3,r3,r16
 1001a44:	44400015 	stw	r17,0(r8)
 1001a48:	21000044 	addi	r4,r4,1
 1001a4c:	44000115 	stw	r16,4(r8)
 1001a50:	d8c02015 	stw	r3,128(sp)
 1001a54:	d9001f15 	stw	r4,124(sp)
 1001a58:	014001c4 	movi	r5,7
 1001a5c:	2901fb16 	blt	r5,r4,100224c <___vfprintf_internal_r+0x1cd0>
 1001a60:	42000204 	addi	r8,r8,8
 1001a64:	8001f716 	blt	r16,zero,1002244 <___vfprintf_internal_r+0x1cc8>
 1001a68:	1421c83a 	sub	r16,r2,r16
 1001a6c:	043d380e 	bge	zero,r16,1000f50 <___vfprintf_internal_r+0x9d4>
 1001a70:	04400404 	movi	r17,16
 1001a74:	d8801f17 	ldw	r2,124(sp)
 1001a78:	8c3efb0e 	bge	r17,r16,1001668 <___vfprintf_internal_r+0x10ec>
 1001a7c:	01404074 	movhi	r5,257
 1001a80:	297cf584 	addi	r5,r5,-3114
 1001a84:	d9402b15 	stw	r5,172(sp)
 1001a88:	058001c4 	movi	r22,7
 1001a8c:	dcc02c17 	ldw	r19,176(sp)
 1001a90:	00000306 	br	1001aa0 <___vfprintf_internal_r+0x1524>
 1001a94:	42000204 	addi	r8,r8,8
 1001a98:	843ffc04 	addi	r16,r16,-16
 1001a9c:	8c3ef50e 	bge	r17,r16,1001674 <___vfprintf_internal_r+0x10f8>
 1001aa0:	18c00404 	addi	r3,r3,16
 1001aa4:	10800044 	addi	r2,r2,1
 1001aa8:	45000015 	stw	r20,0(r8)
 1001aac:	44400115 	stw	r17,4(r8)
 1001ab0:	d8c02015 	stw	r3,128(sp)
 1001ab4:	d8801f15 	stw	r2,124(sp)
 1001ab8:	b0bff60e 	bge	r22,r2,1001a94 <___vfprintf_internal_r+0x1518>
 1001abc:	d9801e04 	addi	r6,sp,120
 1001ac0:	b80b883a 	mov	r5,r23
 1001ac4:	9809883a 	mov	r4,r19
 1001ac8:	1007b780 	call	1007b78 <__sprint_r>
 1001acc:	103bad1e 	bne	r2,zero,1000984 <___vfprintf_internal_r+0x408>
 1001ad0:	d8c02017 	ldw	r3,128(sp)
 1001ad4:	d8801f17 	ldw	r2,124(sp)
 1001ad8:	da000404 	addi	r8,sp,16
 1001adc:	003fee06 	br	1001a98 <___vfprintf_internal_r+0x151c>
 1001ae0:	9088703a 	and	r4,r18,r2
 1001ae4:	203eab1e 	bne	r4,zero,1001594 <___vfprintf_internal_r+0x1018>
 1001ae8:	dc401f17 	ldw	r17,124(sp)
 1001aec:	40800115 	stw	r2,4(r8)
 1001af0:	44000015 	stw	r16,0(r8)
 1001af4:	8c400044 	addi	r17,r17,1
 1001af8:	d8c02015 	stw	r3,128(sp)
 1001afc:	dc401f15 	stw	r17,124(sp)
 1001b00:	008001c4 	movi	r2,7
 1001b04:	14400e16 	blt	r2,r17,1001b40 <___vfprintf_internal_r+0x15c4>
 1001b08:	45800204 	addi	r22,r8,8
 1001b0c:	003eca06 	br	1001638 <___vfprintf_internal_r+0x10bc>
 1001b10:	01004074 	movhi	r4,257
 1001b14:	213cf584 	addi	r4,r4,-3114
 1001b18:	d9002b15 	stw	r4,172(sp)
 1001b1c:	d8802b17 	ldw	r2,172(sp)
 1001b20:	1c07883a 	add	r3,r3,r16
 1001b24:	8c400044 	addi	r17,r17,1
 1001b28:	b0800015 	stw	r2,0(r22)
 1001b2c:	b4000115 	stw	r16,4(r22)
 1001b30:	d8c02015 	stw	r3,128(sp)
 1001b34:	dc401f15 	stw	r17,124(sp)
 1001b38:	008001c4 	movi	r2,7
 1001b3c:	147ebd0e 	bge	r2,r17,1001634 <___vfprintf_internal_r+0x10b8>
 1001b40:	d9002c17 	ldw	r4,176(sp)
 1001b44:	d9801e04 	addi	r6,sp,120
 1001b48:	b80b883a 	mov	r5,r23
 1001b4c:	1007b780 	call	1007b78 <__sprint_r>
 1001b50:	103b8c1e 	bne	r2,zero,1000984 <___vfprintf_internal_r+0x408>
 1001b54:	d8c02017 	ldw	r3,128(sp)
 1001b58:	dc401f17 	ldw	r17,124(sp)
 1001b5c:	dd800404 	addi	r22,sp,16
 1001b60:	003eb506 	br	1001638 <___vfprintf_internal_r+0x10bc>
 1001b64:	d9002c17 	ldw	r4,176(sp)
 1001b68:	d9801e04 	addi	r6,sp,120
 1001b6c:	b80b883a 	mov	r5,r23
 1001b70:	1007b780 	call	1007b78 <__sprint_r>
 1001b74:	103b831e 	bne	r2,zero,1000984 <___vfprintf_internal_r+0x408>
 1001b78:	d8c02017 	ldw	r3,128(sp)
 1001b7c:	dc401f17 	ldw	r17,124(sp)
 1001b80:	da000404 	addi	r8,sp,16
 1001b84:	003e8d06 	br	10015bc <___vfprintf_internal_r+0x1040>
 1001b88:	d9002c17 	ldw	r4,176(sp)
 1001b8c:	d9801e04 	addi	r6,sp,120
 1001b90:	b80b883a 	mov	r5,r23
 1001b94:	1007b780 	call	1007b78 <__sprint_r>
 1001b98:	103b7a1e 	bne	r2,zero,1000984 <___vfprintf_internal_r+0x408>
 1001b9c:	d8c02017 	ldw	r3,128(sp)
 1001ba0:	dc401f17 	ldw	r17,124(sp)
 1001ba4:	dd800404 	addi	r22,sp,16
 1001ba8:	003e8f06 	br	10015e8 <___vfprintf_internal_r+0x106c>
 1001bac:	0027883a 	mov	r19,zero
 1001bb0:	003f4a06 	br	10018dc <___vfprintf_internal_r+0x1360>
 1001bb4:	d9002c17 	ldw	r4,176(sp)
 1001bb8:	d9801e04 	addi	r6,sp,120
 1001bbc:	b80b883a 	mov	r5,r23
 1001bc0:	1007b780 	call	1007b78 <__sprint_r>
 1001bc4:	103b6f1e 	bne	r2,zero,1000984 <___vfprintf_internal_r+0x408>
 1001bc8:	d8c02017 	ldw	r3,128(sp)
 1001bcc:	da000404 	addi	r8,sp,16
 1001bd0:	003c9d06 	br	1000e48 <___vfprintf_internal_r+0x8cc>
 1001bd4:	04e7c83a 	sub	r19,zero,r19
 1001bd8:	9804c03a 	cmpne	r2,r19,zero
 1001bdc:	05adc83a 	sub	r22,zero,r22
 1001be0:	b0adc83a 	sub	r22,r22,r2
 1001be4:	d8802917 	ldw	r2,164(sp)
 1001be8:	07000b44 	movi	fp,45
 1001bec:	df002785 	stb	fp,158(sp)
 1001bf0:	10017b16 	blt	r2,zero,10021e0 <___vfprintf_internal_r+0x1c64>
 1001bf4:	00bfdfc4 	movi	r2,-129
 1001bf8:	90a4703a 	and	r18,r18,r2
 1001bfc:	003bb106 	br	1000ac4 <___vfprintf_internal_r+0x548>
 1001c00:	d9003617 	ldw	r4,216(sp)
 1001c04:	d9403817 	ldw	r5,224(sp)
 1001c08:	da003d15 	stw	r8,244(sp)
 1001c0c:	100779c0 	call	100779c <__fpclassifyd>
 1001c10:	da003d17 	ldw	r8,244(sp)
 1001c14:	1000f026 	beq	r2,zero,1001fd8 <___vfprintf_internal_r+0x1a5c>
 1001c18:	d9002917 	ldw	r4,164(sp)
 1001c1c:	05bff7c4 	movi	r22,-33
 1001c20:	00bfffc4 	movi	r2,-1
 1001c24:	8dac703a 	and	r22,r17,r22
 1001c28:	20820026 	beq	r4,r2,100242c <___vfprintf_internal_r+0x1eb0>
 1001c2c:	008011c4 	movi	r2,71
 1001c30:	b081f726 	beq	r22,r2,1002410 <___vfprintf_internal_r+0x1e94>
 1001c34:	d9003817 	ldw	r4,224(sp)
 1001c38:	90c04014 	ori	r3,r18,256
 1001c3c:	d8c02b15 	stw	r3,172(sp)
 1001c40:	20021516 	blt	r4,zero,1002498 <___vfprintf_internal_r+0x1f1c>
 1001c44:	dcc03817 	ldw	r19,224(sp)
 1001c48:	d8002a05 	stb	zero,168(sp)
 1001c4c:	00801984 	movi	r2,102
 1001c50:	8881f926 	beq	r17,r2,1002438 <___vfprintf_internal_r+0x1ebc>
 1001c54:	00801184 	movi	r2,70
 1001c58:	88821c26 	beq	r17,r2,10024cc <___vfprintf_internal_r+0x1f50>
 1001c5c:	00801144 	movi	r2,69
 1001c60:	b081ef26 	beq	r22,r2,1002420 <___vfprintf_internal_r+0x1ea4>
 1001c64:	d8c02917 	ldw	r3,164(sp)
 1001c68:	d8802104 	addi	r2,sp,132
 1001c6c:	d8800315 	stw	r2,12(sp)
 1001c70:	d9403617 	ldw	r5,216(sp)
 1001c74:	d8802504 	addi	r2,sp,148
 1001c78:	d9002c17 	ldw	r4,176(sp)
 1001c7c:	d8800215 	stw	r2,8(sp)
 1001c80:	d8802604 	addi	r2,sp,152
 1001c84:	d8c00015 	stw	r3,0(sp)
 1001c88:	d8800115 	stw	r2,4(sp)
 1001c8c:	01c00084 	movi	r7,2
 1001c90:	980d883a 	mov	r6,r19
 1001c94:	d8c03c15 	stw	r3,240(sp)
 1001c98:	da003d15 	stw	r8,244(sp)
 1001c9c:	1002ba00 	call	1002ba0 <_dtoa_r>
 1001ca0:	1021883a 	mov	r16,r2
 1001ca4:	008019c4 	movi	r2,103
 1001ca8:	d8c03c17 	ldw	r3,240(sp)
 1001cac:	da003d17 	ldw	r8,244(sp)
 1001cb0:	88817126 	beq	r17,r2,1002278 <___vfprintf_internal_r+0x1cfc>
 1001cb4:	008011c4 	movi	r2,71
 1001cb8:	88829226 	beq	r17,r2,1002704 <___vfprintf_internal_r+0x2188>
 1001cbc:	80f9883a 	add	fp,r16,r3
 1001cc0:	d9003617 	ldw	r4,216(sp)
 1001cc4:	000d883a 	mov	r6,zero
 1001cc8:	000f883a 	mov	r7,zero
 1001ccc:	980b883a 	mov	r5,r19
 1001cd0:	da003d15 	stw	r8,244(sp)
 1001cd4:	100b7f00 	call	100b7f0 <__eqdf2>
 1001cd8:	da003d17 	ldw	r8,244(sp)
 1001cdc:	10018d26 	beq	r2,zero,1002314 <___vfprintf_internal_r+0x1d98>
 1001ce0:	d8802117 	ldw	r2,132(sp)
 1001ce4:	1700062e 	bgeu	r2,fp,1001d00 <___vfprintf_internal_r+0x1784>
 1001ce8:	01000c04 	movi	r4,48
 1001cec:	10c00044 	addi	r3,r2,1
 1001cf0:	d8c02115 	stw	r3,132(sp)
 1001cf4:	11000005 	stb	r4,0(r2)
 1001cf8:	d8802117 	ldw	r2,132(sp)
 1001cfc:	173ffb36 	bltu	r2,fp,1001cec <___vfprintf_internal_r+0x1770>
 1001d00:	1405c83a 	sub	r2,r2,r16
 1001d04:	d8803315 	stw	r2,204(sp)
 1001d08:	008011c4 	movi	r2,71
 1001d0c:	b0817626 	beq	r22,r2,10022e8 <___vfprintf_internal_r+0x1d6c>
 1001d10:	00801944 	movi	r2,101
 1001d14:	1442810e 	bge	r2,r17,100271c <___vfprintf_internal_r+0x21a0>
 1001d18:	d8c02617 	ldw	r3,152(sp)
 1001d1c:	00801984 	movi	r2,102
 1001d20:	d8c03215 	stw	r3,200(sp)
 1001d24:	8881fe26 	beq	r17,r2,1002520 <___vfprintf_internal_r+0x1fa4>
 1001d28:	d8c03217 	ldw	r3,200(sp)
 1001d2c:	d9003317 	ldw	r4,204(sp)
 1001d30:	1901dd16 	blt	r3,r4,10024a8 <___vfprintf_internal_r+0x1f2c>
 1001d34:	9480004c 	andi	r18,r18,1
 1001d38:	90022b1e 	bne	r18,zero,10025e8 <___vfprintf_internal_r+0x206c>
 1001d3c:	1805883a 	mov	r2,r3
 1001d40:	18028016 	blt	r3,zero,1002744 <___vfprintf_internal_r+0x21c8>
 1001d44:	d8c03217 	ldw	r3,200(sp)
 1001d48:	044019c4 	movi	r17,103
 1001d4c:	d8c02e15 	stw	r3,184(sp)
 1001d50:	df002a07 	ldb	fp,168(sp)
 1001d54:	e001531e 	bne	fp,zero,10022a4 <___vfprintf_internal_r+0x1d28>
 1001d58:	df002783 	ldbu	fp,158(sp)
 1001d5c:	d8802a15 	stw	r2,168(sp)
 1001d60:	dc802b17 	ldw	r18,172(sp)
 1001d64:	d8002915 	stw	zero,164(sp)
 1001d68:	003bd106 	br	1000cb0 <___vfprintf_internal_r+0x734>
 1001d6c:	d8802d17 	ldw	r2,180(sp)
 1001d70:	d8c02d17 	ldw	r3,180(sp)
 1001d74:	d9002d17 	ldw	r4,180(sp)
 1001d78:	10800017 	ldw	r2,0(r2)
 1001d7c:	18c00117 	ldw	r3,4(r3)
 1001d80:	21000204 	addi	r4,r4,8
 1001d84:	d8803615 	stw	r2,216(sp)
 1001d88:	d8c03815 	stw	r3,224(sp)
 1001d8c:	d9002d15 	stw	r4,180(sp)
 1001d90:	003b7506 	br	1000b68 <___vfprintf_internal_r+0x5ec>
 1001d94:	ac400007 	ldb	r17,0(r21)
 1001d98:	003a5906 	br	1000700 <___vfprintf_internal_r+0x184>
 1001d9c:	9080100c 	andi	r2,r18,64
 1001da0:	1000a826 	beq	r2,zero,1002044 <___vfprintf_internal_r+0x1ac8>
 1001da4:	d9002d17 	ldw	r4,180(sp)
 1001da8:	002d883a 	mov	r22,zero
 1001dac:	24c0000b 	ldhu	r19,0(r4)
 1001db0:	21000104 	addi	r4,r4,4
 1001db4:	d9002d15 	stw	r4,180(sp)
 1001db8:	003ccb06 	br	10010e8 <___vfprintf_internal_r+0xb6c>
 1001dbc:	d8c02d17 	ldw	r3,180(sp)
 1001dc0:	d9002917 	ldw	r4,164(sp)
 1001dc4:	002d883a 	mov	r22,zero
 1001dc8:	18800104 	addi	r2,r3,4
 1001dcc:	1cc00017 	ldw	r19,0(r3)
 1001dd0:	203ebb0e 	bge	r4,zero,10018c0 <___vfprintf_internal_r+0x1344>
 1001dd4:	003ef106 	br	100199c <___vfprintf_internal_r+0x1420>
 1001dd8:	9080040c 	andi	r2,r18,16
 1001ddc:	1000921e 	bne	r2,zero,1002028 <___vfprintf_internal_r+0x1aac>
 1001de0:	9480100c 	andi	r18,r18,64
 1001de4:	90013926 	beq	r18,zero,10022cc <___vfprintf_internal_r+0x1d50>
 1001de8:	d9002d17 	ldw	r4,180(sp)
 1001dec:	d9402f17 	ldw	r5,188(sp)
 1001df0:	20800017 	ldw	r2,0(r4)
 1001df4:	21000104 	addi	r4,r4,4
 1001df8:	d9002d15 	stw	r4,180(sp)
 1001dfc:	1140000d 	sth	r5,0(r2)
 1001e00:	003a1606 	br	100065c <___vfprintf_internal_r+0xe0>
 1001e04:	9080100c 	andi	r2,r18,64
 1001e08:	10008026 	beq	r2,zero,100200c <___vfprintf_internal_r+0x1a90>
 1001e0c:	d8c02d17 	ldw	r3,180(sp)
 1001e10:	1cc0000f 	ldh	r19,0(r3)
 1001e14:	18c00104 	addi	r3,r3,4
 1001e18:	d8c02d15 	stw	r3,180(sp)
 1001e1c:	982dd7fa 	srai	r22,r19,31
 1001e20:	b005883a 	mov	r2,r22
 1001e24:	003b1f06 	br	1000aa4 <___vfprintf_internal_r+0x528>
 1001e28:	9080100c 	andi	r2,r18,64
 1001e2c:	d8002785 	stb	zero,158(sp)
 1001e30:	10008a1e 	bne	r2,zero,100205c <___vfprintf_internal_r+0x1ae0>
 1001e34:	d9402d17 	ldw	r5,180(sp)
 1001e38:	d8c02917 	ldw	r3,164(sp)
 1001e3c:	002d883a 	mov	r22,zero
 1001e40:	28800104 	addi	r2,r5,4
 1001e44:	2cc00017 	ldw	r19,0(r5)
 1001e48:	183e4b0e 	bge	r3,zero,1001778 <___vfprintf_internal_r+0x11fc>
 1001e4c:	9d86b03a 	or	r3,r19,r22
 1001e50:	d8802d15 	stw	r2,180(sp)
 1001e54:	183e4c1e 	bne	r3,zero,1001788 <___vfprintf_internal_r+0x120c>
 1001e58:	0039883a 	mov	fp,zero
 1001e5c:	0005883a 	mov	r2,zero
 1001e60:	003d4006 	br	1001364 <___vfprintf_internal_r+0xde8>
 1001e64:	01404074 	movhi	r5,257
 1001e68:	297cf584 	addi	r5,r5,-3114
 1001e6c:	d9402b15 	stw	r5,172(sp)
 1001e70:	d9402b17 	ldw	r5,172(sp)
 1001e74:	1c47883a 	add	r3,r3,r17
 1001e78:	10800044 	addi	r2,r2,1
 1001e7c:	41400015 	stw	r5,0(r8)
 1001e80:	44400115 	stw	r17,4(r8)
 1001e84:	d8c02015 	stw	r3,128(sp)
 1001e88:	d8801f15 	stw	r2,124(sp)
 1001e8c:	010001c4 	movi	r4,7
 1001e90:	20bec816 	blt	r4,r2,10019b4 <___vfprintf_internal_r+0x1438>
 1001e94:	42000204 	addi	r8,r8,8
 1001e98:	003ecd06 	br	10019d0 <___vfprintf_internal_r+0x1454>
 1001e9c:	d9002917 	ldw	r4,164(sp)
 1001ea0:	d8002785 	stb	zero,158(sp)
 1001ea4:	203d2d16 	blt	r4,zero,100135c <___vfprintf_internal_r+0xde0>
 1001ea8:	00bfdfc4 	movi	r2,-129
 1001eac:	90a4703a 	and	r18,r18,r2
 1001eb0:	003a9106 	br	10008f8 <___vfprintf_internal_r+0x37c>
 1001eb4:	01004074 	movhi	r4,257
 1001eb8:	213cf584 	addi	r4,r4,-3114
 1001ebc:	d9002b15 	stw	r4,172(sp)
 1001ec0:	003c0c06 	br	1000ef4 <___vfprintf_internal_r+0x978>
 1001ec4:	d9002c17 	ldw	r4,176(sp)
 1001ec8:	d9801e04 	addi	r6,sp,120
 1001ecc:	b80b883a 	mov	r5,r23
 1001ed0:	1007b780 	call	1007b78 <__sprint_r>
 1001ed4:	103aab1e 	bne	r2,zero,1000984 <___vfprintf_internal_r+0x408>
 1001ed8:	d8c02017 	ldw	r3,128(sp)
 1001edc:	da000404 	addi	r8,sp,16
 1001ee0:	003d4106 	br	10013e8 <___vfprintf_internal_r+0xe6c>
 1001ee4:	d8801f17 	ldw	r2,124(sp)
 1001ee8:	01404074 	movhi	r5,257
 1001eec:	01000044 	movi	r4,1
 1001ef0:	18c00044 	addi	r3,r3,1
 1001ef4:	10800044 	addi	r2,r2,1
 1001ef8:	297cf504 	addi	r5,r5,-3116
 1001efc:	41000115 	stw	r4,4(r8)
 1001f00:	41400015 	stw	r5,0(r8)
 1001f04:	d8c02015 	stw	r3,128(sp)
 1001f08:	d8801f15 	stw	r2,124(sp)
 1001f0c:	010001c4 	movi	r4,7
 1001f10:	20805c16 	blt	r4,r2,1002084 <___vfprintf_internal_r+0x1b08>
 1001f14:	42000204 	addi	r8,r8,8
 1001f18:	8800041e 	bne	r17,zero,1001f2c <___vfprintf_internal_r+0x19b0>
 1001f1c:	d8803317 	ldw	r2,204(sp)
 1001f20:	1000021e 	bne	r2,zero,1001f2c <___vfprintf_internal_r+0x19b0>
 1001f24:	9080004c 	andi	r2,r18,1
 1001f28:	103c0926 	beq	r2,zero,1000f50 <___vfprintf_internal_r+0x9d4>
 1001f2c:	d9003717 	ldw	r4,220(sp)
 1001f30:	d8801f17 	ldw	r2,124(sp)
 1001f34:	d9403417 	ldw	r5,208(sp)
 1001f38:	20c7883a 	add	r3,r4,r3
 1001f3c:	10800044 	addi	r2,r2,1
 1001f40:	41000115 	stw	r4,4(r8)
 1001f44:	41400015 	stw	r5,0(r8)
 1001f48:	d8c02015 	stw	r3,128(sp)
 1001f4c:	d8801f15 	stw	r2,124(sp)
 1001f50:	010001c4 	movi	r4,7
 1001f54:	20812116 	blt	r4,r2,10023dc <___vfprintf_internal_r+0x1e60>
 1001f58:	42000204 	addi	r8,r8,8
 1001f5c:	0463c83a 	sub	r17,zero,r17
 1001f60:	0440730e 	bge	zero,r17,1002130 <___vfprintf_internal_r+0x1bb4>
 1001f64:	05800404 	movi	r22,16
 1001f68:	b440860e 	bge	r22,r17,1002184 <___vfprintf_internal_r+0x1c08>
 1001f6c:	01404074 	movhi	r5,257
 1001f70:	297cf584 	addi	r5,r5,-3114
 1001f74:	d9402b15 	stw	r5,172(sp)
 1001f78:	070001c4 	movi	fp,7
 1001f7c:	dcc02c17 	ldw	r19,176(sp)
 1001f80:	00000306 	br	1001f90 <___vfprintf_internal_r+0x1a14>
 1001f84:	42000204 	addi	r8,r8,8
 1001f88:	8c7ffc04 	addi	r17,r17,-16
 1001f8c:	b440800e 	bge	r22,r17,1002190 <___vfprintf_internal_r+0x1c14>
 1001f90:	18c00404 	addi	r3,r3,16
 1001f94:	10800044 	addi	r2,r2,1
 1001f98:	45000015 	stw	r20,0(r8)
 1001f9c:	45800115 	stw	r22,4(r8)
 1001fa0:	d8c02015 	stw	r3,128(sp)
 1001fa4:	d8801f15 	stw	r2,124(sp)
 1001fa8:	e0bff60e 	bge	fp,r2,1001f84 <___vfprintf_internal_r+0x1a08>
 1001fac:	d9801e04 	addi	r6,sp,120
 1001fb0:	b80b883a 	mov	r5,r23
 1001fb4:	9809883a 	mov	r4,r19
 1001fb8:	1007b780 	call	1007b78 <__sprint_r>
 1001fbc:	103a711e 	bne	r2,zero,1000984 <___vfprintf_internal_r+0x408>
 1001fc0:	d8c02017 	ldw	r3,128(sp)
 1001fc4:	d8801f17 	ldw	r2,124(sp)
 1001fc8:	da000404 	addi	r8,sp,16
 1001fcc:	003fee06 	br	1001f88 <___vfprintf_internal_r+0x1a0c>
 1001fd0:	00bfffc4 	movi	r2,-1
 1001fd4:	003a6f06 	br	1000994 <___vfprintf_internal_r+0x418>
 1001fd8:	008011c4 	movi	r2,71
 1001fdc:	1440b816 	blt	r2,r17,10022c0 <___vfprintf_internal_r+0x1d44>
 1001fe0:	04004074 	movhi	r16,257
 1001fe4:	843ce704 	addi	r16,r16,-3172
 1001fe8:	00c000c4 	movi	r3,3
 1001fec:	00bfdfc4 	movi	r2,-129
 1001ff0:	d8c02a15 	stw	r3,168(sp)
 1001ff4:	90a4703a 	and	r18,r18,r2
 1001ff8:	df002783 	ldbu	fp,158(sp)
 1001ffc:	d8c02e15 	stw	r3,184(sp)
 1002000:	d8002915 	stw	zero,164(sp)
 1002004:	d8003215 	stw	zero,200(sp)
 1002008:	003b2906 	br	1000cb0 <___vfprintf_internal_r+0x734>
 100200c:	d9002d17 	ldw	r4,180(sp)
 1002010:	24c00017 	ldw	r19,0(r4)
 1002014:	21000104 	addi	r4,r4,4
 1002018:	d9002d15 	stw	r4,180(sp)
 100201c:	982dd7fa 	srai	r22,r19,31
 1002020:	b005883a 	mov	r2,r22
 1002024:	003a9f06 	br	1000aa4 <___vfprintf_internal_r+0x528>
 1002028:	d9402d17 	ldw	r5,180(sp)
 100202c:	d8c02f17 	ldw	r3,188(sp)
 1002030:	28800017 	ldw	r2,0(r5)
 1002034:	29400104 	addi	r5,r5,4
 1002038:	d9402d15 	stw	r5,180(sp)
 100203c:	10c00015 	stw	r3,0(r2)
 1002040:	00398606 	br	100065c <___vfprintf_internal_r+0xe0>
 1002044:	d9402d17 	ldw	r5,180(sp)
 1002048:	002d883a 	mov	r22,zero
 100204c:	2cc00017 	ldw	r19,0(r5)
 1002050:	29400104 	addi	r5,r5,4
 1002054:	d9402d15 	stw	r5,180(sp)
 1002058:	003c2306 	br	10010e8 <___vfprintf_internal_r+0xb6c>
 100205c:	d8c02d17 	ldw	r3,180(sp)
 1002060:	d9002917 	ldw	r4,164(sp)
 1002064:	002d883a 	mov	r22,zero
 1002068:	18800104 	addi	r2,r3,4
 100206c:	1cc0000b 	ldhu	r19,0(r3)
 1002070:	203dc10e 	bge	r4,zero,1001778 <___vfprintf_internal_r+0x11fc>
 1002074:	003f7506 	br	1001e4c <___vfprintf_internal_r+0x18d0>
 1002078:	04004074 	movhi	r16,257
 100207c:	843ce504 	addi	r16,r16,-3180
 1002080:	003acc06 	br	1000bb4 <___vfprintf_internal_r+0x638>
 1002084:	d9002c17 	ldw	r4,176(sp)
 1002088:	d9801e04 	addi	r6,sp,120
 100208c:	b80b883a 	mov	r5,r23
 1002090:	1007b780 	call	1007b78 <__sprint_r>
 1002094:	103a3b1e 	bne	r2,zero,1000984 <___vfprintf_internal_r+0x408>
 1002098:	dc402617 	ldw	r17,152(sp)
 100209c:	d8c02017 	ldw	r3,128(sp)
 10020a0:	da000404 	addi	r8,sp,16
 10020a4:	003f9c06 	br	1001f18 <___vfprintf_internal_r+0x199c>
 10020a8:	ac400043 	ldbu	r17,1(r21)
 10020ac:	94800814 	ori	r18,r18,32
 10020b0:	ad400044 	addi	r21,r21,1
 10020b4:	8c403fcc 	andi	r17,r17,255
 10020b8:	8c40201c 	xori	r17,r17,128
 10020bc:	8c7fe004 	addi	r17,r17,-128
 10020c0:	00398f06 	br	1000700 <___vfprintf_internal_r+0x184>
 10020c4:	d8c02d15 	stw	r3,180(sp)
 10020c8:	0039883a 	mov	fp,zero
 10020cc:	003e3506 	br	10019a4 <___vfprintf_internal_r+0x1428>
 10020d0:	d9002c17 	ldw	r4,176(sp)
 10020d4:	d9801e04 	addi	r6,sp,120
 10020d8:	b80b883a 	mov	r5,r23
 10020dc:	1007b780 	call	1007b78 <__sprint_r>
 10020e0:	103a281e 	bne	r2,zero,1000984 <___vfprintf_internal_r+0x408>
 10020e4:	d8c02017 	ldw	r3,128(sp)
 10020e8:	da000404 	addi	r8,sp,16
 10020ec:	003cd006 	br	1001430 <___vfprintf_internal_r+0xeb4>
 10020f0:	8009883a 	mov	r4,r16
 10020f4:	da003d15 	stw	r8,244(sp)
 10020f8:	10004e40 	call	10004e4 <strlen>
 10020fc:	d8802e15 	stw	r2,184(sp)
 1002100:	da003d17 	ldw	r8,244(sp)
 1002104:	103c340e 	bge	r2,zero,10011d8 <___vfprintf_internal_r+0xc5c>
 1002108:	0005883a 	mov	r2,zero
 100210c:	003c3206 	br	10011d8 <___vfprintf_internal_r+0xc5c>
 1002110:	d9002c17 	ldw	r4,176(sp)
 1002114:	d9801e04 	addi	r6,sp,120
 1002118:	b80b883a 	mov	r5,r23
 100211c:	1007b780 	call	1007b78 <__sprint_r>
 1002120:	103a181e 	bne	r2,zero,1000984 <___vfprintf_internal_r+0x408>
 1002124:	d8c02017 	ldw	r3,128(sp)
 1002128:	d8801f17 	ldw	r2,124(sp)
 100212c:	da000404 	addi	r8,sp,16
 1002130:	d9403317 	ldw	r5,204(sp)
 1002134:	10800044 	addi	r2,r2,1
 1002138:	44000015 	stw	r16,0(r8)
 100213c:	28c7883a 	add	r3,r5,r3
 1002140:	003b7d06 	br	1000f38 <___vfprintf_internal_r+0x9bc>
 1002144:	01004074 	movhi	r4,257
 1002148:	213cf984 	addi	r4,r4,-3098
 100214c:	d9003515 	stw	r4,212(sp)
 1002150:	003b1406 	br	1000da4 <___vfprintf_internal_r+0x828>
 1002154:	013fffc4 	movi	r4,-1
 1002158:	003a3506 	br	1000a30 <___vfprintf_internal_r+0x4b4>
 100215c:	0023883a 	mov	r17,zero
 1002160:	003d9d06 	br	10017d8 <___vfprintf_internal_r+0x125c>
 1002164:	d9002c17 	ldw	r4,176(sp)
 1002168:	d9801e04 	addi	r6,sp,120
 100216c:	b80b883a 	mov	r5,r23
 1002170:	1007b780 	call	1007b78 <__sprint_r>
 1002174:	103a031e 	bne	r2,zero,1000984 <___vfprintf_internal_r+0x408>
 1002178:	d8c02017 	ldw	r3,128(sp)
 100217c:	da000404 	addi	r8,sp,16
 1002180:	003d9406 	br	10017d4 <___vfprintf_internal_r+0x1258>
 1002184:	01004074 	movhi	r4,257
 1002188:	213cf584 	addi	r4,r4,-3114
 100218c:	d9002b15 	stw	r4,172(sp)
 1002190:	d9002b17 	ldw	r4,172(sp)
 1002194:	1c47883a 	add	r3,r3,r17
 1002198:	10800044 	addi	r2,r2,1
 100219c:	41000015 	stw	r4,0(r8)
 10021a0:	44400115 	stw	r17,4(r8)
 10021a4:	d8c02015 	stw	r3,128(sp)
 10021a8:	d8801f15 	stw	r2,124(sp)
 10021ac:	010001c4 	movi	r4,7
 10021b0:	20bfd716 	blt	r4,r2,1002110 <___vfprintf_internal_r+0x1b94>
 10021b4:	42000204 	addi	r8,r8,8
 10021b8:	003fdd06 	br	1002130 <___vfprintf_internal_r+0x1bb4>
 10021bc:	d9002c17 	ldw	r4,176(sp)
 10021c0:	d9801e04 	addi	r6,sp,120
 10021c4:	b80b883a 	mov	r5,r23
 10021c8:	1007b780 	call	1007b78 <__sprint_r>
 10021cc:	1039ed1e 	bne	r2,zero,1000984 <___vfprintf_internal_r+0x408>
 10021d0:	d8802617 	ldw	r2,152(sp)
 10021d4:	d8c02017 	ldw	r3,128(sp)
 10021d8:	da000404 	addi	r8,sp,16
 10021dc:	003e1006 	br	1001a20 <___vfprintf_internal_r+0x14a4>
 10021e0:	00800044 	movi	r2,1
 10021e4:	10803fcc 	andi	r2,r2,255
 10021e8:	00c00044 	movi	r3,1
 10021ec:	10fa3526 	beq	r2,r3,1000ac4 <___vfprintf_internal_r+0x548>
 10021f0:	00c00084 	movi	r3,2
 10021f4:	10fbcb26 	beq	r2,r3,1001124 <___vfprintf_internal_r+0xba8>
 10021f8:	003a8f06 	br	1000c38 <___vfprintf_internal_r+0x6bc>
 10021fc:	01004074 	movhi	r4,257
 1002200:	213cf984 	addi	r4,r4,-3098
 1002204:	d9003515 	stw	r4,212(sp)
 1002208:	003b7606 	br	1000fe4 <___vfprintf_internal_r+0xa68>
 100220c:	d8802917 	ldw	r2,164(sp)
 1002210:	00c00184 	movi	r3,6
 1002214:	1880012e 	bgeu	r3,r2,100221c <___vfprintf_internal_r+0x1ca0>
 1002218:	1805883a 	mov	r2,r3
 100221c:	d8802e15 	stw	r2,184(sp)
 1002220:	1000ef16 	blt	r2,zero,10025e0 <___vfprintf_internal_r+0x2064>
 1002224:	04004074 	movhi	r16,257
 1002228:	d8802a15 	stw	r2,168(sp)
 100222c:	dcc02d15 	stw	r19,180(sp)
 1002230:	d8002915 	stw	zero,164(sp)
 1002234:	d8003215 	stw	zero,200(sp)
 1002238:	843cf304 	addi	r16,r16,-3124
 100223c:	0039883a 	mov	fp,zero
 1002240:	003aa206 	br	1000ccc <___vfprintf_internal_r+0x750>
 1002244:	0021883a 	mov	r16,zero
 1002248:	003e0706 	br	1001a68 <___vfprintf_internal_r+0x14ec>
 100224c:	d9002c17 	ldw	r4,176(sp)
 1002250:	d9801e04 	addi	r6,sp,120
 1002254:	b80b883a 	mov	r5,r23
 1002258:	1007b780 	call	1007b78 <__sprint_r>
 100225c:	1039c91e 	bne	r2,zero,1000984 <___vfprintf_internal_r+0x408>
 1002260:	d8802617 	ldw	r2,152(sp)
 1002264:	d9403317 	ldw	r5,204(sp)
 1002268:	d8c02017 	ldw	r3,128(sp)
 100226c:	da000404 	addi	r8,sp,16
 1002270:	2885c83a 	sub	r2,r5,r2
 1002274:	003dfb06 	br	1001a64 <___vfprintf_internal_r+0x14e8>
 1002278:	9080004c 	andi	r2,r18,1
 100227c:	103e8f1e 	bne	r2,zero,1001cbc <___vfprintf_internal_r+0x1740>
 1002280:	d8802117 	ldw	r2,132(sp)
 1002284:	003e9e06 	br	1001d00 <___vfprintf_internal_r+0x1784>
 1002288:	1025883a 	mov	r18,r2
 100228c:	0039883a 	mov	fp,zero
 1002290:	00800084 	movi	r2,2
 1002294:	003fd306 	br	10021e4 <___vfprintf_internal_r+0x1c68>
 1002298:	07000b44 	movi	fp,45
 100229c:	df002785 	stb	fp,158(sp)
 10022a0:	003a4006 	br	1000ba4 <___vfprintf_internal_r+0x628>
 10022a4:	00c00b44 	movi	r3,45
 10022a8:	d8c02785 	stb	r3,158(sp)
 10022ac:	d8802a15 	stw	r2,168(sp)
 10022b0:	dc802b17 	ldw	r18,172(sp)
 10022b4:	d8002915 	stw	zero,164(sp)
 10022b8:	07000b44 	movi	fp,45
 10022bc:	003a8006 	br	1000cc0 <___vfprintf_internal_r+0x744>
 10022c0:	04004074 	movhi	r16,257
 10022c4:	843ce804 	addi	r16,r16,-3168
 10022c8:	003f4706 	br	1001fe8 <___vfprintf_internal_r+0x1a6c>
 10022cc:	d8c02d17 	ldw	r3,180(sp)
 10022d0:	d9002f17 	ldw	r4,188(sp)
 10022d4:	18800017 	ldw	r2,0(r3)
 10022d8:	18c00104 	addi	r3,r3,4
 10022dc:	d8c02d15 	stw	r3,180(sp)
 10022e0:	11000015 	stw	r4,0(r2)
 10022e4:	0038dd06 	br	100065c <___vfprintf_internal_r+0xe0>
 10022e8:	dd802617 	ldw	r22,152(sp)
 10022ec:	00bfff44 	movi	r2,-3
 10022f0:	b0801c16 	blt	r22,r2,1002364 <___vfprintf_internal_r+0x1de8>
 10022f4:	d9402917 	ldw	r5,164(sp)
 10022f8:	2d801a16 	blt	r5,r22,1002364 <___vfprintf_internal_r+0x1de8>
 10022fc:	dd803215 	stw	r22,200(sp)
 1002300:	003e8906 	br	1001d28 <___vfprintf_internal_r+0x17ac>
 1002304:	01004074 	movhi	r4,257
 1002308:	213cf584 	addi	r4,r4,-3114
 100230c:	d9002b15 	stw	r4,172(sp)
 1002310:	003c9106 	br	1001558 <___vfprintf_internal_r+0xfdc>
 1002314:	e005883a 	mov	r2,fp
 1002318:	003e7906 	br	1001d00 <___vfprintf_internal_r+0x1784>
 100231c:	d9402917 	ldw	r5,164(sp)
 1002320:	df002783 	ldbu	fp,158(sp)
 1002324:	dcc02d15 	stw	r19,180(sp)
 1002328:	d9402a15 	stw	r5,168(sp)
 100232c:	d9402e15 	stw	r5,184(sp)
 1002330:	d8002915 	stw	zero,164(sp)
 1002334:	d8003215 	stw	zero,200(sp)
 1002338:	003a5d06 	br	1000cb0 <___vfprintf_internal_r+0x734>
 100233c:	9080004c 	andi	r2,r18,1
 1002340:	0039883a 	mov	fp,zero
 1002344:	10000426 	beq	r2,zero,1002358 <___vfprintf_internal_r+0x1ddc>
 1002348:	00800c04 	movi	r2,48
 100234c:	dc001dc4 	addi	r16,sp,119
 1002350:	d8801dc5 	stb	r2,119(sp)
 1002354:	003b8006 	br	1001158 <___vfprintf_internal_r+0xbdc>
 1002358:	d8002e15 	stw	zero,184(sp)
 100235c:	dc001e04 	addi	r16,sp,120
 1002360:	003a4d06 	br	1000c98 <___vfprintf_internal_r+0x71c>
 1002364:	8c7fff84 	addi	r17,r17,-2
 1002368:	b5bfffc4 	addi	r22,r22,-1
 100236c:	dd802615 	stw	r22,152(sp)
 1002370:	dc4022c5 	stb	r17,139(sp)
 1002374:	b000bf16 	blt	r22,zero,1002674 <___vfprintf_internal_r+0x20f8>
 1002378:	00800ac4 	movi	r2,43
 100237c:	d8802305 	stb	r2,140(sp)
 1002380:	00800244 	movi	r2,9
 1002384:	15807016 	blt	r2,r22,1002548 <___vfprintf_internal_r+0x1fcc>
 1002388:	00800c04 	movi	r2,48
 100238c:	b5800c04 	addi	r22,r22,48
 1002390:	d8802345 	stb	r2,141(sp)
 1002394:	dd802385 	stb	r22,142(sp)
 1002398:	d88023c4 	addi	r2,sp,143
 100239c:	df0022c4 	addi	fp,sp,139
 10023a0:	d8c03317 	ldw	r3,204(sp)
 10023a4:	1739c83a 	sub	fp,r2,fp
 10023a8:	d9003317 	ldw	r4,204(sp)
 10023ac:	e0c7883a 	add	r3,fp,r3
 10023b0:	df003a15 	stw	fp,232(sp)
 10023b4:	d8c02e15 	stw	r3,184(sp)
 10023b8:	00800044 	movi	r2,1
 10023bc:	1100b30e 	bge	r2,r4,100268c <___vfprintf_internal_r+0x2110>
 10023c0:	d8c02e17 	ldw	r3,184(sp)
 10023c4:	18c00044 	addi	r3,r3,1
 10023c8:	d8c02e15 	stw	r3,184(sp)
 10023cc:	1805883a 	mov	r2,r3
 10023d0:	1800ac16 	blt	r3,zero,1002684 <___vfprintf_internal_r+0x2108>
 10023d4:	d8003215 	stw	zero,200(sp)
 10023d8:	003e5d06 	br	1001d50 <___vfprintf_internal_r+0x17d4>
 10023dc:	d9002c17 	ldw	r4,176(sp)
 10023e0:	d9801e04 	addi	r6,sp,120
 10023e4:	b80b883a 	mov	r5,r23
 10023e8:	1007b780 	call	1007b78 <__sprint_r>
 10023ec:	1039651e 	bne	r2,zero,1000984 <___vfprintf_internal_r+0x408>
 10023f0:	dc402617 	ldw	r17,152(sp)
 10023f4:	d8c02017 	ldw	r3,128(sp)
 10023f8:	d8801f17 	ldw	r2,124(sp)
 10023fc:	da000404 	addi	r8,sp,16
 1002400:	003ed606 	br	1001f5c <___vfprintf_internal_r+0x19e0>
 1002404:	582b883a 	mov	r21,r11
 1002408:	d8002915 	stw	zero,164(sp)
 100240c:	0038bd06 	br	1000704 <___vfprintf_internal_r+0x188>
 1002410:	d8802917 	ldw	r2,164(sp)
 1002414:	103e071e 	bne	r2,zero,1001c34 <___vfprintf_internal_r+0x16b8>
 1002418:	dc002915 	stw	r16,164(sp)
 100241c:	003e0506 	br	1001c34 <___vfprintf_internal_r+0x16b8>
 1002420:	d9002917 	ldw	r4,164(sp)
 1002424:	20c00044 	addi	r3,r4,1
 1002428:	003e0f06 	br	1001c68 <___vfprintf_internal_r+0x16ec>
 100242c:	01400184 	movi	r5,6
 1002430:	d9402915 	stw	r5,164(sp)
 1002434:	003dff06 	br	1001c34 <___vfprintf_internal_r+0x16b8>
 1002438:	d8802104 	addi	r2,sp,132
 100243c:	d8800315 	stw	r2,12(sp)
 1002440:	d8802504 	addi	r2,sp,148
 1002444:	d8800215 	stw	r2,8(sp)
 1002448:	d8802604 	addi	r2,sp,152
 100244c:	d8800115 	stw	r2,4(sp)
 1002450:	d8802917 	ldw	r2,164(sp)
 1002454:	d9403617 	ldw	r5,216(sp)
 1002458:	d9002c17 	ldw	r4,176(sp)
 100245c:	d8800015 	stw	r2,0(sp)
 1002460:	01c000c4 	movi	r7,3
 1002464:	980d883a 	mov	r6,r19
 1002468:	da003d15 	stw	r8,244(sp)
 100246c:	1002ba00 	call	1002ba0 <_dtoa_r>
 1002470:	d8c02917 	ldw	r3,164(sp)
 1002474:	da003d17 	ldw	r8,244(sp)
 1002478:	1021883a 	mov	r16,r2
 100247c:	10f9883a 	add	fp,r2,r3
 1002480:	81000007 	ldb	r4,0(r16)
 1002484:	00800c04 	movi	r2,48
 1002488:	20805e26 	beq	r4,r2,1002604 <___vfprintf_internal_r+0x2088>
 100248c:	d8c02617 	ldw	r3,152(sp)
 1002490:	e0f9883a 	add	fp,fp,r3
 1002494:	003e0a06 	br	1001cc0 <___vfprintf_internal_r+0x1744>
 1002498:	00c00b44 	movi	r3,45
 100249c:	24e0003c 	xorhi	r19,r4,32768
 10024a0:	d8c02a05 	stb	r3,168(sp)
 10024a4:	003de906 	br	1001c4c <___vfprintf_internal_r+0x16d0>
 10024a8:	d8c03217 	ldw	r3,200(sp)
 10024ac:	00c07a0e 	bge	zero,r3,1002698 <___vfprintf_internal_r+0x211c>
 10024b0:	00800044 	movi	r2,1
 10024b4:	d9003317 	ldw	r4,204(sp)
 10024b8:	1105883a 	add	r2,r2,r4
 10024bc:	d8802e15 	stw	r2,184(sp)
 10024c0:	10004e16 	blt	r2,zero,10025fc <___vfprintf_internal_r+0x2080>
 10024c4:	044019c4 	movi	r17,103
 10024c8:	003e2106 	br	1001d50 <___vfprintf_internal_r+0x17d4>
 10024cc:	d9002917 	ldw	r4,164(sp)
 10024d0:	d8802104 	addi	r2,sp,132
 10024d4:	d8800315 	stw	r2,12(sp)
 10024d8:	d9000015 	stw	r4,0(sp)
 10024dc:	d8802504 	addi	r2,sp,148
 10024e0:	d9403617 	ldw	r5,216(sp)
 10024e4:	d9002c17 	ldw	r4,176(sp)
 10024e8:	d8800215 	stw	r2,8(sp)
 10024ec:	d8802604 	addi	r2,sp,152
 10024f0:	d8800115 	stw	r2,4(sp)
 10024f4:	01c000c4 	movi	r7,3
 10024f8:	980d883a 	mov	r6,r19
 10024fc:	da003d15 	stw	r8,244(sp)
 1002500:	1002ba00 	call	1002ba0 <_dtoa_r>
 1002504:	d8c02917 	ldw	r3,164(sp)
 1002508:	da003d17 	ldw	r8,244(sp)
 100250c:	1021883a 	mov	r16,r2
 1002510:	00801184 	movi	r2,70
 1002514:	80f9883a 	add	fp,r16,r3
 1002518:	88bfd926 	beq	r17,r2,1002480 <___vfprintf_internal_r+0x1f04>
 100251c:	003de806 	br	1001cc0 <___vfprintf_internal_r+0x1744>
 1002520:	d9002917 	ldw	r4,164(sp)
 1002524:	00c04d0e 	bge	zero,r3,100265c <___vfprintf_internal_r+0x20e0>
 1002528:	2000441e 	bne	r4,zero,100263c <___vfprintf_internal_r+0x20c0>
 100252c:	9480004c 	andi	r18,r18,1
 1002530:	9000421e 	bne	r18,zero,100263c <___vfprintf_internal_r+0x20c0>
 1002534:	1805883a 	mov	r2,r3
 1002538:	18007016 	blt	r3,zero,10026fc <___vfprintf_internal_r+0x2180>
 100253c:	d8c03217 	ldw	r3,200(sp)
 1002540:	d8c02e15 	stw	r3,184(sp)
 1002544:	003e0206 	br	1001d50 <___vfprintf_internal_r+0x17d4>
 1002548:	df0022c4 	addi	fp,sp,139
 100254c:	dc002915 	stw	r16,164(sp)
 1002550:	4027883a 	mov	r19,r8
 1002554:	e021883a 	mov	r16,fp
 1002558:	b009883a 	mov	r4,r22
 100255c:	01400284 	movi	r5,10
 1002560:	100a52c0 	call	100a52c <__modsi3>
 1002564:	10800c04 	addi	r2,r2,48
 1002568:	843fffc4 	addi	r16,r16,-1
 100256c:	b009883a 	mov	r4,r22
 1002570:	01400284 	movi	r5,10
 1002574:	80800005 	stb	r2,0(r16)
 1002578:	100a4a80 	call	100a4a8 <__divsi3>
 100257c:	102d883a 	mov	r22,r2
 1002580:	00800244 	movi	r2,9
 1002584:	15bff416 	blt	r2,r22,1002558 <___vfprintf_internal_r+0x1fdc>
 1002588:	9811883a 	mov	r8,r19
 100258c:	b0800c04 	addi	r2,r22,48
 1002590:	8027883a 	mov	r19,r16
 1002594:	997fffc4 	addi	r5,r19,-1
 1002598:	98bfffc5 	stb	r2,-1(r19)
 100259c:	dc002917 	ldw	r16,164(sp)
 10025a0:	2f006a2e 	bgeu	r5,fp,100274c <___vfprintf_internal_r+0x21d0>
 10025a4:	d9c02384 	addi	r7,sp,142
 10025a8:	3ccfc83a 	sub	r7,r7,r19
 10025ac:	d9002344 	addi	r4,sp,141
 10025b0:	e1cf883a 	add	r7,fp,r7
 10025b4:	00000106 	br	10025bc <___vfprintf_internal_r+0x2040>
 10025b8:	28800003 	ldbu	r2,0(r5)
 10025bc:	20800005 	stb	r2,0(r4)
 10025c0:	21000044 	addi	r4,r4,1
 10025c4:	29400044 	addi	r5,r5,1
 10025c8:	393ffb1e 	bne	r7,r4,10025b8 <___vfprintf_internal_r+0x203c>
 10025cc:	d8802304 	addi	r2,sp,140
 10025d0:	14c5c83a 	sub	r2,r2,r19
 10025d4:	d8c02344 	addi	r3,sp,141
 10025d8:	1885883a 	add	r2,r3,r2
 10025dc:	003f7006 	br	10023a0 <___vfprintf_internal_r+0x1e24>
 10025e0:	0005883a 	mov	r2,zero
 10025e4:	003f0f06 	br	1002224 <___vfprintf_internal_r+0x1ca8>
 10025e8:	d8c03217 	ldw	r3,200(sp)
 10025ec:	18c00044 	addi	r3,r3,1
 10025f0:	d8c02e15 	stw	r3,184(sp)
 10025f4:	1805883a 	mov	r2,r3
 10025f8:	183fb20e 	bge	r3,zero,10024c4 <___vfprintf_internal_r+0x1f48>
 10025fc:	0005883a 	mov	r2,zero
 1002600:	003fb006 	br	10024c4 <___vfprintf_internal_r+0x1f48>
 1002604:	d9003617 	ldw	r4,216(sp)
 1002608:	000d883a 	mov	r6,zero
 100260c:	000f883a 	mov	r7,zero
 1002610:	980b883a 	mov	r5,r19
 1002614:	d8c03c15 	stw	r3,240(sp)
 1002618:	da003d15 	stw	r8,244(sp)
 100261c:	100b7f00 	call	100b7f0 <__eqdf2>
 1002620:	d8c03c17 	ldw	r3,240(sp)
 1002624:	da003d17 	ldw	r8,244(sp)
 1002628:	103f9826 	beq	r2,zero,100248c <___vfprintf_internal_r+0x1f10>
 100262c:	00800044 	movi	r2,1
 1002630:	10c7c83a 	sub	r3,r2,r3
 1002634:	d8c02615 	stw	r3,152(sp)
 1002638:	003f9506 	br	1002490 <___vfprintf_internal_r+0x1f14>
 100263c:	d9002917 	ldw	r4,164(sp)
 1002640:	d8c03217 	ldw	r3,200(sp)
 1002644:	20800044 	addi	r2,r4,1
 1002648:	1885883a 	add	r2,r3,r2
 100264c:	d8802e15 	stw	r2,184(sp)
 1002650:	103dbf0e 	bge	r2,zero,1001d50 <___vfprintf_internal_r+0x17d4>
 1002654:	0005883a 	mov	r2,zero
 1002658:	003dbd06 	br	1001d50 <___vfprintf_internal_r+0x17d4>
 100265c:	2000211e 	bne	r4,zero,10026e4 <___vfprintf_internal_r+0x2168>
 1002660:	9480004c 	andi	r18,r18,1
 1002664:	90001f1e 	bne	r18,zero,10026e4 <___vfprintf_internal_r+0x2168>
 1002668:	00800044 	movi	r2,1
 100266c:	d8802e15 	stw	r2,184(sp)
 1002670:	003db706 	br	1001d50 <___vfprintf_internal_r+0x17d4>
 1002674:	00800b44 	movi	r2,45
 1002678:	05adc83a 	sub	r22,zero,r22
 100267c:	d8802305 	stb	r2,140(sp)
 1002680:	003f3f06 	br	1002380 <___vfprintf_internal_r+0x1e04>
 1002684:	0005883a 	mov	r2,zero
 1002688:	003f5206 	br	10023d4 <___vfprintf_internal_r+0x1e58>
 100268c:	90a4703a 	and	r18,r18,r2
 1002690:	903f4e26 	beq	r18,zero,10023cc <___vfprintf_internal_r+0x1e50>
 1002694:	003f4a06 	br	10023c0 <___vfprintf_internal_r+0x1e44>
 1002698:	00800084 	movi	r2,2
 100269c:	10c5c83a 	sub	r2,r2,r3
 10026a0:	003f8406 	br	10024b4 <___vfprintf_internal_r+0x1f38>
 10026a4:	d8802d17 	ldw	r2,180(sp)
 10026a8:	d9002d17 	ldw	r4,180(sp)
 10026ac:	ac400043 	ldbu	r17,1(r21)
 10026b0:	10800017 	ldw	r2,0(r2)
 10026b4:	582b883a 	mov	r21,r11
 10026b8:	d8802915 	stw	r2,164(sp)
 10026bc:	20800104 	addi	r2,r4,4
 10026c0:	d9002917 	ldw	r4,164(sp)
 10026c4:	d8802d15 	stw	r2,180(sp)
 10026c8:	203e7a0e 	bge	r4,zero,10020b4 <___vfprintf_internal_r+0x1b38>
 10026cc:	8c403fcc 	andi	r17,r17,255
 10026d0:	00bfffc4 	movi	r2,-1
 10026d4:	8c40201c 	xori	r17,r17,128
 10026d8:	d8802915 	stw	r2,164(sp)
 10026dc:	8c7fe004 	addi	r17,r17,-128
 10026e0:	00380706 	br	1000700 <___vfprintf_internal_r+0x184>
 10026e4:	d8c02917 	ldw	r3,164(sp)
 10026e8:	18c00084 	addi	r3,r3,2
 10026ec:	d8c02e15 	stw	r3,184(sp)
 10026f0:	1805883a 	mov	r2,r3
 10026f4:	183d960e 	bge	r3,zero,1001d50 <___vfprintf_internal_r+0x17d4>
 10026f8:	003fd606 	br	1002654 <___vfprintf_internal_r+0x20d8>
 10026fc:	0005883a 	mov	r2,zero
 1002700:	003f8e06 	br	100253c <___vfprintf_internal_r+0x1fc0>
 1002704:	9080004c 	andi	r2,r18,1
 1002708:	103f811e 	bne	r2,zero,1002510 <___vfprintf_internal_r+0x1f94>
 100270c:	d8802117 	ldw	r2,132(sp)
 1002710:	1405c83a 	sub	r2,r2,r16
 1002714:	d8803315 	stw	r2,204(sp)
 1002718:	b47ef326 	beq	r22,r17,10022e8 <___vfprintf_internal_r+0x1d6c>
 100271c:	dd802617 	ldw	r22,152(sp)
 1002720:	003f1106 	br	1002368 <___vfprintf_internal_r+0x1dec>
 1002724:	d9c02785 	stb	r7,158(sp)
 1002728:	00390406 	br	1000b3c <___vfprintf_internal_r+0x5c0>
 100272c:	d9c02785 	stb	r7,158(sp)
 1002730:	0038d306 	br	1000a80 <___vfprintf_internal_r+0x504>
 1002734:	d9c02785 	stb	r7,158(sp)
 1002738:	003a6106 	br	10010c0 <___vfprintf_internal_r+0xb44>
 100273c:	d9c02785 	stb	r7,158(sp)
 1002740:	003af806 	br	1001324 <___vfprintf_internal_r+0xda8>
 1002744:	0005883a 	mov	r2,zero
 1002748:	003d7e06 	br	1001d44 <___vfprintf_internal_r+0x17c8>
 100274c:	d8802344 	addi	r2,sp,141
 1002750:	003f1306 	br	10023a0 <___vfprintf_internal_r+0x1e24>
 1002754:	d9c02785 	stb	r7,158(sp)
 1002758:	00392306 	br	1000be8 <___vfprintf_internal_r+0x66c>
 100275c:	d9c02785 	stb	r7,158(sp)
 1002760:	003aa906 	br	1001208 <___vfprintf_internal_r+0xc8c>
 1002764:	d9c02785 	stb	r7,158(sp)
 1002768:	003a3d06 	br	1001060 <___vfprintf_internal_r+0xae4>
 100276c:	d9c02785 	stb	r7,158(sp)
 1002770:	003aca06 	br	100129c <___vfprintf_internal_r+0xd20>

01002774 <__vfprintf_internal>:
 1002774:	00804074 	movhi	r2,257
 1002778:	10844e04 	addi	r2,r2,4408
 100277c:	300f883a 	mov	r7,r6
 1002780:	280d883a 	mov	r6,r5
 1002784:	200b883a 	mov	r5,r4
 1002788:	11000017 	ldw	r4,0(r2)
 100278c:	100057c1 	jmpi	100057c <___vfprintf_internal_r>

01002790 <__sbprintf>:
 1002790:	2880030b 	ldhu	r2,12(r5)
 1002794:	2ac01917 	ldw	r11,100(r5)
 1002798:	2a80038b 	ldhu	r10,14(r5)
 100279c:	2a400717 	ldw	r9,28(r5)
 10027a0:	2a000917 	ldw	r8,36(r5)
 10027a4:	defee204 	addi	sp,sp,-1144
 10027a8:	00c10004 	movi	r3,1024
 10027ac:	dc011a15 	stw	r16,1128(sp)
 10027b0:	10bfff4c 	andi	r2,r2,65533
 10027b4:	2821883a 	mov	r16,r5
 10027b8:	d8cb883a 	add	r5,sp,r3
 10027bc:	dc811c15 	stw	r18,1136(sp)
 10027c0:	dc411b15 	stw	r17,1132(sp)
 10027c4:	dfc11d15 	stw	ra,1140(sp)
 10027c8:	2025883a 	mov	r18,r4
 10027cc:	d881030d 	sth	r2,1036(sp)
 10027d0:	dac11915 	stw	r11,1124(sp)
 10027d4:	da81038d 	sth	r10,1038(sp)
 10027d8:	da410715 	stw	r9,1052(sp)
 10027dc:	da010915 	stw	r8,1060(sp)
 10027e0:	dec10015 	stw	sp,1024(sp)
 10027e4:	dec10415 	stw	sp,1040(sp)
 10027e8:	d8c10215 	stw	r3,1032(sp)
 10027ec:	d8c10515 	stw	r3,1044(sp)
 10027f0:	d8010615 	stw	zero,1048(sp)
 10027f4:	100057c0 	call	100057c <___vfprintf_internal_r>
 10027f8:	1023883a 	mov	r17,r2
 10027fc:	10000416 	blt	r2,zero,1002810 <__sbprintf+0x80>
 1002800:	d9410004 	addi	r5,sp,1024
 1002804:	9009883a 	mov	r4,r18
 1002808:	10044440 	call	1004444 <_fflush_r>
 100280c:	10000d1e 	bne	r2,zero,1002844 <__sbprintf+0xb4>
 1002810:	d881030b 	ldhu	r2,1036(sp)
 1002814:	1080100c 	andi	r2,r2,64
 1002818:	10000326 	beq	r2,zero,1002828 <__sbprintf+0x98>
 100281c:	8080030b 	ldhu	r2,12(r16)
 1002820:	10801014 	ori	r2,r2,64
 1002824:	8080030d 	sth	r2,12(r16)
 1002828:	8805883a 	mov	r2,r17
 100282c:	dfc11d17 	ldw	ra,1140(sp)
 1002830:	dc811c17 	ldw	r18,1136(sp)
 1002834:	dc411b17 	ldw	r17,1132(sp)
 1002838:	dc011a17 	ldw	r16,1128(sp)
 100283c:	dec11e04 	addi	sp,sp,1144
 1002840:	f800283a 	ret
 1002844:	047fffc4 	movi	r17,-1
 1002848:	003ff106 	br	1002810 <__sbprintf+0x80>

0100284c <__swsetup_r>:
 100284c:	00804074 	movhi	r2,257
 1002850:	defffd04 	addi	sp,sp,-12
 1002854:	10844e04 	addi	r2,r2,4408
 1002858:	dc400115 	stw	r17,4(sp)
 100285c:	2023883a 	mov	r17,r4
 1002860:	11000017 	ldw	r4,0(r2)
 1002864:	dc000015 	stw	r16,0(sp)
 1002868:	dfc00215 	stw	ra,8(sp)
 100286c:	2821883a 	mov	r16,r5
 1002870:	20000226 	beq	r4,zero,100287c <__swsetup_r+0x30>
 1002874:	20800e17 	ldw	r2,56(r4)
 1002878:	10003126 	beq	r2,zero,1002940 <__swsetup_r+0xf4>
 100287c:	8080030b 	ldhu	r2,12(r16)
 1002880:	10c0020c 	andi	r3,r2,8
 1002884:	1009883a 	mov	r4,r2
 1002888:	18000f26 	beq	r3,zero,10028c8 <__swsetup_r+0x7c>
 100288c:	80c00417 	ldw	r3,16(r16)
 1002890:	18001526 	beq	r3,zero,10028e8 <__swsetup_r+0x9c>
 1002894:	1100004c 	andi	r4,r2,1
 1002898:	20001c1e 	bne	r4,zero,100290c <__swsetup_r+0xc0>
 100289c:	1080008c 	andi	r2,r2,2
 10028a0:	1000291e 	bne	r2,zero,1002948 <__swsetup_r+0xfc>
 10028a4:	80800517 	ldw	r2,20(r16)
 10028a8:	80800215 	stw	r2,8(r16)
 10028ac:	18001c26 	beq	r3,zero,1002920 <__swsetup_r+0xd4>
 10028b0:	0005883a 	mov	r2,zero
 10028b4:	dfc00217 	ldw	ra,8(sp)
 10028b8:	dc400117 	ldw	r17,4(sp)
 10028bc:	dc000017 	ldw	r16,0(sp)
 10028c0:	dec00304 	addi	sp,sp,12
 10028c4:	f800283a 	ret
 10028c8:	2080040c 	andi	r2,r4,16
 10028cc:	10002e26 	beq	r2,zero,1002988 <__swsetup_r+0x13c>
 10028d0:	2080010c 	andi	r2,r4,4
 10028d4:	10001e1e 	bne	r2,zero,1002950 <__swsetup_r+0x104>
 10028d8:	80c00417 	ldw	r3,16(r16)
 10028dc:	20800214 	ori	r2,r4,8
 10028e0:	8080030d 	sth	r2,12(r16)
 10028e4:	183feb1e 	bne	r3,zero,1002894 <__swsetup_r+0x48>
 10028e8:	1100a00c 	andi	r4,r2,640
 10028ec:	01408004 	movi	r5,512
 10028f0:	217fe826 	beq	r4,r5,1002894 <__swsetup_r+0x48>
 10028f4:	800b883a 	mov	r5,r16
 10028f8:	8809883a 	mov	r4,r17
 10028fc:	10053c40 	call	10053c4 <__smakebuf_r>
 1002900:	8080030b 	ldhu	r2,12(r16)
 1002904:	80c00417 	ldw	r3,16(r16)
 1002908:	003fe206 	br	1002894 <__swsetup_r+0x48>
 100290c:	80800517 	ldw	r2,20(r16)
 1002910:	80000215 	stw	zero,8(r16)
 1002914:	0085c83a 	sub	r2,zero,r2
 1002918:	80800615 	stw	r2,24(r16)
 100291c:	183fe41e 	bne	r3,zero,10028b0 <__swsetup_r+0x64>
 1002920:	80c0030b 	ldhu	r3,12(r16)
 1002924:	0005883a 	mov	r2,zero
 1002928:	1900200c 	andi	r4,r3,128
 100292c:	203fe126 	beq	r4,zero,10028b4 <__swsetup_r+0x68>
 1002930:	18c01014 	ori	r3,r3,64
 1002934:	80c0030d 	sth	r3,12(r16)
 1002938:	00bfffc4 	movi	r2,-1
 100293c:	003fdd06 	br	10028b4 <__swsetup_r+0x68>
 1002940:	10048200 	call	1004820 <__sinit>
 1002944:	003fcd06 	br	100287c <__swsetup_r+0x30>
 1002948:	0005883a 	mov	r2,zero
 100294c:	003fd606 	br	10028a8 <__swsetup_r+0x5c>
 1002950:	81400c17 	ldw	r5,48(r16)
 1002954:	28000626 	beq	r5,zero,1002970 <__swsetup_r+0x124>
 1002958:	80801004 	addi	r2,r16,64
 100295c:	28800326 	beq	r5,r2,100296c <__swsetup_r+0x120>
 1002960:	8809883a 	mov	r4,r17
 1002964:	10049940 	call	1004994 <_free_r>
 1002968:	8100030b 	ldhu	r4,12(r16)
 100296c:	80000c15 	stw	zero,48(r16)
 1002970:	80c00417 	ldw	r3,16(r16)
 1002974:	00bff6c4 	movi	r2,-37
 1002978:	1108703a 	and	r4,r2,r4
 100297c:	80000115 	stw	zero,4(r16)
 1002980:	80c00015 	stw	r3,0(r16)
 1002984:	003fd506 	br	10028dc <__swsetup_r+0x90>
 1002988:	00800244 	movi	r2,9
 100298c:	88800015 	stw	r2,0(r17)
 1002990:	20801014 	ori	r2,r4,64
 1002994:	8080030d 	sth	r2,12(r16)
 1002998:	00bfffc4 	movi	r2,-1
 100299c:	003fc506 	br	10028b4 <__swsetup_r+0x68>

010029a0 <quorem>:
 10029a0:	defff704 	addi	sp,sp,-36
 10029a4:	dc800215 	stw	r18,8(sp)
 10029a8:	20800417 	ldw	r2,16(r4)
 10029ac:	2c800417 	ldw	r18,16(r5)
 10029b0:	dfc00815 	stw	ra,32(sp)
 10029b4:	ddc00715 	stw	r23,28(sp)
 10029b8:	dd800615 	stw	r22,24(sp)
 10029bc:	dd400515 	stw	r21,20(sp)
 10029c0:	dd000415 	stw	r20,16(sp)
 10029c4:	dcc00315 	stw	r19,12(sp)
 10029c8:	dc400115 	stw	r17,4(sp)
 10029cc:	dc000015 	stw	r16,0(sp)
 10029d0:	14807116 	blt	r2,r18,1002b98 <quorem+0x1f8>
 10029d4:	94bfffc4 	addi	r18,r18,-1
 10029d8:	94ad883a 	add	r22,r18,r18
 10029dc:	b5ad883a 	add	r22,r22,r22
 10029e0:	2c400504 	addi	r17,r5,20
 10029e4:	8da9883a 	add	r20,r17,r22
 10029e8:	25400504 	addi	r21,r4,20
 10029ec:	282f883a 	mov	r23,r5
 10029f0:	adad883a 	add	r22,r21,r22
 10029f4:	a1400017 	ldw	r5,0(r20)
 10029f8:	2021883a 	mov	r16,r4
 10029fc:	b1000017 	ldw	r4,0(r22)
 1002a00:	29400044 	addi	r5,r5,1
 1002a04:	100a5a00 	call	100a5a0 <__udivsi3>
 1002a08:	1027883a 	mov	r19,r2
 1002a0c:	10002c26 	beq	r2,zero,1002ac0 <quorem+0x120>
 1002a10:	a813883a 	mov	r9,r21
 1002a14:	880b883a 	mov	r5,r17
 1002a18:	0009883a 	mov	r4,zero
 1002a1c:	000d883a 	mov	r6,zero
 1002a20:	2a000017 	ldw	r8,0(r5)
 1002a24:	49c00017 	ldw	r7,0(r9)
 1002a28:	29400104 	addi	r5,r5,4
 1002a2c:	40bfffcc 	andi	r2,r8,65535
 1002a30:	14c5383a 	mul	r2,r2,r19
 1002a34:	4010d43a 	srli	r8,r8,16
 1002a38:	38ffffcc 	andi	r3,r7,65535
 1002a3c:	1105883a 	add	r2,r2,r4
 1002a40:	1008d43a 	srli	r4,r2,16
 1002a44:	44d1383a 	mul	r8,r8,r19
 1002a48:	198d883a 	add	r6,r3,r6
 1002a4c:	10ffffcc 	andi	r3,r2,65535
 1002a50:	30c7c83a 	sub	r3,r6,r3
 1002a54:	380ed43a 	srli	r7,r7,16
 1002a58:	4105883a 	add	r2,r8,r4
 1002a5c:	180dd43a 	srai	r6,r3,16
 1002a60:	113fffcc 	andi	r4,r2,65535
 1002a64:	390fc83a 	sub	r7,r7,r4
 1002a68:	398d883a 	add	r6,r7,r6
 1002a6c:	300e943a 	slli	r7,r6,16
 1002a70:	18ffffcc 	andi	r3,r3,65535
 1002a74:	1008d43a 	srli	r4,r2,16
 1002a78:	38ceb03a 	or	r7,r7,r3
 1002a7c:	49c00015 	stw	r7,0(r9)
 1002a80:	300dd43a 	srai	r6,r6,16
 1002a84:	4a400104 	addi	r9,r9,4
 1002a88:	a17fe52e 	bgeu	r20,r5,1002a20 <quorem+0x80>
 1002a8c:	b0800017 	ldw	r2,0(r22)
 1002a90:	10000b1e 	bne	r2,zero,1002ac0 <quorem+0x120>
 1002a94:	b0bfff04 	addi	r2,r22,-4
 1002a98:	a880082e 	bgeu	r21,r2,1002abc <quorem+0x11c>
 1002a9c:	b0ffff17 	ldw	r3,-4(r22)
 1002aa0:	18000326 	beq	r3,zero,1002ab0 <quorem+0x110>
 1002aa4:	00000506 	br	1002abc <quorem+0x11c>
 1002aa8:	10c00017 	ldw	r3,0(r2)
 1002aac:	1800031e 	bne	r3,zero,1002abc <quorem+0x11c>
 1002ab0:	10bfff04 	addi	r2,r2,-4
 1002ab4:	94bfffc4 	addi	r18,r18,-1
 1002ab8:	a8bffb36 	bltu	r21,r2,1002aa8 <quorem+0x108>
 1002abc:	84800415 	stw	r18,16(r16)
 1002ac0:	b80b883a 	mov	r5,r23
 1002ac4:	8009883a 	mov	r4,r16
 1002ac8:	1006b040 	call	1006b04 <__mcmp>
 1002acc:	10002616 	blt	r2,zero,1002b68 <quorem+0x1c8>
 1002ad0:	9cc00044 	addi	r19,r19,1
 1002ad4:	a805883a 	mov	r2,r21
 1002ad8:	000b883a 	mov	r5,zero
 1002adc:	11000017 	ldw	r4,0(r2)
 1002ae0:	89800017 	ldw	r6,0(r17)
 1002ae4:	10800104 	addi	r2,r2,4
 1002ae8:	20ffffcc 	andi	r3,r4,65535
 1002aec:	194b883a 	add	r5,r3,r5
 1002af0:	30ffffcc 	andi	r3,r6,65535
 1002af4:	28c7c83a 	sub	r3,r5,r3
 1002af8:	300cd43a 	srli	r6,r6,16
 1002afc:	2008d43a 	srli	r4,r4,16
 1002b00:	180bd43a 	srai	r5,r3,16
 1002b04:	18ffffcc 	andi	r3,r3,65535
 1002b08:	2189c83a 	sub	r4,r4,r6
 1002b0c:	2149883a 	add	r4,r4,r5
 1002b10:	200c943a 	slli	r6,r4,16
 1002b14:	8c400104 	addi	r17,r17,4
 1002b18:	200bd43a 	srai	r5,r4,16
 1002b1c:	30c6b03a 	or	r3,r6,r3
 1002b20:	10ffff15 	stw	r3,-4(r2)
 1002b24:	a47fed2e 	bgeu	r20,r17,1002adc <quorem+0x13c>
 1002b28:	9485883a 	add	r2,r18,r18
 1002b2c:	1085883a 	add	r2,r2,r2
 1002b30:	a887883a 	add	r3,r21,r2
 1002b34:	18800017 	ldw	r2,0(r3)
 1002b38:	10000b1e 	bne	r2,zero,1002b68 <quorem+0x1c8>
 1002b3c:	18bfff04 	addi	r2,r3,-4
 1002b40:	a880082e 	bgeu	r21,r2,1002b64 <quorem+0x1c4>
 1002b44:	18ffff17 	ldw	r3,-4(r3)
 1002b48:	18000326 	beq	r3,zero,1002b58 <quorem+0x1b8>
 1002b4c:	00000506 	br	1002b64 <quorem+0x1c4>
 1002b50:	10c00017 	ldw	r3,0(r2)
 1002b54:	1800031e 	bne	r3,zero,1002b64 <quorem+0x1c4>
 1002b58:	10bfff04 	addi	r2,r2,-4
 1002b5c:	94bfffc4 	addi	r18,r18,-1
 1002b60:	a8bffb36 	bltu	r21,r2,1002b50 <quorem+0x1b0>
 1002b64:	84800415 	stw	r18,16(r16)
 1002b68:	9805883a 	mov	r2,r19
 1002b6c:	dfc00817 	ldw	ra,32(sp)
 1002b70:	ddc00717 	ldw	r23,28(sp)
 1002b74:	dd800617 	ldw	r22,24(sp)
 1002b78:	dd400517 	ldw	r21,20(sp)
 1002b7c:	dd000417 	ldw	r20,16(sp)
 1002b80:	dcc00317 	ldw	r19,12(sp)
 1002b84:	dc800217 	ldw	r18,8(sp)
 1002b88:	dc400117 	ldw	r17,4(sp)
 1002b8c:	dc000017 	ldw	r16,0(sp)
 1002b90:	dec00904 	addi	sp,sp,36
 1002b94:	f800283a 	ret
 1002b98:	0005883a 	mov	r2,zero
 1002b9c:	003ff306 	br	1002b6c <quorem+0x1cc>

01002ba0 <_dtoa_r>:
 1002ba0:	20801017 	ldw	r2,64(r4)
 1002ba4:	deffde04 	addi	sp,sp,-136
 1002ba8:	df002015 	stw	fp,128(sp)
 1002bac:	dcc01b15 	stw	r19,108(sp)
 1002bb0:	dc801a15 	stw	r18,104(sp)
 1002bb4:	dc401915 	stw	r17,100(sp)
 1002bb8:	dc001815 	stw	r16,96(sp)
 1002bbc:	dfc02115 	stw	ra,132(sp)
 1002bc0:	ddc01f15 	stw	r23,124(sp)
 1002bc4:	dd801e15 	stw	r22,120(sp)
 1002bc8:	dd401d15 	stw	r21,116(sp)
 1002bcc:	dd001c15 	stw	r20,112(sp)
 1002bd0:	d9c00315 	stw	r7,12(sp)
 1002bd4:	2039883a 	mov	fp,r4
 1002bd8:	3023883a 	mov	r17,r6
 1002bdc:	2825883a 	mov	r18,r5
 1002be0:	dc002417 	ldw	r16,144(sp)
 1002be4:	3027883a 	mov	r19,r6
 1002be8:	10000826 	beq	r2,zero,1002c0c <_dtoa_r+0x6c>
 1002bec:	21801117 	ldw	r6,68(r4)
 1002bf0:	00c00044 	movi	r3,1
 1002bf4:	100b883a 	mov	r5,r2
 1002bf8:	1986983a 	sll	r3,r3,r6
 1002bfc:	11800115 	stw	r6,4(r2)
 1002c00:	10c00215 	stw	r3,8(r2)
 1002c04:	10062e40 	call	10062e4 <_Bfree>
 1002c08:	e0001015 	stw	zero,64(fp)
 1002c0c:	88002e16 	blt	r17,zero,1002cc8 <_dtoa_r+0x128>
 1002c10:	80000015 	stw	zero,0(r16)
 1002c14:	889ffc2c 	andhi	r2,r17,32752
 1002c18:	00dffc34 	movhi	r3,32752
 1002c1c:	10c01c26 	beq	r2,r3,1002c90 <_dtoa_r+0xf0>
 1002c20:	000d883a 	mov	r6,zero
 1002c24:	000f883a 	mov	r7,zero
 1002c28:	9009883a 	mov	r4,r18
 1002c2c:	980b883a 	mov	r5,r19
 1002c30:	100b7f00 	call	100b7f0 <__eqdf2>
 1002c34:	10002b1e 	bne	r2,zero,1002ce4 <_dtoa_r+0x144>
 1002c38:	d9c02317 	ldw	r7,140(sp)
 1002c3c:	00800044 	movi	r2,1
 1002c40:	38800015 	stw	r2,0(r7)
 1002c44:	d8802517 	ldw	r2,148(sp)
 1002c48:	10019e26 	beq	r2,zero,10032c4 <_dtoa_r+0x724>
 1002c4c:	d8c02517 	ldw	r3,148(sp)
 1002c50:	00804074 	movhi	r2,257
 1002c54:	10bcf544 	addi	r2,r2,-3115
 1002c58:	18800015 	stw	r2,0(r3)
 1002c5c:	10bfffc4 	addi	r2,r2,-1
 1002c60:	dfc02117 	ldw	ra,132(sp)
 1002c64:	df002017 	ldw	fp,128(sp)
 1002c68:	ddc01f17 	ldw	r23,124(sp)
 1002c6c:	dd801e17 	ldw	r22,120(sp)
 1002c70:	dd401d17 	ldw	r21,116(sp)
 1002c74:	dd001c17 	ldw	r20,112(sp)
 1002c78:	dcc01b17 	ldw	r19,108(sp)
 1002c7c:	dc801a17 	ldw	r18,104(sp)
 1002c80:	dc401917 	ldw	r17,100(sp)
 1002c84:	dc001817 	ldw	r16,96(sp)
 1002c88:	dec02204 	addi	sp,sp,136
 1002c8c:	f800283a 	ret
 1002c90:	d8c02317 	ldw	r3,140(sp)
 1002c94:	0089c3c4 	movi	r2,9999
 1002c98:	18800015 	stw	r2,0(r3)
 1002c9c:	90017726 	beq	r18,zero,100327c <_dtoa_r+0x6dc>
 1002ca0:	00804074 	movhi	r2,257
 1002ca4:	10bd0104 	addi	r2,r2,-3068
 1002ca8:	d9002517 	ldw	r4,148(sp)
 1002cac:	203fec26 	beq	r4,zero,1002c60 <_dtoa_r+0xc0>
 1002cb0:	10c000c7 	ldb	r3,3(r2)
 1002cb4:	1801781e 	bne	r3,zero,1003298 <_dtoa_r+0x6f8>
 1002cb8:	10c000c4 	addi	r3,r2,3
 1002cbc:	d9802517 	ldw	r6,148(sp)
 1002cc0:	30c00015 	stw	r3,0(r6)
 1002cc4:	003fe606 	br	1002c60 <_dtoa_r+0xc0>
 1002cc8:	04e00034 	movhi	r19,32768
 1002ccc:	9cffffc4 	addi	r19,r19,-1
 1002cd0:	00800044 	movi	r2,1
 1002cd4:	8ce6703a 	and	r19,r17,r19
 1002cd8:	80800015 	stw	r2,0(r16)
 1002cdc:	9823883a 	mov	r17,r19
 1002ce0:	003fcc06 	br	1002c14 <_dtoa_r+0x74>
 1002ce4:	d8800204 	addi	r2,sp,8
 1002ce8:	d8800015 	stw	r2,0(sp)
 1002cec:	d9c00104 	addi	r7,sp,4
 1002cf0:	900b883a 	mov	r5,r18
 1002cf4:	980d883a 	mov	r6,r19
 1002cf8:	e009883a 	mov	r4,fp
 1002cfc:	8820d53a 	srli	r16,r17,20
 1002d00:	1006ed00 	call	1006ed0 <__d2b>
 1002d04:	d8800915 	stw	r2,36(sp)
 1002d08:	8001651e 	bne	r16,zero,10032a0 <_dtoa_r+0x700>
 1002d0c:	dd800217 	ldw	r22,8(sp)
 1002d10:	dc000117 	ldw	r16,4(sp)
 1002d14:	00800804 	movi	r2,32
 1002d18:	b421883a 	add	r16,r22,r16
 1002d1c:	80c10c84 	addi	r3,r16,1074
 1002d20:	10c2d10e 	bge	r2,r3,1003868 <_dtoa_r+0xcc8>
 1002d24:	00801004 	movi	r2,64
 1002d28:	81010484 	addi	r4,r16,1042
 1002d2c:	10c7c83a 	sub	r3,r2,r3
 1002d30:	9108d83a 	srl	r4,r18,r4
 1002d34:	88e2983a 	sll	r17,r17,r3
 1002d38:	2448b03a 	or	r4,r4,r17
 1002d3c:	100cbb80 	call	100cbb8 <__floatunsidf>
 1002d40:	017f8434 	movhi	r5,65040
 1002d44:	01800044 	movi	r6,1
 1002d48:	1009883a 	mov	r4,r2
 1002d4c:	194b883a 	add	r5,r3,r5
 1002d50:	843fffc4 	addi	r16,r16,-1
 1002d54:	d9801115 	stw	r6,68(sp)
 1002d58:	000d883a 	mov	r6,zero
 1002d5c:	01cffe34 	movhi	r7,16376
 1002d60:	100c1600 	call	100c160 <__subdf3>
 1002d64:	0198dbf4 	movhi	r6,25455
 1002d68:	01cff4f4 	movhi	r7,16339
 1002d6c:	3190d844 	addi	r6,r6,17249
 1002d70:	39e1e9c4 	addi	r7,r7,-30809
 1002d74:	1009883a 	mov	r4,r2
 1002d78:	180b883a 	mov	r5,r3
 1002d7c:	100ba480 	call	100ba48 <__muldf3>
 1002d80:	01a2d874 	movhi	r6,35681
 1002d84:	01cff1f4 	movhi	r7,16327
 1002d88:	31b22cc4 	addi	r6,r6,-14157
 1002d8c:	39e28a04 	addi	r7,r7,-30168
 1002d90:	180b883a 	mov	r5,r3
 1002d94:	1009883a 	mov	r4,r2
 1002d98:	100a65c0 	call	100a65c <__adddf3>
 1002d9c:	8009883a 	mov	r4,r16
 1002da0:	1029883a 	mov	r20,r2
 1002da4:	1823883a 	mov	r17,r3
 1002da8:	100cadc0 	call	100cadc <__floatsidf>
 1002dac:	019427f4 	movhi	r6,20639
 1002db0:	01cff4f4 	movhi	r7,16339
 1002db4:	319e7ec4 	addi	r6,r6,31227
 1002db8:	39d104c4 	addi	r7,r7,17427
 1002dbc:	1009883a 	mov	r4,r2
 1002dc0:	180b883a 	mov	r5,r3
 1002dc4:	100ba480 	call	100ba48 <__muldf3>
 1002dc8:	100d883a 	mov	r6,r2
 1002dcc:	180f883a 	mov	r7,r3
 1002dd0:	a009883a 	mov	r4,r20
 1002dd4:	880b883a 	mov	r5,r17
 1002dd8:	100a65c0 	call	100a65c <__adddf3>
 1002ddc:	1009883a 	mov	r4,r2
 1002de0:	180b883a 	mov	r5,r3
 1002de4:	1029883a 	mov	r20,r2
 1002de8:	1823883a 	mov	r17,r3
 1002dec:	100ca5c0 	call	100ca5c <__fixdfsi>
 1002df0:	000d883a 	mov	r6,zero
 1002df4:	000f883a 	mov	r7,zero
 1002df8:	a009883a 	mov	r4,r20
 1002dfc:	880b883a 	mov	r5,r17
 1002e00:	d8800515 	stw	r2,20(sp)
 1002e04:	100b9540 	call	100b954 <__ledf2>
 1002e08:	10028716 	blt	r2,zero,1003828 <_dtoa_r+0xc88>
 1002e0c:	d8c00517 	ldw	r3,20(sp)
 1002e10:	00800584 	movi	r2,22
 1002e14:	10c27536 	bltu	r2,r3,10037ec <_dtoa_r+0xc4c>
 1002e18:	180490fa 	slli	r2,r3,3
 1002e1c:	00c04074 	movhi	r3,257
 1002e20:	18fd1d04 	addi	r3,r3,-2956
 1002e24:	1885883a 	add	r2,r3,r2
 1002e28:	11000017 	ldw	r4,0(r2)
 1002e2c:	11400117 	ldw	r5,4(r2)
 1002e30:	900d883a 	mov	r6,r18
 1002e34:	980f883a 	mov	r7,r19
 1002e38:	100b8780 	call	100b878 <__gedf2>
 1002e3c:	00828d0e 	bge	zero,r2,1003874 <_dtoa_r+0xcd4>
 1002e40:	d9000517 	ldw	r4,20(sp)
 1002e44:	d8000e15 	stw	zero,56(sp)
 1002e48:	213fffc4 	addi	r4,r4,-1
 1002e4c:	d9000515 	stw	r4,20(sp)
 1002e50:	b42dc83a 	sub	r22,r22,r16
 1002e54:	b5bfffc4 	addi	r22,r22,-1
 1002e58:	b0026f16 	blt	r22,zero,1003818 <_dtoa_r+0xc78>
 1002e5c:	d8000815 	stw	zero,32(sp)
 1002e60:	d9c00517 	ldw	r7,20(sp)
 1002e64:	38026416 	blt	r7,zero,10037f8 <_dtoa_r+0xc58>
 1002e68:	b1ed883a 	add	r22,r22,r7
 1002e6c:	d9c00d15 	stw	r7,52(sp)
 1002e70:	d8000a15 	stw	zero,40(sp)
 1002e74:	d9800317 	ldw	r6,12(sp)
 1002e78:	00800244 	movi	r2,9
 1002e7c:	11811436 	bltu	r2,r6,10032d0 <_dtoa_r+0x730>
 1002e80:	00800144 	movi	r2,5
 1002e84:	1184e10e 	bge	r2,r6,100420c <_dtoa_r+0x166c>
 1002e88:	31bfff04 	addi	r6,r6,-4
 1002e8c:	d9800315 	stw	r6,12(sp)
 1002e90:	0023883a 	mov	r17,zero
 1002e94:	d9800317 	ldw	r6,12(sp)
 1002e98:	008000c4 	movi	r2,3
 1002e9c:	30836726 	beq	r6,r2,1003c3c <_dtoa_r+0x109c>
 1002ea0:	1183410e 	bge	r2,r6,1003ba8 <_dtoa_r+0x1008>
 1002ea4:	d9c00317 	ldw	r7,12(sp)
 1002ea8:	00800104 	movi	r2,4
 1002eac:	38827c26 	beq	r7,r2,10038a0 <_dtoa_r+0xd00>
 1002eb0:	00800144 	movi	r2,5
 1002eb4:	3884c41e 	bne	r7,r2,10041c8 <_dtoa_r+0x1628>
 1002eb8:	00800044 	movi	r2,1
 1002ebc:	d8800b15 	stw	r2,44(sp)
 1002ec0:	d8c00517 	ldw	r3,20(sp)
 1002ec4:	d9002217 	ldw	r4,136(sp)
 1002ec8:	1907883a 	add	r3,r3,r4
 1002ecc:	19800044 	addi	r6,r3,1
 1002ed0:	d8c00c15 	stw	r3,48(sp)
 1002ed4:	d9800615 	stw	r6,24(sp)
 1002ed8:	0183a40e 	bge	zero,r6,1003d6c <_dtoa_r+0x11cc>
 1002edc:	d9800617 	ldw	r6,24(sp)
 1002ee0:	3021883a 	mov	r16,r6
 1002ee4:	e0001115 	stw	zero,68(fp)
 1002ee8:	008005c4 	movi	r2,23
 1002eec:	1184c92e 	bgeu	r2,r6,1004214 <_dtoa_r+0x1674>
 1002ef0:	00c00044 	movi	r3,1
 1002ef4:	00800104 	movi	r2,4
 1002ef8:	1085883a 	add	r2,r2,r2
 1002efc:	11000504 	addi	r4,r2,20
 1002f00:	180b883a 	mov	r5,r3
 1002f04:	18c00044 	addi	r3,r3,1
 1002f08:	313ffb2e 	bgeu	r6,r4,1002ef8 <_dtoa_r+0x358>
 1002f0c:	e1401115 	stw	r5,68(fp)
 1002f10:	e009883a 	mov	r4,fp
 1002f14:	100623c0 	call	100623c <_Balloc>
 1002f18:	d8800715 	stw	r2,28(sp)
 1002f1c:	e0801015 	stw	r2,64(fp)
 1002f20:	00800384 	movi	r2,14
 1002f24:	1400f736 	bltu	r2,r16,1003304 <_dtoa_r+0x764>
 1002f28:	8800f626 	beq	r17,zero,1003304 <_dtoa_r+0x764>
 1002f2c:	d9c00517 	ldw	r7,20(sp)
 1002f30:	01c39a0e 	bge	zero,r7,1003d9c <_dtoa_r+0x11fc>
 1002f34:	388003cc 	andi	r2,r7,15
 1002f38:	100490fa 	slli	r2,r2,3
 1002f3c:	382bd13a 	srai	r21,r7,4
 1002f40:	00c04074 	movhi	r3,257
 1002f44:	18fd1d04 	addi	r3,r3,-2956
 1002f48:	1885883a 	add	r2,r3,r2
 1002f4c:	a8c0040c 	andi	r3,r21,16
 1002f50:	12400017 	ldw	r9,0(r2)
 1002f54:	12000117 	ldw	r8,4(r2)
 1002f58:	18037926 	beq	r3,zero,1003d40 <_dtoa_r+0x11a0>
 1002f5c:	00804074 	movhi	r2,257
 1002f60:	10bd1304 	addi	r2,r2,-2996
 1002f64:	11800817 	ldw	r6,32(r2)
 1002f68:	11c00917 	ldw	r7,36(r2)
 1002f6c:	9009883a 	mov	r4,r18
 1002f70:	980b883a 	mov	r5,r19
 1002f74:	da001715 	stw	r8,92(sp)
 1002f78:	da401615 	stw	r9,88(sp)
 1002f7c:	100af080 	call	100af08 <__divdf3>
 1002f80:	da001717 	ldw	r8,92(sp)
 1002f84:	da401617 	ldw	r9,88(sp)
 1002f88:	ad4003cc 	andi	r21,r21,15
 1002f8c:	040000c4 	movi	r16,3
 1002f90:	1023883a 	mov	r17,r2
 1002f94:	1829883a 	mov	r20,r3
 1002f98:	a8001126 	beq	r21,zero,1002fe0 <_dtoa_r+0x440>
 1002f9c:	05c04074 	movhi	r23,257
 1002fa0:	bdfd1304 	addi	r23,r23,-2996
 1002fa4:	4805883a 	mov	r2,r9
 1002fa8:	4007883a 	mov	r3,r8
 1002fac:	a980004c 	andi	r6,r21,1
 1002fb0:	1009883a 	mov	r4,r2
 1002fb4:	a82bd07a 	srai	r21,r21,1
 1002fb8:	180b883a 	mov	r5,r3
 1002fbc:	30000426 	beq	r6,zero,1002fd0 <_dtoa_r+0x430>
 1002fc0:	b9800017 	ldw	r6,0(r23)
 1002fc4:	b9c00117 	ldw	r7,4(r23)
 1002fc8:	84000044 	addi	r16,r16,1
 1002fcc:	100ba480 	call	100ba48 <__muldf3>
 1002fd0:	bdc00204 	addi	r23,r23,8
 1002fd4:	a83ff51e 	bne	r21,zero,1002fac <_dtoa_r+0x40c>
 1002fd8:	1013883a 	mov	r9,r2
 1002fdc:	1811883a 	mov	r8,r3
 1002fe0:	480d883a 	mov	r6,r9
 1002fe4:	400f883a 	mov	r7,r8
 1002fe8:	8809883a 	mov	r4,r17
 1002fec:	a00b883a 	mov	r5,r20
 1002ff0:	100af080 	call	100af08 <__divdf3>
 1002ff4:	d8800f15 	stw	r2,60(sp)
 1002ff8:	d8c01015 	stw	r3,64(sp)
 1002ffc:	d8c00e17 	ldw	r3,56(sp)
 1003000:	18000626 	beq	r3,zero,100301c <_dtoa_r+0x47c>
 1003004:	d9000f17 	ldw	r4,60(sp)
 1003008:	d9401017 	ldw	r5,64(sp)
 100300c:	000d883a 	mov	r6,zero
 1003010:	01cffc34 	movhi	r7,16368
 1003014:	100b9540 	call	100b954 <__ledf2>
 1003018:	10040b16 	blt	r2,zero,1004048 <_dtoa_r+0x14a8>
 100301c:	8009883a 	mov	r4,r16
 1003020:	100cadc0 	call	100cadc <__floatsidf>
 1003024:	d9800f17 	ldw	r6,60(sp)
 1003028:	d9c01017 	ldw	r7,64(sp)
 100302c:	1009883a 	mov	r4,r2
 1003030:	180b883a 	mov	r5,r3
 1003034:	100ba480 	call	100ba48 <__muldf3>
 1003038:	000d883a 	mov	r6,zero
 100303c:	01d00734 	movhi	r7,16412
 1003040:	1009883a 	mov	r4,r2
 1003044:	180b883a 	mov	r5,r3
 1003048:	100a65c0 	call	100a65c <__adddf3>
 100304c:	1021883a 	mov	r16,r2
 1003050:	d8800617 	ldw	r2,24(sp)
 1003054:	047f3034 	movhi	r17,64704
 1003058:	1c63883a 	add	r17,r3,r17
 100305c:	10031826 	beq	r2,zero,1003cc0 <_dtoa_r+0x1120>
 1003060:	d8c00517 	ldw	r3,20(sp)
 1003064:	db000617 	ldw	r12,24(sp)
 1003068:	d8c01315 	stw	r3,76(sp)
 100306c:	d9000b17 	ldw	r4,44(sp)
 1003070:	20038f26 	beq	r4,zero,1003eb0 <_dtoa_r+0x1310>
 1003074:	60bfffc4 	addi	r2,r12,-1
 1003078:	100490fa 	slli	r2,r2,3
 100307c:	00c04074 	movhi	r3,257
 1003080:	18fd1d04 	addi	r3,r3,-2956
 1003084:	1885883a 	add	r2,r3,r2
 1003088:	11800017 	ldw	r6,0(r2)
 100308c:	11c00117 	ldw	r7,4(r2)
 1003090:	d8800717 	ldw	r2,28(sp)
 1003094:	0009883a 	mov	r4,zero
 1003098:	014ff834 	movhi	r5,16352
 100309c:	db001615 	stw	r12,88(sp)
 10030a0:	15c00044 	addi	r23,r2,1
 10030a4:	100af080 	call	100af08 <__divdf3>
 10030a8:	800d883a 	mov	r6,r16
 10030ac:	880f883a 	mov	r7,r17
 10030b0:	1009883a 	mov	r4,r2
 10030b4:	180b883a 	mov	r5,r3
 10030b8:	100c1600 	call	100c160 <__subdf3>
 10030bc:	d9401017 	ldw	r5,64(sp)
 10030c0:	d9000f17 	ldw	r4,60(sp)
 10030c4:	102b883a 	mov	r21,r2
 10030c8:	d8c01215 	stw	r3,72(sp)
 10030cc:	100ca5c0 	call	100ca5c <__fixdfsi>
 10030d0:	1009883a 	mov	r4,r2
 10030d4:	1029883a 	mov	r20,r2
 10030d8:	100cadc0 	call	100cadc <__floatsidf>
 10030dc:	d9000f17 	ldw	r4,60(sp)
 10030e0:	d9401017 	ldw	r5,64(sp)
 10030e4:	100d883a 	mov	r6,r2
 10030e8:	180f883a 	mov	r7,r3
 10030ec:	100c1600 	call	100c160 <__subdf3>
 10030f0:	1823883a 	mov	r17,r3
 10030f4:	d8c00717 	ldw	r3,28(sp)
 10030f8:	d9401217 	ldw	r5,72(sp)
 10030fc:	a2000c04 	addi	r8,r20,48
 1003100:	1021883a 	mov	r16,r2
 1003104:	1a000005 	stb	r8,0(r3)
 1003108:	800d883a 	mov	r6,r16
 100310c:	880f883a 	mov	r7,r17
 1003110:	a809883a 	mov	r4,r21
 1003114:	4029883a 	mov	r20,r8
 1003118:	100b8780 	call	100b878 <__gedf2>
 100311c:	00841d16 	blt	zero,r2,1004194 <_dtoa_r+0x15f4>
 1003120:	800d883a 	mov	r6,r16
 1003124:	880f883a 	mov	r7,r17
 1003128:	0009883a 	mov	r4,zero
 100312c:	014ffc34 	movhi	r5,16368
 1003130:	100c1600 	call	100c160 <__subdf3>
 1003134:	d9401217 	ldw	r5,72(sp)
 1003138:	100d883a 	mov	r6,r2
 100313c:	180f883a 	mov	r7,r3
 1003140:	a809883a 	mov	r4,r21
 1003144:	100b8780 	call	100b878 <__gedf2>
 1003148:	db001617 	ldw	r12,88(sp)
 100314c:	00840e16 	blt	zero,r2,1004188 <_dtoa_r+0x15e8>
 1003150:	00800044 	movi	r2,1
 1003154:	13006b0e 	bge	r2,r12,1003304 <_dtoa_r+0x764>
 1003158:	d9000717 	ldw	r4,28(sp)
 100315c:	dd800f15 	stw	r22,60(sp)
 1003160:	dcc01015 	stw	r19,64(sp)
 1003164:	2319883a 	add	r12,r4,r12
 1003168:	dcc01217 	ldw	r19,72(sp)
 100316c:	602d883a 	mov	r22,r12
 1003170:	dc801215 	stw	r18,72(sp)
 1003174:	b825883a 	mov	r18,r23
 1003178:	00000906 	br	10031a0 <_dtoa_r+0x600>
 100317c:	100c1600 	call	100c160 <__subdf3>
 1003180:	a80d883a 	mov	r6,r21
 1003184:	980f883a 	mov	r7,r19
 1003188:	1009883a 	mov	r4,r2
 100318c:	180b883a 	mov	r5,r3
 1003190:	100b9540 	call	100b954 <__ledf2>
 1003194:	1003e816 	blt	r2,zero,1004138 <_dtoa_r+0x1598>
 1003198:	b825883a 	mov	r18,r23
 100319c:	bd83e926 	beq	r23,r22,1004144 <_dtoa_r+0x15a4>
 10031a0:	a809883a 	mov	r4,r21
 10031a4:	980b883a 	mov	r5,r19
 10031a8:	000d883a 	mov	r6,zero
 10031ac:	01d00934 	movhi	r7,16420
 10031b0:	100ba480 	call	100ba48 <__muldf3>
 10031b4:	000d883a 	mov	r6,zero
 10031b8:	01d00934 	movhi	r7,16420
 10031bc:	8009883a 	mov	r4,r16
 10031c0:	880b883a 	mov	r5,r17
 10031c4:	102b883a 	mov	r21,r2
 10031c8:	1827883a 	mov	r19,r3
 10031cc:	100ba480 	call	100ba48 <__muldf3>
 10031d0:	180b883a 	mov	r5,r3
 10031d4:	1009883a 	mov	r4,r2
 10031d8:	1821883a 	mov	r16,r3
 10031dc:	1023883a 	mov	r17,r2
 10031e0:	100ca5c0 	call	100ca5c <__fixdfsi>
 10031e4:	1009883a 	mov	r4,r2
 10031e8:	1029883a 	mov	r20,r2
 10031ec:	100cadc0 	call	100cadc <__floatsidf>
 10031f0:	8809883a 	mov	r4,r17
 10031f4:	800b883a 	mov	r5,r16
 10031f8:	100d883a 	mov	r6,r2
 10031fc:	180f883a 	mov	r7,r3
 1003200:	100c1600 	call	100c160 <__subdf3>
 1003204:	a5000c04 	addi	r20,r20,48
 1003208:	a80d883a 	mov	r6,r21
 100320c:	980f883a 	mov	r7,r19
 1003210:	1009883a 	mov	r4,r2
 1003214:	180b883a 	mov	r5,r3
 1003218:	95000005 	stb	r20,0(r18)
 100321c:	1021883a 	mov	r16,r2
 1003220:	1823883a 	mov	r17,r3
 1003224:	100b9540 	call	100b954 <__ledf2>
 1003228:	bdc00044 	addi	r23,r23,1
 100322c:	800d883a 	mov	r6,r16
 1003230:	880f883a 	mov	r7,r17
 1003234:	0009883a 	mov	r4,zero
 1003238:	014ffc34 	movhi	r5,16368
 100323c:	103fcf0e 	bge	r2,zero,100317c <_dtoa_r+0x5dc>
 1003240:	d8c01317 	ldw	r3,76(sp)
 1003244:	d8c00515 	stw	r3,20(sp)
 1003248:	d9400917 	ldw	r5,36(sp)
 100324c:	e009883a 	mov	r4,fp
 1003250:	10062e40 	call	10062e4 <_Bfree>
 1003254:	d9000517 	ldw	r4,20(sp)
 1003258:	d9802317 	ldw	r6,140(sp)
 100325c:	d9c02517 	ldw	r7,148(sp)
 1003260:	b8000005 	stb	zero,0(r23)
 1003264:	20800044 	addi	r2,r4,1
 1003268:	30800015 	stw	r2,0(r6)
 100326c:	3802aa26 	beq	r7,zero,1003d18 <_dtoa_r+0x1178>
 1003270:	3dc00015 	stw	r23,0(r7)
 1003274:	d8800717 	ldw	r2,28(sp)
 1003278:	003e7906 	br	1002c60 <_dtoa_r+0xc0>
 100327c:	00800434 	movhi	r2,16
 1003280:	10bfffc4 	addi	r2,r2,-1
 1003284:	88a2703a 	and	r17,r17,r2
 1003288:	883e851e 	bne	r17,zero,1002ca0 <_dtoa_r+0x100>
 100328c:	00804074 	movhi	r2,257
 1003290:	10bcfe04 	addi	r2,r2,-3080
 1003294:	003e8406 	br	1002ca8 <_dtoa_r+0x108>
 1003298:	10c00204 	addi	r3,r2,8
 100329c:	003e8706 	br	1002cbc <_dtoa_r+0x11c>
 10032a0:	01400434 	movhi	r5,16
 10032a4:	297fffc4 	addi	r5,r5,-1
 10032a8:	994a703a 	and	r5,r19,r5
 10032ac:	9009883a 	mov	r4,r18
 10032b0:	843f0044 	addi	r16,r16,-1023
 10032b4:	294ffc34 	orhi	r5,r5,16368
 10032b8:	dd800217 	ldw	r22,8(sp)
 10032bc:	d8001115 	stw	zero,68(sp)
 10032c0:	003ea506 	br	1002d58 <_dtoa_r+0x1b8>
 10032c4:	00804074 	movhi	r2,257
 10032c8:	10bcf504 	addi	r2,r2,-3116
 10032cc:	003e6406 	br	1002c60 <_dtoa_r+0xc0>
 10032d0:	e0001115 	stw	zero,68(fp)
 10032d4:	000b883a 	mov	r5,zero
 10032d8:	e009883a 	mov	r4,fp
 10032dc:	100623c0 	call	100623c <_Balloc>
 10032e0:	01bfffc4 	movi	r6,-1
 10032e4:	01c00044 	movi	r7,1
 10032e8:	d8800715 	stw	r2,28(sp)
 10032ec:	d9800c15 	stw	r6,48(sp)
 10032f0:	e0801015 	stw	r2,64(fp)
 10032f4:	d8000315 	stw	zero,12(sp)
 10032f8:	d9c00b15 	stw	r7,44(sp)
 10032fc:	d9800615 	stw	r6,24(sp)
 1003300:	d8002215 	stw	zero,136(sp)
 1003304:	d8800117 	ldw	r2,4(sp)
 1003308:	10008916 	blt	r2,zero,1003530 <_dtoa_r+0x990>
 100330c:	d9000517 	ldw	r4,20(sp)
 1003310:	00c00384 	movi	r3,14
 1003314:	19008616 	blt	r3,r4,1003530 <_dtoa_r+0x990>
 1003318:	200490fa 	slli	r2,r4,3
 100331c:	00c04074 	movhi	r3,257
 1003320:	d9802217 	ldw	r6,136(sp)
 1003324:	18fd1d04 	addi	r3,r3,-2956
 1003328:	1885883a 	add	r2,r3,r2
 100332c:	14000017 	ldw	r16,0(r2)
 1003330:	14400117 	ldw	r17,4(r2)
 1003334:	30016316 	blt	r6,zero,10038c4 <_dtoa_r+0xd24>
 1003338:	800d883a 	mov	r6,r16
 100333c:	880f883a 	mov	r7,r17
 1003340:	9009883a 	mov	r4,r18
 1003344:	980b883a 	mov	r5,r19
 1003348:	100af080 	call	100af08 <__divdf3>
 100334c:	180b883a 	mov	r5,r3
 1003350:	1009883a 	mov	r4,r2
 1003354:	100ca5c0 	call	100ca5c <__fixdfsi>
 1003358:	1009883a 	mov	r4,r2
 100335c:	102b883a 	mov	r21,r2
 1003360:	100cadc0 	call	100cadc <__floatsidf>
 1003364:	800d883a 	mov	r6,r16
 1003368:	880f883a 	mov	r7,r17
 100336c:	1009883a 	mov	r4,r2
 1003370:	180b883a 	mov	r5,r3
 1003374:	100ba480 	call	100ba48 <__muldf3>
 1003378:	100d883a 	mov	r6,r2
 100337c:	180f883a 	mov	r7,r3
 1003380:	9009883a 	mov	r4,r18
 1003384:	980b883a 	mov	r5,r19
 1003388:	100c1600 	call	100c160 <__subdf3>
 100338c:	d9c00717 	ldw	r7,28(sp)
 1003390:	1009883a 	mov	r4,r2
 1003394:	a8800c04 	addi	r2,r21,48
 1003398:	38800005 	stb	r2,0(r7)
 100339c:	3dc00044 	addi	r23,r7,1
 10033a0:	d9c00617 	ldw	r7,24(sp)
 10033a4:	01800044 	movi	r6,1
 10033a8:	180b883a 	mov	r5,r3
 10033ac:	2005883a 	mov	r2,r4
 10033b0:	39803826 	beq	r7,r6,1003494 <_dtoa_r+0x8f4>
 10033b4:	000d883a 	mov	r6,zero
 10033b8:	01d00934 	movhi	r7,16420
 10033bc:	100ba480 	call	100ba48 <__muldf3>
 10033c0:	000d883a 	mov	r6,zero
 10033c4:	000f883a 	mov	r7,zero
 10033c8:	1009883a 	mov	r4,r2
 10033cc:	180b883a 	mov	r5,r3
 10033d0:	1025883a 	mov	r18,r2
 10033d4:	1827883a 	mov	r19,r3
 10033d8:	100b7f00 	call	100b7f0 <__eqdf2>
 10033dc:	103f9a26 	beq	r2,zero,1003248 <_dtoa_r+0x6a8>
 10033e0:	d9c00617 	ldw	r7,24(sp)
 10033e4:	d8c00717 	ldw	r3,28(sp)
 10033e8:	b829883a 	mov	r20,r23
 10033ec:	38bfffc4 	addi	r2,r7,-1
 10033f0:	18ad883a 	add	r22,r3,r2
 10033f4:	00000a06 	br	1003420 <_dtoa_r+0x880>
 10033f8:	100ba480 	call	100ba48 <__muldf3>
 10033fc:	000d883a 	mov	r6,zero
 1003400:	000f883a 	mov	r7,zero
 1003404:	1009883a 	mov	r4,r2
 1003408:	180b883a 	mov	r5,r3
 100340c:	1025883a 	mov	r18,r2
 1003410:	1827883a 	mov	r19,r3
 1003414:	b829883a 	mov	r20,r23
 1003418:	100b7f00 	call	100b7f0 <__eqdf2>
 100341c:	103f8a26 	beq	r2,zero,1003248 <_dtoa_r+0x6a8>
 1003420:	800d883a 	mov	r6,r16
 1003424:	880f883a 	mov	r7,r17
 1003428:	9009883a 	mov	r4,r18
 100342c:	980b883a 	mov	r5,r19
 1003430:	100af080 	call	100af08 <__divdf3>
 1003434:	180b883a 	mov	r5,r3
 1003438:	1009883a 	mov	r4,r2
 100343c:	100ca5c0 	call	100ca5c <__fixdfsi>
 1003440:	1009883a 	mov	r4,r2
 1003444:	102b883a 	mov	r21,r2
 1003448:	100cadc0 	call	100cadc <__floatsidf>
 100344c:	800d883a 	mov	r6,r16
 1003450:	880f883a 	mov	r7,r17
 1003454:	1009883a 	mov	r4,r2
 1003458:	180b883a 	mov	r5,r3
 100345c:	100ba480 	call	100ba48 <__muldf3>
 1003460:	100d883a 	mov	r6,r2
 1003464:	180f883a 	mov	r7,r3
 1003468:	9009883a 	mov	r4,r18
 100346c:	980b883a 	mov	r5,r19
 1003470:	100c1600 	call	100c160 <__subdf3>
 1003474:	aa000c04 	addi	r8,r21,48
 1003478:	a2000005 	stb	r8,0(r20)
 100347c:	000d883a 	mov	r6,zero
 1003480:	01d00934 	movhi	r7,16420
 1003484:	1009883a 	mov	r4,r2
 1003488:	180b883a 	mov	r5,r3
 100348c:	a5c00044 	addi	r23,r20,1
 1003490:	b53fd91e 	bne	r22,r20,10033f8 <_dtoa_r+0x858>
 1003494:	100d883a 	mov	r6,r2
 1003498:	180f883a 	mov	r7,r3
 100349c:	1009883a 	mov	r4,r2
 10034a0:	180b883a 	mov	r5,r3
 10034a4:	100a65c0 	call	100a65c <__adddf3>
 10034a8:	100d883a 	mov	r6,r2
 10034ac:	180f883a 	mov	r7,r3
 10034b0:	8009883a 	mov	r4,r16
 10034b4:	880b883a 	mov	r5,r17
 10034b8:	1027883a 	mov	r19,r2
 10034bc:	1825883a 	mov	r18,r3
 10034c0:	100b9540 	call	100b954 <__ledf2>
 10034c4:	10000816 	blt	r2,zero,10034e8 <_dtoa_r+0x948>
 10034c8:	980d883a 	mov	r6,r19
 10034cc:	900f883a 	mov	r7,r18
 10034d0:	8009883a 	mov	r4,r16
 10034d4:	880b883a 	mov	r5,r17
 10034d8:	100b7f00 	call	100b7f0 <__eqdf2>
 10034dc:	103f5a1e 	bne	r2,zero,1003248 <_dtoa_r+0x6a8>
 10034e0:	ad40004c 	andi	r21,r21,1
 10034e4:	a83f5826 	beq	r21,zero,1003248 <_dtoa_r+0x6a8>
 10034e8:	bd3fffc3 	ldbu	r20,-1(r23)
 10034ec:	b8bfffc4 	addi	r2,r23,-1
 10034f0:	1007883a 	mov	r3,r2
 10034f4:	01400e44 	movi	r5,57
 10034f8:	d9800717 	ldw	r6,28(sp)
 10034fc:	00000506 	br	1003514 <_dtoa_r+0x974>
 1003500:	18ffffc4 	addi	r3,r3,-1
 1003504:	11824726 	beq	r2,r6,1003e24 <_dtoa_r+0x1284>
 1003508:	1d000003 	ldbu	r20,0(r3)
 100350c:	102f883a 	mov	r23,r2
 1003510:	10bfffc4 	addi	r2,r2,-1
 1003514:	a1003fcc 	andi	r4,r20,255
 1003518:	2100201c 	xori	r4,r4,128
 100351c:	213fe004 	addi	r4,r4,-128
 1003520:	217ff726 	beq	r4,r5,1003500 <_dtoa_r+0x960>
 1003524:	a2000044 	addi	r8,r20,1
 1003528:	12000005 	stb	r8,0(r2)
 100352c:	003f4606 	br	1003248 <_dtoa_r+0x6a8>
 1003530:	d9000b17 	ldw	r4,44(sp)
 1003534:	2000c826 	beq	r4,zero,1003858 <_dtoa_r+0xcb8>
 1003538:	d9800317 	ldw	r6,12(sp)
 100353c:	00c00044 	movi	r3,1
 1003540:	1980f90e 	bge	r3,r6,1003928 <_dtoa_r+0xd88>
 1003544:	d8800617 	ldw	r2,24(sp)
 1003548:	d8c00a17 	ldw	r3,40(sp)
 100354c:	157fffc4 	addi	r21,r2,-1
 1003550:	1d41f316 	blt	r3,r21,1003d20 <_dtoa_r+0x1180>
 1003554:	1d6bc83a 	sub	r21,r3,r21
 1003558:	d9c00617 	ldw	r7,24(sp)
 100355c:	3802aa16 	blt	r7,zero,1004008 <_dtoa_r+0x1468>
 1003560:	dd000817 	ldw	r20,32(sp)
 1003564:	d8800617 	ldw	r2,24(sp)
 1003568:	d8c00817 	ldw	r3,32(sp)
 100356c:	01400044 	movi	r5,1
 1003570:	e009883a 	mov	r4,fp
 1003574:	1887883a 	add	r3,r3,r2
 1003578:	d8c00815 	stw	r3,32(sp)
 100357c:	b0ad883a 	add	r22,r22,r2
 1003580:	10066480 	call	1006648 <__i2b>
 1003584:	1023883a 	mov	r17,r2
 1003588:	a0000826 	beq	r20,zero,10035ac <_dtoa_r+0xa0c>
 100358c:	0580070e 	bge	zero,r22,10035ac <_dtoa_r+0xa0c>
 1003590:	a005883a 	mov	r2,r20
 1003594:	b500b916 	blt	r22,r20,100387c <_dtoa_r+0xcdc>
 1003598:	d9000817 	ldw	r4,32(sp)
 100359c:	a0a9c83a 	sub	r20,r20,r2
 10035a0:	b0adc83a 	sub	r22,r22,r2
 10035a4:	2089c83a 	sub	r4,r4,r2
 10035a8:	d9000815 	stw	r4,32(sp)
 10035ac:	d9800a17 	ldw	r6,40(sp)
 10035b0:	0181810e 	bge	zero,r6,1003bb8 <_dtoa_r+0x1018>
 10035b4:	d9c00b17 	ldw	r7,44(sp)
 10035b8:	3800b326 	beq	r7,zero,1003888 <_dtoa_r+0xce8>
 10035bc:	a800b226 	beq	r21,zero,1003888 <_dtoa_r+0xce8>
 10035c0:	880b883a 	mov	r5,r17
 10035c4:	a80d883a 	mov	r6,r21
 10035c8:	e009883a 	mov	r4,fp
 10035cc:	100687c0 	call	100687c <__pow5mult>
 10035d0:	d9800917 	ldw	r6,36(sp)
 10035d4:	100b883a 	mov	r5,r2
 10035d8:	e009883a 	mov	r4,fp
 10035dc:	1023883a 	mov	r17,r2
 10035e0:	10066840 	call	1006684 <__multiply>
 10035e4:	1021883a 	mov	r16,r2
 10035e8:	d8800a17 	ldw	r2,40(sp)
 10035ec:	d9400917 	ldw	r5,36(sp)
 10035f0:	e009883a 	mov	r4,fp
 10035f4:	1545c83a 	sub	r2,r2,r21
 10035f8:	d8800a15 	stw	r2,40(sp)
 10035fc:	10062e40 	call	10062e4 <_Bfree>
 1003600:	d8c00a17 	ldw	r3,40(sp)
 1003604:	18009f1e 	bne	r3,zero,1003884 <_dtoa_r+0xce4>
 1003608:	05c00044 	movi	r23,1
 100360c:	e009883a 	mov	r4,fp
 1003610:	b80b883a 	mov	r5,r23
 1003614:	10066480 	call	1006648 <__i2b>
 1003618:	d9000d17 	ldw	r4,52(sp)
 100361c:	102b883a 	mov	r21,r2
 1003620:	2000ce26 	beq	r4,zero,100395c <_dtoa_r+0xdbc>
 1003624:	200d883a 	mov	r6,r4
 1003628:	100b883a 	mov	r5,r2
 100362c:	e009883a 	mov	r4,fp
 1003630:	100687c0 	call	100687c <__pow5mult>
 1003634:	d9800317 	ldw	r6,12(sp)
 1003638:	102b883a 	mov	r21,r2
 100363c:	b981810e 	bge	r23,r6,1003c44 <_dtoa_r+0x10a4>
 1003640:	0027883a 	mov	r19,zero
 1003644:	a8800417 	ldw	r2,16(r21)
 1003648:	05c00804 	movi	r23,32
 100364c:	10800104 	addi	r2,r2,4
 1003650:	1085883a 	add	r2,r2,r2
 1003654:	1085883a 	add	r2,r2,r2
 1003658:	a885883a 	add	r2,r21,r2
 100365c:	11000017 	ldw	r4,0(r2)
 1003660:	10065300 	call	1006530 <__hi0bits>
 1003664:	b885c83a 	sub	r2,r23,r2
 1003668:	1585883a 	add	r2,r2,r22
 100366c:	108007cc 	andi	r2,r2,31
 1003670:	1000b326 	beq	r2,zero,1003940 <_dtoa_r+0xda0>
 1003674:	00c00804 	movi	r3,32
 1003678:	1887c83a 	sub	r3,r3,r2
 100367c:	01000104 	movi	r4,4
 1003680:	20c2cd0e 	bge	r4,r3,10041b8 <_dtoa_r+0x1618>
 1003684:	00c00704 	movi	r3,28
 1003688:	1885c83a 	sub	r2,r3,r2
 100368c:	d8c00817 	ldw	r3,32(sp)
 1003690:	a0a9883a 	add	r20,r20,r2
 1003694:	b0ad883a 	add	r22,r22,r2
 1003698:	1887883a 	add	r3,r3,r2
 100369c:	d8c00815 	stw	r3,32(sp)
 10036a0:	d9800817 	ldw	r6,32(sp)
 10036a4:	0180040e 	bge	zero,r6,10036b8 <_dtoa_r+0xb18>
 10036a8:	800b883a 	mov	r5,r16
 10036ac:	e009883a 	mov	r4,fp
 10036b0:	10069bc0 	call	10069bc <__lshift>
 10036b4:	1021883a 	mov	r16,r2
 10036b8:	0580050e 	bge	zero,r22,10036d0 <_dtoa_r+0xb30>
 10036bc:	a80b883a 	mov	r5,r21
 10036c0:	b00d883a 	mov	r6,r22
 10036c4:	e009883a 	mov	r4,fp
 10036c8:	10069bc0 	call	10069bc <__lshift>
 10036cc:	102b883a 	mov	r21,r2
 10036d0:	d9c00e17 	ldw	r7,56(sp)
 10036d4:	3801211e 	bne	r7,zero,1003b5c <_dtoa_r+0xfbc>
 10036d8:	d9800617 	ldw	r6,24(sp)
 10036dc:	0181380e 	bge	zero,r6,1003bc0 <_dtoa_r+0x1020>
 10036e0:	d8c00b17 	ldw	r3,44(sp)
 10036e4:	1800ab1e 	bne	r3,zero,1003994 <_dtoa_r+0xdf4>
 10036e8:	dc800717 	ldw	r18,28(sp)
 10036ec:	dcc00617 	ldw	r19,24(sp)
 10036f0:	9029883a 	mov	r20,r18
 10036f4:	00000206 	br	1003700 <_dtoa_r+0xb60>
 10036f8:	100630c0 	call	100630c <__multadd>
 10036fc:	1021883a 	mov	r16,r2
 1003700:	a80b883a 	mov	r5,r21
 1003704:	8009883a 	mov	r4,r16
 1003708:	10029a00 	call	10029a0 <quorem>
 100370c:	10800c04 	addi	r2,r2,48
 1003710:	90800005 	stb	r2,0(r18)
 1003714:	94800044 	addi	r18,r18,1
 1003718:	9507c83a 	sub	r3,r18,r20
 100371c:	000f883a 	mov	r7,zero
 1003720:	01800284 	movi	r6,10
 1003724:	800b883a 	mov	r5,r16
 1003728:	e009883a 	mov	r4,fp
 100372c:	1cfff216 	blt	r3,r19,10036f8 <_dtoa_r+0xb58>
 1003730:	1011883a 	mov	r8,r2
 1003734:	d8800617 	ldw	r2,24(sp)
 1003738:	0082370e 	bge	zero,r2,1004018 <_dtoa_r+0x1478>
 100373c:	d9000717 	ldw	r4,28(sp)
 1003740:	0025883a 	mov	r18,zero
 1003744:	20af883a 	add	r23,r4,r2
 1003748:	01800044 	movi	r6,1
 100374c:	800b883a 	mov	r5,r16
 1003750:	e009883a 	mov	r4,fp
 1003754:	da001715 	stw	r8,92(sp)
 1003758:	10069bc0 	call	10069bc <__lshift>
 100375c:	a80b883a 	mov	r5,r21
 1003760:	1009883a 	mov	r4,r2
 1003764:	d8800915 	stw	r2,36(sp)
 1003768:	1006b040 	call	1006b04 <__mcmp>
 100376c:	da001717 	ldw	r8,92(sp)
 1003770:	0081800e 	bge	zero,r2,1003d74 <_dtoa_r+0x11d4>
 1003774:	b93fffc3 	ldbu	r4,-1(r23)
 1003778:	b8bfffc4 	addi	r2,r23,-1
 100377c:	1007883a 	mov	r3,r2
 1003780:	01800e44 	movi	r6,57
 1003784:	d9c00717 	ldw	r7,28(sp)
 1003788:	00000506 	br	10037a0 <_dtoa_r+0xc00>
 100378c:	18ffffc4 	addi	r3,r3,-1
 1003790:	11c12326 	beq	r2,r7,1003c20 <_dtoa_r+0x1080>
 1003794:	19000003 	ldbu	r4,0(r3)
 1003798:	102f883a 	mov	r23,r2
 100379c:	10bfffc4 	addi	r2,r2,-1
 10037a0:	21403fcc 	andi	r5,r4,255
 10037a4:	2940201c 	xori	r5,r5,128
 10037a8:	297fe004 	addi	r5,r5,-128
 10037ac:	29bff726 	beq	r5,r6,100378c <_dtoa_r+0xbec>
 10037b0:	21000044 	addi	r4,r4,1
 10037b4:	11000005 	stb	r4,0(r2)
 10037b8:	a80b883a 	mov	r5,r21
 10037bc:	e009883a 	mov	r4,fp
 10037c0:	10062e40 	call	10062e4 <_Bfree>
 10037c4:	883ea026 	beq	r17,zero,1003248 <_dtoa_r+0x6a8>
 10037c8:	90000426 	beq	r18,zero,10037dc <_dtoa_r+0xc3c>
 10037cc:	94400326 	beq	r18,r17,10037dc <_dtoa_r+0xc3c>
 10037d0:	900b883a 	mov	r5,r18
 10037d4:	e009883a 	mov	r4,fp
 10037d8:	10062e40 	call	10062e4 <_Bfree>
 10037dc:	880b883a 	mov	r5,r17
 10037e0:	e009883a 	mov	r4,fp
 10037e4:	10062e40 	call	10062e4 <_Bfree>
 10037e8:	003e9706 	br	1003248 <_dtoa_r+0x6a8>
 10037ec:	01800044 	movi	r6,1
 10037f0:	d9800e15 	stw	r6,56(sp)
 10037f4:	003d9606 	br	1002e50 <_dtoa_r+0x2b0>
 10037f8:	d8800817 	ldw	r2,32(sp)
 10037fc:	d8c00517 	ldw	r3,20(sp)
 1003800:	d8000d15 	stw	zero,52(sp)
 1003804:	10c5c83a 	sub	r2,r2,r3
 1003808:	00c9c83a 	sub	r4,zero,r3
 100380c:	d8800815 	stw	r2,32(sp)
 1003810:	d9000a15 	stw	r4,40(sp)
 1003814:	003d9706 	br	1002e74 <_dtoa_r+0x2d4>
 1003818:	05adc83a 	sub	r22,zero,r22
 100381c:	dd800815 	stw	r22,32(sp)
 1003820:	002d883a 	mov	r22,zero
 1003824:	003d8e06 	br	1002e60 <_dtoa_r+0x2c0>
 1003828:	d9000517 	ldw	r4,20(sp)
 100382c:	100cadc0 	call	100cadc <__floatsidf>
 1003830:	100d883a 	mov	r6,r2
 1003834:	180f883a 	mov	r7,r3
 1003838:	a009883a 	mov	r4,r20
 100383c:	880b883a 	mov	r5,r17
 1003840:	100b7f00 	call	100b7f0 <__eqdf2>
 1003844:	103d7126 	beq	r2,zero,1002e0c <_dtoa_r+0x26c>
 1003848:	d9c00517 	ldw	r7,20(sp)
 100384c:	39ffffc4 	addi	r7,r7,-1
 1003850:	d9c00515 	stw	r7,20(sp)
 1003854:	003d6d06 	br	1002e0c <_dtoa_r+0x26c>
 1003858:	dd400a17 	ldw	r21,40(sp)
 100385c:	dd000817 	ldw	r20,32(sp)
 1003860:	0023883a 	mov	r17,zero
 1003864:	003f4806 	br	1003588 <_dtoa_r+0x9e8>
 1003868:	10e3c83a 	sub	r17,r2,r3
 100386c:	9448983a 	sll	r4,r18,r17
 1003870:	003d3206 	br	1002d3c <_dtoa_r+0x19c>
 1003874:	d8000e15 	stw	zero,56(sp)
 1003878:	003d7506 	br	1002e50 <_dtoa_r+0x2b0>
 100387c:	b005883a 	mov	r2,r22
 1003880:	003f4506 	br	1003598 <_dtoa_r+0x9f8>
 1003884:	dc000915 	stw	r16,36(sp)
 1003888:	d9800a17 	ldw	r6,40(sp)
 100388c:	d9400917 	ldw	r5,36(sp)
 1003890:	e009883a 	mov	r4,fp
 1003894:	100687c0 	call	100687c <__pow5mult>
 1003898:	1021883a 	mov	r16,r2
 100389c:	003f5a06 	br	1003608 <_dtoa_r+0xa68>
 10038a0:	01c00044 	movi	r7,1
 10038a4:	d9c00b15 	stw	r7,44(sp)
 10038a8:	d8802217 	ldw	r2,136(sp)
 10038ac:	0081280e 	bge	zero,r2,1003d50 <_dtoa_r+0x11b0>
 10038b0:	100d883a 	mov	r6,r2
 10038b4:	1021883a 	mov	r16,r2
 10038b8:	d8800c15 	stw	r2,48(sp)
 10038bc:	d8800615 	stw	r2,24(sp)
 10038c0:	003d8806 	br	1002ee4 <_dtoa_r+0x344>
 10038c4:	d8800617 	ldw	r2,24(sp)
 10038c8:	00be9b16 	blt	zero,r2,1003338 <_dtoa_r+0x798>
 10038cc:	10010f1e 	bne	r2,zero,1003d0c <_dtoa_r+0x116c>
 10038d0:	880b883a 	mov	r5,r17
 10038d4:	000d883a 	mov	r6,zero
 10038d8:	01d00534 	movhi	r7,16404
 10038dc:	8009883a 	mov	r4,r16
 10038e0:	100ba480 	call	100ba48 <__muldf3>
 10038e4:	900d883a 	mov	r6,r18
 10038e8:	980f883a 	mov	r7,r19
 10038ec:	1009883a 	mov	r4,r2
 10038f0:	180b883a 	mov	r5,r3
 10038f4:	100b8780 	call	100b878 <__gedf2>
 10038f8:	002b883a 	mov	r21,zero
 10038fc:	0023883a 	mov	r17,zero
 1003900:	1000bf16 	blt	r2,zero,1003c00 <_dtoa_r+0x1060>
 1003904:	d9802217 	ldw	r6,136(sp)
 1003908:	ddc00717 	ldw	r23,28(sp)
 100390c:	018c303a 	nor	r6,zero,r6
 1003910:	d9800515 	stw	r6,20(sp)
 1003914:	a80b883a 	mov	r5,r21
 1003918:	e009883a 	mov	r4,fp
 100391c:	10062e40 	call	10062e4 <_Bfree>
 1003920:	883e4926 	beq	r17,zero,1003248 <_dtoa_r+0x6a8>
 1003924:	003fad06 	br	10037dc <_dtoa_r+0xc3c>
 1003928:	d9c01117 	ldw	r7,68(sp)
 100392c:	3801bc26 	beq	r7,zero,1004020 <_dtoa_r+0x1480>
 1003930:	10810cc4 	addi	r2,r2,1075
 1003934:	dd400a17 	ldw	r21,40(sp)
 1003938:	dd000817 	ldw	r20,32(sp)
 100393c:	003f0a06 	br	1003568 <_dtoa_r+0x9c8>
 1003940:	00800704 	movi	r2,28
 1003944:	d9000817 	ldw	r4,32(sp)
 1003948:	a0a9883a 	add	r20,r20,r2
 100394c:	b0ad883a 	add	r22,r22,r2
 1003950:	2089883a 	add	r4,r4,r2
 1003954:	d9000815 	stw	r4,32(sp)
 1003958:	003f5106 	br	10036a0 <_dtoa_r+0xb00>
 100395c:	d8c00317 	ldw	r3,12(sp)
 1003960:	b8c1fc0e 	bge	r23,r3,1004154 <_dtoa_r+0x15b4>
 1003964:	0027883a 	mov	r19,zero
 1003968:	b805883a 	mov	r2,r23
 100396c:	003f3e06 	br	1003668 <_dtoa_r+0xac8>
 1003970:	880b883a 	mov	r5,r17
 1003974:	e009883a 	mov	r4,fp
 1003978:	000f883a 	mov	r7,zero
 100397c:	01800284 	movi	r6,10
 1003980:	100630c0 	call	100630c <__multadd>
 1003984:	d9000c17 	ldw	r4,48(sp)
 1003988:	1023883a 	mov	r17,r2
 100398c:	0102040e 	bge	zero,r4,10041a0 <_dtoa_r+0x1600>
 1003990:	d9000615 	stw	r4,24(sp)
 1003994:	0500050e 	bge	zero,r20,10039ac <_dtoa_r+0xe0c>
 1003998:	880b883a 	mov	r5,r17
 100399c:	a00d883a 	mov	r6,r20
 10039a0:	e009883a 	mov	r4,fp
 10039a4:	10069bc0 	call	10069bc <__lshift>
 10039a8:	1023883a 	mov	r17,r2
 10039ac:	9801241e 	bne	r19,zero,1003e40 <_dtoa_r+0x12a0>
 10039b0:	8829883a 	mov	r20,r17
 10039b4:	d9000617 	ldw	r4,24(sp)
 10039b8:	dcc00717 	ldw	r19,28(sp)
 10039bc:	9480004c 	andi	r18,r18,1
 10039c0:	20bfffc4 	addi	r2,r4,-1
 10039c4:	9885883a 	add	r2,r19,r2
 10039c8:	d8800415 	stw	r2,16(sp)
 10039cc:	dc800615 	stw	r18,24(sp)
 10039d0:	a80b883a 	mov	r5,r21
 10039d4:	8009883a 	mov	r4,r16
 10039d8:	10029a00 	call	10029a0 <quorem>
 10039dc:	880b883a 	mov	r5,r17
 10039e0:	8009883a 	mov	r4,r16
 10039e4:	102f883a 	mov	r23,r2
 10039e8:	1006b040 	call	1006b04 <__mcmp>
 10039ec:	a80b883a 	mov	r5,r21
 10039f0:	a00d883a 	mov	r6,r20
 10039f4:	e009883a 	mov	r4,fp
 10039f8:	102d883a 	mov	r22,r2
 10039fc:	1006b640 	call	1006b64 <__mdiff>
 1003a00:	1007883a 	mov	r3,r2
 1003a04:	10800317 	ldw	r2,12(r2)
 1003a08:	bc800c04 	addi	r18,r23,48
 1003a0c:	180b883a 	mov	r5,r3
 1003a10:	10004e1e 	bne	r2,zero,1003b4c <_dtoa_r+0xfac>
 1003a14:	8009883a 	mov	r4,r16
 1003a18:	d8c01615 	stw	r3,88(sp)
 1003a1c:	1006b040 	call	1006b04 <__mcmp>
 1003a20:	d8c01617 	ldw	r3,88(sp)
 1003a24:	e009883a 	mov	r4,fp
 1003a28:	d8801615 	stw	r2,88(sp)
 1003a2c:	180b883a 	mov	r5,r3
 1003a30:	10062e40 	call	10062e4 <_Bfree>
 1003a34:	d8801617 	ldw	r2,88(sp)
 1003a38:	1000041e 	bne	r2,zero,1003a4c <_dtoa_r+0xeac>
 1003a3c:	d9800317 	ldw	r6,12(sp)
 1003a40:	3000021e 	bne	r6,zero,1003a4c <_dtoa_r+0xeac>
 1003a44:	d8c00617 	ldw	r3,24(sp)
 1003a48:	18003726 	beq	r3,zero,1003b28 <_dtoa_r+0xf88>
 1003a4c:	b0002016 	blt	r22,zero,1003ad0 <_dtoa_r+0xf30>
 1003a50:	b000041e 	bne	r22,zero,1003a64 <_dtoa_r+0xec4>
 1003a54:	d9000317 	ldw	r4,12(sp)
 1003a58:	2000021e 	bne	r4,zero,1003a64 <_dtoa_r+0xec4>
 1003a5c:	d8c00617 	ldw	r3,24(sp)
 1003a60:	18001b26 	beq	r3,zero,1003ad0 <_dtoa_r+0xf30>
 1003a64:	00810716 	blt	zero,r2,1003e84 <_dtoa_r+0x12e4>
 1003a68:	d8c00417 	ldw	r3,16(sp)
 1003a6c:	9d800044 	addi	r22,r19,1
 1003a70:	9c800005 	stb	r18,0(r19)
 1003a74:	b02f883a 	mov	r23,r22
 1003a78:	98c10626 	beq	r19,r3,1003e94 <_dtoa_r+0x12f4>
 1003a7c:	800b883a 	mov	r5,r16
 1003a80:	000f883a 	mov	r7,zero
 1003a84:	01800284 	movi	r6,10
 1003a88:	e009883a 	mov	r4,fp
 1003a8c:	100630c0 	call	100630c <__multadd>
 1003a90:	1021883a 	mov	r16,r2
 1003a94:	000f883a 	mov	r7,zero
 1003a98:	01800284 	movi	r6,10
 1003a9c:	880b883a 	mov	r5,r17
 1003aa0:	e009883a 	mov	r4,fp
 1003aa4:	8d002526 	beq	r17,r20,1003b3c <_dtoa_r+0xf9c>
 1003aa8:	100630c0 	call	100630c <__multadd>
 1003aac:	a00b883a 	mov	r5,r20
 1003ab0:	000f883a 	mov	r7,zero
 1003ab4:	01800284 	movi	r6,10
 1003ab8:	e009883a 	mov	r4,fp
 1003abc:	1023883a 	mov	r17,r2
 1003ac0:	100630c0 	call	100630c <__multadd>
 1003ac4:	1029883a 	mov	r20,r2
 1003ac8:	b027883a 	mov	r19,r22
 1003acc:	003fc006 	br	10039d0 <_dtoa_r+0xe30>
 1003ad0:	9011883a 	mov	r8,r18
 1003ad4:	00800e0e 	bge	zero,r2,1003b10 <_dtoa_r+0xf70>
 1003ad8:	800b883a 	mov	r5,r16
 1003adc:	01800044 	movi	r6,1
 1003ae0:	e009883a 	mov	r4,fp
 1003ae4:	da001715 	stw	r8,92(sp)
 1003ae8:	10069bc0 	call	10069bc <__lshift>
 1003aec:	a80b883a 	mov	r5,r21
 1003af0:	1009883a 	mov	r4,r2
 1003af4:	1021883a 	mov	r16,r2
 1003af8:	1006b040 	call	1006b04 <__mcmp>
 1003afc:	da001717 	ldw	r8,92(sp)
 1003b00:	0081960e 	bge	zero,r2,100415c <_dtoa_r+0x15bc>
 1003b04:	00800e44 	movi	r2,57
 1003b08:	40817026 	beq	r8,r2,10040cc <_dtoa_r+0x152c>
 1003b0c:	ba000c44 	addi	r8,r23,49
 1003b10:	8825883a 	mov	r18,r17
 1003b14:	9dc00044 	addi	r23,r19,1
 1003b18:	9a000005 	stb	r8,0(r19)
 1003b1c:	a023883a 	mov	r17,r20
 1003b20:	dc000915 	stw	r16,36(sp)
 1003b24:	003f2406 	br	10037b8 <_dtoa_r+0xc18>
 1003b28:	00800e44 	movi	r2,57
 1003b2c:	9011883a 	mov	r8,r18
 1003b30:	90816626 	beq	r18,r2,10040cc <_dtoa_r+0x152c>
 1003b34:	05bff516 	blt	zero,r22,1003b0c <_dtoa_r+0xf6c>
 1003b38:	003ff506 	br	1003b10 <_dtoa_r+0xf70>
 1003b3c:	100630c0 	call	100630c <__multadd>
 1003b40:	1023883a 	mov	r17,r2
 1003b44:	1029883a 	mov	r20,r2
 1003b48:	003fdf06 	br	1003ac8 <_dtoa_r+0xf28>
 1003b4c:	e009883a 	mov	r4,fp
 1003b50:	10062e40 	call	10062e4 <_Bfree>
 1003b54:	00800044 	movi	r2,1
 1003b58:	003fbc06 	br	1003a4c <_dtoa_r+0xeac>
 1003b5c:	a80b883a 	mov	r5,r21
 1003b60:	8009883a 	mov	r4,r16
 1003b64:	1006b040 	call	1006b04 <__mcmp>
 1003b68:	103edb0e 	bge	r2,zero,10036d8 <_dtoa_r+0xb38>
 1003b6c:	800b883a 	mov	r5,r16
 1003b70:	000f883a 	mov	r7,zero
 1003b74:	01800284 	movi	r6,10
 1003b78:	e009883a 	mov	r4,fp
 1003b7c:	100630c0 	call	100630c <__multadd>
 1003b80:	1021883a 	mov	r16,r2
 1003b84:	d8800517 	ldw	r2,20(sp)
 1003b88:	d8c00b17 	ldw	r3,44(sp)
 1003b8c:	10bfffc4 	addi	r2,r2,-1
 1003b90:	d8800515 	stw	r2,20(sp)
 1003b94:	183f761e 	bne	r3,zero,1003970 <_dtoa_r+0xdd0>
 1003b98:	d9000c17 	ldw	r4,48(sp)
 1003b9c:	0101730e 	bge	zero,r4,100416c <_dtoa_r+0x15cc>
 1003ba0:	d9000615 	stw	r4,24(sp)
 1003ba4:	003ed006 	br	10036e8 <_dtoa_r+0xb48>
 1003ba8:	00800084 	movi	r2,2
 1003bac:	3081861e 	bne	r6,r2,10041c8 <_dtoa_r+0x1628>
 1003bb0:	d8000b15 	stw	zero,44(sp)
 1003bb4:	003f3c06 	br	10038a8 <_dtoa_r+0xd08>
 1003bb8:	dc000917 	ldw	r16,36(sp)
 1003bbc:	003e9206 	br	1003608 <_dtoa_r+0xa68>
 1003bc0:	d9c00317 	ldw	r7,12(sp)
 1003bc4:	00800084 	movi	r2,2
 1003bc8:	11fec50e 	bge	r2,r7,10036e0 <_dtoa_r+0xb40>
 1003bcc:	d9000617 	ldw	r4,24(sp)
 1003bd0:	20013c1e 	bne	r4,zero,10040c4 <_dtoa_r+0x1524>
 1003bd4:	a80b883a 	mov	r5,r21
 1003bd8:	000f883a 	mov	r7,zero
 1003bdc:	01800144 	movi	r6,5
 1003be0:	e009883a 	mov	r4,fp
 1003be4:	100630c0 	call	100630c <__multadd>
 1003be8:	100b883a 	mov	r5,r2
 1003bec:	8009883a 	mov	r4,r16
 1003bf0:	102b883a 	mov	r21,r2
 1003bf4:	1006b040 	call	1006b04 <__mcmp>
 1003bf8:	dc000915 	stw	r16,36(sp)
 1003bfc:	00bf410e 	bge	zero,r2,1003904 <_dtoa_r+0xd64>
 1003c00:	d9c00717 	ldw	r7,28(sp)
 1003c04:	00800c44 	movi	r2,49
 1003c08:	38800005 	stb	r2,0(r7)
 1003c0c:	d8800517 	ldw	r2,20(sp)
 1003c10:	3dc00044 	addi	r23,r7,1
 1003c14:	10800044 	addi	r2,r2,1
 1003c18:	d8800515 	stw	r2,20(sp)
 1003c1c:	003f3d06 	br	1003914 <_dtoa_r+0xd74>
 1003c20:	d9800517 	ldw	r6,20(sp)
 1003c24:	d9c00717 	ldw	r7,28(sp)
 1003c28:	00800c44 	movi	r2,49
 1003c2c:	31800044 	addi	r6,r6,1
 1003c30:	d9800515 	stw	r6,20(sp)
 1003c34:	38800005 	stb	r2,0(r7)
 1003c38:	003edf06 	br	10037b8 <_dtoa_r+0xc18>
 1003c3c:	d8000b15 	stw	zero,44(sp)
 1003c40:	003c9f06 	br	1002ec0 <_dtoa_r+0x320>
 1003c44:	903e7e1e 	bne	r18,zero,1003640 <_dtoa_r+0xaa0>
 1003c48:	00800434 	movhi	r2,16
 1003c4c:	10bfffc4 	addi	r2,r2,-1
 1003c50:	9884703a 	and	r2,r19,r2
 1003c54:	1000ea1e 	bne	r2,zero,1004000 <_dtoa_r+0x1460>
 1003c58:	9cdffc2c 	andhi	r19,r19,32752
 1003c5c:	9800e826 	beq	r19,zero,1004000 <_dtoa_r+0x1460>
 1003c60:	d9c00817 	ldw	r7,32(sp)
 1003c64:	b5800044 	addi	r22,r22,1
 1003c68:	04c00044 	movi	r19,1
 1003c6c:	39c00044 	addi	r7,r7,1
 1003c70:	d9c00815 	stw	r7,32(sp)
 1003c74:	d8800d17 	ldw	r2,52(sp)
 1003c78:	103e721e 	bne	r2,zero,1003644 <_dtoa_r+0xaa4>
 1003c7c:	00800044 	movi	r2,1
 1003c80:	003e7906 	br	1003668 <_dtoa_r+0xac8>
 1003c84:	8009883a 	mov	r4,r16
 1003c88:	100cadc0 	call	100cadc <__floatsidf>
 1003c8c:	d9800f17 	ldw	r6,60(sp)
 1003c90:	d9c01017 	ldw	r7,64(sp)
 1003c94:	1009883a 	mov	r4,r2
 1003c98:	180b883a 	mov	r5,r3
 1003c9c:	100ba480 	call	100ba48 <__muldf3>
 1003ca0:	000d883a 	mov	r6,zero
 1003ca4:	01d00734 	movhi	r7,16412
 1003ca8:	1009883a 	mov	r4,r2
 1003cac:	180b883a 	mov	r5,r3
 1003cb0:	100a65c0 	call	100a65c <__adddf3>
 1003cb4:	047f3034 	movhi	r17,64704
 1003cb8:	1021883a 	mov	r16,r2
 1003cbc:	1c63883a 	add	r17,r3,r17
 1003cc0:	d9000f17 	ldw	r4,60(sp)
 1003cc4:	d9401017 	ldw	r5,64(sp)
 1003cc8:	000d883a 	mov	r6,zero
 1003ccc:	01d00534 	movhi	r7,16404
 1003cd0:	100c1600 	call	100c160 <__subdf3>
 1003cd4:	800d883a 	mov	r6,r16
 1003cd8:	880f883a 	mov	r7,r17
 1003cdc:	1009883a 	mov	r4,r2
 1003ce0:	180b883a 	mov	r5,r3
 1003ce4:	102b883a 	mov	r21,r2
 1003ce8:	1829883a 	mov	r20,r3
 1003cec:	100b8780 	call	100b878 <__gedf2>
 1003cf0:	00806c16 	blt	zero,r2,1003ea4 <_dtoa_r+0x1304>
 1003cf4:	89e0003c 	xorhi	r7,r17,32768
 1003cf8:	800d883a 	mov	r6,r16
 1003cfc:	a809883a 	mov	r4,r21
 1003d00:	a00b883a 	mov	r5,r20
 1003d04:	100b9540 	call	100b954 <__ledf2>
 1003d08:	103d7e0e 	bge	r2,zero,1003304 <_dtoa_r+0x764>
 1003d0c:	002b883a 	mov	r21,zero
 1003d10:	0023883a 	mov	r17,zero
 1003d14:	003efb06 	br	1003904 <_dtoa_r+0xd64>
 1003d18:	d8800717 	ldw	r2,28(sp)
 1003d1c:	003bd006 	br	1002c60 <_dtoa_r+0xc0>
 1003d20:	d9000a17 	ldw	r4,40(sp)
 1003d24:	d9800d17 	ldw	r6,52(sp)
 1003d28:	dd400a15 	stw	r21,40(sp)
 1003d2c:	a905c83a 	sub	r2,r21,r4
 1003d30:	308d883a 	add	r6,r6,r2
 1003d34:	d9800d15 	stw	r6,52(sp)
 1003d38:	002b883a 	mov	r21,zero
 1003d3c:	003e0606 	br	1003558 <_dtoa_r+0x9b8>
 1003d40:	9023883a 	mov	r17,r18
 1003d44:	9829883a 	mov	r20,r19
 1003d48:	04000084 	movi	r16,2
 1003d4c:	003c9206 	br	1002f98 <_dtoa_r+0x3f8>
 1003d50:	04000044 	movi	r16,1
 1003d54:	dc000c15 	stw	r16,48(sp)
 1003d58:	dc000615 	stw	r16,24(sp)
 1003d5c:	dc002215 	stw	r16,136(sp)
 1003d60:	e0001115 	stw	zero,68(fp)
 1003d64:	000b883a 	mov	r5,zero
 1003d68:	003c6906 	br	1002f10 <_dtoa_r+0x370>
 1003d6c:	3021883a 	mov	r16,r6
 1003d70:	003ffb06 	br	1003d60 <_dtoa_r+0x11c0>
 1003d74:	1000021e 	bne	r2,zero,1003d80 <_dtoa_r+0x11e0>
 1003d78:	4200004c 	andi	r8,r8,1
 1003d7c:	403e7d1e 	bne	r8,zero,1003774 <_dtoa_r+0xbd4>
 1003d80:	01000c04 	movi	r4,48
 1003d84:	00000106 	br	1003d8c <_dtoa_r+0x11ec>
 1003d88:	102f883a 	mov	r23,r2
 1003d8c:	b8bfffc4 	addi	r2,r23,-1
 1003d90:	10c00007 	ldb	r3,0(r2)
 1003d94:	193ffc26 	beq	r3,r4,1003d88 <_dtoa_r+0x11e8>
 1003d98:	003e8706 	br	10037b8 <_dtoa_r+0xc18>
 1003d9c:	d8800517 	ldw	r2,20(sp)
 1003da0:	00a3c83a 	sub	r17,zero,r2
 1003da4:	8800a426 	beq	r17,zero,1004038 <_dtoa_r+0x1498>
 1003da8:	888003cc 	andi	r2,r17,15
 1003dac:	100490fa 	slli	r2,r2,3
 1003db0:	00c04074 	movhi	r3,257
 1003db4:	18fd1d04 	addi	r3,r3,-2956
 1003db8:	1885883a 	add	r2,r3,r2
 1003dbc:	11800017 	ldw	r6,0(r2)
 1003dc0:	11c00117 	ldw	r7,4(r2)
 1003dc4:	9009883a 	mov	r4,r18
 1003dc8:	980b883a 	mov	r5,r19
 1003dcc:	8823d13a 	srai	r17,r17,4
 1003dd0:	100ba480 	call	100ba48 <__muldf3>
 1003dd4:	d8800f15 	stw	r2,60(sp)
 1003dd8:	d8c01015 	stw	r3,64(sp)
 1003ddc:	8800e826 	beq	r17,zero,1004180 <_dtoa_r+0x15e0>
 1003de0:	05004074 	movhi	r20,257
 1003de4:	a53d1304 	addi	r20,r20,-2996
 1003de8:	04000084 	movi	r16,2
 1003dec:	8980004c 	andi	r6,r17,1
 1003df0:	1009883a 	mov	r4,r2
 1003df4:	8823d07a 	srai	r17,r17,1
 1003df8:	180b883a 	mov	r5,r3
 1003dfc:	30000426 	beq	r6,zero,1003e10 <_dtoa_r+0x1270>
 1003e00:	a1800017 	ldw	r6,0(r20)
 1003e04:	a1c00117 	ldw	r7,4(r20)
 1003e08:	84000044 	addi	r16,r16,1
 1003e0c:	100ba480 	call	100ba48 <__muldf3>
 1003e10:	a5000204 	addi	r20,r20,8
 1003e14:	883ff51e 	bne	r17,zero,1003dec <_dtoa_r+0x124c>
 1003e18:	d8800f15 	stw	r2,60(sp)
 1003e1c:	d8c01015 	stw	r3,64(sp)
 1003e20:	003c7606 	br	1002ffc <_dtoa_r+0x45c>
 1003e24:	00c00c04 	movi	r3,48
 1003e28:	10c00005 	stb	r3,0(r2)
 1003e2c:	d8c00517 	ldw	r3,20(sp)
 1003e30:	bd3fffc3 	ldbu	r20,-1(r23)
 1003e34:	18c00044 	addi	r3,r3,1
 1003e38:	d8c00515 	stw	r3,20(sp)
 1003e3c:	003db906 	br	1003524 <_dtoa_r+0x984>
 1003e40:	89400117 	ldw	r5,4(r17)
 1003e44:	e009883a 	mov	r4,fp
 1003e48:	100623c0 	call	100623c <_Balloc>
 1003e4c:	89800417 	ldw	r6,16(r17)
 1003e50:	89400304 	addi	r5,r17,12
 1003e54:	11000304 	addi	r4,r2,12
 1003e58:	31800084 	addi	r6,r6,2
 1003e5c:	318d883a 	add	r6,r6,r6
 1003e60:	318d883a 	add	r6,r6,r6
 1003e64:	1027883a 	mov	r19,r2
 1003e68:	1005e700 	call	1005e70 <memcpy>
 1003e6c:	01800044 	movi	r6,1
 1003e70:	980b883a 	mov	r5,r19
 1003e74:	e009883a 	mov	r4,fp
 1003e78:	10069bc0 	call	10069bc <__lshift>
 1003e7c:	1029883a 	mov	r20,r2
 1003e80:	003ecc06 	br	10039b4 <_dtoa_r+0xe14>
 1003e84:	00800e44 	movi	r2,57
 1003e88:	90809026 	beq	r18,r2,10040cc <_dtoa_r+0x152c>
 1003e8c:	92000044 	addi	r8,r18,1
 1003e90:	003f1f06 	br	1003b10 <_dtoa_r+0xf70>
 1003e94:	9011883a 	mov	r8,r18
 1003e98:	8825883a 	mov	r18,r17
 1003e9c:	a023883a 	mov	r17,r20
 1003ea0:	003e2906 	br	1003748 <_dtoa_r+0xba8>
 1003ea4:	002b883a 	mov	r21,zero
 1003ea8:	0023883a 	mov	r17,zero
 1003eac:	003f5406 	br	1003c00 <_dtoa_r+0x1060>
 1003eb0:	61bfffc4 	addi	r6,r12,-1
 1003eb4:	300490fa 	slli	r2,r6,3
 1003eb8:	00c04074 	movhi	r3,257
 1003ebc:	18fd1d04 	addi	r3,r3,-2956
 1003ec0:	1885883a 	add	r2,r3,r2
 1003ec4:	11000017 	ldw	r4,0(r2)
 1003ec8:	11400117 	ldw	r5,4(r2)
 1003ecc:	d8800717 	ldw	r2,28(sp)
 1003ed0:	880f883a 	mov	r7,r17
 1003ed4:	d9801215 	stw	r6,72(sp)
 1003ed8:	800d883a 	mov	r6,r16
 1003edc:	db001615 	stw	r12,88(sp)
 1003ee0:	15c00044 	addi	r23,r2,1
 1003ee4:	100ba480 	call	100ba48 <__muldf3>
 1003ee8:	d9401017 	ldw	r5,64(sp)
 1003eec:	d9000f17 	ldw	r4,60(sp)
 1003ef0:	d8c01515 	stw	r3,84(sp)
 1003ef4:	d8801415 	stw	r2,80(sp)
 1003ef8:	100ca5c0 	call	100ca5c <__fixdfsi>
 1003efc:	1009883a 	mov	r4,r2
 1003f00:	1021883a 	mov	r16,r2
 1003f04:	100cadc0 	call	100cadc <__floatsidf>
 1003f08:	d9000f17 	ldw	r4,60(sp)
 1003f0c:	d9401017 	ldw	r5,64(sp)
 1003f10:	100d883a 	mov	r6,r2
 1003f14:	180f883a 	mov	r7,r3
 1003f18:	100c1600 	call	100c160 <__subdf3>
 1003f1c:	1829883a 	mov	r20,r3
 1003f20:	d8c00717 	ldw	r3,28(sp)
 1003f24:	84000c04 	addi	r16,r16,48
 1003f28:	1023883a 	mov	r17,r2
 1003f2c:	1c000005 	stb	r16,0(r3)
 1003f30:	db001617 	ldw	r12,88(sp)
 1003f34:	00800044 	movi	r2,1
 1003f38:	60802226 	beq	r12,r2,1003fc4 <_dtoa_r+0x1424>
 1003f3c:	d9c00717 	ldw	r7,28(sp)
 1003f40:	8805883a 	mov	r2,r17
 1003f44:	b82b883a 	mov	r21,r23
 1003f48:	3b19883a 	add	r12,r7,r12
 1003f4c:	6023883a 	mov	r17,r12
 1003f50:	a007883a 	mov	r3,r20
 1003f54:	dc800f15 	stw	r18,60(sp)
 1003f58:	000d883a 	mov	r6,zero
 1003f5c:	01d00934 	movhi	r7,16420
 1003f60:	1009883a 	mov	r4,r2
 1003f64:	180b883a 	mov	r5,r3
 1003f68:	100ba480 	call	100ba48 <__muldf3>
 1003f6c:	180b883a 	mov	r5,r3
 1003f70:	1009883a 	mov	r4,r2
 1003f74:	1829883a 	mov	r20,r3
 1003f78:	1025883a 	mov	r18,r2
 1003f7c:	100ca5c0 	call	100ca5c <__fixdfsi>
 1003f80:	1009883a 	mov	r4,r2
 1003f84:	1021883a 	mov	r16,r2
 1003f88:	100cadc0 	call	100cadc <__floatsidf>
 1003f8c:	100d883a 	mov	r6,r2
 1003f90:	180f883a 	mov	r7,r3
 1003f94:	9009883a 	mov	r4,r18
 1003f98:	a00b883a 	mov	r5,r20
 1003f9c:	84000c04 	addi	r16,r16,48
 1003fa0:	100c1600 	call	100c160 <__subdf3>
 1003fa4:	ad400044 	addi	r21,r21,1
 1003fa8:	ac3fffc5 	stb	r16,-1(r21)
 1003fac:	ac7fea1e 	bne	r21,r17,1003f58 <_dtoa_r+0x13b8>
 1003fb0:	1023883a 	mov	r17,r2
 1003fb4:	d8801217 	ldw	r2,72(sp)
 1003fb8:	dc800f17 	ldw	r18,60(sp)
 1003fbc:	1829883a 	mov	r20,r3
 1003fc0:	b8af883a 	add	r23,r23,r2
 1003fc4:	d9001417 	ldw	r4,80(sp)
 1003fc8:	d9401517 	ldw	r5,84(sp)
 1003fcc:	000d883a 	mov	r6,zero
 1003fd0:	01cff834 	movhi	r7,16352
 1003fd4:	100a65c0 	call	100a65c <__adddf3>
 1003fd8:	880d883a 	mov	r6,r17
 1003fdc:	a00f883a 	mov	r7,r20
 1003fe0:	1009883a 	mov	r4,r2
 1003fe4:	180b883a 	mov	r5,r3
 1003fe8:	100b9540 	call	100b954 <__ledf2>
 1003fec:	10003e0e 	bge	r2,zero,10040e8 <_dtoa_r+0x1548>
 1003ff0:	d9001317 	ldw	r4,76(sp)
 1003ff4:	bd3fffc3 	ldbu	r20,-1(r23)
 1003ff8:	d9000515 	stw	r4,20(sp)
 1003ffc:	003d3b06 	br	10034ec <_dtoa_r+0x94c>
 1004000:	0027883a 	mov	r19,zero
 1004004:	003f1b06 	br	1003c74 <_dtoa_r+0x10d4>
 1004008:	d8800817 	ldw	r2,32(sp)
 100400c:	11e9c83a 	sub	r20,r2,r7
 1004010:	0005883a 	mov	r2,zero
 1004014:	003d5406 	br	1003568 <_dtoa_r+0x9c8>
 1004018:	00800044 	movi	r2,1
 100401c:	003dc706 	br	100373c <_dtoa_r+0xb9c>
 1004020:	d8c00217 	ldw	r3,8(sp)
 1004024:	00800d84 	movi	r2,54
 1004028:	dd400a17 	ldw	r21,40(sp)
 100402c:	10c5c83a 	sub	r2,r2,r3
 1004030:	dd000817 	ldw	r20,32(sp)
 1004034:	003d4c06 	br	1003568 <_dtoa_r+0x9c8>
 1004038:	dc800f15 	stw	r18,60(sp)
 100403c:	dcc01015 	stw	r19,64(sp)
 1004040:	04000084 	movi	r16,2
 1004044:	003bed06 	br	1002ffc <_dtoa_r+0x45c>
 1004048:	d9000617 	ldw	r4,24(sp)
 100404c:	203f0d26 	beq	r4,zero,1003c84 <_dtoa_r+0x10e4>
 1004050:	d9800c17 	ldw	r6,48(sp)
 1004054:	01bcab0e 	bge	zero,r6,1003304 <_dtoa_r+0x764>
 1004058:	d9401017 	ldw	r5,64(sp)
 100405c:	d9000f17 	ldw	r4,60(sp)
 1004060:	000d883a 	mov	r6,zero
 1004064:	01d00934 	movhi	r7,16420
 1004068:	100ba480 	call	100ba48 <__muldf3>
 100406c:	81000044 	addi	r4,r16,1
 1004070:	d8800f15 	stw	r2,60(sp)
 1004074:	d8c01015 	stw	r3,64(sp)
 1004078:	100cadc0 	call	100cadc <__floatsidf>
 100407c:	d9800f17 	ldw	r6,60(sp)
 1004080:	d9c01017 	ldw	r7,64(sp)
 1004084:	1009883a 	mov	r4,r2
 1004088:	180b883a 	mov	r5,r3
 100408c:	100ba480 	call	100ba48 <__muldf3>
 1004090:	01d00734 	movhi	r7,16412
 1004094:	000d883a 	mov	r6,zero
 1004098:	1009883a 	mov	r4,r2
 100409c:	180b883a 	mov	r5,r3
 10040a0:	100a65c0 	call	100a65c <__adddf3>
 10040a4:	d9c00517 	ldw	r7,20(sp)
 10040a8:	047f3034 	movhi	r17,64704
 10040ac:	1021883a 	mov	r16,r2
 10040b0:	39ffffc4 	addi	r7,r7,-1
 10040b4:	d9c01315 	stw	r7,76(sp)
 10040b8:	1c63883a 	add	r17,r3,r17
 10040bc:	db000c17 	ldw	r12,48(sp)
 10040c0:	003bea06 	br	100306c <_dtoa_r+0x4cc>
 10040c4:	dc000915 	stw	r16,36(sp)
 10040c8:	003e0e06 	br	1003904 <_dtoa_r+0xd64>
 10040cc:	01000e44 	movi	r4,57
 10040d0:	8825883a 	mov	r18,r17
 10040d4:	9dc00044 	addi	r23,r19,1
 10040d8:	99000005 	stb	r4,0(r19)
 10040dc:	a023883a 	mov	r17,r20
 10040e0:	dc000915 	stw	r16,36(sp)
 10040e4:	003da406 	br	1003778 <_dtoa_r+0xbd8>
 10040e8:	d9801417 	ldw	r6,80(sp)
 10040ec:	d9c01517 	ldw	r7,84(sp)
 10040f0:	0009883a 	mov	r4,zero
 10040f4:	014ff834 	movhi	r5,16352
 10040f8:	100c1600 	call	100c160 <__subdf3>
 10040fc:	880d883a 	mov	r6,r17
 1004100:	a00f883a 	mov	r7,r20
 1004104:	1009883a 	mov	r4,r2
 1004108:	180b883a 	mov	r5,r3
 100410c:	100b8780 	call	100b878 <__gedf2>
 1004110:	00bc7c0e 	bge	zero,r2,1003304 <_dtoa_r+0x764>
 1004114:	01000c04 	movi	r4,48
 1004118:	00000106 	br	1004120 <_dtoa_r+0x1580>
 100411c:	102f883a 	mov	r23,r2
 1004120:	b8bfffc4 	addi	r2,r23,-1
 1004124:	10c00007 	ldb	r3,0(r2)
 1004128:	193ffc26 	beq	r3,r4,100411c <_dtoa_r+0x157c>
 100412c:	d9801317 	ldw	r6,76(sp)
 1004130:	d9800515 	stw	r6,20(sp)
 1004134:	003c4406 	br	1003248 <_dtoa_r+0x6a8>
 1004138:	d9801317 	ldw	r6,76(sp)
 100413c:	d9800515 	stw	r6,20(sp)
 1004140:	003cea06 	br	10034ec <_dtoa_r+0x94c>
 1004144:	dd800f17 	ldw	r22,60(sp)
 1004148:	dcc01017 	ldw	r19,64(sp)
 100414c:	dc801217 	ldw	r18,72(sp)
 1004150:	003c6c06 	br	1003304 <_dtoa_r+0x764>
 1004154:	903e031e 	bne	r18,zero,1003964 <_dtoa_r+0xdc4>
 1004158:	003ebb06 	br	1003c48 <_dtoa_r+0x10a8>
 100415c:	103e6c1e 	bne	r2,zero,1003b10 <_dtoa_r+0xf70>
 1004160:	4080004c 	andi	r2,r8,1
 1004164:	103e6a26 	beq	r2,zero,1003b10 <_dtoa_r+0xf70>
 1004168:	003e6606 	br	1003b04 <_dtoa_r+0xf64>
 100416c:	d8c00317 	ldw	r3,12(sp)
 1004170:	00800084 	movi	r2,2
 1004174:	10c02916 	blt	r2,r3,100421c <_dtoa_r+0x167c>
 1004178:	d9000c17 	ldw	r4,48(sp)
 100417c:	003e8806 	br	1003ba0 <_dtoa_r+0x1000>
 1004180:	04000084 	movi	r16,2
 1004184:	003b9d06 	br	1002ffc <_dtoa_r+0x45c>
 1004188:	d9001317 	ldw	r4,76(sp)
 100418c:	d9000515 	stw	r4,20(sp)
 1004190:	003cd606 	br	10034ec <_dtoa_r+0x94c>
 1004194:	d8801317 	ldw	r2,76(sp)
 1004198:	d8800515 	stw	r2,20(sp)
 100419c:	003c2a06 	br	1003248 <_dtoa_r+0x6a8>
 10041a0:	d9800317 	ldw	r6,12(sp)
 10041a4:	00800084 	movi	r2,2
 10041a8:	11801516 	blt	r2,r6,1004200 <_dtoa_r+0x1660>
 10041ac:	d9c00c17 	ldw	r7,48(sp)
 10041b0:	d9c00615 	stw	r7,24(sp)
 10041b4:	003df706 	br	1003994 <_dtoa_r+0xdf4>
 10041b8:	193d3926 	beq	r3,r4,10036a0 <_dtoa_r+0xb00>
 10041bc:	00c00f04 	movi	r3,60
 10041c0:	1885c83a 	sub	r2,r3,r2
 10041c4:	003ddf06 	br	1003944 <_dtoa_r+0xda4>
 10041c8:	e009883a 	mov	r4,fp
 10041cc:	e0001115 	stw	zero,68(fp)
 10041d0:	000b883a 	mov	r5,zero
 10041d4:	100623c0 	call	100623c <_Balloc>
 10041d8:	d8800715 	stw	r2,28(sp)
 10041dc:	d8c00717 	ldw	r3,28(sp)
 10041e0:	00bfffc4 	movi	r2,-1
 10041e4:	01000044 	movi	r4,1
 10041e8:	d8800c15 	stw	r2,48(sp)
 10041ec:	e0c01015 	stw	r3,64(fp)
 10041f0:	d9000b15 	stw	r4,44(sp)
 10041f4:	d8800615 	stw	r2,24(sp)
 10041f8:	d8002215 	stw	zero,136(sp)
 10041fc:	003c4106 	br	1003304 <_dtoa_r+0x764>
 1004200:	d8c00c17 	ldw	r3,48(sp)
 1004204:	d8c00615 	stw	r3,24(sp)
 1004208:	003e7006 	br	1003bcc <_dtoa_r+0x102c>
 100420c:	04400044 	movi	r17,1
 1004210:	003b2006 	br	1002e94 <_dtoa_r+0x2f4>
 1004214:	000b883a 	mov	r5,zero
 1004218:	003b3d06 	br	1002f10 <_dtoa_r+0x370>
 100421c:	d8800c17 	ldw	r2,48(sp)
 1004220:	d8800615 	stw	r2,24(sp)
 1004224:	003e6906 	br	1003bcc <_dtoa_r+0x102c>

01004228 <__sflush_r>:
 1004228:	2880030b 	ldhu	r2,12(r5)
 100422c:	defffb04 	addi	sp,sp,-20
 1004230:	dcc00315 	stw	r19,12(sp)
 1004234:	dc400115 	stw	r17,4(sp)
 1004238:	dfc00415 	stw	ra,16(sp)
 100423c:	dc800215 	stw	r18,8(sp)
 1004240:	dc000015 	stw	r16,0(sp)
 1004244:	10c0020c 	andi	r3,r2,8
 1004248:	2823883a 	mov	r17,r5
 100424c:	2027883a 	mov	r19,r4
 1004250:	1800311e 	bne	r3,zero,1004318 <__sflush_r+0xf0>
 1004254:	28c00117 	ldw	r3,4(r5)
 1004258:	10820014 	ori	r2,r2,2048
 100425c:	2880030d 	sth	r2,12(r5)
 1004260:	00c04b0e 	bge	zero,r3,1004390 <__sflush_r+0x168>
 1004264:	8a000a17 	ldw	r8,40(r17)
 1004268:	40002326 	beq	r8,zero,10042f8 <__sflush_r+0xd0>
 100426c:	9c000017 	ldw	r16,0(r19)
 1004270:	10c4000c 	andi	r3,r2,4096
 1004274:	98000015 	stw	zero,0(r19)
 1004278:	18004826 	beq	r3,zero,100439c <__sflush_r+0x174>
 100427c:	89801417 	ldw	r6,80(r17)
 1004280:	10c0010c 	andi	r3,r2,4
 1004284:	18000626 	beq	r3,zero,10042a0 <__sflush_r+0x78>
 1004288:	88c00117 	ldw	r3,4(r17)
 100428c:	88800c17 	ldw	r2,48(r17)
 1004290:	30cdc83a 	sub	r6,r6,r3
 1004294:	10000226 	beq	r2,zero,10042a0 <__sflush_r+0x78>
 1004298:	88800f17 	ldw	r2,60(r17)
 100429c:	308dc83a 	sub	r6,r6,r2
 10042a0:	89400717 	ldw	r5,28(r17)
 10042a4:	000f883a 	mov	r7,zero
 10042a8:	9809883a 	mov	r4,r19
 10042ac:	403ee83a 	callr	r8
 10042b0:	00ffffc4 	movi	r3,-1
 10042b4:	10c04426 	beq	r2,r3,10043c8 <__sflush_r+0x1a0>
 10042b8:	88c0030b 	ldhu	r3,12(r17)
 10042bc:	89000417 	ldw	r4,16(r17)
 10042c0:	88000115 	stw	zero,4(r17)
 10042c4:	197dffcc 	andi	r5,r3,63487
 10042c8:	8940030d 	sth	r5,12(r17)
 10042cc:	89000015 	stw	r4,0(r17)
 10042d0:	18c4000c 	andi	r3,r3,4096
 10042d4:	18002c1e 	bne	r3,zero,1004388 <__sflush_r+0x160>
 10042d8:	89400c17 	ldw	r5,48(r17)
 10042dc:	9c000015 	stw	r16,0(r19)
 10042e0:	28000526 	beq	r5,zero,10042f8 <__sflush_r+0xd0>
 10042e4:	88801004 	addi	r2,r17,64
 10042e8:	28800226 	beq	r5,r2,10042f4 <__sflush_r+0xcc>
 10042ec:	9809883a 	mov	r4,r19
 10042f0:	10049940 	call	1004994 <_free_r>
 10042f4:	88000c15 	stw	zero,48(r17)
 10042f8:	0005883a 	mov	r2,zero
 10042fc:	dfc00417 	ldw	ra,16(sp)
 1004300:	dcc00317 	ldw	r19,12(sp)
 1004304:	dc800217 	ldw	r18,8(sp)
 1004308:	dc400117 	ldw	r17,4(sp)
 100430c:	dc000017 	ldw	r16,0(sp)
 1004310:	dec00504 	addi	sp,sp,20
 1004314:	f800283a 	ret
 1004318:	2c800417 	ldw	r18,16(r5)
 100431c:	903ff626 	beq	r18,zero,10042f8 <__sflush_r+0xd0>
 1004320:	2c000017 	ldw	r16,0(r5)
 1004324:	108000cc 	andi	r2,r2,3
 1004328:	2c800015 	stw	r18,0(r5)
 100432c:	84a1c83a 	sub	r16,r16,r18
 1004330:	1000131e 	bne	r2,zero,1004380 <__sflush_r+0x158>
 1004334:	28800517 	ldw	r2,20(r5)
 1004338:	88800215 	stw	r2,8(r17)
 100433c:	04000316 	blt	zero,r16,100434c <__sflush_r+0x124>
 1004340:	003fed06 	br	10042f8 <__sflush_r+0xd0>
 1004344:	90a5883a 	add	r18,r18,r2
 1004348:	043feb0e 	bge	zero,r16,10042f8 <__sflush_r+0xd0>
 100434c:	88800917 	ldw	r2,36(r17)
 1004350:	89400717 	ldw	r5,28(r17)
 1004354:	800f883a 	mov	r7,r16
 1004358:	900d883a 	mov	r6,r18
 100435c:	9809883a 	mov	r4,r19
 1004360:	103ee83a 	callr	r2
 1004364:	80a1c83a 	sub	r16,r16,r2
 1004368:	00bff616 	blt	zero,r2,1004344 <__sflush_r+0x11c>
 100436c:	88c0030b 	ldhu	r3,12(r17)
 1004370:	00bfffc4 	movi	r2,-1
 1004374:	18c01014 	ori	r3,r3,64
 1004378:	88c0030d 	sth	r3,12(r17)
 100437c:	003fdf06 	br	10042fc <__sflush_r+0xd4>
 1004380:	0005883a 	mov	r2,zero
 1004384:	003fec06 	br	1004338 <__sflush_r+0x110>
 1004388:	88801415 	stw	r2,80(r17)
 100438c:	003fd206 	br	10042d8 <__sflush_r+0xb0>
 1004390:	28c00f17 	ldw	r3,60(r5)
 1004394:	00ffb316 	blt	zero,r3,1004264 <__sflush_r+0x3c>
 1004398:	003fd706 	br	10042f8 <__sflush_r+0xd0>
 100439c:	89400717 	ldw	r5,28(r17)
 10043a0:	000d883a 	mov	r6,zero
 10043a4:	01c00044 	movi	r7,1
 10043a8:	9809883a 	mov	r4,r19
 10043ac:	403ee83a 	callr	r8
 10043b0:	100d883a 	mov	r6,r2
 10043b4:	00bfffc4 	movi	r2,-1
 10043b8:	30801426 	beq	r6,r2,100440c <__sflush_r+0x1e4>
 10043bc:	8880030b 	ldhu	r2,12(r17)
 10043c0:	8a000a17 	ldw	r8,40(r17)
 10043c4:	003fae06 	br	1004280 <__sflush_r+0x58>
 10043c8:	98c00017 	ldw	r3,0(r19)
 10043cc:	183fba26 	beq	r3,zero,10042b8 <__sflush_r+0x90>
 10043d0:	01000744 	movi	r4,29
 10043d4:	19000626 	beq	r3,r4,10043f0 <__sflush_r+0x1c8>
 10043d8:	01000584 	movi	r4,22
 10043dc:	19000426 	beq	r3,r4,10043f0 <__sflush_r+0x1c8>
 10043e0:	88c0030b 	ldhu	r3,12(r17)
 10043e4:	18c01014 	ori	r3,r3,64
 10043e8:	88c0030d 	sth	r3,12(r17)
 10043ec:	003fc306 	br	10042fc <__sflush_r+0xd4>
 10043f0:	8880030b 	ldhu	r2,12(r17)
 10043f4:	88c00417 	ldw	r3,16(r17)
 10043f8:	88000115 	stw	zero,4(r17)
 10043fc:	10bdffcc 	andi	r2,r2,63487
 1004400:	8880030d 	sth	r2,12(r17)
 1004404:	88c00015 	stw	r3,0(r17)
 1004408:	003fb306 	br	10042d8 <__sflush_r+0xb0>
 100440c:	98800017 	ldw	r2,0(r19)
 1004410:	103fea26 	beq	r2,zero,10043bc <__sflush_r+0x194>
 1004414:	00c00744 	movi	r3,29
 1004418:	10c00226 	beq	r2,r3,1004424 <__sflush_r+0x1fc>
 100441c:	00c00584 	movi	r3,22
 1004420:	10c0031e 	bne	r2,r3,1004430 <__sflush_r+0x208>
 1004424:	9c000015 	stw	r16,0(r19)
 1004428:	0005883a 	mov	r2,zero
 100442c:	003fb306 	br	10042fc <__sflush_r+0xd4>
 1004430:	88c0030b 	ldhu	r3,12(r17)
 1004434:	3005883a 	mov	r2,r6
 1004438:	18c01014 	ori	r3,r3,64
 100443c:	88c0030d 	sth	r3,12(r17)
 1004440:	003fae06 	br	10042fc <__sflush_r+0xd4>

01004444 <_fflush_r>:
 1004444:	defffd04 	addi	sp,sp,-12
 1004448:	dc000115 	stw	r16,4(sp)
 100444c:	dfc00215 	stw	ra,8(sp)
 1004450:	2021883a 	mov	r16,r4
 1004454:	20000226 	beq	r4,zero,1004460 <_fflush_r+0x1c>
 1004458:	20800e17 	ldw	r2,56(r4)
 100445c:	10000c26 	beq	r2,zero,1004490 <_fflush_r+0x4c>
 1004460:	2880030f 	ldh	r2,12(r5)
 1004464:	1000051e 	bne	r2,zero,100447c <_fflush_r+0x38>
 1004468:	0005883a 	mov	r2,zero
 100446c:	dfc00217 	ldw	ra,8(sp)
 1004470:	dc000117 	ldw	r16,4(sp)
 1004474:	dec00304 	addi	sp,sp,12
 1004478:	f800283a 	ret
 100447c:	8009883a 	mov	r4,r16
 1004480:	dfc00217 	ldw	ra,8(sp)
 1004484:	dc000117 	ldw	r16,4(sp)
 1004488:	dec00304 	addi	sp,sp,12
 100448c:	10042281 	jmpi	1004228 <__sflush_r>
 1004490:	d9400015 	stw	r5,0(sp)
 1004494:	10048200 	call	1004820 <__sinit>
 1004498:	d9400017 	ldw	r5,0(sp)
 100449c:	003ff006 	br	1004460 <_fflush_r+0x1c>

010044a0 <fflush>:
 10044a0:	20000526 	beq	r4,zero,10044b8 <fflush+0x18>
 10044a4:	00804074 	movhi	r2,257
 10044a8:	10844e04 	addi	r2,r2,4408
 10044ac:	200b883a 	mov	r5,r4
 10044b0:	11000017 	ldw	r4,0(r2)
 10044b4:	10044441 	jmpi	1004444 <_fflush_r>
 10044b8:	00804074 	movhi	r2,257
 10044bc:	10844d04 	addi	r2,r2,4404
 10044c0:	11000017 	ldw	r4,0(r2)
 10044c4:	01404034 	movhi	r5,256
 10044c8:	29511104 	addi	r5,r5,17476
 10044cc:	10052241 	jmpi	1005224 <_fwalk_reent>

010044d0 <__fp_unlock>:
 10044d0:	0005883a 	mov	r2,zero
 10044d4:	f800283a 	ret

010044d8 <_cleanup_r>:
 10044d8:	01404074 	movhi	r5,257
 10044dc:	29648f04 	addi	r5,r5,-28100
 10044e0:	10052241 	jmpi	1005224 <_fwalk_reent>

010044e4 <__sinit.part.1>:
 10044e4:	defff704 	addi	sp,sp,-36
 10044e8:	00c04034 	movhi	r3,256
 10044ec:	dfc00815 	stw	ra,32(sp)
 10044f0:	ddc00715 	stw	r23,28(sp)
 10044f4:	dd800615 	stw	r22,24(sp)
 10044f8:	dd400515 	stw	r21,20(sp)
 10044fc:	dd000415 	stw	r20,16(sp)
 1004500:	dcc00315 	stw	r19,12(sp)
 1004504:	dc800215 	stw	r18,8(sp)
 1004508:	dc400115 	stw	r17,4(sp)
 100450c:	dc000015 	stw	r16,0(sp)
 1004510:	18d13604 	addi	r3,r3,17624
 1004514:	24000117 	ldw	r16,4(r4)
 1004518:	20c00f15 	stw	r3,60(r4)
 100451c:	2080bb04 	addi	r2,r4,748
 1004520:	00c000c4 	movi	r3,3
 1004524:	20c0b915 	stw	r3,740(r4)
 1004528:	2080ba15 	stw	r2,744(r4)
 100452c:	2000b815 	stw	zero,736(r4)
 1004530:	05c00204 	movi	r23,8
 1004534:	00800104 	movi	r2,4
 1004538:	2025883a 	mov	r18,r4
 100453c:	b80d883a 	mov	r6,r23
 1004540:	81001704 	addi	r4,r16,92
 1004544:	000b883a 	mov	r5,zero
 1004548:	80000015 	stw	zero,0(r16)
 100454c:	80000115 	stw	zero,4(r16)
 1004550:	80000215 	stw	zero,8(r16)
 1004554:	8080030d 	sth	r2,12(r16)
 1004558:	80001915 	stw	zero,100(r16)
 100455c:	8000038d 	sth	zero,14(r16)
 1004560:	80000415 	stw	zero,16(r16)
 1004564:	80000515 	stw	zero,20(r16)
 1004568:	80000615 	stw	zero,24(r16)
 100456c:	10061140 	call	1006114 <memset>
 1004570:	05804034 	movhi	r22,256
 1004574:	94400217 	ldw	r17,8(r18)
 1004578:	05404034 	movhi	r21,256
 100457c:	05004034 	movhi	r20,256
 1004580:	04c04034 	movhi	r19,256
 1004584:	b59e1904 	addi	r22,r22,30820
 1004588:	ad5e3004 	addi	r21,r21,30912
 100458c:	a51e4f04 	addi	r20,r20,31036
 1004590:	9cde6604 	addi	r19,r19,31128
 1004594:	85800815 	stw	r22,32(r16)
 1004598:	85400915 	stw	r21,36(r16)
 100459c:	85000a15 	stw	r20,40(r16)
 10045a0:	84c00b15 	stw	r19,44(r16)
 10045a4:	84000715 	stw	r16,28(r16)
 10045a8:	00800284 	movi	r2,10
 10045ac:	8880030d 	sth	r2,12(r17)
 10045b0:	00800044 	movi	r2,1
 10045b4:	b80d883a 	mov	r6,r23
 10045b8:	89001704 	addi	r4,r17,92
 10045bc:	000b883a 	mov	r5,zero
 10045c0:	88000015 	stw	zero,0(r17)
 10045c4:	88000115 	stw	zero,4(r17)
 10045c8:	88000215 	stw	zero,8(r17)
 10045cc:	88001915 	stw	zero,100(r17)
 10045d0:	8880038d 	sth	r2,14(r17)
 10045d4:	88000415 	stw	zero,16(r17)
 10045d8:	88000515 	stw	zero,20(r17)
 10045dc:	88000615 	stw	zero,24(r17)
 10045e0:	10061140 	call	1006114 <memset>
 10045e4:	94000317 	ldw	r16,12(r18)
 10045e8:	00800484 	movi	r2,18
 10045ec:	8c400715 	stw	r17,28(r17)
 10045f0:	8d800815 	stw	r22,32(r17)
 10045f4:	8d400915 	stw	r21,36(r17)
 10045f8:	8d000a15 	stw	r20,40(r17)
 10045fc:	8cc00b15 	stw	r19,44(r17)
 1004600:	8080030d 	sth	r2,12(r16)
 1004604:	00800084 	movi	r2,2
 1004608:	80000015 	stw	zero,0(r16)
 100460c:	80000115 	stw	zero,4(r16)
 1004610:	80000215 	stw	zero,8(r16)
 1004614:	80001915 	stw	zero,100(r16)
 1004618:	8080038d 	sth	r2,14(r16)
 100461c:	80000415 	stw	zero,16(r16)
 1004620:	80000515 	stw	zero,20(r16)
 1004624:	80000615 	stw	zero,24(r16)
 1004628:	b80d883a 	mov	r6,r23
 100462c:	000b883a 	mov	r5,zero
 1004630:	81001704 	addi	r4,r16,92
 1004634:	10061140 	call	1006114 <memset>
 1004638:	00800044 	movi	r2,1
 100463c:	84000715 	stw	r16,28(r16)
 1004640:	85800815 	stw	r22,32(r16)
 1004644:	85400915 	stw	r21,36(r16)
 1004648:	85000a15 	stw	r20,40(r16)
 100464c:	84c00b15 	stw	r19,44(r16)
 1004650:	90800e15 	stw	r2,56(r18)
 1004654:	dfc00817 	ldw	ra,32(sp)
 1004658:	ddc00717 	ldw	r23,28(sp)
 100465c:	dd800617 	ldw	r22,24(sp)
 1004660:	dd400517 	ldw	r21,20(sp)
 1004664:	dd000417 	ldw	r20,16(sp)
 1004668:	dcc00317 	ldw	r19,12(sp)
 100466c:	dc800217 	ldw	r18,8(sp)
 1004670:	dc400117 	ldw	r17,4(sp)
 1004674:	dc000017 	ldw	r16,0(sp)
 1004678:	dec00904 	addi	sp,sp,36
 100467c:	f800283a 	ret

01004680 <__fp_lock>:
 1004680:	0005883a 	mov	r2,zero
 1004684:	f800283a 	ret

01004688 <__sfmoreglue>:
 1004688:	defffc04 	addi	sp,sp,-16
 100468c:	dc400115 	stw	r17,4(sp)
 1004690:	2c7fffc4 	addi	r17,r5,-1
 1004694:	8c401a24 	muli	r17,r17,104
 1004698:	dc800215 	stw	r18,8(sp)
 100469c:	2825883a 	mov	r18,r5
 10046a0:	89401d04 	addi	r5,r17,116
 10046a4:	dc000015 	stw	r16,0(sp)
 10046a8:	dfc00315 	stw	ra,12(sp)
 10046ac:	10055800 	call	1005580 <_malloc_r>
 10046b0:	1021883a 	mov	r16,r2
 10046b4:	10000726 	beq	r2,zero,10046d4 <__sfmoreglue+0x4c>
 10046b8:	11000304 	addi	r4,r2,12
 10046bc:	10000015 	stw	zero,0(r2)
 10046c0:	14800115 	stw	r18,4(r2)
 10046c4:	11000215 	stw	r4,8(r2)
 10046c8:	89801a04 	addi	r6,r17,104
 10046cc:	000b883a 	mov	r5,zero
 10046d0:	10061140 	call	1006114 <memset>
 10046d4:	8005883a 	mov	r2,r16
 10046d8:	dfc00317 	ldw	ra,12(sp)
 10046dc:	dc800217 	ldw	r18,8(sp)
 10046e0:	dc400117 	ldw	r17,4(sp)
 10046e4:	dc000017 	ldw	r16,0(sp)
 10046e8:	dec00404 	addi	sp,sp,16
 10046ec:	f800283a 	ret

010046f0 <__sfp>:
 10046f0:	defffb04 	addi	sp,sp,-20
 10046f4:	dc000015 	stw	r16,0(sp)
 10046f8:	04004074 	movhi	r16,257
 10046fc:	84044d04 	addi	r16,r16,4404
 1004700:	dcc00315 	stw	r19,12(sp)
 1004704:	2027883a 	mov	r19,r4
 1004708:	81000017 	ldw	r4,0(r16)
 100470c:	dfc00415 	stw	ra,16(sp)
 1004710:	dc800215 	stw	r18,8(sp)
 1004714:	20800e17 	ldw	r2,56(r4)
 1004718:	dc400115 	stw	r17,4(sp)
 100471c:	1000021e 	bne	r2,zero,1004728 <__sfp+0x38>
 1004720:	10044e40 	call	10044e4 <__sinit.part.1>
 1004724:	81000017 	ldw	r4,0(r16)
 1004728:	2480b804 	addi	r18,r4,736
 100472c:	047fffc4 	movi	r17,-1
 1004730:	91000117 	ldw	r4,4(r18)
 1004734:	94000217 	ldw	r16,8(r18)
 1004738:	213fffc4 	addi	r4,r4,-1
 100473c:	20000a16 	blt	r4,zero,1004768 <__sfp+0x78>
 1004740:	8080030f 	ldh	r2,12(r16)
 1004744:	10000c26 	beq	r2,zero,1004778 <__sfp+0x88>
 1004748:	80c01d04 	addi	r3,r16,116
 100474c:	00000206 	br	1004758 <__sfp+0x68>
 1004750:	18bfe60f 	ldh	r2,-104(r3)
 1004754:	10000826 	beq	r2,zero,1004778 <__sfp+0x88>
 1004758:	213fffc4 	addi	r4,r4,-1
 100475c:	1c3ffd04 	addi	r16,r3,-12
 1004760:	18c01a04 	addi	r3,r3,104
 1004764:	247ffa1e 	bne	r4,r17,1004750 <__sfp+0x60>
 1004768:	90800017 	ldw	r2,0(r18)
 100476c:	10001d26 	beq	r2,zero,10047e4 <__sfp+0xf4>
 1004770:	1025883a 	mov	r18,r2
 1004774:	003fee06 	br	1004730 <__sfp+0x40>
 1004778:	00bfffc4 	movi	r2,-1
 100477c:	8080038d 	sth	r2,14(r16)
 1004780:	00800044 	movi	r2,1
 1004784:	8080030d 	sth	r2,12(r16)
 1004788:	80001915 	stw	zero,100(r16)
 100478c:	80000015 	stw	zero,0(r16)
 1004790:	80000215 	stw	zero,8(r16)
 1004794:	80000115 	stw	zero,4(r16)
 1004798:	80000415 	stw	zero,16(r16)
 100479c:	80000515 	stw	zero,20(r16)
 10047a0:	80000615 	stw	zero,24(r16)
 10047a4:	01800204 	movi	r6,8
 10047a8:	000b883a 	mov	r5,zero
 10047ac:	81001704 	addi	r4,r16,92
 10047b0:	10061140 	call	1006114 <memset>
 10047b4:	8005883a 	mov	r2,r16
 10047b8:	80000c15 	stw	zero,48(r16)
 10047bc:	80000d15 	stw	zero,52(r16)
 10047c0:	80001115 	stw	zero,68(r16)
 10047c4:	80001215 	stw	zero,72(r16)
 10047c8:	dfc00417 	ldw	ra,16(sp)
 10047cc:	dcc00317 	ldw	r19,12(sp)
 10047d0:	dc800217 	ldw	r18,8(sp)
 10047d4:	dc400117 	ldw	r17,4(sp)
 10047d8:	dc000017 	ldw	r16,0(sp)
 10047dc:	dec00504 	addi	sp,sp,20
 10047e0:	f800283a 	ret
 10047e4:	01400104 	movi	r5,4
 10047e8:	9809883a 	mov	r4,r19
 10047ec:	10046880 	call	1004688 <__sfmoreglue>
 10047f0:	90800015 	stw	r2,0(r18)
 10047f4:	103fde1e 	bne	r2,zero,1004770 <__sfp+0x80>
 10047f8:	00800304 	movi	r2,12
 10047fc:	98800015 	stw	r2,0(r19)
 1004800:	0005883a 	mov	r2,zero
 1004804:	003ff006 	br	10047c8 <__sfp+0xd8>

01004808 <_cleanup>:
 1004808:	00804074 	movhi	r2,257
 100480c:	10844d04 	addi	r2,r2,4404
 1004810:	11000017 	ldw	r4,0(r2)
 1004814:	01404074 	movhi	r5,257
 1004818:	29648f04 	addi	r5,r5,-28100
 100481c:	10052241 	jmpi	1005224 <_fwalk_reent>

01004820 <__sinit>:
 1004820:	20800e17 	ldw	r2,56(r4)
 1004824:	10000126 	beq	r2,zero,100482c <__sinit+0xc>
 1004828:	f800283a 	ret
 100482c:	10044e41 	jmpi	10044e4 <__sinit.part.1>

01004830 <__sfp_lock_acquire>:
 1004830:	f800283a 	ret

01004834 <__sfp_lock_release>:
 1004834:	f800283a 	ret

01004838 <__sinit_lock_acquire>:
 1004838:	f800283a 	ret

0100483c <__sinit_lock_release>:
 100483c:	f800283a 	ret

01004840 <__fp_lock_all>:
 1004840:	00804074 	movhi	r2,257
 1004844:	10844e04 	addi	r2,r2,4408
 1004848:	11000017 	ldw	r4,0(r2)
 100484c:	01404034 	movhi	r5,256
 1004850:	2951a004 	addi	r5,r5,18048
 1004854:	10051601 	jmpi	1005160 <_fwalk>

01004858 <__fp_unlock_all>:
 1004858:	00804074 	movhi	r2,257
 100485c:	10844e04 	addi	r2,r2,4408
 1004860:	11000017 	ldw	r4,0(r2)
 1004864:	01404034 	movhi	r5,256
 1004868:	29513404 	addi	r5,r5,17616
 100486c:	10051601 	jmpi	1005160 <_fwalk>

01004870 <_malloc_trim_r>:
 1004870:	defffb04 	addi	sp,sp,-20
 1004874:	dcc00315 	stw	r19,12(sp)
 1004878:	04c04074 	movhi	r19,257
 100487c:	dc800215 	stw	r18,8(sp)
 1004880:	dc400115 	stw	r17,4(sp)
 1004884:	dc000015 	stw	r16,0(sp)
 1004888:	dfc00415 	stw	ra,16(sp)
 100488c:	2821883a 	mov	r16,r5
 1004890:	9cfec904 	addi	r19,r19,-1244
 1004894:	2025883a 	mov	r18,r4
 1004898:	100d4e00 	call	100d4e0 <__malloc_lock>
 100489c:	98800217 	ldw	r2,8(r19)
 10048a0:	14400117 	ldw	r17,4(r2)
 10048a4:	00bfff04 	movi	r2,-4
 10048a8:	88a2703a 	and	r17,r17,r2
 10048ac:	8c21c83a 	sub	r16,r17,r16
 10048b0:	8403fbc4 	addi	r16,r16,4079
 10048b4:	8020d33a 	srli	r16,r16,12
 10048b8:	0083ffc4 	movi	r2,4095
 10048bc:	843fffc4 	addi	r16,r16,-1
 10048c0:	8020933a 	slli	r16,r16,12
 10048c4:	1400060e 	bge	r2,r16,10048e0 <_malloc_trim_r+0x70>
 10048c8:	000b883a 	mov	r5,zero
 10048cc:	9009883a 	mov	r4,r18
 10048d0:	10078100 	call	1007810 <_sbrk_r>
 10048d4:	98c00217 	ldw	r3,8(r19)
 10048d8:	1c47883a 	add	r3,r3,r17
 10048dc:	10c00a26 	beq	r2,r3,1004908 <_malloc_trim_r+0x98>
 10048e0:	9009883a 	mov	r4,r18
 10048e4:	100d5040 	call	100d504 <__malloc_unlock>
 10048e8:	0005883a 	mov	r2,zero
 10048ec:	dfc00417 	ldw	ra,16(sp)
 10048f0:	dcc00317 	ldw	r19,12(sp)
 10048f4:	dc800217 	ldw	r18,8(sp)
 10048f8:	dc400117 	ldw	r17,4(sp)
 10048fc:	dc000017 	ldw	r16,0(sp)
 1004900:	dec00504 	addi	sp,sp,20
 1004904:	f800283a 	ret
 1004908:	040bc83a 	sub	r5,zero,r16
 100490c:	9009883a 	mov	r4,r18
 1004910:	10078100 	call	1007810 <_sbrk_r>
 1004914:	00ffffc4 	movi	r3,-1
 1004918:	10c00d26 	beq	r2,r3,1004950 <_malloc_trim_r+0xe0>
 100491c:	00c04074 	movhi	r3,257
 1004920:	18cb2704 	addi	r3,r3,11420
 1004924:	18800017 	ldw	r2,0(r3)
 1004928:	99000217 	ldw	r4,8(r19)
 100492c:	8c23c83a 	sub	r17,r17,r16
 1004930:	8c400054 	ori	r17,r17,1
 1004934:	1421c83a 	sub	r16,r2,r16
 1004938:	24400115 	stw	r17,4(r4)
 100493c:	9009883a 	mov	r4,r18
 1004940:	1c000015 	stw	r16,0(r3)
 1004944:	100d5040 	call	100d504 <__malloc_unlock>
 1004948:	00800044 	movi	r2,1
 100494c:	003fe706 	br	10048ec <_malloc_trim_r+0x7c>
 1004950:	000b883a 	mov	r5,zero
 1004954:	9009883a 	mov	r4,r18
 1004958:	10078100 	call	1007810 <_sbrk_r>
 100495c:	99000217 	ldw	r4,8(r19)
 1004960:	014003c4 	movi	r5,15
 1004964:	1107c83a 	sub	r3,r2,r4
 1004968:	28ffdd0e 	bge	r5,r3,10048e0 <_malloc_trim_r+0x70>
 100496c:	01404074 	movhi	r5,257
 1004970:	29445004 	addi	r5,r5,4416
 1004974:	29400017 	ldw	r5,0(r5)
 1004978:	18c00054 	ori	r3,r3,1
 100497c:	20c00115 	stw	r3,4(r4)
 1004980:	00c04074 	movhi	r3,257
 1004984:	1145c83a 	sub	r2,r2,r5
 1004988:	18cb2704 	addi	r3,r3,11420
 100498c:	18800015 	stw	r2,0(r3)
 1004990:	003fd306 	br	10048e0 <_malloc_trim_r+0x70>

01004994 <_free_r>:
 1004994:	28004126 	beq	r5,zero,1004a9c <_free_r+0x108>
 1004998:	defffd04 	addi	sp,sp,-12
 100499c:	dc400115 	stw	r17,4(sp)
 10049a0:	dc000015 	stw	r16,0(sp)
 10049a4:	2023883a 	mov	r17,r4
 10049a8:	2821883a 	mov	r16,r5
 10049ac:	dfc00215 	stw	ra,8(sp)
 10049b0:	100d4e00 	call	100d4e0 <__malloc_lock>
 10049b4:	81ffff17 	ldw	r7,-4(r16)
 10049b8:	00bfff84 	movi	r2,-2
 10049bc:	01004074 	movhi	r4,257
 10049c0:	81bffe04 	addi	r6,r16,-8
 10049c4:	3884703a 	and	r2,r7,r2
 10049c8:	213ec904 	addi	r4,r4,-1244
 10049cc:	308b883a 	add	r5,r6,r2
 10049d0:	2a400117 	ldw	r9,4(r5)
 10049d4:	22000217 	ldw	r8,8(r4)
 10049d8:	00ffff04 	movi	r3,-4
 10049dc:	48c6703a 	and	r3,r9,r3
 10049e0:	2a005726 	beq	r5,r8,1004b40 <_free_r+0x1ac>
 10049e4:	28c00115 	stw	r3,4(r5)
 10049e8:	39c0004c 	andi	r7,r7,1
 10049ec:	3800091e 	bne	r7,zero,1004a14 <_free_r+0x80>
 10049f0:	823ffe17 	ldw	r8,-8(r16)
 10049f4:	22400204 	addi	r9,r4,8
 10049f8:	320dc83a 	sub	r6,r6,r8
 10049fc:	31c00217 	ldw	r7,8(r6)
 1004a00:	1205883a 	add	r2,r2,r8
 1004a04:	3a406526 	beq	r7,r9,1004b9c <_free_r+0x208>
 1004a08:	32000317 	ldw	r8,12(r6)
 1004a0c:	3a000315 	stw	r8,12(r7)
 1004a10:	41c00215 	stw	r7,8(r8)
 1004a14:	28cf883a 	add	r7,r5,r3
 1004a18:	39c00117 	ldw	r7,4(r7)
 1004a1c:	39c0004c 	andi	r7,r7,1
 1004a20:	38003a26 	beq	r7,zero,1004b0c <_free_r+0x178>
 1004a24:	10c00054 	ori	r3,r2,1
 1004a28:	30c00115 	stw	r3,4(r6)
 1004a2c:	3087883a 	add	r3,r6,r2
 1004a30:	18800015 	stw	r2,0(r3)
 1004a34:	00c07fc4 	movi	r3,511
 1004a38:	18801936 	bltu	r3,r2,1004aa0 <_free_r+0x10c>
 1004a3c:	1004d0fa 	srli	r2,r2,3
 1004a40:	01c00044 	movi	r7,1
 1004a44:	21400117 	ldw	r5,4(r4)
 1004a48:	10c00044 	addi	r3,r2,1
 1004a4c:	18c7883a 	add	r3,r3,r3
 1004a50:	1005d0ba 	srai	r2,r2,2
 1004a54:	18c7883a 	add	r3,r3,r3
 1004a58:	18c7883a 	add	r3,r3,r3
 1004a5c:	1907883a 	add	r3,r3,r4
 1004a60:	3884983a 	sll	r2,r7,r2
 1004a64:	19c00017 	ldw	r7,0(r3)
 1004a68:	1a3ffe04 	addi	r8,r3,-8
 1004a6c:	1144b03a 	or	r2,r2,r5
 1004a70:	32000315 	stw	r8,12(r6)
 1004a74:	31c00215 	stw	r7,8(r6)
 1004a78:	20800115 	stw	r2,4(r4)
 1004a7c:	19800015 	stw	r6,0(r3)
 1004a80:	39800315 	stw	r6,12(r7)
 1004a84:	8809883a 	mov	r4,r17
 1004a88:	dfc00217 	ldw	ra,8(sp)
 1004a8c:	dc400117 	ldw	r17,4(sp)
 1004a90:	dc000017 	ldw	r16,0(sp)
 1004a94:	dec00304 	addi	sp,sp,12
 1004a98:	100d5041 	jmpi	100d504 <__malloc_unlock>
 1004a9c:	f800283a 	ret
 1004aa0:	100ad27a 	srli	r5,r2,9
 1004aa4:	00c00104 	movi	r3,4
 1004aa8:	19404a36 	bltu	r3,r5,1004bd4 <_free_r+0x240>
 1004aac:	100ad1ba 	srli	r5,r2,6
 1004ab0:	28c00e44 	addi	r3,r5,57
 1004ab4:	18c7883a 	add	r3,r3,r3
 1004ab8:	29400e04 	addi	r5,r5,56
 1004abc:	18c7883a 	add	r3,r3,r3
 1004ac0:	18c7883a 	add	r3,r3,r3
 1004ac4:	1909883a 	add	r4,r3,r4
 1004ac8:	20c00017 	ldw	r3,0(r4)
 1004acc:	01c04074 	movhi	r7,257
 1004ad0:	213ffe04 	addi	r4,r4,-8
 1004ad4:	39fec904 	addi	r7,r7,-1244
 1004ad8:	20c04426 	beq	r4,r3,1004bec <_free_r+0x258>
 1004adc:	01ffff04 	movi	r7,-4
 1004ae0:	19400117 	ldw	r5,4(r3)
 1004ae4:	29ca703a 	and	r5,r5,r7
 1004ae8:	1140022e 	bgeu	r2,r5,1004af4 <_free_r+0x160>
 1004aec:	18c00217 	ldw	r3,8(r3)
 1004af0:	20fffb1e 	bne	r4,r3,1004ae0 <_free_r+0x14c>
 1004af4:	19000317 	ldw	r4,12(r3)
 1004af8:	31000315 	stw	r4,12(r6)
 1004afc:	30c00215 	stw	r3,8(r6)
 1004b00:	21800215 	stw	r6,8(r4)
 1004b04:	19800315 	stw	r6,12(r3)
 1004b08:	003fde06 	br	1004a84 <_free_r+0xf0>
 1004b0c:	29c00217 	ldw	r7,8(r5)
 1004b10:	10c5883a 	add	r2,r2,r3
 1004b14:	00c04074 	movhi	r3,257
 1004b18:	18fecb04 	addi	r3,r3,-1236
 1004b1c:	38c03b26 	beq	r7,r3,1004c0c <_free_r+0x278>
 1004b20:	2a000317 	ldw	r8,12(r5)
 1004b24:	11400054 	ori	r5,r2,1
 1004b28:	3087883a 	add	r3,r6,r2
 1004b2c:	3a000315 	stw	r8,12(r7)
 1004b30:	41c00215 	stw	r7,8(r8)
 1004b34:	31400115 	stw	r5,4(r6)
 1004b38:	18800015 	stw	r2,0(r3)
 1004b3c:	003fbd06 	br	1004a34 <_free_r+0xa0>
 1004b40:	39c0004c 	andi	r7,r7,1
 1004b44:	10c5883a 	add	r2,r2,r3
 1004b48:	3800071e 	bne	r7,zero,1004b68 <_free_r+0x1d4>
 1004b4c:	81fffe17 	ldw	r7,-8(r16)
 1004b50:	31cdc83a 	sub	r6,r6,r7
 1004b54:	30c00317 	ldw	r3,12(r6)
 1004b58:	31400217 	ldw	r5,8(r6)
 1004b5c:	11c5883a 	add	r2,r2,r7
 1004b60:	28c00315 	stw	r3,12(r5)
 1004b64:	19400215 	stw	r5,8(r3)
 1004b68:	10c00054 	ori	r3,r2,1
 1004b6c:	30c00115 	stw	r3,4(r6)
 1004b70:	00c04074 	movhi	r3,257
 1004b74:	18c45104 	addi	r3,r3,4420
 1004b78:	18c00017 	ldw	r3,0(r3)
 1004b7c:	21800215 	stw	r6,8(r4)
 1004b80:	10ffc036 	bltu	r2,r3,1004a84 <_free_r+0xf0>
 1004b84:	00804074 	movhi	r2,257
 1004b88:	108b1e04 	addi	r2,r2,11384
 1004b8c:	11400017 	ldw	r5,0(r2)
 1004b90:	8809883a 	mov	r4,r17
 1004b94:	10048700 	call	1004870 <_malloc_trim_r>
 1004b98:	003fba06 	br	1004a84 <_free_r+0xf0>
 1004b9c:	28c9883a 	add	r4,r5,r3
 1004ba0:	21000117 	ldw	r4,4(r4)
 1004ba4:	2100004c 	andi	r4,r4,1
 1004ba8:	2000391e 	bne	r4,zero,1004c90 <_free_r+0x2fc>
 1004bac:	29c00217 	ldw	r7,8(r5)
 1004bb0:	29000317 	ldw	r4,12(r5)
 1004bb4:	1885883a 	add	r2,r3,r2
 1004bb8:	10c00054 	ori	r3,r2,1
 1004bbc:	39000315 	stw	r4,12(r7)
 1004bc0:	21c00215 	stw	r7,8(r4)
 1004bc4:	30c00115 	stw	r3,4(r6)
 1004bc8:	308d883a 	add	r6,r6,r2
 1004bcc:	30800015 	stw	r2,0(r6)
 1004bd0:	003fac06 	br	1004a84 <_free_r+0xf0>
 1004bd4:	00c00504 	movi	r3,20
 1004bd8:	19401536 	bltu	r3,r5,1004c30 <_free_r+0x29c>
 1004bdc:	28c01704 	addi	r3,r5,92
 1004be0:	18c7883a 	add	r3,r3,r3
 1004be4:	294016c4 	addi	r5,r5,91
 1004be8:	003fb406 	br	1004abc <_free_r+0x128>
 1004bec:	280bd0ba 	srai	r5,r5,2
 1004bf0:	00c00044 	movi	r3,1
 1004bf4:	38800117 	ldw	r2,4(r7)
 1004bf8:	194a983a 	sll	r5,r3,r5
 1004bfc:	2007883a 	mov	r3,r4
 1004c00:	2884b03a 	or	r2,r5,r2
 1004c04:	38800115 	stw	r2,4(r7)
 1004c08:	003fbb06 	br	1004af8 <_free_r+0x164>
 1004c0c:	21800515 	stw	r6,20(r4)
 1004c10:	21800415 	stw	r6,16(r4)
 1004c14:	10c00054 	ori	r3,r2,1
 1004c18:	31c00315 	stw	r7,12(r6)
 1004c1c:	31c00215 	stw	r7,8(r6)
 1004c20:	30c00115 	stw	r3,4(r6)
 1004c24:	308d883a 	add	r6,r6,r2
 1004c28:	30800015 	stw	r2,0(r6)
 1004c2c:	003f9506 	br	1004a84 <_free_r+0xf0>
 1004c30:	00c01504 	movi	r3,84
 1004c34:	19400536 	bltu	r3,r5,1004c4c <_free_r+0x2b8>
 1004c38:	100ad33a 	srli	r5,r2,12
 1004c3c:	28c01bc4 	addi	r3,r5,111
 1004c40:	18c7883a 	add	r3,r3,r3
 1004c44:	29401b84 	addi	r5,r5,110
 1004c48:	003f9c06 	br	1004abc <_free_r+0x128>
 1004c4c:	00c05504 	movi	r3,340
 1004c50:	19400536 	bltu	r3,r5,1004c68 <_free_r+0x2d4>
 1004c54:	100ad3fa 	srli	r5,r2,15
 1004c58:	28c01e04 	addi	r3,r5,120
 1004c5c:	18c7883a 	add	r3,r3,r3
 1004c60:	29401dc4 	addi	r5,r5,119
 1004c64:	003f9506 	br	1004abc <_free_r+0x128>
 1004c68:	00c15504 	movi	r3,1364
 1004c6c:	19400536 	bltu	r3,r5,1004c84 <_free_r+0x2f0>
 1004c70:	100ad4ba 	srli	r5,r2,18
 1004c74:	28c01f44 	addi	r3,r5,125
 1004c78:	18c7883a 	add	r3,r3,r3
 1004c7c:	29401f04 	addi	r5,r5,124
 1004c80:	003f8e06 	br	1004abc <_free_r+0x128>
 1004c84:	00c03f84 	movi	r3,254
 1004c88:	01401f84 	movi	r5,126
 1004c8c:	003f8b06 	br	1004abc <_free_r+0x128>
 1004c90:	10c00054 	ori	r3,r2,1
 1004c94:	30c00115 	stw	r3,4(r6)
 1004c98:	308d883a 	add	r6,r6,r2
 1004c9c:	30800015 	stw	r2,0(r6)
 1004ca0:	003f7806 	br	1004a84 <_free_r+0xf0>

01004ca4 <__sfvwrite_r>:
 1004ca4:	30800217 	ldw	r2,8(r6)
 1004ca8:	10006726 	beq	r2,zero,1004e48 <__sfvwrite_r+0x1a4>
 1004cac:	28c0030b 	ldhu	r3,12(r5)
 1004cb0:	defff404 	addi	sp,sp,-48
 1004cb4:	dd400715 	stw	r21,28(sp)
 1004cb8:	dd000615 	stw	r20,24(sp)
 1004cbc:	dc000215 	stw	r16,8(sp)
 1004cc0:	dfc00b15 	stw	ra,44(sp)
 1004cc4:	df000a15 	stw	fp,40(sp)
 1004cc8:	ddc00915 	stw	r23,36(sp)
 1004ccc:	dd800815 	stw	r22,32(sp)
 1004cd0:	dcc00515 	stw	r19,20(sp)
 1004cd4:	dc800415 	stw	r18,16(sp)
 1004cd8:	dc400315 	stw	r17,12(sp)
 1004cdc:	1880020c 	andi	r2,r3,8
 1004ce0:	2821883a 	mov	r16,r5
 1004ce4:	202b883a 	mov	r21,r4
 1004ce8:	3029883a 	mov	r20,r6
 1004cec:	10002726 	beq	r2,zero,1004d8c <__sfvwrite_r+0xe8>
 1004cf0:	28800417 	ldw	r2,16(r5)
 1004cf4:	10002526 	beq	r2,zero,1004d8c <__sfvwrite_r+0xe8>
 1004cf8:	1880008c 	andi	r2,r3,2
 1004cfc:	a4400017 	ldw	r17,0(r20)
 1004d00:	10002a26 	beq	r2,zero,1004dac <__sfvwrite_r+0x108>
 1004d04:	05a00034 	movhi	r22,32768
 1004d08:	0027883a 	mov	r19,zero
 1004d0c:	0025883a 	mov	r18,zero
 1004d10:	b5bf0004 	addi	r22,r22,-1024
 1004d14:	980d883a 	mov	r6,r19
 1004d18:	a809883a 	mov	r4,r21
 1004d1c:	90004626 	beq	r18,zero,1004e38 <__sfvwrite_r+0x194>
 1004d20:	900f883a 	mov	r7,r18
 1004d24:	b480022e 	bgeu	r22,r18,1004d30 <__sfvwrite_r+0x8c>
 1004d28:	01e00034 	movhi	r7,32768
 1004d2c:	39ff0004 	addi	r7,r7,-1024
 1004d30:	80800917 	ldw	r2,36(r16)
 1004d34:	81400717 	ldw	r5,28(r16)
 1004d38:	103ee83a 	callr	r2
 1004d3c:	0080570e 	bge	zero,r2,1004e9c <__sfvwrite_r+0x1f8>
 1004d40:	a0c00217 	ldw	r3,8(r20)
 1004d44:	98a7883a 	add	r19,r19,r2
 1004d48:	90a5c83a 	sub	r18,r18,r2
 1004d4c:	1885c83a 	sub	r2,r3,r2
 1004d50:	a0800215 	stw	r2,8(r20)
 1004d54:	103fef1e 	bne	r2,zero,1004d14 <__sfvwrite_r+0x70>
 1004d58:	0005883a 	mov	r2,zero
 1004d5c:	dfc00b17 	ldw	ra,44(sp)
 1004d60:	df000a17 	ldw	fp,40(sp)
 1004d64:	ddc00917 	ldw	r23,36(sp)
 1004d68:	dd800817 	ldw	r22,32(sp)
 1004d6c:	dd400717 	ldw	r21,28(sp)
 1004d70:	dd000617 	ldw	r20,24(sp)
 1004d74:	dcc00517 	ldw	r19,20(sp)
 1004d78:	dc800417 	ldw	r18,16(sp)
 1004d7c:	dc400317 	ldw	r17,12(sp)
 1004d80:	dc000217 	ldw	r16,8(sp)
 1004d84:	dec00c04 	addi	sp,sp,48
 1004d88:	f800283a 	ret
 1004d8c:	800b883a 	mov	r5,r16
 1004d90:	a809883a 	mov	r4,r21
 1004d94:	100284c0 	call	100284c <__swsetup_r>
 1004d98:	1000eb1e 	bne	r2,zero,1005148 <__sfvwrite_r+0x4a4>
 1004d9c:	80c0030b 	ldhu	r3,12(r16)
 1004da0:	a4400017 	ldw	r17,0(r20)
 1004da4:	1880008c 	andi	r2,r3,2
 1004da8:	103fd61e 	bne	r2,zero,1004d04 <__sfvwrite_r+0x60>
 1004dac:	1880004c 	andi	r2,r3,1
 1004db0:	10003f1e 	bne	r2,zero,1004eb0 <__sfvwrite_r+0x20c>
 1004db4:	0039883a 	mov	fp,zero
 1004db8:	0025883a 	mov	r18,zero
 1004dbc:	90001a26 	beq	r18,zero,1004e28 <__sfvwrite_r+0x184>
 1004dc0:	1880800c 	andi	r2,r3,512
 1004dc4:	84c00217 	ldw	r19,8(r16)
 1004dc8:	10002126 	beq	r2,zero,1004e50 <__sfvwrite_r+0x1ac>
 1004dcc:	982f883a 	mov	r23,r19
 1004dd0:	94c09336 	bltu	r18,r19,1005020 <__sfvwrite_r+0x37c>
 1004dd4:	1881200c 	andi	r2,r3,1152
 1004dd8:	10009e1e 	bne	r2,zero,1005054 <__sfvwrite_r+0x3b0>
 1004ddc:	81000017 	ldw	r4,0(r16)
 1004de0:	b80d883a 	mov	r6,r23
 1004de4:	e00b883a 	mov	r5,fp
 1004de8:	1005fb80 	call	1005fb8 <memmove>
 1004dec:	80c00217 	ldw	r3,8(r16)
 1004df0:	81000017 	ldw	r4,0(r16)
 1004df4:	9005883a 	mov	r2,r18
 1004df8:	1ce7c83a 	sub	r19,r3,r19
 1004dfc:	25cf883a 	add	r7,r4,r23
 1004e00:	84c00215 	stw	r19,8(r16)
 1004e04:	81c00015 	stw	r7,0(r16)
 1004e08:	a0c00217 	ldw	r3,8(r20)
 1004e0c:	e0b9883a 	add	fp,fp,r2
 1004e10:	90a5c83a 	sub	r18,r18,r2
 1004e14:	18a7c83a 	sub	r19,r3,r2
 1004e18:	a4c00215 	stw	r19,8(r20)
 1004e1c:	983fce26 	beq	r19,zero,1004d58 <__sfvwrite_r+0xb4>
 1004e20:	80c0030b 	ldhu	r3,12(r16)
 1004e24:	903fe61e 	bne	r18,zero,1004dc0 <__sfvwrite_r+0x11c>
 1004e28:	8f000017 	ldw	fp,0(r17)
 1004e2c:	8c800117 	ldw	r18,4(r17)
 1004e30:	8c400204 	addi	r17,r17,8
 1004e34:	003fe106 	br	1004dbc <__sfvwrite_r+0x118>
 1004e38:	8cc00017 	ldw	r19,0(r17)
 1004e3c:	8c800117 	ldw	r18,4(r17)
 1004e40:	8c400204 	addi	r17,r17,8
 1004e44:	003fb306 	br	1004d14 <__sfvwrite_r+0x70>
 1004e48:	0005883a 	mov	r2,zero
 1004e4c:	f800283a 	ret
 1004e50:	81000017 	ldw	r4,0(r16)
 1004e54:	80800417 	ldw	r2,16(r16)
 1004e58:	11005736 	bltu	r2,r4,1004fb8 <__sfvwrite_r+0x314>
 1004e5c:	85c00517 	ldw	r23,20(r16)
 1004e60:	95c05536 	bltu	r18,r23,1004fb8 <__sfvwrite_r+0x314>
 1004e64:	00a00034 	movhi	r2,32768
 1004e68:	10bfffc4 	addi	r2,r2,-1
 1004e6c:	9009883a 	mov	r4,r18
 1004e70:	1480012e 	bgeu	r2,r18,1004e78 <__sfvwrite_r+0x1d4>
 1004e74:	1009883a 	mov	r4,r2
 1004e78:	b80b883a 	mov	r5,r23
 1004e7c:	100a4a80 	call	100a4a8 <__divsi3>
 1004e80:	15cf383a 	mul	r7,r2,r23
 1004e84:	81400717 	ldw	r5,28(r16)
 1004e88:	80800917 	ldw	r2,36(r16)
 1004e8c:	e00d883a 	mov	r6,fp
 1004e90:	a809883a 	mov	r4,r21
 1004e94:	103ee83a 	callr	r2
 1004e98:	00bfdb16 	blt	zero,r2,1004e08 <__sfvwrite_r+0x164>
 1004e9c:	8080030b 	ldhu	r2,12(r16)
 1004ea0:	10801014 	ori	r2,r2,64
 1004ea4:	8080030d 	sth	r2,12(r16)
 1004ea8:	00bfffc4 	movi	r2,-1
 1004eac:	003fab06 	br	1004d5c <__sfvwrite_r+0xb8>
 1004eb0:	0027883a 	mov	r19,zero
 1004eb4:	0011883a 	mov	r8,zero
 1004eb8:	0039883a 	mov	fp,zero
 1004ebc:	0025883a 	mov	r18,zero
 1004ec0:	90001f26 	beq	r18,zero,1004f40 <__sfvwrite_r+0x29c>
 1004ec4:	40005a26 	beq	r8,zero,1005030 <__sfvwrite_r+0x38c>
 1004ec8:	982d883a 	mov	r22,r19
 1004ecc:	94c0012e 	bgeu	r18,r19,1004ed4 <__sfvwrite_r+0x230>
 1004ed0:	902d883a 	mov	r22,r18
 1004ed4:	81000017 	ldw	r4,0(r16)
 1004ed8:	80800417 	ldw	r2,16(r16)
 1004edc:	b02f883a 	mov	r23,r22
 1004ee0:	81c00517 	ldw	r7,20(r16)
 1004ee4:	1100032e 	bgeu	r2,r4,1004ef4 <__sfvwrite_r+0x250>
 1004ee8:	80c00217 	ldw	r3,8(r16)
 1004eec:	38c7883a 	add	r3,r7,r3
 1004ef0:	1d801816 	blt	r3,r22,1004f54 <__sfvwrite_r+0x2b0>
 1004ef4:	b1c03e16 	blt	r22,r7,1004ff0 <__sfvwrite_r+0x34c>
 1004ef8:	80800917 	ldw	r2,36(r16)
 1004efc:	81400717 	ldw	r5,28(r16)
 1004f00:	e00d883a 	mov	r6,fp
 1004f04:	da000115 	stw	r8,4(sp)
 1004f08:	a809883a 	mov	r4,r21
 1004f0c:	103ee83a 	callr	r2
 1004f10:	102f883a 	mov	r23,r2
 1004f14:	da000117 	ldw	r8,4(sp)
 1004f18:	00bfe00e 	bge	zero,r2,1004e9c <__sfvwrite_r+0x1f8>
 1004f1c:	9de7c83a 	sub	r19,r19,r23
 1004f20:	98001f26 	beq	r19,zero,1004fa0 <__sfvwrite_r+0x2fc>
 1004f24:	a0800217 	ldw	r2,8(r20)
 1004f28:	e5f9883a 	add	fp,fp,r23
 1004f2c:	95e5c83a 	sub	r18,r18,r23
 1004f30:	15efc83a 	sub	r23,r2,r23
 1004f34:	a5c00215 	stw	r23,8(r20)
 1004f38:	b83f8726 	beq	r23,zero,1004d58 <__sfvwrite_r+0xb4>
 1004f3c:	903fe11e 	bne	r18,zero,1004ec4 <__sfvwrite_r+0x220>
 1004f40:	8f000017 	ldw	fp,0(r17)
 1004f44:	8c800117 	ldw	r18,4(r17)
 1004f48:	0011883a 	mov	r8,zero
 1004f4c:	8c400204 	addi	r17,r17,8
 1004f50:	003fdb06 	br	1004ec0 <__sfvwrite_r+0x21c>
 1004f54:	180d883a 	mov	r6,r3
 1004f58:	e00b883a 	mov	r5,fp
 1004f5c:	da000115 	stw	r8,4(sp)
 1004f60:	d8c00015 	stw	r3,0(sp)
 1004f64:	1005fb80 	call	1005fb8 <memmove>
 1004f68:	d8c00017 	ldw	r3,0(sp)
 1004f6c:	80800017 	ldw	r2,0(r16)
 1004f70:	800b883a 	mov	r5,r16
 1004f74:	a809883a 	mov	r4,r21
 1004f78:	10c5883a 	add	r2,r2,r3
 1004f7c:	80800015 	stw	r2,0(r16)
 1004f80:	d8c00015 	stw	r3,0(sp)
 1004f84:	10044440 	call	1004444 <_fflush_r>
 1004f88:	d8c00017 	ldw	r3,0(sp)
 1004f8c:	da000117 	ldw	r8,4(sp)
 1004f90:	103fc21e 	bne	r2,zero,1004e9c <__sfvwrite_r+0x1f8>
 1004f94:	182f883a 	mov	r23,r3
 1004f98:	9de7c83a 	sub	r19,r19,r23
 1004f9c:	983fe11e 	bne	r19,zero,1004f24 <__sfvwrite_r+0x280>
 1004fa0:	800b883a 	mov	r5,r16
 1004fa4:	a809883a 	mov	r4,r21
 1004fa8:	10044440 	call	1004444 <_fflush_r>
 1004fac:	103fbb1e 	bne	r2,zero,1004e9c <__sfvwrite_r+0x1f8>
 1004fb0:	0011883a 	mov	r8,zero
 1004fb4:	003fdb06 	br	1004f24 <__sfvwrite_r+0x280>
 1004fb8:	94c0012e 	bgeu	r18,r19,1004fc0 <__sfvwrite_r+0x31c>
 1004fbc:	9027883a 	mov	r19,r18
 1004fc0:	980d883a 	mov	r6,r19
 1004fc4:	e00b883a 	mov	r5,fp
 1004fc8:	1005fb80 	call	1005fb8 <memmove>
 1004fcc:	80800217 	ldw	r2,8(r16)
 1004fd0:	80c00017 	ldw	r3,0(r16)
 1004fd4:	14c5c83a 	sub	r2,r2,r19
 1004fd8:	1cc7883a 	add	r3,r3,r19
 1004fdc:	80800215 	stw	r2,8(r16)
 1004fe0:	80c00015 	stw	r3,0(r16)
 1004fe4:	10004326 	beq	r2,zero,10050f4 <__sfvwrite_r+0x450>
 1004fe8:	9805883a 	mov	r2,r19
 1004fec:	003f8606 	br	1004e08 <__sfvwrite_r+0x164>
 1004ff0:	b00d883a 	mov	r6,r22
 1004ff4:	e00b883a 	mov	r5,fp
 1004ff8:	da000115 	stw	r8,4(sp)
 1004ffc:	1005fb80 	call	1005fb8 <memmove>
 1005000:	80800217 	ldw	r2,8(r16)
 1005004:	80c00017 	ldw	r3,0(r16)
 1005008:	da000117 	ldw	r8,4(sp)
 100500c:	1585c83a 	sub	r2,r2,r22
 1005010:	1dad883a 	add	r22,r3,r22
 1005014:	80800215 	stw	r2,8(r16)
 1005018:	85800015 	stw	r22,0(r16)
 100501c:	003fbf06 	br	1004f1c <__sfvwrite_r+0x278>
 1005020:	81000017 	ldw	r4,0(r16)
 1005024:	9027883a 	mov	r19,r18
 1005028:	902f883a 	mov	r23,r18
 100502c:	003f6c06 	br	1004de0 <__sfvwrite_r+0x13c>
 1005030:	900d883a 	mov	r6,r18
 1005034:	01400284 	movi	r5,10
 1005038:	e009883a 	mov	r4,fp
 100503c:	1005d8c0 	call	1005d8c <memchr>
 1005040:	10003e26 	beq	r2,zero,100513c <__sfvwrite_r+0x498>
 1005044:	10800044 	addi	r2,r2,1
 1005048:	1727c83a 	sub	r19,r2,fp
 100504c:	02000044 	movi	r8,1
 1005050:	003f9d06 	br	1004ec8 <__sfvwrite_r+0x224>
 1005054:	80800517 	ldw	r2,20(r16)
 1005058:	81400417 	ldw	r5,16(r16)
 100505c:	81c00017 	ldw	r7,0(r16)
 1005060:	10a7883a 	add	r19,r2,r2
 1005064:	9885883a 	add	r2,r19,r2
 1005068:	1026d7fa 	srli	r19,r2,31
 100506c:	396dc83a 	sub	r22,r7,r5
 1005070:	b1000044 	addi	r4,r22,1
 1005074:	9885883a 	add	r2,r19,r2
 1005078:	1027d07a 	srai	r19,r2,1
 100507c:	2485883a 	add	r2,r4,r18
 1005080:	980d883a 	mov	r6,r19
 1005084:	9880022e 	bgeu	r19,r2,1005090 <__sfvwrite_r+0x3ec>
 1005088:	1027883a 	mov	r19,r2
 100508c:	100d883a 	mov	r6,r2
 1005090:	18c1000c 	andi	r3,r3,1024
 1005094:	18001c26 	beq	r3,zero,1005108 <__sfvwrite_r+0x464>
 1005098:	300b883a 	mov	r5,r6
 100509c:	a809883a 	mov	r4,r21
 10050a0:	10055800 	call	1005580 <_malloc_r>
 10050a4:	102f883a 	mov	r23,r2
 10050a8:	10002926 	beq	r2,zero,1005150 <__sfvwrite_r+0x4ac>
 10050ac:	81400417 	ldw	r5,16(r16)
 10050b0:	b00d883a 	mov	r6,r22
 10050b4:	1009883a 	mov	r4,r2
 10050b8:	1005e700 	call	1005e70 <memcpy>
 10050bc:	8080030b 	ldhu	r2,12(r16)
 10050c0:	00fedfc4 	movi	r3,-1153
 10050c4:	10c4703a 	and	r2,r2,r3
 10050c8:	10802014 	ori	r2,r2,128
 10050cc:	8080030d 	sth	r2,12(r16)
 10050d0:	bd89883a 	add	r4,r23,r22
 10050d4:	9d8fc83a 	sub	r7,r19,r22
 10050d8:	85c00415 	stw	r23,16(r16)
 10050dc:	84c00515 	stw	r19,20(r16)
 10050e0:	81000015 	stw	r4,0(r16)
 10050e4:	9027883a 	mov	r19,r18
 10050e8:	81c00215 	stw	r7,8(r16)
 10050ec:	902f883a 	mov	r23,r18
 10050f0:	003f3b06 	br	1004de0 <__sfvwrite_r+0x13c>
 10050f4:	800b883a 	mov	r5,r16
 10050f8:	a809883a 	mov	r4,r21
 10050fc:	10044440 	call	1004444 <_fflush_r>
 1005100:	103fb926 	beq	r2,zero,1004fe8 <__sfvwrite_r+0x344>
 1005104:	003f6506 	br	1004e9c <__sfvwrite_r+0x1f8>
 1005108:	a809883a 	mov	r4,r21
 100510c:	10072380 	call	1007238 <_realloc_r>
 1005110:	102f883a 	mov	r23,r2
 1005114:	103fee1e 	bne	r2,zero,10050d0 <__sfvwrite_r+0x42c>
 1005118:	81400417 	ldw	r5,16(r16)
 100511c:	a809883a 	mov	r4,r21
 1005120:	10049940 	call	1004994 <_free_r>
 1005124:	8080030b 	ldhu	r2,12(r16)
 1005128:	00ffdfc4 	movi	r3,-129
 100512c:	1884703a 	and	r2,r3,r2
 1005130:	00c00304 	movi	r3,12
 1005134:	a8c00015 	stw	r3,0(r21)
 1005138:	003f5906 	br	1004ea0 <__sfvwrite_r+0x1fc>
 100513c:	94c00044 	addi	r19,r18,1
 1005140:	02000044 	movi	r8,1
 1005144:	003f6006 	br	1004ec8 <__sfvwrite_r+0x224>
 1005148:	00bfffc4 	movi	r2,-1
 100514c:	003f0306 	br	1004d5c <__sfvwrite_r+0xb8>
 1005150:	00800304 	movi	r2,12
 1005154:	a8800015 	stw	r2,0(r21)
 1005158:	8080030b 	ldhu	r2,12(r16)
 100515c:	003f5006 	br	1004ea0 <__sfvwrite_r+0x1fc>

01005160 <_fwalk>:
 1005160:	defff704 	addi	sp,sp,-36
 1005164:	dd000415 	stw	r20,16(sp)
 1005168:	dfc00815 	stw	ra,32(sp)
 100516c:	ddc00715 	stw	r23,28(sp)
 1005170:	dd800615 	stw	r22,24(sp)
 1005174:	dd400515 	stw	r21,20(sp)
 1005178:	dcc00315 	stw	r19,12(sp)
 100517c:	dc800215 	stw	r18,8(sp)
 1005180:	dc400115 	stw	r17,4(sp)
 1005184:	dc000015 	stw	r16,0(sp)
 1005188:	2500b804 	addi	r20,r4,736
 100518c:	a0002326 	beq	r20,zero,100521c <_fwalk+0xbc>
 1005190:	282b883a 	mov	r21,r5
 1005194:	002f883a 	mov	r23,zero
 1005198:	05800044 	movi	r22,1
 100519c:	04ffffc4 	movi	r19,-1
 10051a0:	a4400117 	ldw	r17,4(r20)
 10051a4:	a4800217 	ldw	r18,8(r20)
 10051a8:	8c7fffc4 	addi	r17,r17,-1
 10051ac:	88000d16 	blt	r17,zero,10051e4 <_fwalk+0x84>
 10051b0:	94000304 	addi	r16,r18,12
 10051b4:	94800384 	addi	r18,r18,14
 10051b8:	8080000b 	ldhu	r2,0(r16)
 10051bc:	8c7fffc4 	addi	r17,r17,-1
 10051c0:	813ffd04 	addi	r4,r16,-12
 10051c4:	b080042e 	bgeu	r22,r2,10051d8 <_fwalk+0x78>
 10051c8:	9080000f 	ldh	r2,0(r18)
 10051cc:	14c00226 	beq	r2,r19,10051d8 <_fwalk+0x78>
 10051d0:	a83ee83a 	callr	r21
 10051d4:	b8aeb03a 	or	r23,r23,r2
 10051d8:	84001a04 	addi	r16,r16,104
 10051dc:	94801a04 	addi	r18,r18,104
 10051e0:	8cfff51e 	bne	r17,r19,10051b8 <_fwalk+0x58>
 10051e4:	a5000017 	ldw	r20,0(r20)
 10051e8:	a03fed1e 	bne	r20,zero,10051a0 <_fwalk+0x40>
 10051ec:	b805883a 	mov	r2,r23
 10051f0:	dfc00817 	ldw	ra,32(sp)
 10051f4:	ddc00717 	ldw	r23,28(sp)
 10051f8:	dd800617 	ldw	r22,24(sp)
 10051fc:	dd400517 	ldw	r21,20(sp)
 1005200:	dd000417 	ldw	r20,16(sp)
 1005204:	dcc00317 	ldw	r19,12(sp)
 1005208:	dc800217 	ldw	r18,8(sp)
 100520c:	dc400117 	ldw	r17,4(sp)
 1005210:	dc000017 	ldw	r16,0(sp)
 1005214:	dec00904 	addi	sp,sp,36
 1005218:	f800283a 	ret
 100521c:	002f883a 	mov	r23,zero
 1005220:	003ff206 	br	10051ec <_fwalk+0x8c>

01005224 <_fwalk_reent>:
 1005224:	defff704 	addi	sp,sp,-36
 1005228:	dd000415 	stw	r20,16(sp)
 100522c:	dfc00815 	stw	ra,32(sp)
 1005230:	ddc00715 	stw	r23,28(sp)
 1005234:	dd800615 	stw	r22,24(sp)
 1005238:	dd400515 	stw	r21,20(sp)
 100523c:	dcc00315 	stw	r19,12(sp)
 1005240:	dc800215 	stw	r18,8(sp)
 1005244:	dc400115 	stw	r17,4(sp)
 1005248:	dc000015 	stw	r16,0(sp)
 100524c:	2500b804 	addi	r20,r4,736
 1005250:	a0002326 	beq	r20,zero,10052e0 <_fwalk_reent+0xbc>
 1005254:	282b883a 	mov	r21,r5
 1005258:	2027883a 	mov	r19,r4
 100525c:	002f883a 	mov	r23,zero
 1005260:	05800044 	movi	r22,1
 1005264:	04bfffc4 	movi	r18,-1
 1005268:	a4400117 	ldw	r17,4(r20)
 100526c:	a4000217 	ldw	r16,8(r20)
 1005270:	8c7fffc4 	addi	r17,r17,-1
 1005274:	88000c16 	blt	r17,zero,10052a8 <_fwalk_reent+0x84>
 1005278:	84000304 	addi	r16,r16,12
 100527c:	8080000b 	ldhu	r2,0(r16)
 1005280:	8c7fffc4 	addi	r17,r17,-1
 1005284:	817ffd04 	addi	r5,r16,-12
 1005288:	b080052e 	bgeu	r22,r2,10052a0 <_fwalk_reent+0x7c>
 100528c:	8080008f 	ldh	r2,2(r16)
 1005290:	9809883a 	mov	r4,r19
 1005294:	14800226 	beq	r2,r18,10052a0 <_fwalk_reent+0x7c>
 1005298:	a83ee83a 	callr	r21
 100529c:	b8aeb03a 	or	r23,r23,r2
 10052a0:	84001a04 	addi	r16,r16,104
 10052a4:	8cbff51e 	bne	r17,r18,100527c <_fwalk_reent+0x58>
 10052a8:	a5000017 	ldw	r20,0(r20)
 10052ac:	a03fee1e 	bne	r20,zero,1005268 <_fwalk_reent+0x44>
 10052b0:	b805883a 	mov	r2,r23
 10052b4:	dfc00817 	ldw	ra,32(sp)
 10052b8:	ddc00717 	ldw	r23,28(sp)
 10052bc:	dd800617 	ldw	r22,24(sp)
 10052c0:	dd400517 	ldw	r21,20(sp)
 10052c4:	dd000417 	ldw	r20,16(sp)
 10052c8:	dcc00317 	ldw	r19,12(sp)
 10052cc:	dc800217 	ldw	r18,8(sp)
 10052d0:	dc400117 	ldw	r17,4(sp)
 10052d4:	dc000017 	ldw	r16,0(sp)
 10052d8:	dec00904 	addi	sp,sp,36
 10052dc:	f800283a 	ret
 10052e0:	002f883a 	mov	r23,zero
 10052e4:	003ff206 	br	10052b0 <_fwalk_reent+0x8c>

010052e8 <_setlocale_r>:
 10052e8:	30001b26 	beq	r6,zero,1005358 <_setlocale_r+0x70>
 10052ec:	01404074 	movhi	r5,257
 10052f0:	defffe04 	addi	sp,sp,-8
 10052f4:	297d0304 	addi	r5,r5,-3060
 10052f8:	3009883a 	mov	r4,r6
 10052fc:	dc000015 	stw	r16,0(sp)
 1005300:	dfc00115 	stw	ra,4(sp)
 1005304:	3021883a 	mov	r16,r6
 1005308:	10079a00 	call	10079a0 <strcmp>
 100530c:	1000061e 	bne	r2,zero,1005328 <_setlocale_r+0x40>
 1005310:	00804074 	movhi	r2,257
 1005314:	10bd0204 	addi	r2,r2,-3064
 1005318:	dfc00117 	ldw	ra,4(sp)
 100531c:	dc000017 	ldw	r16,0(sp)
 1005320:	dec00204 	addi	sp,sp,8
 1005324:	f800283a 	ret
 1005328:	01404074 	movhi	r5,257
 100532c:	297d0204 	addi	r5,r5,-3064
 1005330:	8009883a 	mov	r4,r16
 1005334:	10079a00 	call	10079a0 <strcmp>
 1005338:	103ff526 	beq	r2,zero,1005310 <_setlocale_r+0x28>
 100533c:	01404074 	movhi	r5,257
 1005340:	297ced04 	addi	r5,r5,-3148
 1005344:	8009883a 	mov	r4,r16
 1005348:	10079a00 	call	10079a0 <strcmp>
 100534c:	103ff026 	beq	r2,zero,1005310 <_setlocale_r+0x28>
 1005350:	0005883a 	mov	r2,zero
 1005354:	003ff006 	br	1005318 <_setlocale_r+0x30>
 1005358:	00804074 	movhi	r2,257
 100535c:	10bd0204 	addi	r2,r2,-3064
 1005360:	f800283a 	ret

01005364 <__locale_charset>:
 1005364:	00804074 	movhi	r2,257
 1005368:	10beb304 	addi	r2,r2,-1332
 100536c:	f800283a 	ret

01005370 <__locale_mb_cur_max>:
 1005370:	00804074 	movhi	r2,257
 1005374:	10844f04 	addi	r2,r2,4412
 1005378:	10800017 	ldw	r2,0(r2)
 100537c:	f800283a 	ret

01005380 <__locale_msgcharset>:
 1005380:	00804074 	movhi	r2,257
 1005384:	10beab04 	addi	r2,r2,-1364
 1005388:	f800283a 	ret

0100538c <__locale_cjk_lang>:
 100538c:	0005883a 	mov	r2,zero
 1005390:	f800283a 	ret

01005394 <_localeconv_r>:
 1005394:	00804074 	movhi	r2,257
 1005398:	10bebb04 	addi	r2,r2,-1300
 100539c:	f800283a 	ret

010053a0 <setlocale>:
 10053a0:	00804074 	movhi	r2,257
 10053a4:	10844e04 	addi	r2,r2,4408
 10053a8:	280d883a 	mov	r6,r5
 10053ac:	200b883a 	mov	r5,r4
 10053b0:	11000017 	ldw	r4,0(r2)
 10053b4:	10052e81 	jmpi	10052e8 <_setlocale_r>

010053b8 <localeconv>:
 10053b8:	00804074 	movhi	r2,257
 10053bc:	10bebb04 	addi	r2,r2,-1300
 10053c0:	f800283a 	ret

010053c4 <__smakebuf_r>:
 10053c4:	2880030b 	ldhu	r2,12(r5)
 10053c8:	10c0008c 	andi	r3,r2,2
 10053cc:	1800411e 	bne	r3,zero,10054d4 <__smakebuf_r+0x110>
 10053d0:	deffec04 	addi	sp,sp,-80
 10053d4:	dc000f15 	stw	r16,60(sp)
 10053d8:	2821883a 	mov	r16,r5
 10053dc:	2940038f 	ldh	r5,14(r5)
 10053e0:	dc401015 	stw	r17,64(sp)
 10053e4:	dfc01315 	stw	ra,76(sp)
 10053e8:	dcc01215 	stw	r19,72(sp)
 10053ec:	dc801115 	stw	r18,68(sp)
 10053f0:	2023883a 	mov	r17,r4
 10053f4:	28001c16 	blt	r5,zero,1005468 <__smakebuf_r+0xa4>
 10053f8:	d80d883a 	mov	r6,sp
 10053fc:	10095480 	call	1009548 <_fstat_r>
 1005400:	10001816 	blt	r2,zero,1005464 <__smakebuf_r+0xa0>
 1005404:	d8800117 	ldw	r2,4(sp)
 1005408:	00e00014 	movui	r3,32768
 100540c:	10bc000c 	andi	r2,r2,61440
 1005410:	14c80020 	cmpeqi	r19,r2,8192
 1005414:	10c03726 	beq	r2,r3,10054f4 <__smakebuf_r+0x130>
 1005418:	80c0030b 	ldhu	r3,12(r16)
 100541c:	18c20014 	ori	r3,r3,2048
 1005420:	80c0030d 	sth	r3,12(r16)
 1005424:	00c80004 	movi	r3,8192
 1005428:	10c0521e 	bne	r2,r3,1005574 <__smakebuf_r+0x1b0>
 100542c:	8140038f 	ldh	r5,14(r16)
 1005430:	8809883a 	mov	r4,r17
 1005434:	10095a40 	call	10095a4 <_isatty_r>
 1005438:	10004c26 	beq	r2,zero,100556c <__smakebuf_r+0x1a8>
 100543c:	8080030b 	ldhu	r2,12(r16)
 1005440:	80c010c4 	addi	r3,r16,67
 1005444:	80c00015 	stw	r3,0(r16)
 1005448:	10800054 	ori	r2,r2,1
 100544c:	8080030d 	sth	r2,12(r16)
 1005450:	00800044 	movi	r2,1
 1005454:	80c00415 	stw	r3,16(r16)
 1005458:	80800515 	stw	r2,20(r16)
 100545c:	04810004 	movi	r18,1024
 1005460:	00000706 	br	1005480 <__smakebuf_r+0xbc>
 1005464:	8080030b 	ldhu	r2,12(r16)
 1005468:	10c0200c 	andi	r3,r2,128
 100546c:	18001f1e 	bne	r3,zero,10054ec <__smakebuf_r+0x128>
 1005470:	04810004 	movi	r18,1024
 1005474:	10820014 	ori	r2,r2,2048
 1005478:	8080030d 	sth	r2,12(r16)
 100547c:	0027883a 	mov	r19,zero
 1005480:	900b883a 	mov	r5,r18
 1005484:	8809883a 	mov	r4,r17
 1005488:	10055800 	call	1005580 <_malloc_r>
 100548c:	10002c26 	beq	r2,zero,1005540 <__smakebuf_r+0x17c>
 1005490:	80c0030b 	ldhu	r3,12(r16)
 1005494:	01004034 	movhi	r4,256
 1005498:	21113604 	addi	r4,r4,17624
 100549c:	89000f15 	stw	r4,60(r17)
 10054a0:	18c02014 	ori	r3,r3,128
 10054a4:	80c0030d 	sth	r3,12(r16)
 10054a8:	80800015 	stw	r2,0(r16)
 10054ac:	80800415 	stw	r2,16(r16)
 10054b0:	84800515 	stw	r18,20(r16)
 10054b4:	98001a1e 	bne	r19,zero,1005520 <__smakebuf_r+0x15c>
 10054b8:	dfc01317 	ldw	ra,76(sp)
 10054bc:	dcc01217 	ldw	r19,72(sp)
 10054c0:	dc801117 	ldw	r18,68(sp)
 10054c4:	dc401017 	ldw	r17,64(sp)
 10054c8:	dc000f17 	ldw	r16,60(sp)
 10054cc:	dec01404 	addi	sp,sp,80
 10054d0:	f800283a 	ret
 10054d4:	288010c4 	addi	r2,r5,67
 10054d8:	28800015 	stw	r2,0(r5)
 10054dc:	28800415 	stw	r2,16(r5)
 10054e0:	00800044 	movi	r2,1
 10054e4:	28800515 	stw	r2,20(r5)
 10054e8:	f800283a 	ret
 10054ec:	04801004 	movi	r18,64
 10054f0:	003fe006 	br	1005474 <__smakebuf_r+0xb0>
 10054f4:	81000a17 	ldw	r4,40(r16)
 10054f8:	00c04034 	movhi	r3,256
 10054fc:	18de4f04 	addi	r3,r3,31036
 1005500:	20ffc51e 	bne	r4,r3,1005418 <__smakebuf_r+0x54>
 1005504:	8080030b 	ldhu	r2,12(r16)
 1005508:	04810004 	movi	r18,1024
 100550c:	84801315 	stw	r18,76(r16)
 1005510:	1484b03a 	or	r2,r2,r18
 1005514:	8080030d 	sth	r2,12(r16)
 1005518:	0027883a 	mov	r19,zero
 100551c:	003fd806 	br	1005480 <__smakebuf_r+0xbc>
 1005520:	8140038f 	ldh	r5,14(r16)
 1005524:	8809883a 	mov	r4,r17
 1005528:	10095a40 	call	10095a4 <_isatty_r>
 100552c:	103fe226 	beq	r2,zero,10054b8 <__smakebuf_r+0xf4>
 1005530:	8080030b 	ldhu	r2,12(r16)
 1005534:	10800054 	ori	r2,r2,1
 1005538:	8080030d 	sth	r2,12(r16)
 100553c:	003fde06 	br	10054b8 <__smakebuf_r+0xf4>
 1005540:	8080030b 	ldhu	r2,12(r16)
 1005544:	10c0800c 	andi	r3,r2,512
 1005548:	183fdb1e 	bne	r3,zero,10054b8 <__smakebuf_r+0xf4>
 100554c:	10800094 	ori	r2,r2,2
 1005550:	80c010c4 	addi	r3,r16,67
 1005554:	8080030d 	sth	r2,12(r16)
 1005558:	00800044 	movi	r2,1
 100555c:	80c00015 	stw	r3,0(r16)
 1005560:	80c00415 	stw	r3,16(r16)
 1005564:	80800515 	stw	r2,20(r16)
 1005568:	003fd306 	br	10054b8 <__smakebuf_r+0xf4>
 100556c:	04810004 	movi	r18,1024
 1005570:	003fc306 	br	1005480 <__smakebuf_r+0xbc>
 1005574:	0027883a 	mov	r19,zero
 1005578:	04810004 	movi	r18,1024
 100557c:	003fc006 	br	1005480 <__smakebuf_r+0xbc>

01005580 <_malloc_r>:
 1005580:	defff504 	addi	sp,sp,-44
 1005584:	dc800315 	stw	r18,12(sp)
 1005588:	dfc00a15 	stw	ra,40(sp)
 100558c:	df000915 	stw	fp,36(sp)
 1005590:	ddc00815 	stw	r23,32(sp)
 1005594:	dd800715 	stw	r22,28(sp)
 1005598:	dd400615 	stw	r21,24(sp)
 100559c:	dd000515 	stw	r20,20(sp)
 10055a0:	dcc00415 	stw	r19,16(sp)
 10055a4:	dc400215 	stw	r17,8(sp)
 10055a8:	dc000115 	stw	r16,4(sp)
 10055ac:	288002c4 	addi	r2,r5,11
 10055b0:	00c00584 	movi	r3,22
 10055b4:	2025883a 	mov	r18,r4
 10055b8:	18807f2e 	bgeu	r3,r2,10057b8 <_malloc_r+0x238>
 10055bc:	047ffe04 	movi	r17,-8
 10055c0:	1462703a 	and	r17,r2,r17
 10055c4:	8800a316 	blt	r17,zero,1005854 <_malloc_r+0x2d4>
 10055c8:	8940a236 	bltu	r17,r5,1005854 <_malloc_r+0x2d4>
 10055cc:	100d4e00 	call	100d4e0 <__malloc_lock>
 10055d0:	00807dc4 	movi	r2,503
 10055d4:	1441e92e 	bgeu	r2,r17,1005d7c <_malloc_r+0x7fc>
 10055d8:	8804d27a 	srli	r2,r17,9
 10055dc:	1000a126 	beq	r2,zero,1005864 <_malloc_r+0x2e4>
 10055e0:	00c00104 	movi	r3,4
 10055e4:	18811e36 	bltu	r3,r2,1005a60 <_malloc_r+0x4e0>
 10055e8:	8804d1ba 	srli	r2,r17,6
 10055ec:	12000e44 	addi	r8,r2,57
 10055f0:	11c00e04 	addi	r7,r2,56
 10055f4:	4209883a 	add	r4,r8,r8
 10055f8:	04c04074 	movhi	r19,257
 10055fc:	2109883a 	add	r4,r4,r4
 1005600:	9cfec904 	addi	r19,r19,-1244
 1005604:	2109883a 	add	r4,r4,r4
 1005608:	9909883a 	add	r4,r19,r4
 100560c:	24000117 	ldw	r16,4(r4)
 1005610:	213ffe04 	addi	r4,r4,-8
 1005614:	24009726 	beq	r4,r16,1005874 <_malloc_r+0x2f4>
 1005618:	80800117 	ldw	r2,4(r16)
 100561c:	01bfff04 	movi	r6,-4
 1005620:	014003c4 	movi	r5,15
 1005624:	1184703a 	and	r2,r2,r6
 1005628:	1447c83a 	sub	r3,r2,r17
 100562c:	28c00716 	blt	r5,r3,100564c <_malloc_r+0xcc>
 1005630:	1800920e 	bge	r3,zero,100587c <_malloc_r+0x2fc>
 1005634:	84000317 	ldw	r16,12(r16)
 1005638:	24008e26 	beq	r4,r16,1005874 <_malloc_r+0x2f4>
 100563c:	80800117 	ldw	r2,4(r16)
 1005640:	1184703a 	and	r2,r2,r6
 1005644:	1447c83a 	sub	r3,r2,r17
 1005648:	28fff90e 	bge	r5,r3,1005630 <_malloc_r+0xb0>
 100564c:	3809883a 	mov	r4,r7
 1005650:	01804074 	movhi	r6,257
 1005654:	9c000417 	ldw	r16,16(r19)
 1005658:	31bec904 	addi	r6,r6,-1244
 100565c:	32000204 	addi	r8,r6,8
 1005660:	82013426 	beq	r16,r8,1005b34 <_malloc_r+0x5b4>
 1005664:	80c00117 	ldw	r3,4(r16)
 1005668:	00bfff04 	movi	r2,-4
 100566c:	188e703a 	and	r7,r3,r2
 1005670:	3c45c83a 	sub	r2,r7,r17
 1005674:	00c003c4 	movi	r3,15
 1005678:	18811f16 	blt	r3,r2,1005af8 <_malloc_r+0x578>
 100567c:	32000515 	stw	r8,20(r6)
 1005680:	32000415 	stw	r8,16(r6)
 1005684:	10007f0e 	bge	r2,zero,1005884 <_malloc_r+0x304>
 1005688:	00807fc4 	movi	r2,511
 100568c:	11c0fd36 	bltu	r2,r7,1005a84 <_malloc_r+0x504>
 1005690:	3806d0fa 	srli	r3,r7,3
 1005694:	01c00044 	movi	r7,1
 1005698:	30800117 	ldw	r2,4(r6)
 100569c:	19400044 	addi	r5,r3,1
 10056a0:	294b883a 	add	r5,r5,r5
 10056a4:	1807d0ba 	srai	r3,r3,2
 10056a8:	294b883a 	add	r5,r5,r5
 10056ac:	294b883a 	add	r5,r5,r5
 10056b0:	298b883a 	add	r5,r5,r6
 10056b4:	38c6983a 	sll	r3,r7,r3
 10056b8:	29c00017 	ldw	r7,0(r5)
 10056bc:	2a7ffe04 	addi	r9,r5,-8
 10056c0:	1886b03a 	or	r3,r3,r2
 10056c4:	82400315 	stw	r9,12(r16)
 10056c8:	81c00215 	stw	r7,8(r16)
 10056cc:	30c00115 	stw	r3,4(r6)
 10056d0:	2c000015 	stw	r16,0(r5)
 10056d4:	3c000315 	stw	r16,12(r7)
 10056d8:	2005d0ba 	srai	r2,r4,2
 10056dc:	01400044 	movi	r5,1
 10056e0:	288a983a 	sll	r5,r5,r2
 10056e4:	19406f36 	bltu	r3,r5,10058a4 <_malloc_r+0x324>
 10056e8:	28c4703a 	and	r2,r5,r3
 10056ec:	10000a1e 	bne	r2,zero,1005718 <_malloc_r+0x198>
 10056f0:	00bfff04 	movi	r2,-4
 10056f4:	294b883a 	add	r5,r5,r5
 10056f8:	2088703a 	and	r4,r4,r2
 10056fc:	28c4703a 	and	r2,r5,r3
 1005700:	21000104 	addi	r4,r4,4
 1005704:	1000041e 	bne	r2,zero,1005718 <_malloc_r+0x198>
 1005708:	294b883a 	add	r5,r5,r5
 100570c:	28c4703a 	and	r2,r5,r3
 1005710:	21000104 	addi	r4,r4,4
 1005714:	103ffc26 	beq	r2,zero,1005708 <_malloc_r+0x188>
 1005718:	02bfff04 	movi	r10,-4
 100571c:	024003c4 	movi	r9,15
 1005720:	21800044 	addi	r6,r4,1
 1005724:	318d883a 	add	r6,r6,r6
 1005728:	318d883a 	add	r6,r6,r6
 100572c:	318d883a 	add	r6,r6,r6
 1005730:	998d883a 	add	r6,r19,r6
 1005734:	333ffe04 	addi	r12,r6,-8
 1005738:	2017883a 	mov	r11,r4
 100573c:	31800104 	addi	r6,r6,4
 1005740:	34000017 	ldw	r16,0(r6)
 1005744:	31fffd04 	addi	r7,r6,-12
 1005748:	81c0041e 	bne	r16,r7,100575c <_malloc_r+0x1dc>
 100574c:	0000fb06 	br	1005b3c <_malloc_r+0x5bc>
 1005750:	1801030e 	bge	r3,zero,1005b60 <_malloc_r+0x5e0>
 1005754:	84000317 	ldw	r16,12(r16)
 1005758:	81c0f826 	beq	r16,r7,1005b3c <_malloc_r+0x5bc>
 100575c:	80800117 	ldw	r2,4(r16)
 1005760:	1284703a 	and	r2,r2,r10
 1005764:	1447c83a 	sub	r3,r2,r17
 1005768:	48fff90e 	bge	r9,r3,1005750 <_malloc_r+0x1d0>
 100576c:	80800317 	ldw	r2,12(r16)
 1005770:	81000217 	ldw	r4,8(r16)
 1005774:	89400054 	ori	r5,r17,1
 1005778:	81400115 	stw	r5,4(r16)
 100577c:	20800315 	stw	r2,12(r4)
 1005780:	11000215 	stw	r4,8(r2)
 1005784:	8463883a 	add	r17,r16,r17
 1005788:	9c400515 	stw	r17,20(r19)
 100578c:	9c400415 	stw	r17,16(r19)
 1005790:	18800054 	ori	r2,r3,1
 1005794:	88800115 	stw	r2,4(r17)
 1005798:	8a000315 	stw	r8,12(r17)
 100579c:	8a000215 	stw	r8,8(r17)
 10057a0:	88e3883a 	add	r17,r17,r3
 10057a4:	88c00015 	stw	r3,0(r17)
 10057a8:	9009883a 	mov	r4,r18
 10057ac:	100d5040 	call	100d504 <__malloc_unlock>
 10057b0:	80800204 	addi	r2,r16,8
 10057b4:	00001b06 	br	1005824 <_malloc_r+0x2a4>
 10057b8:	04400404 	movi	r17,16
 10057bc:	89402536 	bltu	r17,r5,1005854 <_malloc_r+0x2d4>
 10057c0:	100d4e00 	call	100d4e0 <__malloc_lock>
 10057c4:	00800184 	movi	r2,6
 10057c8:	01000084 	movi	r4,2
 10057cc:	04c04074 	movhi	r19,257
 10057d0:	1085883a 	add	r2,r2,r2
 10057d4:	9cfec904 	addi	r19,r19,-1244
 10057d8:	1085883a 	add	r2,r2,r2
 10057dc:	9885883a 	add	r2,r19,r2
 10057e0:	14000117 	ldw	r16,4(r2)
 10057e4:	10fffe04 	addi	r3,r2,-8
 10057e8:	80c0d926 	beq	r16,r3,1005b50 <_malloc_r+0x5d0>
 10057ec:	80c00117 	ldw	r3,4(r16)
 10057f0:	81000317 	ldw	r4,12(r16)
 10057f4:	00bfff04 	movi	r2,-4
 10057f8:	1884703a 	and	r2,r3,r2
 10057fc:	81400217 	ldw	r5,8(r16)
 1005800:	8085883a 	add	r2,r16,r2
 1005804:	10c00117 	ldw	r3,4(r2)
 1005808:	29000315 	stw	r4,12(r5)
 100580c:	21400215 	stw	r5,8(r4)
 1005810:	18c00054 	ori	r3,r3,1
 1005814:	10c00115 	stw	r3,4(r2)
 1005818:	9009883a 	mov	r4,r18
 100581c:	100d5040 	call	100d504 <__malloc_unlock>
 1005820:	80800204 	addi	r2,r16,8
 1005824:	dfc00a17 	ldw	ra,40(sp)
 1005828:	df000917 	ldw	fp,36(sp)
 100582c:	ddc00817 	ldw	r23,32(sp)
 1005830:	dd800717 	ldw	r22,28(sp)
 1005834:	dd400617 	ldw	r21,24(sp)
 1005838:	dd000517 	ldw	r20,20(sp)
 100583c:	dcc00417 	ldw	r19,16(sp)
 1005840:	dc800317 	ldw	r18,12(sp)
 1005844:	dc400217 	ldw	r17,8(sp)
 1005848:	dc000117 	ldw	r16,4(sp)
 100584c:	dec00b04 	addi	sp,sp,44
 1005850:	f800283a 	ret
 1005854:	00800304 	movi	r2,12
 1005858:	90800015 	stw	r2,0(r18)
 100585c:	0005883a 	mov	r2,zero
 1005860:	003ff006 	br	1005824 <_malloc_r+0x2a4>
 1005864:	01002004 	movi	r4,128
 1005868:	02001004 	movi	r8,64
 100586c:	01c00fc4 	movi	r7,63
 1005870:	003f6106 	br	10055f8 <_malloc_r+0x78>
 1005874:	4009883a 	mov	r4,r8
 1005878:	003f7506 	br	1005650 <_malloc_r+0xd0>
 100587c:	81000317 	ldw	r4,12(r16)
 1005880:	003fde06 	br	10057fc <_malloc_r+0x27c>
 1005884:	81c5883a 	add	r2,r16,r7
 1005888:	11400117 	ldw	r5,4(r2)
 100588c:	9009883a 	mov	r4,r18
 1005890:	29400054 	ori	r5,r5,1
 1005894:	11400115 	stw	r5,4(r2)
 1005898:	100d5040 	call	100d504 <__malloc_unlock>
 100589c:	80800204 	addi	r2,r16,8
 10058a0:	003fe006 	br	1005824 <_malloc_r+0x2a4>
 10058a4:	9c000217 	ldw	r16,8(r19)
 10058a8:	00bfff04 	movi	r2,-4
 10058ac:	85800117 	ldw	r22,4(r16)
 10058b0:	b0ac703a 	and	r22,r22,r2
 10058b4:	b4400336 	bltu	r22,r17,10058c4 <_malloc_r+0x344>
 10058b8:	b445c83a 	sub	r2,r22,r17
 10058bc:	00c003c4 	movi	r3,15
 10058c0:	18805d16 	blt	r3,r2,1005a38 <_malloc_r+0x4b8>
 10058c4:	05c04074 	movhi	r23,257
 10058c8:	00804074 	movhi	r2,257
 10058cc:	108b1e04 	addi	r2,r2,11384
 10058d0:	bdc45004 	addi	r23,r23,4416
 10058d4:	15400017 	ldw	r21,0(r2)
 10058d8:	b8c00017 	ldw	r3,0(r23)
 10058dc:	00bfffc4 	movi	r2,-1
 10058e0:	858d883a 	add	r6,r16,r22
 10058e4:	8d6b883a 	add	r21,r17,r21
 10058e8:	1880ea26 	beq	r3,r2,1005c94 <_malloc_r+0x714>
 10058ec:	ad4403c4 	addi	r21,r21,4111
 10058f0:	00bc0004 	movi	r2,-4096
 10058f4:	a8aa703a 	and	r21,r21,r2
 10058f8:	a80b883a 	mov	r5,r21
 10058fc:	9009883a 	mov	r4,r18
 1005900:	d9800015 	stw	r6,0(sp)
 1005904:	10078100 	call	1007810 <_sbrk_r>
 1005908:	1029883a 	mov	r20,r2
 100590c:	00bfffc4 	movi	r2,-1
 1005910:	d9800017 	ldw	r6,0(sp)
 1005914:	a080e826 	beq	r20,r2,1005cb8 <_malloc_r+0x738>
 1005918:	a180a636 	bltu	r20,r6,1005bb4 <_malloc_r+0x634>
 100591c:	07004074 	movhi	fp,257
 1005920:	e70b2704 	addi	fp,fp,11420
 1005924:	e0800017 	ldw	r2,0(fp)
 1005928:	a887883a 	add	r3,r21,r2
 100592c:	e0c00015 	stw	r3,0(fp)
 1005930:	3500e626 	beq	r6,r20,1005ccc <_malloc_r+0x74c>
 1005934:	b9000017 	ldw	r4,0(r23)
 1005938:	00bfffc4 	movi	r2,-1
 100593c:	2080ee26 	beq	r4,r2,1005cf8 <_malloc_r+0x778>
 1005940:	a185c83a 	sub	r2,r20,r6
 1005944:	10c5883a 	add	r2,r2,r3
 1005948:	e0800015 	stw	r2,0(fp)
 100594c:	a0c001cc 	andi	r3,r20,7
 1005950:	1800bc26 	beq	r3,zero,1005c44 <_malloc_r+0x6c4>
 1005954:	a0e9c83a 	sub	r20,r20,r3
 1005958:	00840204 	movi	r2,4104
 100595c:	a5000204 	addi	r20,r20,8
 1005960:	10c7c83a 	sub	r3,r2,r3
 1005964:	a545883a 	add	r2,r20,r21
 1005968:	1083ffcc 	andi	r2,r2,4095
 100596c:	18abc83a 	sub	r21,r3,r2
 1005970:	a80b883a 	mov	r5,r21
 1005974:	9009883a 	mov	r4,r18
 1005978:	10078100 	call	1007810 <_sbrk_r>
 100597c:	00ffffc4 	movi	r3,-1
 1005980:	10c0e126 	beq	r2,r3,1005d08 <_malloc_r+0x788>
 1005984:	1505c83a 	sub	r2,r2,r20
 1005988:	1545883a 	add	r2,r2,r21
 100598c:	10800054 	ori	r2,r2,1
 1005990:	e0c00017 	ldw	r3,0(fp)
 1005994:	9d000215 	stw	r20,8(r19)
 1005998:	a0800115 	stw	r2,4(r20)
 100599c:	a8c7883a 	add	r3,r21,r3
 10059a0:	e0c00015 	stw	r3,0(fp)
 10059a4:	84c00e26 	beq	r16,r19,10059e0 <_malloc_r+0x460>
 10059a8:	018003c4 	movi	r6,15
 10059ac:	3580a72e 	bgeu	r6,r22,1005c4c <_malloc_r+0x6cc>
 10059b0:	81400117 	ldw	r5,4(r16)
 10059b4:	013ffe04 	movi	r4,-8
 10059b8:	b0bffd04 	addi	r2,r22,-12
 10059bc:	1104703a 	and	r2,r2,r4
 10059c0:	2900004c 	andi	r4,r5,1
 10059c4:	2088b03a 	or	r4,r4,r2
 10059c8:	81000115 	stw	r4,4(r16)
 10059cc:	01400144 	movi	r5,5
 10059d0:	8089883a 	add	r4,r16,r2
 10059d4:	21400115 	stw	r5,4(r4)
 10059d8:	21400215 	stw	r5,8(r4)
 10059dc:	3080cd36 	bltu	r6,r2,1005d14 <_malloc_r+0x794>
 10059e0:	00804074 	movhi	r2,257
 10059e4:	108b1d04 	addi	r2,r2,11380
 10059e8:	11000017 	ldw	r4,0(r2)
 10059ec:	20c0012e 	bgeu	r4,r3,10059f4 <_malloc_r+0x474>
 10059f0:	10c00015 	stw	r3,0(r2)
 10059f4:	00804074 	movhi	r2,257
 10059f8:	108b1c04 	addi	r2,r2,11376
 10059fc:	11000017 	ldw	r4,0(r2)
 1005a00:	9c000217 	ldw	r16,8(r19)
 1005a04:	20c0012e 	bgeu	r4,r3,1005a0c <_malloc_r+0x48c>
 1005a08:	10c00015 	stw	r3,0(r2)
 1005a0c:	80c00117 	ldw	r3,4(r16)
 1005a10:	00bfff04 	movi	r2,-4
 1005a14:	1886703a 	and	r3,r3,r2
 1005a18:	1c45c83a 	sub	r2,r3,r17
 1005a1c:	1c400236 	bltu	r3,r17,1005a28 <_malloc_r+0x4a8>
 1005a20:	00c003c4 	movi	r3,15
 1005a24:	18800416 	blt	r3,r2,1005a38 <_malloc_r+0x4b8>
 1005a28:	9009883a 	mov	r4,r18
 1005a2c:	100d5040 	call	100d504 <__malloc_unlock>
 1005a30:	0005883a 	mov	r2,zero
 1005a34:	003f7b06 	br	1005824 <_malloc_r+0x2a4>
 1005a38:	88c00054 	ori	r3,r17,1
 1005a3c:	80c00115 	stw	r3,4(r16)
 1005a40:	8463883a 	add	r17,r16,r17
 1005a44:	10800054 	ori	r2,r2,1
 1005a48:	9c400215 	stw	r17,8(r19)
 1005a4c:	88800115 	stw	r2,4(r17)
 1005a50:	9009883a 	mov	r4,r18
 1005a54:	100d5040 	call	100d504 <__malloc_unlock>
 1005a58:	80800204 	addi	r2,r16,8
 1005a5c:	003f7106 	br	1005824 <_malloc_r+0x2a4>
 1005a60:	00c00504 	movi	r3,20
 1005a64:	18804a2e 	bgeu	r3,r2,1005b90 <_malloc_r+0x610>
 1005a68:	00c01504 	movi	r3,84
 1005a6c:	18806e36 	bltu	r3,r2,1005c28 <_malloc_r+0x6a8>
 1005a70:	8804d33a 	srli	r2,r17,12
 1005a74:	12001bc4 	addi	r8,r2,111
 1005a78:	11c01b84 	addi	r7,r2,110
 1005a7c:	4209883a 	add	r4,r8,r8
 1005a80:	003edd06 	br	10055f8 <_malloc_r+0x78>
 1005a84:	3804d27a 	srli	r2,r7,9
 1005a88:	00c00104 	movi	r3,4
 1005a8c:	1880442e 	bgeu	r3,r2,1005ba0 <_malloc_r+0x620>
 1005a90:	00c00504 	movi	r3,20
 1005a94:	18808136 	bltu	r3,r2,1005c9c <_malloc_r+0x71c>
 1005a98:	11401704 	addi	r5,r2,92
 1005a9c:	10c016c4 	addi	r3,r2,91
 1005aa0:	294b883a 	add	r5,r5,r5
 1005aa4:	294b883a 	add	r5,r5,r5
 1005aa8:	294b883a 	add	r5,r5,r5
 1005aac:	994b883a 	add	r5,r19,r5
 1005ab0:	28800017 	ldw	r2,0(r5)
 1005ab4:	01804074 	movhi	r6,257
 1005ab8:	297ffe04 	addi	r5,r5,-8
 1005abc:	31bec904 	addi	r6,r6,-1244
 1005ac0:	28806526 	beq	r5,r2,1005c58 <_malloc_r+0x6d8>
 1005ac4:	01bfff04 	movi	r6,-4
 1005ac8:	10c00117 	ldw	r3,4(r2)
 1005acc:	1986703a 	and	r3,r3,r6
 1005ad0:	38c0022e 	bgeu	r7,r3,1005adc <_malloc_r+0x55c>
 1005ad4:	10800217 	ldw	r2,8(r2)
 1005ad8:	28bffb1e 	bne	r5,r2,1005ac8 <_malloc_r+0x548>
 1005adc:	11400317 	ldw	r5,12(r2)
 1005ae0:	98c00117 	ldw	r3,4(r19)
 1005ae4:	81400315 	stw	r5,12(r16)
 1005ae8:	80800215 	stw	r2,8(r16)
 1005aec:	2c000215 	stw	r16,8(r5)
 1005af0:	14000315 	stw	r16,12(r2)
 1005af4:	003ef806 	br	10056d8 <_malloc_r+0x158>
 1005af8:	88c00054 	ori	r3,r17,1
 1005afc:	80c00115 	stw	r3,4(r16)
 1005b00:	8463883a 	add	r17,r16,r17
 1005b04:	34400515 	stw	r17,20(r6)
 1005b08:	34400415 	stw	r17,16(r6)
 1005b0c:	10c00054 	ori	r3,r2,1
 1005b10:	8a000315 	stw	r8,12(r17)
 1005b14:	8a000215 	stw	r8,8(r17)
 1005b18:	88c00115 	stw	r3,4(r17)
 1005b1c:	88a3883a 	add	r17,r17,r2
 1005b20:	88800015 	stw	r2,0(r17)
 1005b24:	9009883a 	mov	r4,r18
 1005b28:	100d5040 	call	100d504 <__malloc_unlock>
 1005b2c:	80800204 	addi	r2,r16,8
 1005b30:	003f3c06 	br	1005824 <_malloc_r+0x2a4>
 1005b34:	30c00117 	ldw	r3,4(r6)
 1005b38:	003ee706 	br	10056d8 <_malloc_r+0x158>
 1005b3c:	5ac00044 	addi	r11,r11,1
 1005b40:	588000cc 	andi	r2,r11,3
 1005b44:	31800204 	addi	r6,r6,8
 1005b48:	103efd1e 	bne	r2,zero,1005740 <_malloc_r+0x1c0>
 1005b4c:	00002406 	br	1005be0 <_malloc_r+0x660>
 1005b50:	14000317 	ldw	r16,12(r2)
 1005b54:	143f251e 	bne	r2,r16,10057ec <_malloc_r+0x26c>
 1005b58:	21000084 	addi	r4,r4,2
 1005b5c:	003ebc06 	br	1005650 <_malloc_r+0xd0>
 1005b60:	8085883a 	add	r2,r16,r2
 1005b64:	10c00117 	ldw	r3,4(r2)
 1005b68:	81000317 	ldw	r4,12(r16)
 1005b6c:	81400217 	ldw	r5,8(r16)
 1005b70:	18c00054 	ori	r3,r3,1
 1005b74:	10c00115 	stw	r3,4(r2)
 1005b78:	29000315 	stw	r4,12(r5)
 1005b7c:	21400215 	stw	r5,8(r4)
 1005b80:	9009883a 	mov	r4,r18
 1005b84:	100d5040 	call	100d504 <__malloc_unlock>
 1005b88:	80800204 	addi	r2,r16,8
 1005b8c:	003f2506 	br	1005824 <_malloc_r+0x2a4>
 1005b90:	12001704 	addi	r8,r2,92
 1005b94:	11c016c4 	addi	r7,r2,91
 1005b98:	4209883a 	add	r4,r8,r8
 1005b9c:	003e9606 	br	10055f8 <_malloc_r+0x78>
 1005ba0:	3804d1ba 	srli	r2,r7,6
 1005ba4:	11400e44 	addi	r5,r2,57
 1005ba8:	10c00e04 	addi	r3,r2,56
 1005bac:	294b883a 	add	r5,r5,r5
 1005bb0:	003fbc06 	br	1005aa4 <_malloc_r+0x524>
 1005bb4:	84ff5926 	beq	r16,r19,100591c <_malloc_r+0x39c>
 1005bb8:	00804074 	movhi	r2,257
 1005bbc:	10bec904 	addi	r2,r2,-1244
 1005bc0:	14000217 	ldw	r16,8(r2)
 1005bc4:	00bfff04 	movi	r2,-4
 1005bc8:	80c00117 	ldw	r3,4(r16)
 1005bcc:	1886703a 	and	r3,r3,r2
 1005bd0:	003f9106 	br	1005a18 <_malloc_r+0x498>
 1005bd4:	60800217 	ldw	r2,8(r12)
 1005bd8:	213fffc4 	addi	r4,r4,-1
 1005bdc:	1300651e 	bne	r2,r12,1005d74 <_malloc_r+0x7f4>
 1005be0:	208000cc 	andi	r2,r4,3
 1005be4:	633ffe04 	addi	r12,r12,-8
 1005be8:	103ffa1e 	bne	r2,zero,1005bd4 <_malloc_r+0x654>
 1005bec:	98800117 	ldw	r2,4(r19)
 1005bf0:	0146303a 	nor	r3,zero,r5
 1005bf4:	1884703a 	and	r2,r3,r2
 1005bf8:	98800115 	stw	r2,4(r19)
 1005bfc:	294b883a 	add	r5,r5,r5
 1005c00:	117f2836 	bltu	r2,r5,10058a4 <_malloc_r+0x324>
 1005c04:	283f2726 	beq	r5,zero,10058a4 <_malloc_r+0x324>
 1005c08:	2886703a 	and	r3,r5,r2
 1005c0c:	5809883a 	mov	r4,r11
 1005c10:	183ec31e 	bne	r3,zero,1005720 <_malloc_r+0x1a0>
 1005c14:	294b883a 	add	r5,r5,r5
 1005c18:	2886703a 	and	r3,r5,r2
 1005c1c:	21000104 	addi	r4,r4,4
 1005c20:	183ffc26 	beq	r3,zero,1005c14 <_malloc_r+0x694>
 1005c24:	003ebe06 	br	1005720 <_malloc_r+0x1a0>
 1005c28:	00c05504 	movi	r3,340
 1005c2c:	18801236 	bltu	r3,r2,1005c78 <_malloc_r+0x6f8>
 1005c30:	8804d3fa 	srli	r2,r17,15
 1005c34:	12001e04 	addi	r8,r2,120
 1005c38:	11c01dc4 	addi	r7,r2,119
 1005c3c:	4209883a 	add	r4,r8,r8
 1005c40:	003e6d06 	br	10055f8 <_malloc_r+0x78>
 1005c44:	00c40004 	movi	r3,4096
 1005c48:	003f4606 	br	1005964 <_malloc_r+0x3e4>
 1005c4c:	00800044 	movi	r2,1
 1005c50:	a0800115 	stw	r2,4(r20)
 1005c54:	003f7406 	br	1005a28 <_malloc_r+0x4a8>
 1005c58:	1805d0ba 	srai	r2,r3,2
 1005c5c:	01c00044 	movi	r7,1
 1005c60:	30c00117 	ldw	r3,4(r6)
 1005c64:	388e983a 	sll	r7,r7,r2
 1005c68:	2805883a 	mov	r2,r5
 1005c6c:	38c6b03a 	or	r3,r7,r3
 1005c70:	30c00115 	stw	r3,4(r6)
 1005c74:	003f9b06 	br	1005ae4 <_malloc_r+0x564>
 1005c78:	00c15504 	movi	r3,1364
 1005c7c:	18801a36 	bltu	r3,r2,1005ce8 <_malloc_r+0x768>
 1005c80:	8804d4ba 	srli	r2,r17,18
 1005c84:	12001f44 	addi	r8,r2,125
 1005c88:	11c01f04 	addi	r7,r2,124
 1005c8c:	4209883a 	add	r4,r8,r8
 1005c90:	003e5906 	br	10055f8 <_malloc_r+0x78>
 1005c94:	ad400404 	addi	r21,r21,16
 1005c98:	003f1706 	br	10058f8 <_malloc_r+0x378>
 1005c9c:	00c01504 	movi	r3,84
 1005ca0:	18802336 	bltu	r3,r2,1005d30 <_malloc_r+0x7b0>
 1005ca4:	3804d33a 	srli	r2,r7,12
 1005ca8:	11401bc4 	addi	r5,r2,111
 1005cac:	10c01b84 	addi	r3,r2,110
 1005cb0:	294b883a 	add	r5,r5,r5
 1005cb4:	003f7b06 	br	1005aa4 <_malloc_r+0x524>
 1005cb8:	9c000217 	ldw	r16,8(r19)
 1005cbc:	00bfff04 	movi	r2,-4
 1005cc0:	80c00117 	ldw	r3,4(r16)
 1005cc4:	1886703a 	and	r3,r3,r2
 1005cc8:	003f5306 	br	1005a18 <_malloc_r+0x498>
 1005ccc:	3083ffcc 	andi	r2,r6,4095
 1005cd0:	103f181e 	bne	r2,zero,1005934 <_malloc_r+0x3b4>
 1005cd4:	99000217 	ldw	r4,8(r19)
 1005cd8:	b545883a 	add	r2,r22,r21
 1005cdc:	10800054 	ori	r2,r2,1
 1005ce0:	20800115 	stw	r2,4(r4)
 1005ce4:	003f3e06 	br	10059e0 <_malloc_r+0x460>
 1005ce8:	01003f84 	movi	r4,254
 1005cec:	02001fc4 	movi	r8,127
 1005cf0:	01c01f84 	movi	r7,126
 1005cf4:	003e4006 	br	10055f8 <_malloc_r+0x78>
 1005cf8:	00804074 	movhi	r2,257
 1005cfc:	10845004 	addi	r2,r2,4416
 1005d00:	15000015 	stw	r20,0(r2)
 1005d04:	003f1106 	br	100594c <_malloc_r+0x3cc>
 1005d08:	00800044 	movi	r2,1
 1005d0c:	002b883a 	mov	r21,zero
 1005d10:	003f1f06 	br	1005990 <_malloc_r+0x410>
 1005d14:	81400204 	addi	r5,r16,8
 1005d18:	9009883a 	mov	r4,r18
 1005d1c:	10049940 	call	1004994 <_free_r>
 1005d20:	00804074 	movhi	r2,257
 1005d24:	108b2704 	addi	r2,r2,11420
 1005d28:	10c00017 	ldw	r3,0(r2)
 1005d2c:	003f2c06 	br	10059e0 <_malloc_r+0x460>
 1005d30:	00c05504 	movi	r3,340
 1005d34:	18800536 	bltu	r3,r2,1005d4c <_malloc_r+0x7cc>
 1005d38:	3804d3fa 	srli	r2,r7,15
 1005d3c:	11401e04 	addi	r5,r2,120
 1005d40:	10c01dc4 	addi	r3,r2,119
 1005d44:	294b883a 	add	r5,r5,r5
 1005d48:	003f5606 	br	1005aa4 <_malloc_r+0x524>
 1005d4c:	00c15504 	movi	r3,1364
 1005d50:	18800536 	bltu	r3,r2,1005d68 <_malloc_r+0x7e8>
 1005d54:	3804d4ba 	srli	r2,r7,18
 1005d58:	11401f44 	addi	r5,r2,125
 1005d5c:	10c01f04 	addi	r3,r2,124
 1005d60:	294b883a 	add	r5,r5,r5
 1005d64:	003f4f06 	br	1005aa4 <_malloc_r+0x524>
 1005d68:	01403f84 	movi	r5,254
 1005d6c:	00c01f84 	movi	r3,126
 1005d70:	003f4c06 	br	1005aa4 <_malloc_r+0x524>
 1005d74:	98800117 	ldw	r2,4(r19)
 1005d78:	003fa006 	br	1005bfc <_malloc_r+0x67c>
 1005d7c:	8808d0fa 	srli	r4,r17,3
 1005d80:	20800044 	addi	r2,r4,1
 1005d84:	1085883a 	add	r2,r2,r2
 1005d88:	003e9006 	br	10057cc <_malloc_r+0x24c>

01005d8c <memchr>:
 1005d8c:	208000cc 	andi	r2,r4,3
 1005d90:	280f883a 	mov	r7,r5
 1005d94:	10003426 	beq	r2,zero,1005e68 <memchr+0xdc>
 1005d98:	30bfffc4 	addi	r2,r6,-1
 1005d9c:	30001a26 	beq	r6,zero,1005e08 <memchr+0x7c>
 1005da0:	20c00003 	ldbu	r3,0(r4)
 1005da4:	29803fcc 	andi	r6,r5,255
 1005da8:	30c0051e 	bne	r6,r3,1005dc0 <memchr+0x34>
 1005dac:	00001806 	br	1005e10 <memchr+0x84>
 1005db0:	10001526 	beq	r2,zero,1005e08 <memchr+0x7c>
 1005db4:	20c00003 	ldbu	r3,0(r4)
 1005db8:	10bfffc4 	addi	r2,r2,-1
 1005dbc:	30c01426 	beq	r6,r3,1005e10 <memchr+0x84>
 1005dc0:	21000044 	addi	r4,r4,1
 1005dc4:	20c000cc 	andi	r3,r4,3
 1005dc8:	183ff91e 	bne	r3,zero,1005db0 <memchr+0x24>
 1005dcc:	020000c4 	movi	r8,3
 1005dd0:	40801136 	bltu	r8,r2,1005e18 <memchr+0x8c>
 1005dd4:	10000c26 	beq	r2,zero,1005e08 <memchr+0x7c>
 1005dd8:	20c00003 	ldbu	r3,0(r4)
 1005ddc:	29403fcc 	andi	r5,r5,255
 1005de0:	28c00b26 	beq	r5,r3,1005e10 <memchr+0x84>
 1005de4:	20c00044 	addi	r3,r4,1
 1005de8:	39803fcc 	andi	r6,r7,255
 1005dec:	2089883a 	add	r4,r4,r2
 1005df0:	00000306 	br	1005e00 <memchr+0x74>
 1005df4:	18c00044 	addi	r3,r3,1
 1005df8:	197fffc3 	ldbu	r5,-1(r3)
 1005dfc:	31400526 	beq	r6,r5,1005e14 <memchr+0x88>
 1005e00:	1805883a 	mov	r2,r3
 1005e04:	20fffb1e 	bne	r4,r3,1005df4 <memchr+0x68>
 1005e08:	0005883a 	mov	r2,zero
 1005e0c:	f800283a 	ret
 1005e10:	2005883a 	mov	r2,r4
 1005e14:	f800283a 	ret
 1005e18:	28c03fcc 	andi	r3,r5,255
 1005e1c:	1812923a 	slli	r9,r3,8
 1005e20:	02ffbff4 	movhi	r11,65279
 1005e24:	02a02074 	movhi	r10,32897
 1005e28:	48d2b03a 	or	r9,r9,r3
 1005e2c:	4806943a 	slli	r3,r9,16
 1005e30:	5affbfc4 	addi	r11,r11,-257
 1005e34:	52a02004 	addi	r10,r10,-32640
 1005e38:	48d2b03a 	or	r9,r9,r3
 1005e3c:	20c00017 	ldw	r3,0(r4)
 1005e40:	48c6f03a 	xor	r3,r9,r3
 1005e44:	1acd883a 	add	r6,r3,r11
 1005e48:	00c6303a 	nor	r3,zero,r3
 1005e4c:	30c6703a 	and	r3,r6,r3
 1005e50:	1a86703a 	and	r3,r3,r10
 1005e54:	183fe01e 	bne	r3,zero,1005dd8 <memchr+0x4c>
 1005e58:	10bfff04 	addi	r2,r2,-4
 1005e5c:	21000104 	addi	r4,r4,4
 1005e60:	40bff636 	bltu	r8,r2,1005e3c <memchr+0xb0>
 1005e64:	003fdb06 	br	1005dd4 <memchr+0x48>
 1005e68:	3005883a 	mov	r2,r6
 1005e6c:	003fd706 	br	1005dcc <memchr+0x40>

01005e70 <memcpy>:
 1005e70:	defffd04 	addi	sp,sp,-12
 1005e74:	dfc00215 	stw	ra,8(sp)
 1005e78:	dc400115 	stw	r17,4(sp)
 1005e7c:	dc000015 	stw	r16,0(sp)
 1005e80:	00c003c4 	movi	r3,15
 1005e84:	2005883a 	mov	r2,r4
 1005e88:	1980452e 	bgeu	r3,r6,1005fa0 <memcpy+0x130>
 1005e8c:	2906b03a 	or	r3,r5,r4
 1005e90:	18c000cc 	andi	r3,r3,3
 1005e94:	1800441e 	bne	r3,zero,1005fa8 <memcpy+0x138>
 1005e98:	347ffc04 	addi	r17,r6,-16
 1005e9c:	8822d13a 	srli	r17,r17,4
 1005ea0:	28c00104 	addi	r3,r5,4
 1005ea4:	23400104 	addi	r13,r4,4
 1005ea8:	8820913a 	slli	r16,r17,4
 1005eac:	2b000204 	addi	r12,r5,8
 1005eb0:	22c00204 	addi	r11,r4,8
 1005eb4:	84000504 	addi	r16,r16,20
 1005eb8:	2a800304 	addi	r10,r5,12
 1005ebc:	22400304 	addi	r9,r4,12
 1005ec0:	2c21883a 	add	r16,r5,r16
 1005ec4:	2811883a 	mov	r8,r5
 1005ec8:	200f883a 	mov	r7,r4
 1005ecc:	41000017 	ldw	r4,0(r8)
 1005ed0:	1fc00017 	ldw	ra,0(r3)
 1005ed4:	63c00017 	ldw	r15,0(r12)
 1005ed8:	39000015 	stw	r4,0(r7)
 1005edc:	53800017 	ldw	r14,0(r10)
 1005ee0:	6fc00015 	stw	ra,0(r13)
 1005ee4:	5bc00015 	stw	r15,0(r11)
 1005ee8:	4b800015 	stw	r14,0(r9)
 1005eec:	18c00404 	addi	r3,r3,16
 1005ef0:	39c00404 	addi	r7,r7,16
 1005ef4:	42000404 	addi	r8,r8,16
 1005ef8:	6b400404 	addi	r13,r13,16
 1005efc:	63000404 	addi	r12,r12,16
 1005f00:	5ac00404 	addi	r11,r11,16
 1005f04:	52800404 	addi	r10,r10,16
 1005f08:	4a400404 	addi	r9,r9,16
 1005f0c:	1c3fef1e 	bne	r3,r16,1005ecc <memcpy+0x5c>
 1005f10:	89c00044 	addi	r7,r17,1
 1005f14:	380e913a 	slli	r7,r7,4
 1005f18:	310003cc 	andi	r4,r6,15
 1005f1c:	02c000c4 	movi	r11,3
 1005f20:	11c7883a 	add	r3,r2,r7
 1005f24:	29cb883a 	add	r5,r5,r7
 1005f28:	5900212e 	bgeu	r11,r4,1005fb0 <memcpy+0x140>
 1005f2c:	1813883a 	mov	r9,r3
 1005f30:	2811883a 	mov	r8,r5
 1005f34:	200f883a 	mov	r7,r4
 1005f38:	42800017 	ldw	r10,0(r8)
 1005f3c:	4a400104 	addi	r9,r9,4
 1005f40:	39ffff04 	addi	r7,r7,-4
 1005f44:	4abfff15 	stw	r10,-4(r9)
 1005f48:	42000104 	addi	r8,r8,4
 1005f4c:	59fffa36 	bltu	r11,r7,1005f38 <memcpy+0xc8>
 1005f50:	213fff04 	addi	r4,r4,-4
 1005f54:	2008d0ba 	srli	r4,r4,2
 1005f58:	318000cc 	andi	r6,r6,3
 1005f5c:	21000044 	addi	r4,r4,1
 1005f60:	2109883a 	add	r4,r4,r4
 1005f64:	2109883a 	add	r4,r4,r4
 1005f68:	1907883a 	add	r3,r3,r4
 1005f6c:	290b883a 	add	r5,r5,r4
 1005f70:	30000626 	beq	r6,zero,1005f8c <memcpy+0x11c>
 1005f74:	198d883a 	add	r6,r3,r6
 1005f78:	29c00003 	ldbu	r7,0(r5)
 1005f7c:	18c00044 	addi	r3,r3,1
 1005f80:	29400044 	addi	r5,r5,1
 1005f84:	19ffffc5 	stb	r7,-1(r3)
 1005f88:	19bffb1e 	bne	r3,r6,1005f78 <memcpy+0x108>
 1005f8c:	dfc00217 	ldw	ra,8(sp)
 1005f90:	dc400117 	ldw	r17,4(sp)
 1005f94:	dc000017 	ldw	r16,0(sp)
 1005f98:	dec00304 	addi	sp,sp,12
 1005f9c:	f800283a 	ret
 1005fa0:	2007883a 	mov	r3,r4
 1005fa4:	003ff206 	br	1005f70 <memcpy+0x100>
 1005fa8:	2007883a 	mov	r3,r4
 1005fac:	003ff106 	br	1005f74 <memcpy+0x104>
 1005fb0:	200d883a 	mov	r6,r4
 1005fb4:	003fee06 	br	1005f70 <memcpy+0x100>

01005fb8 <memmove>:
 1005fb8:	2005883a 	mov	r2,r4
 1005fbc:	29000b2e 	bgeu	r5,r4,1005fec <memmove+0x34>
 1005fc0:	298f883a 	add	r7,r5,r6
 1005fc4:	21c0092e 	bgeu	r4,r7,1005fec <memmove+0x34>
 1005fc8:	2187883a 	add	r3,r4,r6
 1005fcc:	198bc83a 	sub	r5,r3,r6
 1005fd0:	30004826 	beq	r6,zero,10060f4 <memmove+0x13c>
 1005fd4:	39ffffc4 	addi	r7,r7,-1
 1005fd8:	39000003 	ldbu	r4,0(r7)
 1005fdc:	18ffffc4 	addi	r3,r3,-1
 1005fe0:	19000005 	stb	r4,0(r3)
 1005fe4:	28fffb1e 	bne	r5,r3,1005fd4 <memmove+0x1c>
 1005fe8:	f800283a 	ret
 1005fec:	00c003c4 	movi	r3,15
 1005ff0:	1980412e 	bgeu	r3,r6,10060f8 <memmove+0x140>
 1005ff4:	2886b03a 	or	r3,r5,r2
 1005ff8:	18c000cc 	andi	r3,r3,3
 1005ffc:	1800401e 	bne	r3,zero,1006100 <memmove+0x148>
 1006000:	33fffc04 	addi	r15,r6,-16
 1006004:	781ed13a 	srli	r15,r15,4
 1006008:	28c00104 	addi	r3,r5,4
 100600c:	13400104 	addi	r13,r2,4
 1006010:	781c913a 	slli	r14,r15,4
 1006014:	2b000204 	addi	r12,r5,8
 1006018:	12c00204 	addi	r11,r2,8
 100601c:	73800504 	addi	r14,r14,20
 1006020:	2a800304 	addi	r10,r5,12
 1006024:	12400304 	addi	r9,r2,12
 1006028:	2b9d883a 	add	r14,r5,r14
 100602c:	2811883a 	mov	r8,r5
 1006030:	100f883a 	mov	r7,r2
 1006034:	41000017 	ldw	r4,0(r8)
 1006038:	39c00404 	addi	r7,r7,16
 100603c:	18c00404 	addi	r3,r3,16
 1006040:	393ffc15 	stw	r4,-16(r7)
 1006044:	193ffc17 	ldw	r4,-16(r3)
 1006048:	6b400404 	addi	r13,r13,16
 100604c:	5ac00404 	addi	r11,r11,16
 1006050:	693ffc15 	stw	r4,-16(r13)
 1006054:	61000017 	ldw	r4,0(r12)
 1006058:	4a400404 	addi	r9,r9,16
 100605c:	42000404 	addi	r8,r8,16
 1006060:	593ffc15 	stw	r4,-16(r11)
 1006064:	51000017 	ldw	r4,0(r10)
 1006068:	63000404 	addi	r12,r12,16
 100606c:	52800404 	addi	r10,r10,16
 1006070:	493ffc15 	stw	r4,-16(r9)
 1006074:	1bbfef1e 	bne	r3,r14,1006034 <memmove+0x7c>
 1006078:	79000044 	addi	r4,r15,1
 100607c:	2008913a 	slli	r4,r4,4
 1006080:	328003cc 	andi	r10,r6,15
 1006084:	02c000c4 	movi	r11,3
 1006088:	1107883a 	add	r3,r2,r4
 100608c:	290b883a 	add	r5,r5,r4
 1006090:	5a801e2e 	bgeu	r11,r10,100610c <memmove+0x154>
 1006094:	1813883a 	mov	r9,r3
 1006098:	2811883a 	mov	r8,r5
 100609c:	500f883a 	mov	r7,r10
 10060a0:	41000017 	ldw	r4,0(r8)
 10060a4:	4a400104 	addi	r9,r9,4
 10060a8:	39ffff04 	addi	r7,r7,-4
 10060ac:	493fff15 	stw	r4,-4(r9)
 10060b0:	42000104 	addi	r8,r8,4
 10060b4:	59fffa36 	bltu	r11,r7,10060a0 <memmove+0xe8>
 10060b8:	513fff04 	addi	r4,r10,-4
 10060bc:	2008d0ba 	srli	r4,r4,2
 10060c0:	318000cc 	andi	r6,r6,3
 10060c4:	21000044 	addi	r4,r4,1
 10060c8:	2109883a 	add	r4,r4,r4
 10060cc:	2109883a 	add	r4,r4,r4
 10060d0:	1907883a 	add	r3,r3,r4
 10060d4:	290b883a 	add	r5,r5,r4
 10060d8:	30000b26 	beq	r6,zero,1006108 <memmove+0x150>
 10060dc:	198d883a 	add	r6,r3,r6
 10060e0:	29c00003 	ldbu	r7,0(r5)
 10060e4:	18c00044 	addi	r3,r3,1
 10060e8:	29400044 	addi	r5,r5,1
 10060ec:	19ffffc5 	stb	r7,-1(r3)
 10060f0:	19bffb1e 	bne	r3,r6,10060e0 <memmove+0x128>
 10060f4:	f800283a 	ret
 10060f8:	1007883a 	mov	r3,r2
 10060fc:	003ff606 	br	10060d8 <memmove+0x120>
 1006100:	1007883a 	mov	r3,r2
 1006104:	003ff506 	br	10060dc <memmove+0x124>
 1006108:	f800283a 	ret
 100610c:	500d883a 	mov	r6,r10
 1006110:	003ff106 	br	10060d8 <memmove+0x120>

01006114 <memset>:
 1006114:	20c000cc 	andi	r3,r4,3
 1006118:	2005883a 	mov	r2,r4
 100611c:	18004426 	beq	r3,zero,1006230 <memset+0x11c>
 1006120:	31ffffc4 	addi	r7,r6,-1
 1006124:	30004026 	beq	r6,zero,1006228 <memset+0x114>
 1006128:	2813883a 	mov	r9,r5
 100612c:	200d883a 	mov	r6,r4
 1006130:	2007883a 	mov	r3,r4
 1006134:	00000406 	br	1006148 <memset+0x34>
 1006138:	3a3fffc4 	addi	r8,r7,-1
 100613c:	31800044 	addi	r6,r6,1
 1006140:	38003926 	beq	r7,zero,1006228 <memset+0x114>
 1006144:	400f883a 	mov	r7,r8
 1006148:	18c00044 	addi	r3,r3,1
 100614c:	32400005 	stb	r9,0(r6)
 1006150:	1a0000cc 	andi	r8,r3,3
 1006154:	403ff81e 	bne	r8,zero,1006138 <memset+0x24>
 1006158:	010000c4 	movi	r4,3
 100615c:	21c02d2e 	bgeu	r4,r7,1006214 <memset+0x100>
 1006160:	29003fcc 	andi	r4,r5,255
 1006164:	200c923a 	slli	r6,r4,8
 1006168:	3108b03a 	or	r4,r6,r4
 100616c:	200c943a 	slli	r6,r4,16
 1006170:	218cb03a 	or	r6,r4,r6
 1006174:	010003c4 	movi	r4,15
 1006178:	21c0182e 	bgeu	r4,r7,10061dc <memset+0xc8>
 100617c:	3b3ffc04 	addi	r12,r7,-16
 1006180:	6018d13a 	srli	r12,r12,4
 1006184:	1a000104 	addi	r8,r3,4
 1006188:	1ac00204 	addi	r11,r3,8
 100618c:	6008913a 	slli	r4,r12,4
 1006190:	1a800304 	addi	r10,r3,12
 1006194:	1813883a 	mov	r9,r3
 1006198:	21000504 	addi	r4,r4,20
 100619c:	1909883a 	add	r4,r3,r4
 10061a0:	49800015 	stw	r6,0(r9)
 10061a4:	41800015 	stw	r6,0(r8)
 10061a8:	59800015 	stw	r6,0(r11)
 10061ac:	51800015 	stw	r6,0(r10)
 10061b0:	42000404 	addi	r8,r8,16
 10061b4:	4a400404 	addi	r9,r9,16
 10061b8:	5ac00404 	addi	r11,r11,16
 10061bc:	52800404 	addi	r10,r10,16
 10061c0:	413ff71e 	bne	r8,r4,10061a0 <memset+0x8c>
 10061c4:	63000044 	addi	r12,r12,1
 10061c8:	6018913a 	slli	r12,r12,4
 10061cc:	39c003cc 	andi	r7,r7,15
 10061d0:	010000c4 	movi	r4,3
 10061d4:	1b07883a 	add	r3,r3,r12
 10061d8:	21c00e2e 	bgeu	r4,r7,1006214 <memset+0x100>
 10061dc:	1813883a 	mov	r9,r3
 10061e0:	3811883a 	mov	r8,r7
 10061e4:	010000c4 	movi	r4,3
 10061e8:	49800015 	stw	r6,0(r9)
 10061ec:	423fff04 	addi	r8,r8,-4
 10061f0:	4a400104 	addi	r9,r9,4
 10061f4:	223ffc36 	bltu	r4,r8,10061e8 <memset+0xd4>
 10061f8:	393fff04 	addi	r4,r7,-4
 10061fc:	2008d0ba 	srli	r4,r4,2
 1006200:	39c000cc 	andi	r7,r7,3
 1006204:	21000044 	addi	r4,r4,1
 1006208:	2109883a 	add	r4,r4,r4
 100620c:	2109883a 	add	r4,r4,r4
 1006210:	1907883a 	add	r3,r3,r4
 1006214:	38000526 	beq	r7,zero,100622c <memset+0x118>
 1006218:	19cf883a 	add	r7,r3,r7
 100621c:	19400005 	stb	r5,0(r3)
 1006220:	18c00044 	addi	r3,r3,1
 1006224:	38fffd1e 	bne	r7,r3,100621c <memset+0x108>
 1006228:	f800283a 	ret
 100622c:	f800283a 	ret
 1006230:	2007883a 	mov	r3,r4
 1006234:	300f883a 	mov	r7,r6
 1006238:	003fc706 	br	1006158 <memset+0x44>

0100623c <_Balloc>:
 100623c:	20801317 	ldw	r2,76(r4)
 1006240:	defffc04 	addi	sp,sp,-16
 1006244:	dc400115 	stw	r17,4(sp)
 1006248:	dc000015 	stw	r16,0(sp)
 100624c:	dfc00315 	stw	ra,12(sp)
 1006250:	dc800215 	stw	r18,8(sp)
 1006254:	2023883a 	mov	r17,r4
 1006258:	2821883a 	mov	r16,r5
 100625c:	10000f26 	beq	r2,zero,100629c <_Balloc+0x60>
 1006260:	8407883a 	add	r3,r16,r16
 1006264:	18c7883a 	add	r3,r3,r3
 1006268:	10c7883a 	add	r3,r2,r3
 100626c:	18800017 	ldw	r2,0(r3)
 1006270:	10001126 	beq	r2,zero,10062b8 <_Balloc+0x7c>
 1006274:	11000017 	ldw	r4,0(r2)
 1006278:	19000015 	stw	r4,0(r3)
 100627c:	10000415 	stw	zero,16(r2)
 1006280:	10000315 	stw	zero,12(r2)
 1006284:	dfc00317 	ldw	ra,12(sp)
 1006288:	dc800217 	ldw	r18,8(sp)
 100628c:	dc400117 	ldw	r17,4(sp)
 1006290:	dc000017 	ldw	r16,0(sp)
 1006294:	dec00404 	addi	sp,sp,16
 1006298:	f800283a 	ret
 100629c:	01800844 	movi	r6,33
 10062a0:	01400104 	movi	r5,4
 10062a4:	10091780 	call	1009178 <_calloc_r>
 10062a8:	88801315 	stw	r2,76(r17)
 10062ac:	103fec1e 	bne	r2,zero,1006260 <_Balloc+0x24>
 10062b0:	0005883a 	mov	r2,zero
 10062b4:	003ff306 	br	1006284 <_Balloc+0x48>
 10062b8:	01400044 	movi	r5,1
 10062bc:	2c24983a 	sll	r18,r5,r16
 10062c0:	8809883a 	mov	r4,r17
 10062c4:	91800144 	addi	r6,r18,5
 10062c8:	318d883a 	add	r6,r6,r6
 10062cc:	318d883a 	add	r6,r6,r6
 10062d0:	10091780 	call	1009178 <_calloc_r>
 10062d4:	103ff626 	beq	r2,zero,10062b0 <_Balloc+0x74>
 10062d8:	14000115 	stw	r16,4(r2)
 10062dc:	14800215 	stw	r18,8(r2)
 10062e0:	003fe606 	br	100627c <_Balloc+0x40>

010062e4 <_Bfree>:
 10062e4:	28000826 	beq	r5,zero,1006308 <_Bfree+0x24>
 10062e8:	28c00117 	ldw	r3,4(r5)
 10062ec:	20801317 	ldw	r2,76(r4)
 10062f0:	18c7883a 	add	r3,r3,r3
 10062f4:	18c7883a 	add	r3,r3,r3
 10062f8:	10c5883a 	add	r2,r2,r3
 10062fc:	10c00017 	ldw	r3,0(r2)
 1006300:	28c00015 	stw	r3,0(r5)
 1006304:	11400015 	stw	r5,0(r2)
 1006308:	f800283a 	ret

0100630c <__multadd>:
 100630c:	defffa04 	addi	sp,sp,-24
 1006310:	dc800315 	stw	r18,12(sp)
 1006314:	dc400215 	stw	r17,8(sp)
 1006318:	dc000115 	stw	r16,4(sp)
 100631c:	2823883a 	mov	r17,r5
 1006320:	2c000417 	ldw	r16,16(r5)
 1006324:	dfc00515 	stw	ra,20(sp)
 1006328:	dcc00415 	stw	r19,16(sp)
 100632c:	2025883a 	mov	r18,r4
 1006330:	29400504 	addi	r5,r5,20
 1006334:	0011883a 	mov	r8,zero
 1006338:	28c00017 	ldw	r3,0(r5)
 100633c:	29400104 	addi	r5,r5,4
 1006340:	42000044 	addi	r8,r8,1
 1006344:	18bfffcc 	andi	r2,r3,65535
 1006348:	1185383a 	mul	r2,r2,r6
 100634c:	1806d43a 	srli	r3,r3,16
 1006350:	11cf883a 	add	r7,r2,r7
 1006354:	3808d43a 	srli	r4,r7,16
 1006358:	1987383a 	mul	r3,r3,r6
 100635c:	38bfffcc 	andi	r2,r7,65535
 1006360:	1907883a 	add	r3,r3,r4
 1006364:	1808943a 	slli	r4,r3,16
 1006368:	180ed43a 	srli	r7,r3,16
 100636c:	2085883a 	add	r2,r4,r2
 1006370:	28bfff15 	stw	r2,-4(r5)
 1006374:	443ff016 	blt	r8,r16,1006338 <__multadd+0x2c>
 1006378:	38000926 	beq	r7,zero,10063a0 <__multadd+0x94>
 100637c:	88800217 	ldw	r2,8(r17)
 1006380:	80800f0e 	bge	r16,r2,10063c0 <__multadd+0xb4>
 1006384:	80800144 	addi	r2,r16,5
 1006388:	1085883a 	add	r2,r2,r2
 100638c:	1085883a 	add	r2,r2,r2
 1006390:	8885883a 	add	r2,r17,r2
 1006394:	11c00015 	stw	r7,0(r2)
 1006398:	84000044 	addi	r16,r16,1
 100639c:	8c000415 	stw	r16,16(r17)
 10063a0:	8805883a 	mov	r2,r17
 10063a4:	dfc00517 	ldw	ra,20(sp)
 10063a8:	dcc00417 	ldw	r19,16(sp)
 10063ac:	dc800317 	ldw	r18,12(sp)
 10063b0:	dc400217 	ldw	r17,8(sp)
 10063b4:	dc000117 	ldw	r16,4(sp)
 10063b8:	dec00604 	addi	sp,sp,24
 10063bc:	f800283a 	ret
 10063c0:	89400117 	ldw	r5,4(r17)
 10063c4:	9009883a 	mov	r4,r18
 10063c8:	d9c00015 	stw	r7,0(sp)
 10063cc:	29400044 	addi	r5,r5,1
 10063d0:	100623c0 	call	100623c <_Balloc>
 10063d4:	89800417 	ldw	r6,16(r17)
 10063d8:	89400304 	addi	r5,r17,12
 10063dc:	11000304 	addi	r4,r2,12
 10063e0:	31800084 	addi	r6,r6,2
 10063e4:	318d883a 	add	r6,r6,r6
 10063e8:	318d883a 	add	r6,r6,r6
 10063ec:	1027883a 	mov	r19,r2
 10063f0:	1005e700 	call	1005e70 <memcpy>
 10063f4:	d9c00017 	ldw	r7,0(sp)
 10063f8:	88000a26 	beq	r17,zero,1006424 <__multadd+0x118>
 10063fc:	88c00117 	ldw	r3,4(r17)
 1006400:	90801317 	ldw	r2,76(r18)
 1006404:	18c7883a 	add	r3,r3,r3
 1006408:	18c7883a 	add	r3,r3,r3
 100640c:	10c5883a 	add	r2,r2,r3
 1006410:	10c00017 	ldw	r3,0(r2)
 1006414:	88c00015 	stw	r3,0(r17)
 1006418:	14400015 	stw	r17,0(r2)
 100641c:	9823883a 	mov	r17,r19
 1006420:	003fd806 	br	1006384 <__multadd+0x78>
 1006424:	9823883a 	mov	r17,r19
 1006428:	003fd606 	br	1006384 <__multadd+0x78>

0100642c <__s2b>:
 100642c:	defff904 	addi	sp,sp,-28
 1006430:	dc400115 	stw	r17,4(sp)
 1006434:	dc000015 	stw	r16,0(sp)
 1006438:	2023883a 	mov	r17,r4
 100643c:	2821883a 	mov	r16,r5
 1006440:	39000204 	addi	r4,r7,8
 1006444:	01400244 	movi	r5,9
 1006448:	dcc00315 	stw	r19,12(sp)
 100644c:	dc800215 	stw	r18,8(sp)
 1006450:	dfc00615 	stw	ra,24(sp)
 1006454:	dd400515 	stw	r21,20(sp)
 1006458:	dd000415 	stw	r20,16(sp)
 100645c:	3825883a 	mov	r18,r7
 1006460:	3027883a 	mov	r19,r6
 1006464:	100a4a80 	call	100a4a8 <__divsi3>
 1006468:	00c00044 	movi	r3,1
 100646c:	000b883a 	mov	r5,zero
 1006470:	1880030e 	bge	r3,r2,1006480 <__s2b+0x54>
 1006474:	18c7883a 	add	r3,r3,r3
 1006478:	29400044 	addi	r5,r5,1
 100647c:	18bffd16 	blt	r3,r2,1006474 <__s2b+0x48>
 1006480:	8809883a 	mov	r4,r17
 1006484:	100623c0 	call	100623c <_Balloc>
 1006488:	d8c00717 	ldw	r3,28(sp)
 100648c:	10c00515 	stw	r3,20(r2)
 1006490:	00c00044 	movi	r3,1
 1006494:	10c00415 	stw	r3,16(r2)
 1006498:	00c00244 	movi	r3,9
 100649c:	1cc0210e 	bge	r3,r19,1006524 <__s2b+0xf8>
 10064a0:	80eb883a 	add	r21,r16,r3
 10064a4:	a829883a 	mov	r20,r21
 10064a8:	84e1883a 	add	r16,r16,r19
 10064ac:	a1c00007 	ldb	r7,0(r20)
 10064b0:	01800284 	movi	r6,10
 10064b4:	a5000044 	addi	r20,r20,1
 10064b8:	100b883a 	mov	r5,r2
 10064bc:	39fff404 	addi	r7,r7,-48
 10064c0:	8809883a 	mov	r4,r17
 10064c4:	100630c0 	call	100630c <__multadd>
 10064c8:	a43ff81e 	bne	r20,r16,10064ac <__s2b+0x80>
 10064cc:	ace1883a 	add	r16,r21,r19
 10064d0:	843ffe04 	addi	r16,r16,-8
 10064d4:	9c800a0e 	bge	r19,r18,1006500 <__s2b+0xd4>
 10064d8:	94e5c83a 	sub	r18,r18,r19
 10064dc:	84a5883a 	add	r18,r16,r18
 10064e0:	81c00007 	ldb	r7,0(r16)
 10064e4:	01800284 	movi	r6,10
 10064e8:	84000044 	addi	r16,r16,1
 10064ec:	100b883a 	mov	r5,r2
 10064f0:	39fff404 	addi	r7,r7,-48
 10064f4:	8809883a 	mov	r4,r17
 10064f8:	100630c0 	call	100630c <__multadd>
 10064fc:	84bff81e 	bne	r16,r18,10064e0 <__s2b+0xb4>
 1006500:	dfc00617 	ldw	ra,24(sp)
 1006504:	dd400517 	ldw	r21,20(sp)
 1006508:	dd000417 	ldw	r20,16(sp)
 100650c:	dcc00317 	ldw	r19,12(sp)
 1006510:	dc800217 	ldw	r18,8(sp)
 1006514:	dc400117 	ldw	r17,4(sp)
 1006518:	dc000017 	ldw	r16,0(sp)
 100651c:	dec00704 	addi	sp,sp,28
 1006520:	f800283a 	ret
 1006524:	84000284 	addi	r16,r16,10
 1006528:	1827883a 	mov	r19,r3
 100652c:	003fe906 	br	10064d4 <__s2b+0xa8>

01006530 <__hi0bits>:
 1006530:	20bfffec 	andhi	r2,r4,65535
 1006534:	1000141e 	bne	r2,zero,1006588 <__hi0bits+0x58>
 1006538:	2008943a 	slli	r4,r4,16
 100653c:	00800404 	movi	r2,16
 1006540:	20ffc02c 	andhi	r3,r4,65280
 1006544:	1800021e 	bne	r3,zero,1006550 <__hi0bits+0x20>
 1006548:	2008923a 	slli	r4,r4,8
 100654c:	10800204 	addi	r2,r2,8
 1006550:	20fc002c 	andhi	r3,r4,61440
 1006554:	1800021e 	bne	r3,zero,1006560 <__hi0bits+0x30>
 1006558:	2008913a 	slli	r4,r4,4
 100655c:	10800104 	addi	r2,r2,4
 1006560:	20f0002c 	andhi	r3,r4,49152
 1006564:	1800031e 	bne	r3,zero,1006574 <__hi0bits+0x44>
 1006568:	2109883a 	add	r4,r4,r4
 100656c:	10800084 	addi	r2,r2,2
 1006570:	2109883a 	add	r4,r4,r4
 1006574:	20000316 	blt	r4,zero,1006584 <__hi0bits+0x54>
 1006578:	2110002c 	andhi	r4,r4,16384
 100657c:	2000041e 	bne	r4,zero,1006590 <__hi0bits+0x60>
 1006580:	00800804 	movi	r2,32
 1006584:	f800283a 	ret
 1006588:	0005883a 	mov	r2,zero
 100658c:	003fec06 	br	1006540 <__hi0bits+0x10>
 1006590:	10800044 	addi	r2,r2,1
 1006594:	f800283a 	ret

01006598 <__lo0bits>:
 1006598:	20c00017 	ldw	r3,0(r4)
 100659c:	188001cc 	andi	r2,r3,7
 10065a0:	10000826 	beq	r2,zero,10065c4 <__lo0bits+0x2c>
 10065a4:	1880004c 	andi	r2,r3,1
 10065a8:	1000211e 	bne	r2,zero,1006630 <__lo0bits+0x98>
 10065ac:	1880008c 	andi	r2,r3,2
 10065b0:	1000211e 	bne	r2,zero,1006638 <__lo0bits+0xa0>
 10065b4:	1806d0ba 	srli	r3,r3,2
 10065b8:	00800084 	movi	r2,2
 10065bc:	20c00015 	stw	r3,0(r4)
 10065c0:	f800283a 	ret
 10065c4:	18bfffcc 	andi	r2,r3,65535
 10065c8:	10001326 	beq	r2,zero,1006618 <__lo0bits+0x80>
 10065cc:	0005883a 	mov	r2,zero
 10065d0:	19403fcc 	andi	r5,r3,255
 10065d4:	2800021e 	bne	r5,zero,10065e0 <__lo0bits+0x48>
 10065d8:	1806d23a 	srli	r3,r3,8
 10065dc:	10800204 	addi	r2,r2,8
 10065e0:	194003cc 	andi	r5,r3,15
 10065e4:	2800021e 	bne	r5,zero,10065f0 <__lo0bits+0x58>
 10065e8:	1806d13a 	srli	r3,r3,4
 10065ec:	10800104 	addi	r2,r2,4
 10065f0:	194000cc 	andi	r5,r3,3
 10065f4:	2800021e 	bne	r5,zero,1006600 <__lo0bits+0x68>
 10065f8:	1806d0ba 	srli	r3,r3,2
 10065fc:	10800084 	addi	r2,r2,2
 1006600:	1940004c 	andi	r5,r3,1
 1006604:	2800081e 	bne	r5,zero,1006628 <__lo0bits+0x90>
 1006608:	1806d07a 	srli	r3,r3,1
 100660c:	1800051e 	bne	r3,zero,1006624 <__lo0bits+0x8c>
 1006610:	00800804 	movi	r2,32
 1006614:	f800283a 	ret
 1006618:	1806d43a 	srli	r3,r3,16
 100661c:	00800404 	movi	r2,16
 1006620:	003feb06 	br	10065d0 <__lo0bits+0x38>
 1006624:	10800044 	addi	r2,r2,1
 1006628:	20c00015 	stw	r3,0(r4)
 100662c:	f800283a 	ret
 1006630:	0005883a 	mov	r2,zero
 1006634:	f800283a 	ret
 1006638:	1806d07a 	srli	r3,r3,1
 100663c:	00800044 	movi	r2,1
 1006640:	20c00015 	stw	r3,0(r4)
 1006644:	f800283a 	ret

01006648 <__i2b>:
 1006648:	defffd04 	addi	sp,sp,-12
 100664c:	dc000015 	stw	r16,0(sp)
 1006650:	04000044 	movi	r16,1
 1006654:	dc400115 	stw	r17,4(sp)
 1006658:	2823883a 	mov	r17,r5
 100665c:	800b883a 	mov	r5,r16
 1006660:	dfc00215 	stw	ra,8(sp)
 1006664:	100623c0 	call	100623c <_Balloc>
 1006668:	14400515 	stw	r17,20(r2)
 100666c:	14000415 	stw	r16,16(r2)
 1006670:	dfc00217 	ldw	ra,8(sp)
 1006674:	dc400117 	ldw	r17,4(sp)
 1006678:	dc000017 	ldw	r16,0(sp)
 100667c:	dec00304 	addi	sp,sp,12
 1006680:	f800283a 	ret

01006684 <__multiply>:
 1006684:	defffa04 	addi	sp,sp,-24
 1006688:	dcc00315 	stw	r19,12(sp)
 100668c:	dc800215 	stw	r18,8(sp)
 1006690:	34c00417 	ldw	r19,16(r6)
 1006694:	2c800417 	ldw	r18,16(r5)
 1006698:	dd000415 	stw	r20,16(sp)
 100669c:	dc400115 	stw	r17,4(sp)
 10066a0:	dfc00515 	stw	ra,20(sp)
 10066a4:	dc000015 	stw	r16,0(sp)
 10066a8:	2829883a 	mov	r20,r5
 10066ac:	3023883a 	mov	r17,r6
 10066b0:	94c0050e 	bge	r18,r19,10066c8 <__multiply+0x44>
 10066b4:	9007883a 	mov	r3,r18
 10066b8:	3029883a 	mov	r20,r6
 10066bc:	9825883a 	mov	r18,r19
 10066c0:	2823883a 	mov	r17,r5
 10066c4:	1827883a 	mov	r19,r3
 10066c8:	a0800217 	ldw	r2,8(r20)
 10066cc:	94e1883a 	add	r16,r18,r19
 10066d0:	a1400117 	ldw	r5,4(r20)
 10066d4:	1400010e 	bge	r2,r16,10066dc <__multiply+0x58>
 10066d8:	29400044 	addi	r5,r5,1
 10066dc:	100623c0 	call	100623c <_Balloc>
 10066e0:	8415883a 	add	r10,r16,r16
 10066e4:	12c00504 	addi	r11,r2,20
 10066e8:	5295883a 	add	r10,r10,r10
 10066ec:	5a95883a 	add	r10,r11,r10
 10066f0:	5807883a 	mov	r3,r11
 10066f4:	5a80032e 	bgeu	r11,r10,1006704 <__multiply+0x80>
 10066f8:	18000015 	stw	zero,0(r3)
 10066fc:	18c00104 	addi	r3,r3,4
 1006700:	1abffd36 	bltu	r3,r10,10066f8 <__multiply+0x74>
 1006704:	9ce7883a 	add	r19,r19,r19
 1006708:	94a5883a 	add	r18,r18,r18
 100670c:	89800504 	addi	r6,r17,20
 1006710:	9ce7883a 	add	r19,r19,r19
 1006714:	a3400504 	addi	r13,r20,20
 1006718:	94a5883a 	add	r18,r18,r18
 100671c:	34d9883a 	add	r12,r6,r19
 1006720:	6c93883a 	add	r9,r13,r18
 1006724:	3300422e 	bgeu	r6,r12,1006830 <__multiply+0x1ac>
 1006728:	37c00017 	ldw	ra,0(r6)
 100672c:	fbffffcc 	andi	r15,ra,65535
 1006730:	78001b26 	beq	r15,zero,10067a0 <__multiply+0x11c>
 1006734:	5811883a 	mov	r8,r11
 1006738:	681d883a 	mov	r14,r13
 100673c:	000f883a 	mov	r7,zero
 1006740:	71000017 	ldw	r4,0(r14)
 1006744:	40c00017 	ldw	r3,0(r8)
 1006748:	73800104 	addi	r14,r14,4
 100674c:	217fffcc 	andi	r5,r4,65535
 1006750:	2bcb383a 	mul	r5,r5,r15
 1006754:	2008d43a 	srli	r4,r4,16
 1006758:	1c7fffcc 	andi	r17,r3,65535
 100675c:	2c4b883a 	add	r5,r5,r17
 1006760:	29cb883a 	add	r5,r5,r7
 1006764:	23c9383a 	mul	r4,r4,r15
 1006768:	1806d43a 	srli	r3,r3,16
 100676c:	280ed43a 	srli	r7,r5,16
 1006770:	297fffcc 	andi	r5,r5,65535
 1006774:	20c7883a 	add	r3,r4,r3
 1006778:	19c7883a 	add	r3,r3,r7
 100677c:	1808943a 	slli	r4,r3,16
 1006780:	4023883a 	mov	r17,r8
 1006784:	180ed43a 	srli	r7,r3,16
 1006788:	214ab03a 	or	r5,r4,r5
 100678c:	41400015 	stw	r5,0(r8)
 1006790:	42000104 	addi	r8,r8,4
 1006794:	727fea36 	bltu	r14,r9,1006740 <__multiply+0xbc>
 1006798:	89c00115 	stw	r7,4(r17)
 100679c:	37c00017 	ldw	ra,0(r6)
 10067a0:	f83ed43a 	srli	ra,ra,16
 10067a4:	f8001f26 	beq	ra,zero,1006824 <__multiply+0x1a0>
 10067a8:	58c00017 	ldw	r3,0(r11)
 10067ac:	681d883a 	mov	r14,r13
 10067b0:	581f883a 	mov	r15,r11
 10067b4:	1811883a 	mov	r8,r3
 10067b8:	5825883a 	mov	r18,r11
 10067bc:	000f883a 	mov	r7,zero
 10067c0:	00000106 	br	10067c8 <__multiply+0x144>
 10067c4:	8825883a 	mov	r18,r17
 10067c8:	7140000b 	ldhu	r5,0(r14)
 10067cc:	4010d43a 	srli	r8,r8,16
 10067d0:	193fffcc 	andi	r4,r3,65535
 10067d4:	2fcb383a 	mul	r5,r5,ra
 10067d8:	7bc00104 	addi	r15,r15,4
 10067dc:	73800104 	addi	r14,r14,4
 10067e0:	2a0b883a 	add	r5,r5,r8
 10067e4:	29cb883a 	add	r5,r5,r7
 10067e8:	2806943a 	slli	r3,r5,16
 10067ec:	94400104 	addi	r17,r18,4
 10067f0:	280ad43a 	srli	r5,r5,16
 10067f4:	1908b03a 	or	r4,r3,r4
 10067f8:	793fff15 	stw	r4,-4(r15)
 10067fc:	70ffff17 	ldw	r3,-4(r14)
 1006800:	8a000017 	ldw	r8,0(r17)
 1006804:	1806d43a 	srli	r3,r3,16
 1006808:	413fffcc 	andi	r4,r8,65535
 100680c:	1fc7383a 	mul	r3,r3,ra
 1006810:	1907883a 	add	r3,r3,r4
 1006814:	1947883a 	add	r3,r3,r5
 1006818:	180ed43a 	srli	r7,r3,16
 100681c:	727fe936 	bltu	r14,r9,10067c4 <__multiply+0x140>
 1006820:	90c00115 	stw	r3,4(r18)
 1006824:	31800104 	addi	r6,r6,4
 1006828:	5ac00104 	addi	r11,r11,4
 100682c:	333fbe36 	bltu	r6,r12,1006728 <__multiply+0xa4>
 1006830:	0400090e 	bge	zero,r16,1006858 <__multiply+0x1d4>
 1006834:	50ffff17 	ldw	r3,-4(r10)
 1006838:	52bfff04 	addi	r10,r10,-4
 100683c:	18000326 	beq	r3,zero,100684c <__multiply+0x1c8>
 1006840:	00000506 	br	1006858 <__multiply+0x1d4>
 1006844:	50c00017 	ldw	r3,0(r10)
 1006848:	1800031e 	bne	r3,zero,1006858 <__multiply+0x1d4>
 100684c:	843fffc4 	addi	r16,r16,-1
 1006850:	52bfff04 	addi	r10,r10,-4
 1006854:	803ffb1e 	bne	r16,zero,1006844 <__multiply+0x1c0>
 1006858:	14000415 	stw	r16,16(r2)
 100685c:	dfc00517 	ldw	ra,20(sp)
 1006860:	dd000417 	ldw	r20,16(sp)
 1006864:	dcc00317 	ldw	r19,12(sp)
 1006868:	dc800217 	ldw	r18,8(sp)
 100686c:	dc400117 	ldw	r17,4(sp)
 1006870:	dc000017 	ldw	r16,0(sp)
 1006874:	dec00604 	addi	sp,sp,24
 1006878:	f800283a 	ret

0100687c <__pow5mult>:
 100687c:	defffa04 	addi	sp,sp,-24
 1006880:	dcc00315 	stw	r19,12(sp)
 1006884:	dc000015 	stw	r16,0(sp)
 1006888:	dfc00515 	stw	ra,20(sp)
 100688c:	dd000415 	stw	r20,16(sp)
 1006890:	dc800215 	stw	r18,8(sp)
 1006894:	dc400115 	stw	r17,4(sp)
 1006898:	308000cc 	andi	r2,r6,3
 100689c:	3021883a 	mov	r16,r6
 10068a0:	2027883a 	mov	r19,r4
 10068a4:	10002f1e 	bne	r2,zero,1006964 <__pow5mult+0xe8>
 10068a8:	2825883a 	mov	r18,r5
 10068ac:	8021d0ba 	srai	r16,r16,2
 10068b0:	80001a26 	beq	r16,zero,100691c <__pow5mult+0xa0>
 10068b4:	9c401217 	ldw	r17,72(r19)
 10068b8:	8800061e 	bne	r17,zero,10068d4 <__pow5mult+0x58>
 10068bc:	00003406 	br	1006990 <__pow5mult+0x114>
 10068c0:	8021d07a 	srai	r16,r16,1
 10068c4:	80001526 	beq	r16,zero,100691c <__pow5mult+0xa0>
 10068c8:	88800017 	ldw	r2,0(r17)
 10068cc:	10001c26 	beq	r2,zero,1006940 <__pow5mult+0xc4>
 10068d0:	1023883a 	mov	r17,r2
 10068d4:	8080004c 	andi	r2,r16,1
 10068d8:	103ff926 	beq	r2,zero,10068c0 <__pow5mult+0x44>
 10068dc:	880d883a 	mov	r6,r17
 10068e0:	900b883a 	mov	r5,r18
 10068e4:	9809883a 	mov	r4,r19
 10068e8:	10066840 	call	1006684 <__multiply>
 10068ec:	90001b26 	beq	r18,zero,100695c <__pow5mult+0xe0>
 10068f0:	91000117 	ldw	r4,4(r18)
 10068f4:	98c01317 	ldw	r3,76(r19)
 10068f8:	8021d07a 	srai	r16,r16,1
 10068fc:	2109883a 	add	r4,r4,r4
 1006900:	2109883a 	add	r4,r4,r4
 1006904:	1907883a 	add	r3,r3,r4
 1006908:	19000017 	ldw	r4,0(r3)
 100690c:	91000015 	stw	r4,0(r18)
 1006910:	1c800015 	stw	r18,0(r3)
 1006914:	1025883a 	mov	r18,r2
 1006918:	803feb1e 	bne	r16,zero,10068c8 <__pow5mult+0x4c>
 100691c:	9005883a 	mov	r2,r18
 1006920:	dfc00517 	ldw	ra,20(sp)
 1006924:	dd000417 	ldw	r20,16(sp)
 1006928:	dcc00317 	ldw	r19,12(sp)
 100692c:	dc800217 	ldw	r18,8(sp)
 1006930:	dc400117 	ldw	r17,4(sp)
 1006934:	dc000017 	ldw	r16,0(sp)
 1006938:	dec00604 	addi	sp,sp,24
 100693c:	f800283a 	ret
 1006940:	880d883a 	mov	r6,r17
 1006944:	880b883a 	mov	r5,r17
 1006948:	9809883a 	mov	r4,r19
 100694c:	10066840 	call	1006684 <__multiply>
 1006950:	88800015 	stw	r2,0(r17)
 1006954:	10000015 	stw	zero,0(r2)
 1006958:	003fdd06 	br	10068d0 <__pow5mult+0x54>
 100695c:	1025883a 	mov	r18,r2
 1006960:	003fd706 	br	10068c0 <__pow5mult+0x44>
 1006964:	10bfffc4 	addi	r2,r2,-1
 1006968:	1085883a 	add	r2,r2,r2
 100696c:	00c04074 	movhi	r3,257
 1006970:	18fd0604 	addi	r3,r3,-3048
 1006974:	1085883a 	add	r2,r2,r2
 1006978:	1885883a 	add	r2,r3,r2
 100697c:	11800017 	ldw	r6,0(r2)
 1006980:	000f883a 	mov	r7,zero
 1006984:	100630c0 	call	100630c <__multadd>
 1006988:	1025883a 	mov	r18,r2
 100698c:	003fc706 	br	10068ac <__pow5mult+0x30>
 1006990:	05000044 	movi	r20,1
 1006994:	a00b883a 	mov	r5,r20
 1006998:	9809883a 	mov	r4,r19
 100699c:	100623c0 	call	100623c <_Balloc>
 10069a0:	1023883a 	mov	r17,r2
 10069a4:	00809c44 	movi	r2,625
 10069a8:	88800515 	stw	r2,20(r17)
 10069ac:	8d000415 	stw	r20,16(r17)
 10069b0:	9c401215 	stw	r17,72(r19)
 10069b4:	88000015 	stw	zero,0(r17)
 10069b8:	003fc606 	br	10068d4 <__pow5mult+0x58>

010069bc <__lshift>:
 10069bc:	defff904 	addi	sp,sp,-28
 10069c0:	dd400515 	stw	r21,20(sp)
 10069c4:	dcc00315 	stw	r19,12(sp)
 10069c8:	302bd17a 	srai	r21,r6,5
 10069cc:	2cc00417 	ldw	r19,16(r5)
 10069d0:	28800217 	ldw	r2,8(r5)
 10069d4:	dd000415 	stw	r20,16(sp)
 10069d8:	ace7883a 	add	r19,r21,r19
 10069dc:	dc800215 	stw	r18,8(sp)
 10069e0:	dc400115 	stw	r17,4(sp)
 10069e4:	dc000015 	stw	r16,0(sp)
 10069e8:	dfc00615 	stw	ra,24(sp)
 10069ec:	9c000044 	addi	r16,r19,1
 10069f0:	2823883a 	mov	r17,r5
 10069f4:	3029883a 	mov	r20,r6
 10069f8:	2025883a 	mov	r18,r4
 10069fc:	29400117 	ldw	r5,4(r5)
 1006a00:	1400030e 	bge	r2,r16,1006a10 <__lshift+0x54>
 1006a04:	1085883a 	add	r2,r2,r2
 1006a08:	29400044 	addi	r5,r5,1
 1006a0c:	143ffd16 	blt	r2,r16,1006a04 <__lshift+0x48>
 1006a10:	9009883a 	mov	r4,r18
 1006a14:	100623c0 	call	100623c <_Balloc>
 1006a18:	10c00504 	addi	r3,r2,20
 1006a1c:	0540070e 	bge	zero,r21,1006a3c <__lshift+0x80>
 1006a20:	ad6b883a 	add	r21,r21,r21
 1006a24:	ad6b883a 	add	r21,r21,r21
 1006a28:	1809883a 	mov	r4,r3
 1006a2c:	1d47883a 	add	r3,r3,r21
 1006a30:	20000015 	stw	zero,0(r4)
 1006a34:	21000104 	addi	r4,r4,4
 1006a38:	193ffd1e 	bne	r3,r4,1006a30 <__lshift+0x74>
 1006a3c:	8a000417 	ldw	r8,16(r17)
 1006a40:	89000504 	addi	r4,r17,20
 1006a44:	a18007cc 	andi	r6,r20,31
 1006a48:	4211883a 	add	r8,r8,r8
 1006a4c:	4211883a 	add	r8,r8,r8
 1006a50:	2211883a 	add	r8,r4,r8
 1006a54:	30002326 	beq	r6,zero,1006ae4 <__lshift+0x128>
 1006a58:	02400804 	movi	r9,32
 1006a5c:	4993c83a 	sub	r9,r9,r6
 1006a60:	000b883a 	mov	r5,zero
 1006a64:	21c00017 	ldw	r7,0(r4)
 1006a68:	1815883a 	mov	r10,r3
 1006a6c:	18c00104 	addi	r3,r3,4
 1006a70:	398e983a 	sll	r7,r7,r6
 1006a74:	21000104 	addi	r4,r4,4
 1006a78:	394ab03a 	or	r5,r7,r5
 1006a7c:	197fff15 	stw	r5,-4(r3)
 1006a80:	217fff17 	ldw	r5,-4(r4)
 1006a84:	2a4ad83a 	srl	r5,r5,r9
 1006a88:	223ff636 	bltu	r4,r8,1006a64 <__lshift+0xa8>
 1006a8c:	51400115 	stw	r5,4(r10)
 1006a90:	28001a1e 	bne	r5,zero,1006afc <__lshift+0x140>
 1006a94:	843fffc4 	addi	r16,r16,-1
 1006a98:	14000415 	stw	r16,16(r2)
 1006a9c:	88000826 	beq	r17,zero,1006ac0 <__lshift+0x104>
 1006aa0:	89000117 	ldw	r4,4(r17)
 1006aa4:	90c01317 	ldw	r3,76(r18)
 1006aa8:	2109883a 	add	r4,r4,r4
 1006aac:	2109883a 	add	r4,r4,r4
 1006ab0:	1907883a 	add	r3,r3,r4
 1006ab4:	19000017 	ldw	r4,0(r3)
 1006ab8:	89000015 	stw	r4,0(r17)
 1006abc:	1c400015 	stw	r17,0(r3)
 1006ac0:	dfc00617 	ldw	ra,24(sp)
 1006ac4:	dd400517 	ldw	r21,20(sp)
 1006ac8:	dd000417 	ldw	r20,16(sp)
 1006acc:	dcc00317 	ldw	r19,12(sp)
 1006ad0:	dc800217 	ldw	r18,8(sp)
 1006ad4:	dc400117 	ldw	r17,4(sp)
 1006ad8:	dc000017 	ldw	r16,0(sp)
 1006adc:	dec00704 	addi	sp,sp,28
 1006ae0:	f800283a 	ret
 1006ae4:	21400017 	ldw	r5,0(r4)
 1006ae8:	18c00104 	addi	r3,r3,4
 1006aec:	21000104 	addi	r4,r4,4
 1006af0:	197fff15 	stw	r5,-4(r3)
 1006af4:	223ffb36 	bltu	r4,r8,1006ae4 <__lshift+0x128>
 1006af8:	003fe606 	br	1006a94 <__lshift+0xd8>
 1006afc:	9c000084 	addi	r16,r19,2
 1006b00:	003fe406 	br	1006a94 <__lshift+0xd8>

01006b04 <__mcmp>:
 1006b04:	20800417 	ldw	r2,16(r4)
 1006b08:	28c00417 	ldw	r3,16(r5)
 1006b0c:	10c5c83a 	sub	r2,r2,r3
 1006b10:	1000111e 	bne	r2,zero,1006b58 <__mcmp+0x54>
 1006b14:	18c7883a 	add	r3,r3,r3
 1006b18:	18c7883a 	add	r3,r3,r3
 1006b1c:	21000504 	addi	r4,r4,20
 1006b20:	29400504 	addi	r5,r5,20
 1006b24:	20c5883a 	add	r2,r4,r3
 1006b28:	28cb883a 	add	r5,r5,r3
 1006b2c:	00000106 	br	1006b34 <__mcmp+0x30>
 1006b30:	20800a2e 	bgeu	r4,r2,1006b5c <__mcmp+0x58>
 1006b34:	10bfff04 	addi	r2,r2,-4
 1006b38:	297fff04 	addi	r5,r5,-4
 1006b3c:	11800017 	ldw	r6,0(r2)
 1006b40:	28c00017 	ldw	r3,0(r5)
 1006b44:	30fffa26 	beq	r6,r3,1006b30 <__mcmp+0x2c>
 1006b48:	30c00236 	bltu	r6,r3,1006b54 <__mcmp+0x50>
 1006b4c:	00800044 	movi	r2,1
 1006b50:	f800283a 	ret
 1006b54:	00bfffc4 	movi	r2,-1
 1006b58:	f800283a 	ret
 1006b5c:	0005883a 	mov	r2,zero
 1006b60:	f800283a 	ret

01006b64 <__mdiff>:
 1006b64:	28c00417 	ldw	r3,16(r5)
 1006b68:	30800417 	ldw	r2,16(r6)
 1006b6c:	defffa04 	addi	sp,sp,-24
 1006b70:	dcc00315 	stw	r19,12(sp)
 1006b74:	dc800215 	stw	r18,8(sp)
 1006b78:	dfc00515 	stw	ra,20(sp)
 1006b7c:	dd000415 	stw	r20,16(sp)
 1006b80:	dc400115 	stw	r17,4(sp)
 1006b84:	dc000015 	stw	r16,0(sp)
 1006b88:	1887c83a 	sub	r3,r3,r2
 1006b8c:	2825883a 	mov	r18,r5
 1006b90:	3027883a 	mov	r19,r6
 1006b94:	1800141e 	bne	r3,zero,1006be8 <__mdiff+0x84>
 1006b98:	1085883a 	add	r2,r2,r2
 1006b9c:	1085883a 	add	r2,r2,r2
 1006ba0:	2a000504 	addi	r8,r5,20
 1006ba4:	34000504 	addi	r16,r6,20
 1006ba8:	4087883a 	add	r3,r8,r2
 1006bac:	8085883a 	add	r2,r16,r2
 1006bb0:	00000106 	br	1006bb8 <__mdiff+0x54>
 1006bb4:	40c0592e 	bgeu	r8,r3,1006d1c <__mdiff+0x1b8>
 1006bb8:	18ffff04 	addi	r3,r3,-4
 1006bbc:	10bfff04 	addi	r2,r2,-4
 1006bc0:	19c00017 	ldw	r7,0(r3)
 1006bc4:	11400017 	ldw	r5,0(r2)
 1006bc8:	397ffa26 	beq	r7,r5,1006bb4 <__mdiff+0x50>
 1006bcc:	3940592e 	bgeu	r7,r5,1006d34 <__mdiff+0x1d0>
 1006bd0:	9005883a 	mov	r2,r18
 1006bd4:	4023883a 	mov	r17,r8
 1006bd8:	9825883a 	mov	r18,r19
 1006bdc:	05000044 	movi	r20,1
 1006be0:	1027883a 	mov	r19,r2
 1006be4:	00000406 	br	1006bf8 <__mdiff+0x94>
 1006be8:	18005616 	blt	r3,zero,1006d44 <__mdiff+0x1e0>
 1006bec:	34400504 	addi	r17,r6,20
 1006bf0:	2c000504 	addi	r16,r5,20
 1006bf4:	0029883a 	mov	r20,zero
 1006bf8:	91400117 	ldw	r5,4(r18)
 1006bfc:	100623c0 	call	100623c <_Balloc>
 1006c00:	92400417 	ldw	r9,16(r18)
 1006c04:	9b000417 	ldw	r12,16(r19)
 1006c08:	12c00504 	addi	r11,r2,20
 1006c0c:	4a51883a 	add	r8,r9,r9
 1006c10:	6319883a 	add	r12,r12,r12
 1006c14:	4211883a 	add	r8,r8,r8
 1006c18:	6319883a 	add	r12,r12,r12
 1006c1c:	15000315 	stw	r20,12(r2)
 1006c20:	8211883a 	add	r8,r16,r8
 1006c24:	8b19883a 	add	r12,r17,r12
 1006c28:	0007883a 	mov	r3,zero
 1006c2c:	81400017 	ldw	r5,0(r16)
 1006c30:	89c00017 	ldw	r7,0(r17)
 1006c34:	59800104 	addi	r6,r11,4
 1006c38:	293fffcc 	andi	r4,r5,65535
 1006c3c:	20c7883a 	add	r3,r4,r3
 1006c40:	393fffcc 	andi	r4,r7,65535
 1006c44:	1909c83a 	sub	r4,r3,r4
 1006c48:	280ad43a 	srli	r5,r5,16
 1006c4c:	380ed43a 	srli	r7,r7,16
 1006c50:	2007d43a 	srai	r3,r4,16
 1006c54:	213fffcc 	andi	r4,r4,65535
 1006c58:	29cbc83a 	sub	r5,r5,r7
 1006c5c:	28c7883a 	add	r3,r5,r3
 1006c60:	180a943a 	slli	r5,r3,16
 1006c64:	8c400104 	addi	r17,r17,4
 1006c68:	84000104 	addi	r16,r16,4
 1006c6c:	2908b03a 	or	r4,r5,r4
 1006c70:	59000015 	stw	r4,0(r11)
 1006c74:	1807d43a 	srai	r3,r3,16
 1006c78:	3015883a 	mov	r10,r6
 1006c7c:	3017883a 	mov	r11,r6
 1006c80:	8b3fea36 	bltu	r17,r12,1006c2c <__mdiff+0xc8>
 1006c84:	8200162e 	bgeu	r16,r8,1006ce0 <__mdiff+0x17c>
 1006c88:	8017883a 	mov	r11,r16
 1006c8c:	59400017 	ldw	r5,0(r11)
 1006c90:	31800104 	addi	r6,r6,4
 1006c94:	5ac00104 	addi	r11,r11,4
 1006c98:	293fffcc 	andi	r4,r5,65535
 1006c9c:	20c7883a 	add	r3,r4,r3
 1006ca0:	280ed43a 	srli	r7,r5,16
 1006ca4:	180bd43a 	srai	r5,r3,16
 1006ca8:	193fffcc 	andi	r4,r3,65535
 1006cac:	3947883a 	add	r3,r7,r5
 1006cb0:	180a943a 	slli	r5,r3,16
 1006cb4:	1807d43a 	srai	r3,r3,16
 1006cb8:	2908b03a 	or	r4,r5,r4
 1006cbc:	313fff15 	stw	r4,-4(r6)
 1006cc0:	5a3ff236 	bltu	r11,r8,1006c8c <__mdiff+0x128>
 1006cc4:	0406303a 	nor	r3,zero,r16
 1006cc8:	1a07883a 	add	r3,r3,r8
 1006ccc:	1806d0ba 	srli	r3,r3,2
 1006cd0:	18c00044 	addi	r3,r3,1
 1006cd4:	18c7883a 	add	r3,r3,r3
 1006cd8:	18c7883a 	add	r3,r3,r3
 1006cdc:	50d5883a 	add	r10,r10,r3
 1006ce0:	50ffff04 	addi	r3,r10,-4
 1006ce4:	2000041e 	bne	r4,zero,1006cf8 <__mdiff+0x194>
 1006ce8:	18ffff04 	addi	r3,r3,-4
 1006cec:	19000017 	ldw	r4,0(r3)
 1006cf0:	4a7fffc4 	addi	r9,r9,-1
 1006cf4:	203ffc26 	beq	r4,zero,1006ce8 <__mdiff+0x184>
 1006cf8:	12400415 	stw	r9,16(r2)
 1006cfc:	dfc00517 	ldw	ra,20(sp)
 1006d00:	dd000417 	ldw	r20,16(sp)
 1006d04:	dcc00317 	ldw	r19,12(sp)
 1006d08:	dc800217 	ldw	r18,8(sp)
 1006d0c:	dc400117 	ldw	r17,4(sp)
 1006d10:	dc000017 	ldw	r16,0(sp)
 1006d14:	dec00604 	addi	sp,sp,24
 1006d18:	f800283a 	ret
 1006d1c:	000b883a 	mov	r5,zero
 1006d20:	100623c0 	call	100623c <_Balloc>
 1006d24:	00c00044 	movi	r3,1
 1006d28:	10c00415 	stw	r3,16(r2)
 1006d2c:	10000515 	stw	zero,20(r2)
 1006d30:	003ff206 	br	1006cfc <__mdiff+0x198>
 1006d34:	8023883a 	mov	r17,r16
 1006d38:	0029883a 	mov	r20,zero
 1006d3c:	4021883a 	mov	r16,r8
 1006d40:	003fad06 	br	1006bf8 <__mdiff+0x94>
 1006d44:	9005883a 	mov	r2,r18
 1006d48:	94400504 	addi	r17,r18,20
 1006d4c:	9c000504 	addi	r16,r19,20
 1006d50:	9825883a 	mov	r18,r19
 1006d54:	05000044 	movi	r20,1
 1006d58:	1027883a 	mov	r19,r2
 1006d5c:	003fa606 	br	1006bf8 <__mdiff+0x94>

01006d60 <__ulp>:
 1006d60:	295ffc2c 	andhi	r5,r5,32752
 1006d64:	00bf3034 	movhi	r2,64704
 1006d68:	2887883a 	add	r3,r5,r2
 1006d6c:	00c0020e 	bge	zero,r3,1006d78 <__ulp+0x18>
 1006d70:	0005883a 	mov	r2,zero
 1006d74:	f800283a 	ret
 1006d78:	00c7c83a 	sub	r3,zero,r3
 1006d7c:	1807d53a 	srai	r3,r3,20
 1006d80:	008004c4 	movi	r2,19
 1006d84:	10c00b0e 	bge	r2,r3,1006db4 <__ulp+0x54>
 1006d88:	18bffb04 	addi	r2,r3,-20
 1006d8c:	01000784 	movi	r4,30
 1006d90:	0007883a 	mov	r3,zero
 1006d94:	20800516 	blt	r4,r2,1006dac <__ulp+0x4c>
 1006d98:	010007c4 	movi	r4,31
 1006d9c:	2089c83a 	sub	r4,r4,r2
 1006da0:	00800044 	movi	r2,1
 1006da4:	1104983a 	sll	r2,r2,r4
 1006da8:	f800283a 	ret
 1006dac:	00800044 	movi	r2,1
 1006db0:	f800283a 	ret
 1006db4:	01400234 	movhi	r5,8
 1006db8:	28c7d83a 	sra	r3,r5,r3
 1006dbc:	0005883a 	mov	r2,zero
 1006dc0:	f800283a 	ret

01006dc4 <__b2d>:
 1006dc4:	defffa04 	addi	sp,sp,-24
 1006dc8:	dc000015 	stw	r16,0(sp)
 1006dcc:	24000417 	ldw	r16,16(r4)
 1006dd0:	dc400115 	stw	r17,4(sp)
 1006dd4:	24400504 	addi	r17,r4,20
 1006dd8:	8421883a 	add	r16,r16,r16
 1006ddc:	8421883a 	add	r16,r16,r16
 1006de0:	8c21883a 	add	r16,r17,r16
 1006de4:	dc800215 	stw	r18,8(sp)
 1006de8:	84bfff17 	ldw	r18,-4(r16)
 1006dec:	dd000415 	stw	r20,16(sp)
 1006df0:	dcc00315 	stw	r19,12(sp)
 1006df4:	9009883a 	mov	r4,r18
 1006df8:	2829883a 	mov	r20,r5
 1006dfc:	dfc00515 	stw	ra,20(sp)
 1006e00:	10065300 	call	1006530 <__hi0bits>
 1006e04:	00c00804 	movi	r3,32
 1006e08:	1889c83a 	sub	r4,r3,r2
 1006e0c:	a1000015 	stw	r4,0(r20)
 1006e10:	01000284 	movi	r4,10
 1006e14:	84ffff04 	addi	r19,r16,-4
 1006e18:	20801216 	blt	r4,r2,1006e64 <__b2d+0xa0>
 1006e1c:	018002c4 	movi	r6,11
 1006e20:	308dc83a 	sub	r6,r6,r2
 1006e24:	9186d83a 	srl	r3,r18,r6
 1006e28:	18cffc34 	orhi	r3,r3,16368
 1006e2c:	8cc0212e 	bgeu	r17,r19,1006eb4 <__b2d+0xf0>
 1006e30:	813ffe17 	ldw	r4,-8(r16)
 1006e34:	218cd83a 	srl	r6,r4,r6
 1006e38:	10800544 	addi	r2,r2,21
 1006e3c:	9084983a 	sll	r2,r18,r2
 1006e40:	1184b03a 	or	r2,r2,r6
 1006e44:	dfc00517 	ldw	ra,20(sp)
 1006e48:	dd000417 	ldw	r20,16(sp)
 1006e4c:	dcc00317 	ldw	r19,12(sp)
 1006e50:	dc800217 	ldw	r18,8(sp)
 1006e54:	dc400117 	ldw	r17,4(sp)
 1006e58:	dc000017 	ldw	r16,0(sp)
 1006e5c:	dec00604 	addi	sp,sp,24
 1006e60:	f800283a 	ret
 1006e64:	8cc00f2e 	bgeu	r17,r19,1006ea4 <__b2d+0xe0>
 1006e68:	117ffd44 	addi	r5,r2,-11
 1006e6c:	80bffe17 	ldw	r2,-8(r16)
 1006e70:	28000e26 	beq	r5,zero,1006eac <__b2d+0xe8>
 1006e74:	1949c83a 	sub	r4,r3,r5
 1006e78:	9164983a 	sll	r18,r18,r5
 1006e7c:	1106d83a 	srl	r3,r2,r4
 1006e80:	81bffe04 	addi	r6,r16,-8
 1006e84:	948ffc34 	orhi	r18,r18,16368
 1006e88:	90c6b03a 	or	r3,r18,r3
 1006e8c:	89800e2e 	bgeu	r17,r6,1006ec8 <__b2d+0x104>
 1006e90:	81bffd17 	ldw	r6,-12(r16)
 1006e94:	1144983a 	sll	r2,r2,r5
 1006e98:	310ad83a 	srl	r5,r6,r4
 1006e9c:	2884b03a 	or	r2,r5,r2
 1006ea0:	003fe806 	br	1006e44 <__b2d+0x80>
 1006ea4:	10bffd44 	addi	r2,r2,-11
 1006ea8:	1000041e 	bne	r2,zero,1006ebc <__b2d+0xf8>
 1006eac:	90cffc34 	orhi	r3,r18,16368
 1006eb0:	003fe406 	br	1006e44 <__b2d+0x80>
 1006eb4:	000d883a 	mov	r6,zero
 1006eb8:	003fdf06 	br	1006e38 <__b2d+0x74>
 1006ebc:	90a4983a 	sll	r18,r18,r2
 1006ec0:	0005883a 	mov	r2,zero
 1006ec4:	003ff906 	br	1006eac <__b2d+0xe8>
 1006ec8:	1144983a 	sll	r2,r2,r5
 1006ecc:	003fdd06 	br	1006e44 <__b2d+0x80>

01006ed0 <__d2b>:
 1006ed0:	defff804 	addi	sp,sp,-32
 1006ed4:	dc000215 	stw	r16,8(sp)
 1006ed8:	3021883a 	mov	r16,r6
 1006edc:	dc400315 	stw	r17,12(sp)
 1006ee0:	8022907a 	slli	r17,r16,1
 1006ee4:	dd000615 	stw	r20,24(sp)
 1006ee8:	2829883a 	mov	r20,r5
 1006eec:	01400044 	movi	r5,1
 1006ef0:	dcc00515 	stw	r19,20(sp)
 1006ef4:	dc800415 	stw	r18,16(sp)
 1006ef8:	dfc00715 	stw	ra,28(sp)
 1006efc:	3825883a 	mov	r18,r7
 1006f00:	8822d57a 	srli	r17,r17,21
 1006f04:	100623c0 	call	100623c <_Balloc>
 1006f08:	1027883a 	mov	r19,r2
 1006f0c:	00800434 	movhi	r2,16
 1006f10:	10bfffc4 	addi	r2,r2,-1
 1006f14:	808c703a 	and	r6,r16,r2
 1006f18:	88000126 	beq	r17,zero,1006f20 <__d2b+0x50>
 1006f1c:	31800434 	orhi	r6,r6,16
 1006f20:	d9800015 	stw	r6,0(sp)
 1006f24:	a0002426 	beq	r20,zero,1006fb8 <__d2b+0xe8>
 1006f28:	d9000104 	addi	r4,sp,4
 1006f2c:	dd000115 	stw	r20,4(sp)
 1006f30:	10065980 	call	1006598 <__lo0bits>
 1006f34:	d8c00017 	ldw	r3,0(sp)
 1006f38:	10002f1e 	bne	r2,zero,1006ff8 <__d2b+0x128>
 1006f3c:	d9000117 	ldw	r4,4(sp)
 1006f40:	99000515 	stw	r4,20(r19)
 1006f44:	1821003a 	cmpeq	r16,r3,zero
 1006f48:	01000084 	movi	r4,2
 1006f4c:	2421c83a 	sub	r16,r4,r16
 1006f50:	98c00615 	stw	r3,24(r19)
 1006f54:	9c000415 	stw	r16,16(r19)
 1006f58:	88001f1e 	bne	r17,zero,1006fd8 <__d2b+0x108>
 1006f5c:	10bef384 	addi	r2,r2,-1074
 1006f60:	90800015 	stw	r2,0(r18)
 1006f64:	00900034 	movhi	r2,16384
 1006f68:	10bfffc4 	addi	r2,r2,-1
 1006f6c:	8085883a 	add	r2,r16,r2
 1006f70:	1085883a 	add	r2,r2,r2
 1006f74:	1085883a 	add	r2,r2,r2
 1006f78:	9885883a 	add	r2,r19,r2
 1006f7c:	11000517 	ldw	r4,20(r2)
 1006f80:	8020917a 	slli	r16,r16,5
 1006f84:	10065300 	call	1006530 <__hi0bits>
 1006f88:	d8c00817 	ldw	r3,32(sp)
 1006f8c:	8085c83a 	sub	r2,r16,r2
 1006f90:	18800015 	stw	r2,0(r3)
 1006f94:	9805883a 	mov	r2,r19
 1006f98:	dfc00717 	ldw	ra,28(sp)
 1006f9c:	dd000617 	ldw	r20,24(sp)
 1006fa0:	dcc00517 	ldw	r19,20(sp)
 1006fa4:	dc800417 	ldw	r18,16(sp)
 1006fa8:	dc400317 	ldw	r17,12(sp)
 1006fac:	dc000217 	ldw	r16,8(sp)
 1006fb0:	dec00804 	addi	sp,sp,32
 1006fb4:	f800283a 	ret
 1006fb8:	d809883a 	mov	r4,sp
 1006fbc:	10065980 	call	1006598 <__lo0bits>
 1006fc0:	d8c00017 	ldw	r3,0(sp)
 1006fc4:	04000044 	movi	r16,1
 1006fc8:	9c000415 	stw	r16,16(r19)
 1006fcc:	98c00515 	stw	r3,20(r19)
 1006fd0:	10800804 	addi	r2,r2,32
 1006fd4:	883fe126 	beq	r17,zero,1006f5c <__d2b+0x8c>
 1006fd8:	00c00d44 	movi	r3,53
 1006fdc:	8c7ef344 	addi	r17,r17,-1075
 1006fe0:	88a3883a 	add	r17,r17,r2
 1006fe4:	1885c83a 	sub	r2,r3,r2
 1006fe8:	d8c00817 	ldw	r3,32(sp)
 1006fec:	94400015 	stw	r17,0(r18)
 1006ff0:	18800015 	stw	r2,0(r3)
 1006ff4:	003fe706 	br	1006f94 <__d2b+0xc4>
 1006ff8:	01000804 	movi	r4,32
 1006ffc:	2089c83a 	sub	r4,r4,r2
 1007000:	1908983a 	sll	r4,r3,r4
 1007004:	d9400117 	ldw	r5,4(sp)
 1007008:	1886d83a 	srl	r3,r3,r2
 100700c:	2148b03a 	or	r4,r4,r5
 1007010:	99000515 	stw	r4,20(r19)
 1007014:	d8c00015 	stw	r3,0(sp)
 1007018:	003fca06 	br	1006f44 <__d2b+0x74>

0100701c <__ratio>:
 100701c:	defff904 	addi	sp,sp,-28
 1007020:	dc400315 	stw	r17,12(sp)
 1007024:	2823883a 	mov	r17,r5
 1007028:	d9400104 	addi	r5,sp,4
 100702c:	dfc00615 	stw	ra,24(sp)
 1007030:	dcc00515 	stw	r19,20(sp)
 1007034:	dc800415 	stw	r18,16(sp)
 1007038:	2027883a 	mov	r19,r4
 100703c:	dc000215 	stw	r16,8(sp)
 1007040:	1006dc40 	call	1006dc4 <__b2d>
 1007044:	d80b883a 	mov	r5,sp
 1007048:	8809883a 	mov	r4,r17
 100704c:	1025883a 	mov	r18,r2
 1007050:	1821883a 	mov	r16,r3
 1007054:	1006dc40 	call	1006dc4 <__b2d>
 1007058:	8a000417 	ldw	r8,16(r17)
 100705c:	99000417 	ldw	r4,16(r19)
 1007060:	d9400117 	ldw	r5,4(sp)
 1007064:	2209c83a 	sub	r4,r4,r8
 1007068:	2010917a 	slli	r8,r4,5
 100706c:	d9000017 	ldw	r4,0(sp)
 1007070:	2909c83a 	sub	r4,r5,r4
 1007074:	4109883a 	add	r4,r8,r4
 1007078:	01000e0e 	bge	zero,r4,10070b4 <__ratio+0x98>
 100707c:	2008953a 	slli	r4,r4,20
 1007080:	2421883a 	add	r16,r4,r16
 1007084:	100d883a 	mov	r6,r2
 1007088:	180f883a 	mov	r7,r3
 100708c:	9009883a 	mov	r4,r18
 1007090:	800b883a 	mov	r5,r16
 1007094:	100af080 	call	100af08 <__divdf3>
 1007098:	dfc00617 	ldw	ra,24(sp)
 100709c:	dcc00517 	ldw	r19,20(sp)
 10070a0:	dc800417 	ldw	r18,16(sp)
 10070a4:	dc400317 	ldw	r17,12(sp)
 10070a8:	dc000217 	ldw	r16,8(sp)
 10070ac:	dec00704 	addi	sp,sp,28
 10070b0:	f800283a 	ret
 10070b4:	2008953a 	slli	r4,r4,20
 10070b8:	1907c83a 	sub	r3,r3,r4
 10070bc:	003ff106 	br	1007084 <__ratio+0x68>

010070c0 <_mprec_log10>:
 10070c0:	defffe04 	addi	sp,sp,-8
 10070c4:	dc000015 	stw	r16,0(sp)
 10070c8:	dfc00115 	stw	ra,4(sp)
 10070cc:	008005c4 	movi	r2,23
 10070d0:	2021883a 	mov	r16,r4
 10070d4:	11000d0e 	bge	r2,r4,100710c <_mprec_log10+0x4c>
 10070d8:	0005883a 	mov	r2,zero
 10070dc:	00cffc34 	movhi	r3,16368
 10070e0:	843fffc4 	addi	r16,r16,-1
 10070e4:	000d883a 	mov	r6,zero
 10070e8:	01d00934 	movhi	r7,16420
 10070ec:	1009883a 	mov	r4,r2
 10070f0:	180b883a 	mov	r5,r3
 10070f4:	100ba480 	call	100ba48 <__muldf3>
 10070f8:	803ff91e 	bne	r16,zero,10070e0 <_mprec_log10+0x20>
 10070fc:	dfc00117 	ldw	ra,4(sp)
 1007100:	dc000017 	ldw	r16,0(sp)
 1007104:	dec00204 	addi	sp,sp,8
 1007108:	f800283a 	ret
 100710c:	202090fa 	slli	r16,r4,3
 1007110:	00804074 	movhi	r2,257
 1007114:	10bd1d04 	addi	r2,r2,-2956
 1007118:	1421883a 	add	r16,r2,r16
 100711c:	80800017 	ldw	r2,0(r16)
 1007120:	80c00117 	ldw	r3,4(r16)
 1007124:	dfc00117 	ldw	ra,4(sp)
 1007128:	dc000017 	ldw	r16,0(sp)
 100712c:	dec00204 	addi	sp,sp,8
 1007130:	f800283a 	ret

01007134 <__copybits>:
 1007134:	297fffc4 	addi	r5,r5,-1
 1007138:	280fd17a 	srai	r7,r5,5
 100713c:	30c00417 	ldw	r3,16(r6)
 1007140:	30800504 	addi	r2,r6,20
 1007144:	39c00044 	addi	r7,r7,1
 1007148:	18c7883a 	add	r3,r3,r3
 100714c:	39cf883a 	add	r7,r7,r7
 1007150:	18c7883a 	add	r3,r3,r3
 1007154:	39cf883a 	add	r7,r7,r7
 1007158:	10c7883a 	add	r3,r2,r3
 100715c:	21cf883a 	add	r7,r4,r7
 1007160:	10c00d2e 	bgeu	r2,r3,1007198 <__copybits+0x64>
 1007164:	200b883a 	mov	r5,r4
 1007168:	12000017 	ldw	r8,0(r2)
 100716c:	29400104 	addi	r5,r5,4
 1007170:	10800104 	addi	r2,r2,4
 1007174:	2a3fff15 	stw	r8,-4(r5)
 1007178:	10fffb36 	bltu	r2,r3,1007168 <__copybits+0x34>
 100717c:	1985c83a 	sub	r2,r3,r6
 1007180:	10bffac4 	addi	r2,r2,-21
 1007184:	1004d0ba 	srli	r2,r2,2
 1007188:	10800044 	addi	r2,r2,1
 100718c:	1085883a 	add	r2,r2,r2
 1007190:	1085883a 	add	r2,r2,r2
 1007194:	2089883a 	add	r4,r4,r2
 1007198:	21c0032e 	bgeu	r4,r7,10071a8 <__copybits+0x74>
 100719c:	20000015 	stw	zero,0(r4)
 10071a0:	21000104 	addi	r4,r4,4
 10071a4:	21fffd36 	bltu	r4,r7,100719c <__copybits+0x68>
 10071a8:	f800283a 	ret

010071ac <__any_on>:
 10071ac:	20c00417 	ldw	r3,16(r4)
 10071b0:	2805d17a 	srai	r2,r5,5
 10071b4:	21000504 	addi	r4,r4,20
 10071b8:	18800d0e 	bge	r3,r2,10071f0 <__any_on+0x44>
 10071bc:	18c7883a 	add	r3,r3,r3
 10071c0:	18c7883a 	add	r3,r3,r3
 10071c4:	20c7883a 	add	r3,r4,r3
 10071c8:	20c0192e 	bgeu	r4,r3,1007230 <__any_on+0x84>
 10071cc:	18bfff17 	ldw	r2,-4(r3)
 10071d0:	18ffff04 	addi	r3,r3,-4
 10071d4:	1000041e 	bne	r2,zero,10071e8 <__any_on+0x3c>
 10071d8:	20c0142e 	bgeu	r4,r3,100722c <__any_on+0x80>
 10071dc:	18ffff04 	addi	r3,r3,-4
 10071e0:	19400017 	ldw	r5,0(r3)
 10071e4:	283ffc26 	beq	r5,zero,10071d8 <__any_on+0x2c>
 10071e8:	00800044 	movi	r2,1
 10071ec:	f800283a 	ret
 10071f0:	10c00a0e 	bge	r2,r3,100721c <__any_on+0x70>
 10071f4:	1085883a 	add	r2,r2,r2
 10071f8:	1085883a 	add	r2,r2,r2
 10071fc:	294007cc 	andi	r5,r5,31
 1007200:	2087883a 	add	r3,r4,r2
 1007204:	283ff026 	beq	r5,zero,10071c8 <__any_on+0x1c>
 1007208:	19800017 	ldw	r6,0(r3)
 100720c:	3144d83a 	srl	r2,r6,r5
 1007210:	114a983a 	sll	r5,r2,r5
 1007214:	317ff41e 	bne	r6,r5,10071e8 <__any_on+0x3c>
 1007218:	003feb06 	br	10071c8 <__any_on+0x1c>
 100721c:	1085883a 	add	r2,r2,r2
 1007220:	1085883a 	add	r2,r2,r2
 1007224:	2087883a 	add	r3,r4,r2
 1007228:	003fe706 	br	10071c8 <__any_on+0x1c>
 100722c:	f800283a 	ret
 1007230:	0005883a 	mov	r2,zero
 1007234:	f800283a 	ret

01007238 <_realloc_r>:
 1007238:	defff604 	addi	sp,sp,-40
 100723c:	dc800215 	stw	r18,8(sp)
 1007240:	dfc00915 	stw	ra,36(sp)
 1007244:	df000815 	stw	fp,32(sp)
 1007248:	ddc00715 	stw	r23,28(sp)
 100724c:	dd800615 	stw	r22,24(sp)
 1007250:	dd400515 	stw	r21,20(sp)
 1007254:	dd000415 	stw	r20,16(sp)
 1007258:	dcc00315 	stw	r19,12(sp)
 100725c:	dc400115 	stw	r17,4(sp)
 1007260:	dc000015 	stw	r16,0(sp)
 1007264:	3025883a 	mov	r18,r6
 1007268:	2800b726 	beq	r5,zero,1007548 <_realloc_r+0x310>
 100726c:	282b883a 	mov	r21,r5
 1007270:	2029883a 	mov	r20,r4
 1007274:	100d4e00 	call	100d4e0 <__malloc_lock>
 1007278:	a8bfff17 	ldw	r2,-4(r21)
 100727c:	043fff04 	movi	r16,-4
 1007280:	90c002c4 	addi	r3,r18,11
 1007284:	01000584 	movi	r4,22
 1007288:	acfffe04 	addi	r19,r21,-8
 100728c:	1420703a 	and	r16,r2,r16
 1007290:	20c0332e 	bgeu	r4,r3,1007360 <_realloc_r+0x128>
 1007294:	047ffe04 	movi	r17,-8
 1007298:	1c62703a 	and	r17,r3,r17
 100729c:	8807883a 	mov	r3,r17
 10072a0:	88005816 	blt	r17,zero,1007404 <_realloc_r+0x1cc>
 10072a4:	8c805736 	bltu	r17,r18,1007404 <_realloc_r+0x1cc>
 10072a8:	80c0300e 	bge	r16,r3,100736c <_realloc_r+0x134>
 10072ac:	07004074 	movhi	fp,257
 10072b0:	e73ec904 	addi	fp,fp,-1244
 10072b4:	e1c00217 	ldw	r7,8(fp)
 10072b8:	9c09883a 	add	r4,r19,r16
 10072bc:	22000117 	ldw	r8,4(r4)
 10072c0:	21c06326 	beq	r4,r7,1007450 <_realloc_r+0x218>
 10072c4:	017fff84 	movi	r5,-2
 10072c8:	414a703a 	and	r5,r8,r5
 10072cc:	214b883a 	add	r5,r4,r5
 10072d0:	29800117 	ldw	r6,4(r5)
 10072d4:	3180004c 	andi	r6,r6,1
 10072d8:	30003f26 	beq	r6,zero,10073d8 <_realloc_r+0x1a0>
 10072dc:	1080004c 	andi	r2,r2,1
 10072e0:	10008326 	beq	r2,zero,10074f0 <_realloc_r+0x2b8>
 10072e4:	900b883a 	mov	r5,r18
 10072e8:	a009883a 	mov	r4,r20
 10072ec:	10055800 	call	1005580 <_malloc_r>
 10072f0:	1025883a 	mov	r18,r2
 10072f4:	10011e26 	beq	r2,zero,1007770 <_realloc_r+0x538>
 10072f8:	a93fff17 	ldw	r4,-4(r21)
 10072fc:	10fffe04 	addi	r3,r2,-8
 1007300:	00bfff84 	movi	r2,-2
 1007304:	2084703a 	and	r2,r4,r2
 1007308:	9885883a 	add	r2,r19,r2
 100730c:	1880ee26 	beq	r3,r2,10076c8 <_realloc_r+0x490>
 1007310:	81bfff04 	addi	r6,r16,-4
 1007314:	00800904 	movi	r2,36
 1007318:	1180b836 	bltu	r2,r6,10075fc <_realloc_r+0x3c4>
 100731c:	00c004c4 	movi	r3,19
 1007320:	19809636 	bltu	r3,r6,100757c <_realloc_r+0x344>
 1007324:	9005883a 	mov	r2,r18
 1007328:	a807883a 	mov	r3,r21
 100732c:	19000017 	ldw	r4,0(r3)
 1007330:	11000015 	stw	r4,0(r2)
 1007334:	19000117 	ldw	r4,4(r3)
 1007338:	11000115 	stw	r4,4(r2)
 100733c:	18c00217 	ldw	r3,8(r3)
 1007340:	10c00215 	stw	r3,8(r2)
 1007344:	a80b883a 	mov	r5,r21
 1007348:	a009883a 	mov	r4,r20
 100734c:	10049940 	call	1004994 <_free_r>
 1007350:	a009883a 	mov	r4,r20
 1007354:	100d5040 	call	100d504 <__malloc_unlock>
 1007358:	9005883a 	mov	r2,r18
 100735c:	00001206 	br	10073a8 <_realloc_r+0x170>
 1007360:	00c00404 	movi	r3,16
 1007364:	1823883a 	mov	r17,r3
 1007368:	003fce06 	br	10072a4 <_realloc_r+0x6c>
 100736c:	a825883a 	mov	r18,r21
 1007370:	8445c83a 	sub	r2,r16,r17
 1007374:	00c003c4 	movi	r3,15
 1007378:	18802636 	bltu	r3,r2,1007414 <_realloc_r+0x1dc>
 100737c:	99800117 	ldw	r6,4(r19)
 1007380:	9c07883a 	add	r3,r19,r16
 1007384:	3180004c 	andi	r6,r6,1
 1007388:	3420b03a 	or	r16,r6,r16
 100738c:	9c000115 	stw	r16,4(r19)
 1007390:	18800117 	ldw	r2,4(r3)
 1007394:	10800054 	ori	r2,r2,1
 1007398:	18800115 	stw	r2,4(r3)
 100739c:	a009883a 	mov	r4,r20
 10073a0:	100d5040 	call	100d504 <__malloc_unlock>
 10073a4:	9005883a 	mov	r2,r18
 10073a8:	dfc00917 	ldw	ra,36(sp)
 10073ac:	df000817 	ldw	fp,32(sp)
 10073b0:	ddc00717 	ldw	r23,28(sp)
 10073b4:	dd800617 	ldw	r22,24(sp)
 10073b8:	dd400517 	ldw	r21,20(sp)
 10073bc:	dd000417 	ldw	r20,16(sp)
 10073c0:	dcc00317 	ldw	r19,12(sp)
 10073c4:	dc800217 	ldw	r18,8(sp)
 10073c8:	dc400117 	ldw	r17,4(sp)
 10073cc:	dc000017 	ldw	r16,0(sp)
 10073d0:	dec00a04 	addi	sp,sp,40
 10073d4:	f800283a 	ret
 10073d8:	017fff04 	movi	r5,-4
 10073dc:	414a703a 	and	r5,r8,r5
 10073e0:	814d883a 	add	r6,r16,r5
 10073e4:	30c01f16 	blt	r6,r3,1007464 <_realloc_r+0x22c>
 10073e8:	20800317 	ldw	r2,12(r4)
 10073ec:	20c00217 	ldw	r3,8(r4)
 10073f0:	a825883a 	mov	r18,r21
 10073f4:	3021883a 	mov	r16,r6
 10073f8:	18800315 	stw	r2,12(r3)
 10073fc:	10c00215 	stw	r3,8(r2)
 1007400:	003fdb06 	br	1007370 <_realloc_r+0x138>
 1007404:	00800304 	movi	r2,12
 1007408:	a0800015 	stw	r2,0(r20)
 100740c:	0005883a 	mov	r2,zero
 1007410:	003fe506 	br	10073a8 <_realloc_r+0x170>
 1007414:	98c00117 	ldw	r3,4(r19)
 1007418:	9c4b883a 	add	r5,r19,r17
 100741c:	11000054 	ori	r4,r2,1
 1007420:	18c0004c 	andi	r3,r3,1
 1007424:	1c62b03a 	or	r17,r3,r17
 1007428:	9c400115 	stw	r17,4(r19)
 100742c:	29000115 	stw	r4,4(r5)
 1007430:	2885883a 	add	r2,r5,r2
 1007434:	10c00117 	ldw	r3,4(r2)
 1007438:	29400204 	addi	r5,r5,8
 100743c:	a009883a 	mov	r4,r20
 1007440:	18c00054 	ori	r3,r3,1
 1007444:	10c00115 	stw	r3,4(r2)
 1007448:	10049940 	call	1004994 <_free_r>
 100744c:	003fd306 	br	100739c <_realloc_r+0x164>
 1007450:	017fff04 	movi	r5,-4
 1007454:	414a703a 	and	r5,r8,r5
 1007458:	89800404 	addi	r6,r17,16
 100745c:	8151883a 	add	r8,r16,r5
 1007460:	4180590e 	bge	r8,r6,10075c8 <_realloc_r+0x390>
 1007464:	1080004c 	andi	r2,r2,1
 1007468:	103f9e1e 	bne	r2,zero,10072e4 <_realloc_r+0xac>
 100746c:	adbffe17 	ldw	r22,-8(r21)
 1007470:	00bfff04 	movi	r2,-4
 1007474:	9dadc83a 	sub	r22,r19,r22
 1007478:	b1800117 	ldw	r6,4(r22)
 100747c:	3084703a 	and	r2,r6,r2
 1007480:	20002026 	beq	r4,zero,1007504 <_realloc_r+0x2cc>
 1007484:	80af883a 	add	r23,r16,r2
 1007488:	b96f883a 	add	r23,r23,r5
 100748c:	21c05f26 	beq	r4,r7,100760c <_realloc_r+0x3d4>
 1007490:	b8c01c16 	blt	r23,r3,1007504 <_realloc_r+0x2cc>
 1007494:	20800317 	ldw	r2,12(r4)
 1007498:	20c00217 	ldw	r3,8(r4)
 100749c:	81bfff04 	addi	r6,r16,-4
 10074a0:	01000904 	movi	r4,36
 10074a4:	18800315 	stw	r2,12(r3)
 10074a8:	10c00215 	stw	r3,8(r2)
 10074ac:	b0c00217 	ldw	r3,8(r22)
 10074b0:	b0800317 	ldw	r2,12(r22)
 10074b4:	b4800204 	addi	r18,r22,8
 10074b8:	18800315 	stw	r2,12(r3)
 10074bc:	10c00215 	stw	r3,8(r2)
 10074c0:	21801b36 	bltu	r4,r6,1007530 <_realloc_r+0x2f8>
 10074c4:	008004c4 	movi	r2,19
 10074c8:	1180352e 	bgeu	r2,r6,10075a0 <_realloc_r+0x368>
 10074cc:	a8800017 	ldw	r2,0(r21)
 10074d0:	b0800215 	stw	r2,8(r22)
 10074d4:	a8800117 	ldw	r2,4(r21)
 10074d8:	b0800315 	stw	r2,12(r22)
 10074dc:	008006c4 	movi	r2,27
 10074e0:	11807f36 	bltu	r2,r6,10076e0 <_realloc_r+0x4a8>
 10074e4:	b0800404 	addi	r2,r22,16
 10074e8:	ad400204 	addi	r21,r21,8
 10074ec:	00002d06 	br	10075a4 <_realloc_r+0x36c>
 10074f0:	adbffe17 	ldw	r22,-8(r21)
 10074f4:	00bfff04 	movi	r2,-4
 10074f8:	9dadc83a 	sub	r22,r19,r22
 10074fc:	b1000117 	ldw	r4,4(r22)
 1007500:	2084703a 	and	r2,r4,r2
 1007504:	b03f7726 	beq	r22,zero,10072e4 <_realloc_r+0xac>
 1007508:	80af883a 	add	r23,r16,r2
 100750c:	b8ff7516 	blt	r23,r3,10072e4 <_realloc_r+0xac>
 1007510:	b0800317 	ldw	r2,12(r22)
 1007514:	b0c00217 	ldw	r3,8(r22)
 1007518:	81bfff04 	addi	r6,r16,-4
 100751c:	01000904 	movi	r4,36
 1007520:	18800315 	stw	r2,12(r3)
 1007524:	10c00215 	stw	r3,8(r2)
 1007528:	b4800204 	addi	r18,r22,8
 100752c:	21bfe52e 	bgeu	r4,r6,10074c4 <_realloc_r+0x28c>
 1007530:	a80b883a 	mov	r5,r21
 1007534:	9009883a 	mov	r4,r18
 1007538:	1005fb80 	call	1005fb8 <memmove>
 100753c:	b821883a 	mov	r16,r23
 1007540:	b027883a 	mov	r19,r22
 1007544:	003f8a06 	br	1007370 <_realloc_r+0x138>
 1007548:	300b883a 	mov	r5,r6
 100754c:	dfc00917 	ldw	ra,36(sp)
 1007550:	df000817 	ldw	fp,32(sp)
 1007554:	ddc00717 	ldw	r23,28(sp)
 1007558:	dd800617 	ldw	r22,24(sp)
 100755c:	dd400517 	ldw	r21,20(sp)
 1007560:	dd000417 	ldw	r20,16(sp)
 1007564:	dcc00317 	ldw	r19,12(sp)
 1007568:	dc800217 	ldw	r18,8(sp)
 100756c:	dc400117 	ldw	r17,4(sp)
 1007570:	dc000017 	ldw	r16,0(sp)
 1007574:	dec00a04 	addi	sp,sp,40
 1007578:	10055801 	jmpi	1005580 <_malloc_r>
 100757c:	a8c00017 	ldw	r3,0(r21)
 1007580:	90c00015 	stw	r3,0(r18)
 1007584:	a8c00117 	ldw	r3,4(r21)
 1007588:	90c00115 	stw	r3,4(r18)
 100758c:	00c006c4 	movi	r3,27
 1007590:	19804536 	bltu	r3,r6,10076a8 <_realloc_r+0x470>
 1007594:	90800204 	addi	r2,r18,8
 1007598:	a8c00204 	addi	r3,r21,8
 100759c:	003f6306 	br	100732c <_realloc_r+0xf4>
 10075a0:	9005883a 	mov	r2,r18
 10075a4:	a8c00017 	ldw	r3,0(r21)
 10075a8:	b821883a 	mov	r16,r23
 10075ac:	b027883a 	mov	r19,r22
 10075b0:	10c00015 	stw	r3,0(r2)
 10075b4:	a8c00117 	ldw	r3,4(r21)
 10075b8:	10c00115 	stw	r3,4(r2)
 10075bc:	a8c00217 	ldw	r3,8(r21)
 10075c0:	10c00215 	stw	r3,8(r2)
 10075c4:	003f6a06 	br	1007370 <_realloc_r+0x138>
 10075c8:	9c67883a 	add	r19,r19,r17
 10075cc:	4445c83a 	sub	r2,r8,r17
 10075d0:	e4c00215 	stw	r19,8(fp)
 10075d4:	10800054 	ori	r2,r2,1
 10075d8:	98800115 	stw	r2,4(r19)
 10075dc:	a8bfff17 	ldw	r2,-4(r21)
 10075e0:	a009883a 	mov	r4,r20
 10075e4:	1080004c 	andi	r2,r2,1
 10075e8:	1462b03a 	or	r17,r2,r17
 10075ec:	ac7fff15 	stw	r17,-4(r21)
 10075f0:	100d5040 	call	100d504 <__malloc_unlock>
 10075f4:	a805883a 	mov	r2,r21
 10075f8:	003f6b06 	br	10073a8 <_realloc_r+0x170>
 10075fc:	a80b883a 	mov	r5,r21
 1007600:	9009883a 	mov	r4,r18
 1007604:	1005fb80 	call	1005fb8 <memmove>
 1007608:	003f4e06 	br	1007344 <_realloc_r+0x10c>
 100760c:	89000404 	addi	r4,r17,16
 1007610:	b93fbc16 	blt	r23,r4,1007504 <_realloc_r+0x2cc>
 1007614:	b0800317 	ldw	r2,12(r22)
 1007618:	b0c00217 	ldw	r3,8(r22)
 100761c:	81bfff04 	addi	r6,r16,-4
 1007620:	01000904 	movi	r4,36
 1007624:	18800315 	stw	r2,12(r3)
 1007628:	10c00215 	stw	r3,8(r2)
 100762c:	b4800204 	addi	r18,r22,8
 1007630:	21804336 	bltu	r4,r6,1007740 <_realloc_r+0x508>
 1007634:	008004c4 	movi	r2,19
 1007638:	11803f2e 	bgeu	r2,r6,1007738 <_realloc_r+0x500>
 100763c:	a8800017 	ldw	r2,0(r21)
 1007640:	b0800215 	stw	r2,8(r22)
 1007644:	a8800117 	ldw	r2,4(r21)
 1007648:	b0800315 	stw	r2,12(r22)
 100764c:	008006c4 	movi	r2,27
 1007650:	11803f36 	bltu	r2,r6,1007750 <_realloc_r+0x518>
 1007654:	b0800404 	addi	r2,r22,16
 1007658:	ad400204 	addi	r21,r21,8
 100765c:	a8c00017 	ldw	r3,0(r21)
 1007660:	10c00015 	stw	r3,0(r2)
 1007664:	a8c00117 	ldw	r3,4(r21)
 1007668:	10c00115 	stw	r3,4(r2)
 100766c:	a8c00217 	ldw	r3,8(r21)
 1007670:	10c00215 	stw	r3,8(r2)
 1007674:	b447883a 	add	r3,r22,r17
 1007678:	bc45c83a 	sub	r2,r23,r17
 100767c:	e0c00215 	stw	r3,8(fp)
 1007680:	10800054 	ori	r2,r2,1
 1007684:	18800115 	stw	r2,4(r3)
 1007688:	b0800117 	ldw	r2,4(r22)
 100768c:	a009883a 	mov	r4,r20
 1007690:	1080004c 	andi	r2,r2,1
 1007694:	1462b03a 	or	r17,r2,r17
 1007698:	b4400115 	stw	r17,4(r22)
 100769c:	100d5040 	call	100d504 <__malloc_unlock>
 10076a0:	9005883a 	mov	r2,r18
 10076a4:	003f4006 	br	10073a8 <_realloc_r+0x170>
 10076a8:	a8c00217 	ldw	r3,8(r21)
 10076ac:	90c00215 	stw	r3,8(r18)
 10076b0:	a8c00317 	ldw	r3,12(r21)
 10076b4:	90c00315 	stw	r3,12(r18)
 10076b8:	30801126 	beq	r6,r2,1007700 <_realloc_r+0x4c8>
 10076bc:	90800404 	addi	r2,r18,16
 10076c0:	a8c00404 	addi	r3,r21,16
 10076c4:	003f1906 	br	100732c <_realloc_r+0xf4>
 10076c8:	90ffff17 	ldw	r3,-4(r18)
 10076cc:	00bfff04 	movi	r2,-4
 10076d0:	a825883a 	mov	r18,r21
 10076d4:	1884703a 	and	r2,r3,r2
 10076d8:	80a1883a 	add	r16,r16,r2
 10076dc:	003f2406 	br	1007370 <_realloc_r+0x138>
 10076e0:	a8800217 	ldw	r2,8(r21)
 10076e4:	b0800415 	stw	r2,16(r22)
 10076e8:	a8800317 	ldw	r2,12(r21)
 10076ec:	b0800515 	stw	r2,20(r22)
 10076f0:	31000a26 	beq	r6,r4,100771c <_realloc_r+0x4e4>
 10076f4:	b0800604 	addi	r2,r22,24
 10076f8:	ad400404 	addi	r21,r21,16
 10076fc:	003fa906 	br	10075a4 <_realloc_r+0x36c>
 1007700:	a9000417 	ldw	r4,16(r21)
 1007704:	90800604 	addi	r2,r18,24
 1007708:	a8c00604 	addi	r3,r21,24
 100770c:	91000415 	stw	r4,16(r18)
 1007710:	a9000517 	ldw	r4,20(r21)
 1007714:	91000515 	stw	r4,20(r18)
 1007718:	003f0406 	br	100732c <_realloc_r+0xf4>
 100771c:	a8c00417 	ldw	r3,16(r21)
 1007720:	ad400604 	addi	r21,r21,24
 1007724:	b0800804 	addi	r2,r22,32
 1007728:	b0c00615 	stw	r3,24(r22)
 100772c:	a8ffff17 	ldw	r3,-4(r21)
 1007730:	b0c00715 	stw	r3,28(r22)
 1007734:	003f9b06 	br	10075a4 <_realloc_r+0x36c>
 1007738:	9005883a 	mov	r2,r18
 100773c:	003fc706 	br	100765c <_realloc_r+0x424>
 1007740:	a80b883a 	mov	r5,r21
 1007744:	9009883a 	mov	r4,r18
 1007748:	1005fb80 	call	1005fb8 <memmove>
 100774c:	003fc906 	br	1007674 <_realloc_r+0x43c>
 1007750:	a8800217 	ldw	r2,8(r21)
 1007754:	b0800415 	stw	r2,16(r22)
 1007758:	a8800317 	ldw	r2,12(r21)
 100775c:	b0800515 	stw	r2,20(r22)
 1007760:	31000726 	beq	r6,r4,1007780 <_realloc_r+0x548>
 1007764:	b0800604 	addi	r2,r22,24
 1007768:	ad400404 	addi	r21,r21,16
 100776c:	003fbb06 	br	100765c <_realloc_r+0x424>
 1007770:	a009883a 	mov	r4,r20
 1007774:	100d5040 	call	100d504 <__malloc_unlock>
 1007778:	0005883a 	mov	r2,zero
 100777c:	003f0a06 	br	10073a8 <_realloc_r+0x170>
 1007780:	a8c00417 	ldw	r3,16(r21)
 1007784:	ad400604 	addi	r21,r21,24
 1007788:	b0800804 	addi	r2,r22,32
 100778c:	b0c00615 	stw	r3,24(r22)
 1007790:	a8ffff17 	ldw	r3,-4(r21)
 1007794:	b0c00715 	stw	r3,28(r22)
 1007798:	003fb006 	br	100765c <_realloc_r+0x424>

0100779c <__fpclassifyd>:
 100779c:	00a00034 	movhi	r2,32768
 10077a0:	10bfffc4 	addi	r2,r2,-1
 10077a4:	2884703a 	and	r2,r5,r2
 10077a8:	10000726 	beq	r2,zero,10077c8 <__fpclassifyd+0x2c>
 10077ac:	00fffc34 	movhi	r3,65520
 10077b0:	019ff834 	movhi	r6,32736
 10077b4:	28c7883a 	add	r3,r5,r3
 10077b8:	31bfffc4 	addi	r6,r6,-1
 10077bc:	30c00536 	bltu	r6,r3,10077d4 <__fpclassifyd+0x38>
 10077c0:	00800104 	movi	r2,4
 10077c4:	f800283a 	ret
 10077c8:	2000021e 	bne	r4,zero,10077d4 <__fpclassifyd+0x38>
 10077cc:	00800084 	movi	r2,2
 10077d0:	f800283a 	ret
 10077d4:	00dffc34 	movhi	r3,32752
 10077d8:	019ff834 	movhi	r6,32736
 10077dc:	28cb883a 	add	r5,r5,r3
 10077e0:	31bfffc4 	addi	r6,r6,-1
 10077e4:	317ff62e 	bgeu	r6,r5,10077c0 <__fpclassifyd+0x24>
 10077e8:	01400434 	movhi	r5,16
 10077ec:	297fffc4 	addi	r5,r5,-1
 10077f0:	28800236 	bltu	r5,r2,10077fc <__fpclassifyd+0x60>
 10077f4:	008000c4 	movi	r2,3
 10077f8:	f800283a 	ret
 10077fc:	10c00226 	beq	r2,r3,1007808 <__fpclassifyd+0x6c>
 1007800:	0005883a 	mov	r2,zero
 1007804:	f800283a 	ret
 1007808:	2005003a 	cmpeq	r2,r4,zero
 100780c:	f800283a 	ret

01007810 <_sbrk_r>:
 1007810:	defffd04 	addi	sp,sp,-12
 1007814:	dc000015 	stw	r16,0(sp)
 1007818:	04004074 	movhi	r16,257
 100781c:	dc400115 	stw	r17,4(sp)
 1007820:	840b1f04 	addi	r16,r16,11388
 1007824:	2023883a 	mov	r17,r4
 1007828:	2809883a 	mov	r4,r5
 100782c:	dfc00215 	stw	ra,8(sp)
 1007830:	80000015 	stw	zero,0(r16)
 1007834:	100d6c40 	call	100d6c4 <sbrk>
 1007838:	00ffffc4 	movi	r3,-1
 100783c:	10c00526 	beq	r2,r3,1007854 <_sbrk_r+0x44>
 1007840:	dfc00217 	ldw	ra,8(sp)
 1007844:	dc400117 	ldw	r17,4(sp)
 1007848:	dc000017 	ldw	r16,0(sp)
 100784c:	dec00304 	addi	sp,sp,12
 1007850:	f800283a 	ret
 1007854:	80c00017 	ldw	r3,0(r16)
 1007858:	183ff926 	beq	r3,zero,1007840 <_sbrk_r+0x30>
 100785c:	88c00015 	stw	r3,0(r17)
 1007860:	003ff706 	br	1007840 <_sbrk_r+0x30>

01007864 <__sread>:
 1007864:	defffe04 	addi	sp,sp,-8
 1007868:	dc000015 	stw	r16,0(sp)
 100786c:	2821883a 	mov	r16,r5
 1007870:	2940038f 	ldh	r5,14(r5)
 1007874:	dfc00115 	stw	ra,4(sp)
 1007878:	10096580 	call	1009658 <_read_r>
 100787c:	10000716 	blt	r2,zero,100789c <__sread+0x38>
 1007880:	80c01417 	ldw	r3,80(r16)
 1007884:	1887883a 	add	r3,r3,r2
 1007888:	80c01415 	stw	r3,80(r16)
 100788c:	dfc00117 	ldw	ra,4(sp)
 1007890:	dc000017 	ldw	r16,0(sp)
 1007894:	dec00204 	addi	sp,sp,8
 1007898:	f800283a 	ret
 100789c:	80c0030b 	ldhu	r3,12(r16)
 10078a0:	18fbffcc 	andi	r3,r3,61439
 10078a4:	80c0030d 	sth	r3,12(r16)
 10078a8:	dfc00117 	ldw	ra,4(sp)
 10078ac:	dc000017 	ldw	r16,0(sp)
 10078b0:	dec00204 	addi	sp,sp,8
 10078b4:	f800283a 	ret

010078b8 <__seofread>:
 10078b8:	0005883a 	mov	r2,zero
 10078bc:	f800283a 	ret

010078c0 <__swrite>:
 10078c0:	2880030b 	ldhu	r2,12(r5)
 10078c4:	defffb04 	addi	sp,sp,-20
 10078c8:	dcc00315 	stw	r19,12(sp)
 10078cc:	dc800215 	stw	r18,8(sp)
 10078d0:	dc400115 	stw	r17,4(sp)
 10078d4:	dc000015 	stw	r16,0(sp)
 10078d8:	dfc00415 	stw	ra,16(sp)
 10078dc:	10c0400c 	andi	r3,r2,256
 10078e0:	2821883a 	mov	r16,r5
 10078e4:	2023883a 	mov	r17,r4
 10078e8:	3025883a 	mov	r18,r6
 10078ec:	3827883a 	mov	r19,r7
 10078f0:	18000526 	beq	r3,zero,1007908 <__swrite+0x48>
 10078f4:	2940038f 	ldh	r5,14(r5)
 10078f8:	01c00084 	movi	r7,2
 10078fc:	000d883a 	mov	r6,zero
 1007900:	10095f80 	call	10095f8 <_lseek_r>
 1007904:	8080030b 	ldhu	r2,12(r16)
 1007908:	8140038f 	ldh	r5,14(r16)
 100790c:	10bbffcc 	andi	r2,r2,61439
 1007910:	980f883a 	mov	r7,r19
 1007914:	900d883a 	mov	r6,r18
 1007918:	8809883a 	mov	r4,r17
 100791c:	8080030d 	sth	r2,12(r16)
 1007920:	dfc00417 	ldw	ra,16(sp)
 1007924:	dcc00317 	ldw	r19,12(sp)
 1007928:	dc800217 	ldw	r18,8(sp)
 100792c:	dc400117 	ldw	r17,4(sp)
 1007930:	dc000017 	ldw	r16,0(sp)
 1007934:	dec00504 	addi	sp,sp,20
 1007938:	10090c41 	jmpi	10090c4 <_write_r>

0100793c <__sseek>:
 100793c:	defffe04 	addi	sp,sp,-8
 1007940:	dc000015 	stw	r16,0(sp)
 1007944:	2821883a 	mov	r16,r5
 1007948:	2940038f 	ldh	r5,14(r5)
 100794c:	dfc00115 	stw	ra,4(sp)
 1007950:	10095f80 	call	10095f8 <_lseek_r>
 1007954:	00ffffc4 	movi	r3,-1
 1007958:	10c00826 	beq	r2,r3,100797c <__sseek+0x40>
 100795c:	80c0030b 	ldhu	r3,12(r16)
 1007960:	80801415 	stw	r2,80(r16)
 1007964:	18c40014 	ori	r3,r3,4096
 1007968:	80c0030d 	sth	r3,12(r16)
 100796c:	dfc00117 	ldw	ra,4(sp)
 1007970:	dc000017 	ldw	r16,0(sp)
 1007974:	dec00204 	addi	sp,sp,8
 1007978:	f800283a 	ret
 100797c:	80c0030b 	ldhu	r3,12(r16)
 1007980:	18fbffcc 	andi	r3,r3,61439
 1007984:	80c0030d 	sth	r3,12(r16)
 1007988:	dfc00117 	ldw	ra,4(sp)
 100798c:	dc000017 	ldw	r16,0(sp)
 1007990:	dec00204 	addi	sp,sp,8
 1007994:	f800283a 	ret

01007998 <__sclose>:
 1007998:	2940038f 	ldh	r5,14(r5)
 100799c:	10091241 	jmpi	1009124 <_close_r>

010079a0 <strcmp>:
 10079a0:	2144b03a 	or	r2,r4,r5
 10079a4:	108000cc 	andi	r2,r2,3
 10079a8:	1000171e 	bne	r2,zero,1007a08 <strcmp+0x68>
 10079ac:	20800017 	ldw	r2,0(r4)
 10079b0:	28c00017 	ldw	r3,0(r5)
 10079b4:	10c0141e 	bne	r2,r3,1007a08 <strcmp+0x68>
 10079b8:	027fbff4 	movhi	r9,65279
 10079bc:	4a7fbfc4 	addi	r9,r9,-257
 10079c0:	0086303a 	nor	r3,zero,r2
 10079c4:	02202074 	movhi	r8,32897
 10079c8:	1245883a 	add	r2,r2,r9
 10079cc:	42202004 	addi	r8,r8,-32640
 10079d0:	10c4703a 	and	r2,r2,r3
 10079d4:	1204703a 	and	r2,r2,r8
 10079d8:	10000226 	beq	r2,zero,10079e4 <strcmp+0x44>
 10079dc:	00002306 	br	1007a6c <strcmp+0xcc>
 10079e0:	1000221e 	bne	r2,zero,1007a6c <strcmp+0xcc>
 10079e4:	21000104 	addi	r4,r4,4
 10079e8:	20c00017 	ldw	r3,0(r4)
 10079ec:	29400104 	addi	r5,r5,4
 10079f0:	29800017 	ldw	r6,0(r5)
 10079f4:	1a4f883a 	add	r7,r3,r9
 10079f8:	00c4303a 	nor	r2,zero,r3
 10079fc:	3884703a 	and	r2,r7,r2
 1007a00:	1204703a 	and	r2,r2,r8
 1007a04:	19bff626 	beq	r3,r6,10079e0 <strcmp+0x40>
 1007a08:	20800003 	ldbu	r2,0(r4)
 1007a0c:	10c03fcc 	andi	r3,r2,255
 1007a10:	18c0201c 	xori	r3,r3,128
 1007a14:	18ffe004 	addi	r3,r3,-128
 1007a18:	18000c26 	beq	r3,zero,1007a4c <strcmp+0xac>
 1007a1c:	29800007 	ldb	r6,0(r5)
 1007a20:	19800326 	beq	r3,r6,1007a30 <strcmp+0x90>
 1007a24:	00001306 	br	1007a74 <strcmp+0xd4>
 1007a28:	29800007 	ldb	r6,0(r5)
 1007a2c:	11800b1e 	bne	r2,r6,1007a5c <strcmp+0xbc>
 1007a30:	21000044 	addi	r4,r4,1
 1007a34:	20c00003 	ldbu	r3,0(r4)
 1007a38:	29400044 	addi	r5,r5,1
 1007a3c:	18803fcc 	andi	r2,r3,255
 1007a40:	1080201c 	xori	r2,r2,128
 1007a44:	10bfe004 	addi	r2,r2,-128
 1007a48:	103ff71e 	bne	r2,zero,1007a28 <strcmp+0x88>
 1007a4c:	0007883a 	mov	r3,zero
 1007a50:	28800003 	ldbu	r2,0(r5)
 1007a54:	1885c83a 	sub	r2,r3,r2
 1007a58:	f800283a 	ret
 1007a5c:	28800003 	ldbu	r2,0(r5)
 1007a60:	18c03fcc 	andi	r3,r3,255
 1007a64:	1885c83a 	sub	r2,r3,r2
 1007a68:	f800283a 	ret
 1007a6c:	0005883a 	mov	r2,zero
 1007a70:	f800283a 	ret
 1007a74:	10c03fcc 	andi	r3,r2,255
 1007a78:	003ff506 	br	1007a50 <strcmp+0xb0>

01007a7c <__sprint_r.part.0>:
 1007a7c:	28801917 	ldw	r2,100(r5)
 1007a80:	defff604 	addi	sp,sp,-40
 1007a84:	dd400515 	stw	r21,20(sp)
 1007a88:	dfc00915 	stw	ra,36(sp)
 1007a8c:	df000815 	stw	fp,32(sp)
 1007a90:	ddc00715 	stw	r23,28(sp)
 1007a94:	dd800615 	stw	r22,24(sp)
 1007a98:	dd000415 	stw	r20,16(sp)
 1007a9c:	dcc00315 	stw	r19,12(sp)
 1007aa0:	dc800215 	stw	r18,8(sp)
 1007aa4:	dc400115 	stw	r17,4(sp)
 1007aa8:	dc000015 	stw	r16,0(sp)
 1007aac:	1088000c 	andi	r2,r2,8192
 1007ab0:	302b883a 	mov	r21,r6
 1007ab4:	10002e26 	beq	r2,zero,1007b70 <__sprint_r.part.0+0xf4>
 1007ab8:	30800217 	ldw	r2,8(r6)
 1007abc:	35800017 	ldw	r22,0(r6)
 1007ac0:	10002926 	beq	r2,zero,1007b68 <__sprint_r.part.0+0xec>
 1007ac4:	2827883a 	mov	r19,r5
 1007ac8:	2029883a 	mov	r20,r4
 1007acc:	b5c00104 	addi	r23,r22,4
 1007ad0:	04bfffc4 	movi	r18,-1
 1007ad4:	bc400017 	ldw	r17,0(r23)
 1007ad8:	b4000017 	ldw	r16,0(r22)
 1007adc:	0039883a 	mov	fp,zero
 1007ae0:	8822d0ba 	srli	r17,r17,2
 1007ae4:	8800031e 	bne	r17,zero,1007af4 <__sprint_r.part.0+0x78>
 1007ae8:	00001806 	br	1007b4c <__sprint_r.part.0+0xd0>
 1007aec:	84000104 	addi	r16,r16,4
 1007af0:	8f001526 	beq	r17,fp,1007b48 <__sprint_r.part.0+0xcc>
 1007af4:	81400017 	ldw	r5,0(r16)
 1007af8:	980d883a 	mov	r6,r19
 1007afc:	a009883a 	mov	r4,r20
 1007b00:	10094a40 	call	10094a4 <_fputwc_r>
 1007b04:	e7000044 	addi	fp,fp,1
 1007b08:	14bff81e 	bne	r2,r18,1007aec <__sprint_r.part.0+0x70>
 1007b0c:	9005883a 	mov	r2,r18
 1007b10:	a8000215 	stw	zero,8(r21)
 1007b14:	a8000115 	stw	zero,4(r21)
 1007b18:	dfc00917 	ldw	ra,36(sp)
 1007b1c:	df000817 	ldw	fp,32(sp)
 1007b20:	ddc00717 	ldw	r23,28(sp)
 1007b24:	dd800617 	ldw	r22,24(sp)
 1007b28:	dd400517 	ldw	r21,20(sp)
 1007b2c:	dd000417 	ldw	r20,16(sp)
 1007b30:	dcc00317 	ldw	r19,12(sp)
 1007b34:	dc800217 	ldw	r18,8(sp)
 1007b38:	dc400117 	ldw	r17,4(sp)
 1007b3c:	dc000017 	ldw	r16,0(sp)
 1007b40:	dec00a04 	addi	sp,sp,40
 1007b44:	f800283a 	ret
 1007b48:	a8800217 	ldw	r2,8(r21)
 1007b4c:	8c63883a 	add	r17,r17,r17
 1007b50:	8c63883a 	add	r17,r17,r17
 1007b54:	1445c83a 	sub	r2,r2,r17
 1007b58:	a8800215 	stw	r2,8(r21)
 1007b5c:	b5800204 	addi	r22,r22,8
 1007b60:	bdc00204 	addi	r23,r23,8
 1007b64:	103fdb1e 	bne	r2,zero,1007ad4 <__sprint_r.part.0+0x58>
 1007b68:	0005883a 	mov	r2,zero
 1007b6c:	003fe806 	br	1007b10 <__sprint_r.part.0+0x94>
 1007b70:	1004ca40 	call	1004ca4 <__sfvwrite_r>
 1007b74:	003fe606 	br	1007b10 <__sprint_r.part.0+0x94>

01007b78 <__sprint_r>:
 1007b78:	30c00217 	ldw	r3,8(r6)
 1007b7c:	18000126 	beq	r3,zero,1007b84 <__sprint_r+0xc>
 1007b80:	1007a7c1 	jmpi	1007a7c <__sprint_r.part.0>
 1007b84:	30000115 	stw	zero,4(r6)
 1007b88:	0005883a 	mov	r2,zero
 1007b8c:	f800283a 	ret

01007b90 <___vfiprintf_internal_r>:
 1007b90:	deffc904 	addi	sp,sp,-220
 1007b94:	df003515 	stw	fp,212(sp)
 1007b98:	dd003115 	stw	r20,196(sp)
 1007b9c:	dfc03615 	stw	ra,216(sp)
 1007ba0:	ddc03415 	stw	r23,208(sp)
 1007ba4:	dd803315 	stw	r22,204(sp)
 1007ba8:	dd403215 	stw	r21,200(sp)
 1007bac:	dcc03015 	stw	r19,192(sp)
 1007bb0:	dc802f15 	stw	r18,188(sp)
 1007bb4:	dc402e15 	stw	r17,184(sp)
 1007bb8:	dc002d15 	stw	r16,180(sp)
 1007bbc:	d9002015 	stw	r4,128(sp)
 1007bc0:	d9c02215 	stw	r7,136(sp)
 1007bc4:	2829883a 	mov	r20,r5
 1007bc8:	3039883a 	mov	fp,r6
 1007bcc:	20000226 	beq	r4,zero,1007bd8 <___vfiprintf_internal_r+0x48>
 1007bd0:	20800e17 	ldw	r2,56(r4)
 1007bd4:	1000cf26 	beq	r2,zero,1007f14 <___vfiprintf_internal_r+0x384>
 1007bd8:	a080030b 	ldhu	r2,12(r20)
 1007bdc:	10c8000c 	andi	r3,r2,8192
 1007be0:	1800061e 	bne	r3,zero,1007bfc <___vfiprintf_internal_r+0x6c>
 1007be4:	a1001917 	ldw	r4,100(r20)
 1007be8:	00f7ffc4 	movi	r3,-8193
 1007bec:	10880014 	ori	r2,r2,8192
 1007bf0:	20c6703a 	and	r3,r4,r3
 1007bf4:	a080030d 	sth	r2,12(r20)
 1007bf8:	a0c01915 	stw	r3,100(r20)
 1007bfc:	10c0020c 	andi	r3,r2,8
 1007c00:	1800a926 	beq	r3,zero,1007ea8 <___vfiprintf_internal_r+0x318>
 1007c04:	a0c00417 	ldw	r3,16(r20)
 1007c08:	1800a726 	beq	r3,zero,1007ea8 <___vfiprintf_internal_r+0x318>
 1007c0c:	1080068c 	andi	r2,r2,26
 1007c10:	00c00284 	movi	r3,10
 1007c14:	10c0ac26 	beq	r2,r3,1007ec8 <___vfiprintf_internal_r+0x338>
 1007c18:	da801a04 	addi	r10,sp,104
 1007c1c:	da801e15 	stw	r10,120(sp)
 1007c20:	d8801e17 	ldw	r2,120(sp)
 1007c24:	da8019c4 	addi	r10,sp,103
 1007c28:	05804074 	movhi	r22,257
 1007c2c:	05c04074 	movhi	r23,257
 1007c30:	da801f15 	stw	r10,124(sp)
 1007c34:	1295c83a 	sub	r10,r2,r10
 1007c38:	b5bd5304 	addi	r22,r22,-2740
 1007c3c:	bdfd4f04 	addi	r23,r23,-2756
 1007c40:	dec01a15 	stw	sp,104(sp)
 1007c44:	d8001c15 	stw	zero,112(sp)
 1007c48:	d8001b15 	stw	zero,108(sp)
 1007c4c:	d8002615 	stw	zero,152(sp)
 1007c50:	d8002315 	stw	zero,140(sp)
 1007c54:	da802715 	stw	r10,156(sp)
 1007c58:	d811883a 	mov	r8,sp
 1007c5c:	dd002115 	stw	r20,132(sp)
 1007c60:	e021883a 	mov	r16,fp
 1007c64:	80800007 	ldb	r2,0(r16)
 1007c68:	1003ea26 	beq	r2,zero,1008c14 <___vfiprintf_internal_r+0x1084>
 1007c6c:	00c00944 	movi	r3,37
 1007c70:	8025883a 	mov	r18,r16
 1007c74:	10c0021e 	bne	r2,r3,1007c80 <___vfiprintf_internal_r+0xf0>
 1007c78:	00001606 	br	1007cd4 <___vfiprintf_internal_r+0x144>
 1007c7c:	10c00326 	beq	r2,r3,1007c8c <___vfiprintf_internal_r+0xfc>
 1007c80:	94800044 	addi	r18,r18,1
 1007c84:	90800007 	ldb	r2,0(r18)
 1007c88:	103ffc1e 	bne	r2,zero,1007c7c <___vfiprintf_internal_r+0xec>
 1007c8c:	9423c83a 	sub	r17,r18,r16
 1007c90:	88001026 	beq	r17,zero,1007cd4 <___vfiprintf_internal_r+0x144>
 1007c94:	d8c01c17 	ldw	r3,112(sp)
 1007c98:	d8801b17 	ldw	r2,108(sp)
 1007c9c:	44000015 	stw	r16,0(r8)
 1007ca0:	88c7883a 	add	r3,r17,r3
 1007ca4:	10800044 	addi	r2,r2,1
 1007ca8:	44400115 	stw	r17,4(r8)
 1007cac:	d8c01c15 	stw	r3,112(sp)
 1007cb0:	d8801b15 	stw	r2,108(sp)
 1007cb4:	010001c4 	movi	r4,7
 1007cb8:	2080760e 	bge	r4,r2,1007e94 <___vfiprintf_internal_r+0x304>
 1007cbc:	1803821e 	bne	r3,zero,1008ac8 <___vfiprintf_internal_r+0xf38>
 1007cc0:	da802317 	ldw	r10,140(sp)
 1007cc4:	d8001b15 	stw	zero,108(sp)
 1007cc8:	d811883a 	mov	r8,sp
 1007ccc:	5455883a 	add	r10,r10,r17
 1007cd0:	da802315 	stw	r10,140(sp)
 1007cd4:	90800007 	ldb	r2,0(r18)
 1007cd8:	10044626 	beq	r2,zero,1008df4 <___vfiprintf_internal_r+0x1264>
 1007cdc:	90c00047 	ldb	r3,1(r18)
 1007ce0:	94000044 	addi	r16,r18,1
 1007ce4:	d8001d85 	stb	zero,118(sp)
 1007ce8:	0009883a 	mov	r4,zero
 1007cec:	000f883a 	mov	r7,zero
 1007cf0:	027fffc4 	movi	r9,-1
 1007cf4:	0023883a 	mov	r17,zero
 1007cf8:	0029883a 	mov	r20,zero
 1007cfc:	01401604 	movi	r5,88
 1007d00:	01800244 	movi	r6,9
 1007d04:	03400a84 	movi	r13,42
 1007d08:	03001b04 	movi	r12,108
 1007d0c:	84000044 	addi	r16,r16,1
 1007d10:	18bff804 	addi	r2,r3,-32
 1007d14:	28827336 	bltu	r5,r2,10086e4 <___vfiprintf_internal_r+0xb54>
 1007d18:	100490ba 	slli	r2,r2,2
 1007d1c:	02804034 	movhi	r10,256
 1007d20:	529f4c04 	addi	r10,r10,32048
 1007d24:	1285883a 	add	r2,r2,r10
 1007d28:	10800017 	ldw	r2,0(r2)
 1007d2c:	1000683a 	jmp	r2
 1007d30:	01008418 	cmpnei	r4,zero,528
 1007d34:	010086e4 	muli	r4,zero,539
 1007d38:	010086e4 	muli	r4,zero,539
 1007d3c:	01008438 	rdprs	r4,zero,528
 1007d40:	010086e4 	muli	r4,zero,539
 1007d44:	010086e4 	muli	r4,zero,539
 1007d48:	010086e4 	muli	r4,zero,539
 1007d4c:	010086e4 	muli	r4,zero,539
 1007d50:	010086e4 	muli	r4,zero,539
 1007d54:	010086e4 	muli	r4,zero,539
 1007d58:	01008620 	cmpeqi	r4,zero,536
 1007d5c:	0100863c 	xorhi	r4,zero,536
 1007d60:	010086e4 	muli	r4,zero,539
 1007d64:	01007f24 	muli	r4,zero,508
 1007d68:	0100864c 	andi	r4,zero,537
 1007d6c:	010086e4 	muli	r4,zero,539
 1007d70:	01008444 	movi	r4,529
 1007d74:	01008450 	cmplti	r4,zero,529
 1007d78:	01008450 	cmplti	r4,zero,529
 1007d7c:	01008450 	cmplti	r4,zero,529
 1007d80:	01008450 	cmplti	r4,zero,529
 1007d84:	01008450 	cmplti	r4,zero,529
 1007d88:	01008450 	cmplti	r4,zero,529
 1007d8c:	01008450 	cmplti	r4,zero,529
 1007d90:	01008450 	cmplti	r4,zero,529
 1007d94:	01008450 	cmplti	r4,zero,529
 1007d98:	010086e4 	muli	r4,zero,539
 1007d9c:	010086e4 	muli	r4,zero,539
 1007da0:	010086e4 	muli	r4,zero,539
 1007da4:	010086e4 	muli	r4,zero,539
 1007da8:	010086e4 	muli	r4,zero,539
 1007dac:	010086e4 	muli	r4,zero,539
 1007db0:	010086e4 	muli	r4,zero,539
 1007db4:	010086e4 	muli	r4,zero,539
 1007db8:	010086e4 	muli	r4,zero,539
 1007dbc:	010086e4 	muli	r4,zero,539
 1007dc0:	0100847c 	xorhi	r4,zero,529
 1007dc4:	010086e4 	muli	r4,zero,539
 1007dc8:	010086e4 	muli	r4,zero,539
 1007dcc:	010086e4 	muli	r4,zero,539
 1007dd0:	010086e4 	muli	r4,zero,539
 1007dd4:	010086e4 	muli	r4,zero,539
 1007dd8:	010086e4 	muli	r4,zero,539
 1007ddc:	010086e4 	muli	r4,zero,539
 1007de0:	010086e4 	muli	r4,zero,539
 1007de4:	010086e4 	muli	r4,zero,539
 1007de8:	010086e4 	muli	r4,zero,539
 1007dec:	010084b4 	movhi	r4,530
 1007df0:	010086e4 	muli	r4,zero,539
 1007df4:	010086e4 	muli	r4,zero,539
 1007df8:	010086e4 	muli	r4,zero,539
 1007dfc:	010086e4 	muli	r4,zero,539
 1007e00:	010086e4 	muli	r4,zero,539
 1007e04:	0100850c 	andi	r4,zero,532
 1007e08:	010086e4 	muli	r4,zero,539
 1007e0c:	010086e4 	muli	r4,zero,539
 1007e10:	0100857c 	xorhi	r4,zero,533
 1007e14:	010086e4 	muli	r4,zero,539
 1007e18:	010086e4 	muli	r4,zero,539
 1007e1c:	010086e4 	muli	r4,zero,539
 1007e20:	010086e4 	muli	r4,zero,539
 1007e24:	010086e4 	muli	r4,zero,539
 1007e28:	010086e4 	muli	r4,zero,539
 1007e2c:	010086e4 	muli	r4,zero,539
 1007e30:	010086e4 	muli	r4,zero,539
 1007e34:	010086e4 	muli	r4,zero,539
 1007e38:	010086e4 	muli	r4,zero,539
 1007e3c:	01008328 	cmpgeui	r4,zero,524
 1007e40:	01008354 	movui	r4,525
 1007e44:	010086e4 	muli	r4,zero,539
 1007e48:	010086e4 	muli	r4,zero,539
 1007e4c:	010086e4 	muli	r4,zero,539
 1007e50:	0100868c 	andi	r4,zero,538
 1007e54:	01008354 	movui	r4,525
 1007e58:	010086e4 	muli	r4,zero,539
 1007e5c:	010086e4 	muli	r4,zero,539
 1007e60:	010081e8 	cmpgeui	r4,zero,519
 1007e64:	010086e4 	muli	r4,zero,539
 1007e68:	010081f8 	rdprs	r4,zero,519
 1007e6c:	01008234 	movhi	r4,520
 1007e70:	01007f30 	cmpltui	r4,zero,508
 1007e74:	010081dc 	xori	r4,zero,519
 1007e78:	010086e4 	muli	r4,zero,539
 1007e7c:	010085b8 	rdprs	r4,zero,534
 1007e80:	010086e4 	muli	r4,zero,539
 1007e84:	01008610 	cmplti	r4,zero,536
 1007e88:	010086e4 	muli	r4,zero,539
 1007e8c:	010086e4 	muli	r4,zero,539
 1007e90:	010082d4 	movui	r4,523
 1007e94:	42000204 	addi	r8,r8,8
 1007e98:	da802317 	ldw	r10,140(sp)
 1007e9c:	5455883a 	add	r10,r10,r17
 1007ea0:	da802315 	stw	r10,140(sp)
 1007ea4:	003f8b06 	br	1007cd4 <___vfiprintf_internal_r+0x144>
 1007ea8:	d9002017 	ldw	r4,128(sp)
 1007eac:	a00b883a 	mov	r5,r20
 1007eb0:	100284c0 	call	100284c <__swsetup_r>
 1007eb4:	1003b11e 	bne	r2,zero,1008d7c <___vfiprintf_internal_r+0x11ec>
 1007eb8:	a080030b 	ldhu	r2,12(r20)
 1007ebc:	00c00284 	movi	r3,10
 1007ec0:	1080068c 	andi	r2,r2,26
 1007ec4:	10ff541e 	bne	r2,r3,1007c18 <___vfiprintf_internal_r+0x88>
 1007ec8:	a080038f 	ldh	r2,14(r20)
 1007ecc:	103f5216 	blt	r2,zero,1007c18 <___vfiprintf_internal_r+0x88>
 1007ed0:	d9c02217 	ldw	r7,136(sp)
 1007ed4:	d9002017 	ldw	r4,128(sp)
 1007ed8:	e00d883a 	mov	r6,fp
 1007edc:	a00b883a 	mov	r5,r20
 1007ee0:	10090080 	call	1009008 <__sbprintf>
 1007ee4:	dfc03617 	ldw	ra,216(sp)
 1007ee8:	df003517 	ldw	fp,212(sp)
 1007eec:	ddc03417 	ldw	r23,208(sp)
 1007ef0:	dd803317 	ldw	r22,204(sp)
 1007ef4:	dd403217 	ldw	r21,200(sp)
 1007ef8:	dd003117 	ldw	r20,196(sp)
 1007efc:	dcc03017 	ldw	r19,192(sp)
 1007f00:	dc802f17 	ldw	r18,188(sp)
 1007f04:	dc402e17 	ldw	r17,184(sp)
 1007f08:	dc002d17 	ldw	r16,180(sp)
 1007f0c:	dec03704 	addi	sp,sp,220
 1007f10:	f800283a 	ret
 1007f14:	10048200 	call	1004820 <__sinit>
 1007f18:	003f2f06 	br	1007bd8 <___vfiprintf_internal_r+0x48>
 1007f1c:	0463c83a 	sub	r17,zero,r17
 1007f20:	d8802215 	stw	r2,136(sp)
 1007f24:	a5000114 	ori	r20,r20,4
 1007f28:	80c00007 	ldb	r3,0(r16)
 1007f2c:	003f7706 	br	1007d0c <___vfiprintf_internal_r+0x17c>
 1007f30:	00800c04 	movi	r2,48
 1007f34:	da802217 	ldw	r10,136(sp)
 1007f38:	d8801d05 	stb	r2,116(sp)
 1007f3c:	00801e04 	movi	r2,120
 1007f40:	d8801d45 	stb	r2,117(sp)
 1007f44:	d8001d85 	stb	zero,118(sp)
 1007f48:	50c00104 	addi	r3,r10,4
 1007f4c:	54800017 	ldw	r18,0(r10)
 1007f50:	0027883a 	mov	r19,zero
 1007f54:	a0800094 	ori	r2,r20,2
 1007f58:	48030b16 	blt	r9,zero,1008b88 <___vfiprintf_internal_r+0xff8>
 1007f5c:	00bfdfc4 	movi	r2,-129
 1007f60:	a096703a 	and	r11,r20,r2
 1007f64:	d8c02215 	stw	r3,136(sp)
 1007f68:	5d000094 	ori	r20,r11,2
 1007f6c:	90032b1e 	bne	r18,zero,1008c1c <___vfiprintf_internal_r+0x108c>
 1007f70:	00804074 	movhi	r2,257
 1007f74:	10bcee04 	addi	r2,r2,-3144
 1007f78:	d8802615 	stw	r2,152(sp)
 1007f7c:	0039883a 	mov	fp,zero
 1007f80:	48017b1e 	bne	r9,zero,1008570 <___vfiprintf_internal_r+0x9e0>
 1007f84:	0013883a 	mov	r9,zero
 1007f88:	0027883a 	mov	r19,zero
 1007f8c:	dd401a04 	addi	r21,sp,104
 1007f90:	4825883a 	mov	r18,r9
 1007f94:	4cc0010e 	bge	r9,r19,1007f9c <___vfiprintf_internal_r+0x40c>
 1007f98:	9825883a 	mov	r18,r19
 1007f9c:	e7003fcc 	andi	fp,fp,255
 1007fa0:	e700201c 	xori	fp,fp,128
 1007fa4:	e73fe004 	addi	fp,fp,-128
 1007fa8:	e0000126 	beq	fp,zero,1007fb0 <___vfiprintf_internal_r+0x420>
 1007fac:	94800044 	addi	r18,r18,1
 1007fb0:	a380008c 	andi	r14,r20,2
 1007fb4:	70000126 	beq	r14,zero,1007fbc <___vfiprintf_internal_r+0x42c>
 1007fb8:	94800084 	addi	r18,r18,2
 1007fbc:	a700210c 	andi	fp,r20,132
 1007fc0:	e001df1e 	bne	fp,zero,1008740 <___vfiprintf_internal_r+0xbb0>
 1007fc4:	8c87c83a 	sub	r3,r17,r18
 1007fc8:	00c1dd0e 	bge	zero,r3,1008740 <___vfiprintf_internal_r+0xbb0>
 1007fcc:	01c00404 	movi	r7,16
 1007fd0:	d8801c17 	ldw	r2,112(sp)
 1007fd4:	38c3ad0e 	bge	r7,r3,1008e8c <___vfiprintf_internal_r+0x12fc>
 1007fd8:	02804074 	movhi	r10,257
 1007fdc:	52bd5304 	addi	r10,r10,-2740
 1007fe0:	dc002915 	stw	r16,164(sp)
 1007fe4:	d9801b17 	ldw	r6,108(sp)
 1007fe8:	da802415 	stw	r10,144(sp)
 1007fec:	03c001c4 	movi	r15,7
 1007ff0:	da402515 	stw	r9,148(sp)
 1007ff4:	db802815 	stw	r14,160(sp)
 1007ff8:	1821883a 	mov	r16,r3
 1007ffc:	00000506 	br	1008014 <___vfiprintf_internal_r+0x484>
 1008000:	31400084 	addi	r5,r6,2
 1008004:	42000204 	addi	r8,r8,8
 1008008:	200d883a 	mov	r6,r4
 100800c:	843ffc04 	addi	r16,r16,-16
 1008010:	3c000d0e 	bge	r7,r16,1008048 <___vfiprintf_internal_r+0x4b8>
 1008014:	10800404 	addi	r2,r2,16
 1008018:	31000044 	addi	r4,r6,1
 100801c:	45800015 	stw	r22,0(r8)
 1008020:	41c00115 	stw	r7,4(r8)
 1008024:	d8801c15 	stw	r2,112(sp)
 1008028:	d9001b15 	stw	r4,108(sp)
 100802c:	793ff40e 	bge	r15,r4,1008000 <___vfiprintf_internal_r+0x470>
 1008030:	1001b51e 	bne	r2,zero,1008708 <___vfiprintf_internal_r+0xb78>
 1008034:	843ffc04 	addi	r16,r16,-16
 1008038:	000d883a 	mov	r6,zero
 100803c:	01400044 	movi	r5,1
 1008040:	d811883a 	mov	r8,sp
 1008044:	3c3ff316 	blt	r7,r16,1008014 <___vfiprintf_internal_r+0x484>
 1008048:	8007883a 	mov	r3,r16
 100804c:	da402517 	ldw	r9,148(sp)
 1008050:	db802817 	ldw	r14,160(sp)
 1008054:	dc002917 	ldw	r16,164(sp)
 1008058:	da802417 	ldw	r10,144(sp)
 100805c:	1885883a 	add	r2,r3,r2
 1008060:	40c00115 	stw	r3,4(r8)
 1008064:	42800015 	stw	r10,0(r8)
 1008068:	d8801c15 	stw	r2,112(sp)
 100806c:	d9401b15 	stw	r5,108(sp)
 1008070:	00c001c4 	movi	r3,7
 1008074:	19426016 	blt	r3,r5,10089f8 <___vfiprintf_internal_r+0xe68>
 1008078:	d8c01d87 	ldb	r3,118(sp)
 100807c:	42000204 	addi	r8,r8,8
 1008080:	29000044 	addi	r4,r5,1
 1008084:	1801b31e 	bne	r3,zero,1008754 <___vfiprintf_internal_r+0xbc4>
 1008088:	7001c026 	beq	r14,zero,100878c <___vfiprintf_internal_r+0xbfc>
 100808c:	d8c01d04 	addi	r3,sp,116
 1008090:	10800084 	addi	r2,r2,2
 1008094:	40c00015 	stw	r3,0(r8)
 1008098:	00c00084 	movi	r3,2
 100809c:	40c00115 	stw	r3,4(r8)
 10080a0:	d8801c15 	stw	r2,112(sp)
 10080a4:	d9001b15 	stw	r4,108(sp)
 10080a8:	00c001c4 	movi	r3,7
 10080ac:	1902650e 	bge	r3,r4,1008a44 <___vfiprintf_internal_r+0xeb4>
 10080b0:	10029a1e 	bne	r2,zero,1008b1c <___vfiprintf_internal_r+0xf8c>
 10080b4:	00c02004 	movi	r3,128
 10080b8:	01000044 	movi	r4,1
 10080bc:	000b883a 	mov	r5,zero
 10080c0:	d811883a 	mov	r8,sp
 10080c4:	e0c1b31e 	bne	fp,r3,1008794 <___vfiprintf_internal_r+0xc04>
 10080c8:	8cb9c83a 	sub	fp,r17,r18
 10080cc:	0701b10e 	bge	zero,fp,1008794 <___vfiprintf_internal_r+0xc04>
 10080d0:	01c00404 	movi	r7,16
 10080d4:	3f03890e 	bge	r7,fp,1008efc <___vfiprintf_internal_r+0x136c>
 10080d8:	00c04074 	movhi	r3,257
 10080dc:	18fd4f04 	addi	r3,r3,-2756
 10080e0:	d8c02415 	stw	r3,144(sp)
 10080e4:	8007883a 	mov	r3,r16
 10080e8:	034001c4 	movi	r13,7
 10080ec:	e021883a 	mov	r16,fp
 10080f0:	da402515 	stw	r9,148(sp)
 10080f4:	1839883a 	mov	fp,r3
 10080f8:	00000506 	br	1008110 <___vfiprintf_internal_r+0x580>
 10080fc:	29800084 	addi	r6,r5,2
 1008100:	42000204 	addi	r8,r8,8
 1008104:	180b883a 	mov	r5,r3
 1008108:	843ffc04 	addi	r16,r16,-16
 100810c:	3c000d0e 	bge	r7,r16,1008144 <___vfiprintf_internal_r+0x5b4>
 1008110:	10800404 	addi	r2,r2,16
 1008114:	28c00044 	addi	r3,r5,1
 1008118:	45c00015 	stw	r23,0(r8)
 100811c:	41c00115 	stw	r7,4(r8)
 1008120:	d8801c15 	stw	r2,112(sp)
 1008124:	d8c01b15 	stw	r3,108(sp)
 1008128:	68fff40e 	bge	r13,r3,10080fc <___vfiprintf_internal_r+0x56c>
 100812c:	1002241e 	bne	r2,zero,10089c0 <___vfiprintf_internal_r+0xe30>
 1008130:	843ffc04 	addi	r16,r16,-16
 1008134:	01800044 	movi	r6,1
 1008138:	000b883a 	mov	r5,zero
 100813c:	d811883a 	mov	r8,sp
 1008140:	3c3ff316 	blt	r7,r16,1008110 <___vfiprintf_internal_r+0x580>
 1008144:	da402517 	ldw	r9,148(sp)
 1008148:	e007883a 	mov	r3,fp
 100814c:	8039883a 	mov	fp,r16
 1008150:	1821883a 	mov	r16,r3
 1008154:	d8c02417 	ldw	r3,144(sp)
 1008158:	1705883a 	add	r2,r2,fp
 100815c:	47000115 	stw	fp,4(r8)
 1008160:	40c00015 	stw	r3,0(r8)
 1008164:	d8801c15 	stw	r2,112(sp)
 1008168:	d9801b15 	stw	r6,108(sp)
 100816c:	00c001c4 	movi	r3,7
 1008170:	19827616 	blt	r3,r6,1008b4c <___vfiprintf_internal_r+0xfbc>
 1008174:	4cf9c83a 	sub	fp,r9,r19
 1008178:	42000204 	addi	r8,r8,8
 100817c:	31000044 	addi	r4,r6,1
 1008180:	300b883a 	mov	r5,r6
 1008184:	07018516 	blt	zero,fp,100879c <___vfiprintf_internal_r+0xc0c>
 1008188:	9885883a 	add	r2,r19,r2
 100818c:	45400015 	stw	r21,0(r8)
 1008190:	44c00115 	stw	r19,4(r8)
 1008194:	d8801c15 	stw	r2,112(sp)
 1008198:	d9001b15 	stw	r4,108(sp)
 100819c:	00c001c4 	movi	r3,7
 10081a0:	1901dd0e 	bge	r3,r4,1008918 <___vfiprintf_internal_r+0xd88>
 10081a4:	1002401e 	bne	r2,zero,1008aa8 <___vfiprintf_internal_r+0xf18>
 10081a8:	d8001b15 	stw	zero,108(sp)
 10081ac:	a2c0010c 	andi	r11,r20,4
 10081b0:	58000226 	beq	r11,zero,10081bc <___vfiprintf_internal_r+0x62c>
 10081b4:	8ca7c83a 	sub	r19,r17,r18
 10081b8:	04c2f216 	blt	zero,r19,1008d84 <___vfiprintf_internal_r+0x11f4>
 10081bc:	8c80010e 	bge	r17,r18,10081c4 <___vfiprintf_internal_r+0x634>
 10081c0:	9023883a 	mov	r17,r18
 10081c4:	da802317 	ldw	r10,140(sp)
 10081c8:	5455883a 	add	r10,r10,r17
 10081cc:	da802315 	stw	r10,140(sp)
 10081d0:	d8001b15 	stw	zero,108(sp)
 10081d4:	d811883a 	mov	r8,sp
 10081d8:	003ea206 	br	1007c64 <___vfiprintf_internal_r+0xd4>
 10081dc:	a5000814 	ori	r20,r20,32
 10081e0:	80c00007 	ldb	r3,0(r16)
 10081e4:	003ec906 	br	1007d0c <___vfiprintf_internal_r+0x17c>
 10081e8:	80c00007 	ldb	r3,0(r16)
 10081ec:	1b030926 	beq	r3,r12,1008e14 <___vfiprintf_internal_r+0x1284>
 10081f0:	a5000414 	ori	r20,r20,16
 10081f4:	003ec506 	br	1007d0c <___vfiprintf_internal_r+0x17c>
 10081f8:	21003fcc 	andi	r4,r4,255
 10081fc:	20035e1e 	bne	r4,zero,1008f78 <___vfiprintf_internal_r+0x13e8>
 1008200:	a080080c 	andi	r2,r20,32
 1008204:	1002a526 	beq	r2,zero,1008c9c <___vfiprintf_internal_r+0x110c>
 1008208:	da802217 	ldw	r10,136(sp)
 100820c:	50800017 	ldw	r2,0(r10)
 1008210:	da802317 	ldw	r10,140(sp)
 1008214:	5007d7fa 	srai	r3,r10,31
 1008218:	da802217 	ldw	r10,136(sp)
 100821c:	10c00115 	stw	r3,4(r2)
 1008220:	52800104 	addi	r10,r10,4
 1008224:	da802215 	stw	r10,136(sp)
 1008228:	da802317 	ldw	r10,140(sp)
 100822c:	12800015 	stw	r10,0(r2)
 1008230:	003e8c06 	br	1007c64 <___vfiprintf_internal_r+0xd4>
 1008234:	21003fcc 	andi	r4,r4,255
 1008238:	2003511e 	bne	r4,zero,1008f80 <___vfiprintf_internal_r+0x13f0>
 100823c:	a080080c 	andi	r2,r20,32
 1008240:	1000a126 	beq	r2,zero,10084c8 <___vfiprintf_internal_r+0x938>
 1008244:	da802217 	ldw	r10,136(sp)
 1008248:	d8001d85 	stb	zero,118(sp)
 100824c:	50800204 	addi	r2,r10,8
 1008250:	54800017 	ldw	r18,0(r10)
 1008254:	54c00117 	ldw	r19,4(r10)
 1008258:	4802b416 	blt	r9,zero,1008d2c <___vfiprintf_internal_r+0x119c>
 100825c:	013fdfc4 	movi	r4,-129
 1008260:	94c6b03a 	or	r3,r18,r19
 1008264:	d8802215 	stw	r2,136(sp)
 1008268:	a128703a 	and	r20,r20,r4
 100826c:	1800a226 	beq	r3,zero,10084f8 <___vfiprintf_internal_r+0x968>
 1008270:	0039883a 	mov	fp,zero
 1008274:	dd401a04 	addi	r21,sp,104
 1008278:	9006d0fa 	srli	r3,r18,3
 100827c:	9808977a 	slli	r4,r19,29
 1008280:	9826d0fa 	srli	r19,r19,3
 1008284:	948001cc 	andi	r18,r18,7
 1008288:	90800c04 	addi	r2,r18,48
 100828c:	ad7fffc4 	addi	r21,r21,-1
 1008290:	20e4b03a 	or	r18,r4,r3
 1008294:	a8800005 	stb	r2,0(r21)
 1008298:	94c6b03a 	or	r3,r18,r19
 100829c:	183ff61e 	bne	r3,zero,1008278 <___vfiprintf_internal_r+0x6e8>
 10082a0:	a0c0004c 	andi	r3,r20,1
 10082a4:	18005926 	beq	r3,zero,100840c <___vfiprintf_internal_r+0x87c>
 10082a8:	10803fcc 	andi	r2,r2,255
 10082ac:	1080201c 	xori	r2,r2,128
 10082b0:	10bfe004 	addi	r2,r2,-128
 10082b4:	00c00c04 	movi	r3,48
 10082b8:	10c05426 	beq	r2,r3,100840c <___vfiprintf_internal_r+0x87c>
 10082bc:	da801e17 	ldw	r10,120(sp)
 10082c0:	a8bfffc4 	addi	r2,r21,-1
 10082c4:	a8ffffc5 	stb	r3,-1(r21)
 10082c8:	50a7c83a 	sub	r19,r10,r2
 10082cc:	102b883a 	mov	r21,r2
 10082d0:	003f2f06 	br	1007f90 <___vfiprintf_internal_r+0x400>
 10082d4:	21003fcc 	andi	r4,r4,255
 10082d8:	2003421e 	bne	r4,zero,1008fe4 <___vfiprintf_internal_r+0x1454>
 10082dc:	00804074 	movhi	r2,257
 10082e0:	10bcee04 	addi	r2,r2,-3144
 10082e4:	d8802615 	stw	r2,152(sp)
 10082e8:	a080080c 	andi	r2,r20,32
 10082ec:	1000aa26 	beq	r2,zero,1008598 <___vfiprintf_internal_r+0xa08>
 10082f0:	da802217 	ldw	r10,136(sp)
 10082f4:	54800017 	ldw	r18,0(r10)
 10082f8:	54c00117 	ldw	r19,4(r10)
 10082fc:	52800204 	addi	r10,r10,8
 1008300:	da802215 	stw	r10,136(sp)
 1008304:	a080004c 	andi	r2,r20,1
 1008308:	1001d226 	beq	r2,zero,1008a54 <___vfiprintf_internal_r+0xec4>
 100830c:	94c4b03a 	or	r2,r18,r19
 1008310:	1002351e 	bne	r2,zero,1008be8 <___vfiprintf_internal_r+0x1058>
 1008314:	d8001d85 	stb	zero,118(sp)
 1008318:	48022216 	blt	r9,zero,1008ba4 <___vfiprintf_internal_r+0x1014>
 100831c:	00bfdfc4 	movi	r2,-129
 1008320:	a0a8703a 	and	r20,r20,r2
 1008324:	003f1506 	br	1007f7c <___vfiprintf_internal_r+0x3ec>
 1008328:	da802217 	ldw	r10,136(sp)
 100832c:	04800044 	movi	r18,1
 1008330:	d8001d85 	stb	zero,118(sp)
 1008334:	50800017 	ldw	r2,0(r10)
 1008338:	52800104 	addi	r10,r10,4
 100833c:	da802215 	stw	r10,136(sp)
 1008340:	d8801005 	stb	r2,64(sp)
 1008344:	9027883a 	mov	r19,r18
 1008348:	dd401004 	addi	r21,sp,64
 100834c:	0013883a 	mov	r9,zero
 1008350:	003f1706 	br	1007fb0 <___vfiprintf_internal_r+0x420>
 1008354:	21003fcc 	andi	r4,r4,255
 1008358:	2003201e 	bne	r4,zero,1008fdc <___vfiprintf_internal_r+0x144c>
 100835c:	a080080c 	andi	r2,r20,32
 1008360:	10004b26 	beq	r2,zero,1008490 <___vfiprintf_internal_r+0x900>
 1008364:	da802217 	ldw	r10,136(sp)
 1008368:	50800117 	ldw	r2,4(r10)
 100836c:	54800017 	ldw	r18,0(r10)
 1008370:	52800204 	addi	r10,r10,8
 1008374:	da802215 	stw	r10,136(sp)
 1008378:	1027883a 	mov	r19,r2
 100837c:	10022c16 	blt	r2,zero,1008c30 <___vfiprintf_internal_r+0x10a0>
 1008380:	df001d83 	ldbu	fp,118(sp)
 1008384:	48007216 	blt	r9,zero,1008550 <___vfiprintf_internal_r+0x9c0>
 1008388:	00ffdfc4 	movi	r3,-129
 100838c:	94c4b03a 	or	r2,r18,r19
 1008390:	a0e8703a 	and	r20,r20,r3
 1008394:	1000cc26 	beq	r2,zero,10086c8 <___vfiprintf_internal_r+0xb38>
 1008398:	98021026 	beq	r19,zero,1008bdc <___vfiprintf_internal_r+0x104c>
 100839c:	dc402415 	stw	r17,144(sp)
 10083a0:	dc002515 	stw	r16,148(sp)
 10083a4:	9823883a 	mov	r17,r19
 10083a8:	9021883a 	mov	r16,r18
 10083ac:	dd401a04 	addi	r21,sp,104
 10083b0:	4825883a 	mov	r18,r9
 10083b4:	4027883a 	mov	r19,r8
 10083b8:	8009883a 	mov	r4,r16
 10083bc:	880b883a 	mov	r5,r17
 10083c0:	01800284 	movi	r6,10
 10083c4:	000f883a 	mov	r7,zero
 10083c8:	1009f700 	call	1009f70 <__umoddi3>
 10083cc:	10800c04 	addi	r2,r2,48
 10083d0:	ad7fffc4 	addi	r21,r21,-1
 10083d4:	8009883a 	mov	r4,r16
 10083d8:	880b883a 	mov	r5,r17
 10083dc:	a8800005 	stb	r2,0(r21)
 10083e0:	01800284 	movi	r6,10
 10083e4:	000f883a 	mov	r7,zero
 10083e8:	10099f80 	call	10099f8 <__udivdi3>
 10083ec:	1021883a 	mov	r16,r2
 10083f0:	10c4b03a 	or	r2,r2,r3
 10083f4:	1823883a 	mov	r17,r3
 10083f8:	103fef1e 	bne	r2,zero,10083b8 <___vfiprintf_internal_r+0x828>
 10083fc:	dc402417 	ldw	r17,144(sp)
 1008400:	dc002517 	ldw	r16,148(sp)
 1008404:	9013883a 	mov	r9,r18
 1008408:	9811883a 	mov	r8,r19
 100840c:	da801e17 	ldw	r10,120(sp)
 1008410:	5567c83a 	sub	r19,r10,r21
 1008414:	003ede06 	br	1007f90 <___vfiprintf_internal_r+0x400>
 1008418:	38803fcc 	andi	r2,r7,255
 100841c:	1080201c 	xori	r2,r2,128
 1008420:	10bfe004 	addi	r2,r2,-128
 1008424:	1002371e 	bne	r2,zero,1008d04 <___vfiprintf_internal_r+0x1174>
 1008428:	01000044 	movi	r4,1
 100842c:	01c00804 	movi	r7,32
 1008430:	80c00007 	ldb	r3,0(r16)
 1008434:	003e3506 	br	1007d0c <___vfiprintf_internal_r+0x17c>
 1008438:	a5000054 	ori	r20,r20,1
 100843c:	80c00007 	ldb	r3,0(r16)
 1008440:	003e3206 	br	1007d0c <___vfiprintf_internal_r+0x17c>
 1008444:	a5002014 	ori	r20,r20,128
 1008448:	80c00007 	ldb	r3,0(r16)
 100844c:	003e2f06 	br	1007d0c <___vfiprintf_internal_r+0x17c>
 1008450:	8015883a 	mov	r10,r16
 1008454:	0023883a 	mov	r17,zero
 1008458:	18bff404 	addi	r2,r3,-48
 100845c:	50c00007 	ldb	r3,0(r10)
 1008460:	8c4002a4 	muli	r17,r17,10
 1008464:	84000044 	addi	r16,r16,1
 1008468:	8015883a 	mov	r10,r16
 100846c:	1463883a 	add	r17,r2,r17
 1008470:	18bff404 	addi	r2,r3,-48
 1008474:	30bff92e 	bgeu	r6,r2,100845c <___vfiprintf_internal_r+0x8cc>
 1008478:	003e2506 	br	1007d10 <___vfiprintf_internal_r+0x180>
 100847c:	21003fcc 	andi	r4,r4,255
 1008480:	2002d41e 	bne	r4,zero,1008fd4 <___vfiprintf_internal_r+0x1444>
 1008484:	a5000414 	ori	r20,r20,16
 1008488:	a080080c 	andi	r2,r20,32
 100848c:	103fb51e 	bne	r2,zero,1008364 <___vfiprintf_internal_r+0x7d4>
 1008490:	a080040c 	andi	r2,r20,16
 1008494:	1001f826 	beq	r2,zero,1008c78 <___vfiprintf_internal_r+0x10e8>
 1008498:	da802217 	ldw	r10,136(sp)
 100849c:	54800017 	ldw	r18,0(r10)
 10084a0:	52800104 	addi	r10,r10,4
 10084a4:	da802215 	stw	r10,136(sp)
 10084a8:	9027d7fa 	srai	r19,r18,31
 10084ac:	9805883a 	mov	r2,r19
 10084b0:	003fb206 	br	100837c <___vfiprintf_internal_r+0x7ec>
 10084b4:	21003fcc 	andi	r4,r4,255
 10084b8:	2002c41e 	bne	r4,zero,1008fcc <___vfiprintf_internal_r+0x143c>
 10084bc:	a5000414 	ori	r20,r20,16
 10084c0:	a080080c 	andi	r2,r20,32
 10084c4:	103f5f1e 	bne	r2,zero,1008244 <___vfiprintf_internal_r+0x6b4>
 10084c8:	a080040c 	andi	r2,r20,16
 10084cc:	10020f26 	beq	r2,zero,1008d0c <___vfiprintf_internal_r+0x117c>
 10084d0:	da802217 	ldw	r10,136(sp)
 10084d4:	d8001d85 	stb	zero,118(sp)
 10084d8:	0027883a 	mov	r19,zero
 10084dc:	50800104 	addi	r2,r10,4
 10084e0:	54800017 	ldw	r18,0(r10)
 10084e4:	48021116 	blt	r9,zero,1008d2c <___vfiprintf_internal_r+0x119c>
 10084e8:	00ffdfc4 	movi	r3,-129
 10084ec:	d8802215 	stw	r2,136(sp)
 10084f0:	a0e8703a 	and	r20,r20,r3
 10084f4:	903f5e1e 	bne	r18,zero,1008270 <___vfiprintf_internal_r+0x6e0>
 10084f8:	0039883a 	mov	fp,zero
 10084fc:	4802a626 	beq	r9,zero,1008f98 <___vfiprintf_internal_r+0x1408>
 1008500:	0025883a 	mov	r18,zero
 1008504:	0027883a 	mov	r19,zero
 1008508:	003f5a06 	br	1008274 <___vfiprintf_internal_r+0x6e4>
 100850c:	21003fcc 	andi	r4,r4,255
 1008510:	20029f1e 	bne	r4,zero,1008f90 <___vfiprintf_internal_r+0x1400>
 1008514:	a5000414 	ori	r20,r20,16
 1008518:	a080080c 	andi	r2,r20,32
 100851c:	10005e1e 	bne	r2,zero,1008698 <___vfiprintf_internal_r+0xb08>
 1008520:	a080040c 	andi	r2,r20,16
 1008524:	1001a21e 	bne	r2,zero,1008bb0 <___vfiprintf_internal_r+0x1020>
 1008528:	a080100c 	andi	r2,r20,64
 100852c:	d8001d85 	stb	zero,118(sp)
 1008530:	da802217 	ldw	r10,136(sp)
 1008534:	1002231e 	bne	r2,zero,1008dc4 <___vfiprintf_internal_r+0x1234>
 1008538:	50800104 	addi	r2,r10,4
 100853c:	54800017 	ldw	r18,0(r10)
 1008540:	0027883a 	mov	r19,zero
 1008544:	4801a00e 	bge	r9,zero,1008bc8 <___vfiprintf_internal_r+0x1038>
 1008548:	d8802215 	stw	r2,136(sp)
 100854c:	0039883a 	mov	fp,zero
 1008550:	94c4b03a 	or	r2,r18,r19
 1008554:	103f901e 	bne	r2,zero,1008398 <___vfiprintf_internal_r+0x808>
 1008558:	00800044 	movi	r2,1
 100855c:	10803fcc 	andi	r2,r2,255
 1008560:	00c00044 	movi	r3,1
 1008564:	10c05926 	beq	r2,r3,10086cc <___vfiprintf_internal_r+0xb3c>
 1008568:	00c00084 	movi	r3,2
 100856c:	10ffe41e 	bne	r2,r3,1008500 <___vfiprintf_internal_r+0x970>
 1008570:	0025883a 	mov	r18,zero
 1008574:	0027883a 	mov	r19,zero
 1008578:	00013d06 	br	1008a70 <___vfiprintf_internal_r+0xee0>
 100857c:	21003fcc 	andi	r4,r4,255
 1008580:	2002811e 	bne	r4,zero,1008f88 <___vfiprintf_internal_r+0x13f8>
 1008584:	00804074 	movhi	r2,257
 1008588:	10bce904 	addi	r2,r2,-3164
 100858c:	d8802615 	stw	r2,152(sp)
 1008590:	a080080c 	andi	r2,r20,32
 1008594:	103f561e 	bne	r2,zero,10082f0 <___vfiprintf_internal_r+0x760>
 1008598:	a080040c 	andi	r2,r20,16
 100859c:	1001d126 	beq	r2,zero,1008ce4 <___vfiprintf_internal_r+0x1154>
 10085a0:	da802217 	ldw	r10,136(sp)
 10085a4:	0027883a 	mov	r19,zero
 10085a8:	54800017 	ldw	r18,0(r10)
 10085ac:	52800104 	addi	r10,r10,4
 10085b0:	da802215 	stw	r10,136(sp)
 10085b4:	003f5306 	br	1008304 <___vfiprintf_internal_r+0x774>
 10085b8:	da802217 	ldw	r10,136(sp)
 10085bc:	d8001d85 	stb	zero,118(sp)
 10085c0:	55400017 	ldw	r21,0(r10)
 10085c4:	50c00104 	addi	r3,r10,4
 10085c8:	a8024226 	beq	r21,zero,1008ed4 <___vfiprintf_internal_r+0x1344>
 10085cc:	48021816 	blt	r9,zero,1008e30 <___vfiprintf_internal_r+0x12a0>
 10085d0:	480d883a 	mov	r6,r9
 10085d4:	000b883a 	mov	r5,zero
 10085d8:	a809883a 	mov	r4,r21
 10085dc:	d8c02a15 	stw	r3,168(sp)
 10085e0:	da002b15 	stw	r8,172(sp)
 10085e4:	da402c15 	stw	r9,176(sp)
 10085e8:	1005d8c0 	call	1005d8c <memchr>
 10085ec:	d8c02a17 	ldw	r3,168(sp)
 10085f0:	da002b17 	ldw	r8,172(sp)
 10085f4:	da402c17 	ldw	r9,176(sp)
 10085f8:	10024826 	beq	r2,zero,1008f1c <___vfiprintf_internal_r+0x138c>
 10085fc:	1567c83a 	sub	r19,r2,r21
 1008600:	df001d83 	ldbu	fp,118(sp)
 1008604:	d8c02215 	stw	r3,136(sp)
 1008608:	0013883a 	mov	r9,zero
 100860c:	003e6006 	br	1007f90 <___vfiprintf_internal_r+0x400>
 1008610:	21003fcc 	andi	r4,r4,255
 1008614:	203fc026 	beq	r4,zero,1008518 <___vfiprintf_internal_r+0x988>
 1008618:	d9c01d85 	stb	r7,118(sp)
 100861c:	003fbe06 	br	1008518 <___vfiprintf_internal_r+0x988>
 1008620:	da802217 	ldw	r10,136(sp)
 1008624:	54400017 	ldw	r17,0(r10)
 1008628:	50800104 	addi	r2,r10,4
 100862c:	883e3b16 	blt	r17,zero,1007f1c <___vfiprintf_internal_r+0x38c>
 1008630:	d8802215 	stw	r2,136(sp)
 1008634:	80c00007 	ldb	r3,0(r16)
 1008638:	003db406 	br	1007d0c <___vfiprintf_internal_r+0x17c>
 100863c:	01000044 	movi	r4,1
 1008640:	01c00ac4 	movi	r7,43
 1008644:	80c00007 	ldb	r3,0(r16)
 1008648:	003db006 	br	1007d0c <___vfiprintf_internal_r+0x17c>
 100864c:	80c00007 	ldb	r3,0(r16)
 1008650:	82800044 	addi	r10,r16,1
 1008654:	1b423c26 	beq	r3,r13,1008f48 <___vfiprintf_internal_r+0x13b8>
 1008658:	18bff404 	addi	r2,r3,-48
 100865c:	0013883a 	mov	r9,zero
 1008660:	30822b36 	bltu	r6,r2,1008f10 <___vfiprintf_internal_r+0x1380>
 1008664:	50c00007 	ldb	r3,0(r10)
 1008668:	4a4002a4 	muli	r9,r9,10
 100866c:	54000044 	addi	r16,r10,1
 1008670:	8015883a 	mov	r10,r16
 1008674:	4893883a 	add	r9,r9,r2
 1008678:	18bff404 	addi	r2,r3,-48
 100867c:	30bff92e 	bgeu	r6,r2,1008664 <___vfiprintf_internal_r+0xad4>
 1008680:	483da30e 	bge	r9,zero,1007d10 <___vfiprintf_internal_r+0x180>
 1008684:	027fffc4 	movi	r9,-1
 1008688:	003da106 	br	1007d10 <___vfiprintf_internal_r+0x180>
 100868c:	a5001014 	ori	r20,r20,64
 1008690:	80c00007 	ldb	r3,0(r16)
 1008694:	003d9d06 	br	1007d0c <___vfiprintf_internal_r+0x17c>
 1008698:	da802217 	ldw	r10,136(sp)
 100869c:	d8001d85 	stb	zero,118(sp)
 10086a0:	50c00204 	addi	r3,r10,8
 10086a4:	54800017 	ldw	r18,0(r10)
 10086a8:	54c00117 	ldw	r19,4(r10)
 10086ac:	4801ca16 	blt	r9,zero,1008dd8 <___vfiprintf_internal_r+0x1248>
 10086b0:	013fdfc4 	movi	r4,-129
 10086b4:	94c4b03a 	or	r2,r18,r19
 10086b8:	d8c02215 	stw	r3,136(sp)
 10086bc:	a128703a 	and	r20,r20,r4
 10086c0:	0039883a 	mov	fp,zero
 10086c4:	103f341e 	bne	r2,zero,1008398 <___vfiprintf_internal_r+0x808>
 10086c8:	483e2e26 	beq	r9,zero,1007f84 <___vfiprintf_internal_r+0x3f4>
 10086cc:	0025883a 	mov	r18,zero
 10086d0:	94800c04 	addi	r18,r18,48
 10086d4:	dc8019c5 	stb	r18,103(sp)
 10086d8:	dcc02717 	ldw	r19,156(sp)
 10086dc:	dd4019c4 	addi	r21,sp,103
 10086e0:	003e2b06 	br	1007f90 <___vfiprintf_internal_r+0x400>
 10086e4:	21003fcc 	andi	r4,r4,255
 10086e8:	2002361e 	bne	r4,zero,1008fc4 <___vfiprintf_internal_r+0x1434>
 10086ec:	1801c126 	beq	r3,zero,1008df4 <___vfiprintf_internal_r+0x1264>
 10086f0:	04800044 	movi	r18,1
 10086f4:	d8c01005 	stb	r3,64(sp)
 10086f8:	d8001d85 	stb	zero,118(sp)
 10086fc:	9027883a 	mov	r19,r18
 1008700:	dd401004 	addi	r21,sp,64
 1008704:	003f1106 	br	100834c <___vfiprintf_internal_r+0x7bc>
 1008708:	d9402117 	ldw	r5,132(sp)
 100870c:	d9002017 	ldw	r4,128(sp)
 1008710:	d9801a04 	addi	r6,sp,104
 1008714:	d9c02b15 	stw	r7,172(sp)
 1008718:	dbc02a15 	stw	r15,168(sp)
 100871c:	1007a7c0 	call	1007a7c <__sprint_r.part.0>
 1008720:	d9c02b17 	ldw	r7,172(sp)
 1008724:	dbc02a17 	ldw	r15,168(sp)
 1008728:	10006d1e 	bne	r2,zero,10088e0 <___vfiprintf_internal_r+0xd50>
 100872c:	d9801b17 	ldw	r6,108(sp)
 1008730:	d8801c17 	ldw	r2,112(sp)
 1008734:	d811883a 	mov	r8,sp
 1008738:	31400044 	addi	r5,r6,1
 100873c:	003e3306 	br	100800c <___vfiprintf_internal_r+0x47c>
 1008740:	d9401b17 	ldw	r5,108(sp)
 1008744:	d8801c17 	ldw	r2,112(sp)
 1008748:	29000044 	addi	r4,r5,1
 100874c:	d8c01d87 	ldb	r3,118(sp)
 1008750:	183e4d26 	beq	r3,zero,1008088 <___vfiprintf_internal_r+0x4f8>
 1008754:	00c00044 	movi	r3,1
 1008758:	d9401d84 	addi	r5,sp,118
 100875c:	10c5883a 	add	r2,r2,r3
 1008760:	41400015 	stw	r5,0(r8)
 1008764:	40c00115 	stw	r3,4(r8)
 1008768:	d8801c15 	stw	r2,112(sp)
 100876c:	d9001b15 	stw	r4,108(sp)
 1008770:	014001c4 	movi	r5,7
 1008774:	2900a90e 	bge	r5,r4,1008a1c <___vfiprintf_internal_r+0xe8c>
 1008778:	1000da1e 	bne	r2,zero,1008ae4 <___vfiprintf_internal_r+0xf54>
 100877c:	7000ab1e 	bne	r14,zero,1008a2c <___vfiprintf_internal_r+0xe9c>
 1008780:	000b883a 	mov	r5,zero
 1008784:	1809883a 	mov	r4,r3
 1008788:	d811883a 	mov	r8,sp
 100878c:	00c02004 	movi	r3,128
 1008790:	e0fe4d26 	beq	fp,r3,10080c8 <___vfiprintf_internal_r+0x538>
 1008794:	4cf9c83a 	sub	fp,r9,r19
 1008798:	073e7b0e 	bge	zero,fp,1008188 <___vfiprintf_internal_r+0x5f8>
 100879c:	01c00404 	movi	r7,16
 10087a0:	3f01900e 	bge	r7,fp,1008de4 <___vfiprintf_internal_r+0x1254>
 10087a4:	00c04074 	movhi	r3,257
 10087a8:	18fd4f04 	addi	r3,r3,-2756
 10087ac:	d8c02415 	stw	r3,144(sp)
 10087b0:	034001c4 	movi	r13,7
 10087b4:	00000506 	br	10087cc <___vfiprintf_internal_r+0xc3c>
 10087b8:	29000084 	addi	r4,r5,2
 10087bc:	42000204 	addi	r8,r8,8
 10087c0:	180b883a 	mov	r5,r3
 10087c4:	e73ffc04 	addi	fp,fp,-16
 10087c8:	3f000d0e 	bge	r7,fp,1008800 <___vfiprintf_internal_r+0xc70>
 10087cc:	10800404 	addi	r2,r2,16
 10087d0:	28c00044 	addi	r3,r5,1
 10087d4:	45c00015 	stw	r23,0(r8)
 10087d8:	41c00115 	stw	r7,4(r8)
 10087dc:	d8801c15 	stw	r2,112(sp)
 10087e0:	d8c01b15 	stw	r3,108(sp)
 10087e4:	68fff40e 	bge	r13,r3,10087b8 <___vfiprintf_internal_r+0xc28>
 10087e8:	1000101e 	bne	r2,zero,100882c <___vfiprintf_internal_r+0xc9c>
 10087ec:	e73ffc04 	addi	fp,fp,-16
 10087f0:	01000044 	movi	r4,1
 10087f4:	000b883a 	mov	r5,zero
 10087f8:	d811883a 	mov	r8,sp
 10087fc:	3f3ff316 	blt	r7,fp,10087cc <___vfiprintf_internal_r+0xc3c>
 1008800:	da802417 	ldw	r10,144(sp)
 1008804:	1705883a 	add	r2,r2,fp
 1008808:	47000115 	stw	fp,4(r8)
 100880c:	42800015 	stw	r10,0(r8)
 1008810:	d8801c15 	stw	r2,112(sp)
 1008814:	d9001b15 	stw	r4,108(sp)
 1008818:	00c001c4 	movi	r3,7
 100881c:	19003616 	blt	r3,r4,10088f8 <___vfiprintf_internal_r+0xd68>
 1008820:	42000204 	addi	r8,r8,8
 1008824:	21000044 	addi	r4,r4,1
 1008828:	003e5706 	br	1008188 <___vfiprintf_internal_r+0x5f8>
 100882c:	d9402117 	ldw	r5,132(sp)
 1008830:	d9002017 	ldw	r4,128(sp)
 1008834:	d9801a04 	addi	r6,sp,104
 1008838:	d9c02b15 	stw	r7,172(sp)
 100883c:	db402a15 	stw	r13,168(sp)
 1008840:	1007a7c0 	call	1007a7c <__sprint_r.part.0>
 1008844:	d9c02b17 	ldw	r7,172(sp)
 1008848:	db402a17 	ldw	r13,168(sp)
 100884c:	1000241e 	bne	r2,zero,10088e0 <___vfiprintf_internal_r+0xd50>
 1008850:	d9401b17 	ldw	r5,108(sp)
 1008854:	d8801c17 	ldw	r2,112(sp)
 1008858:	d811883a 	mov	r8,sp
 100885c:	29000044 	addi	r4,r5,1
 1008860:	003fd806 	br	10087c4 <___vfiprintf_internal_r+0xc34>
 1008864:	d9401b17 	ldw	r5,108(sp)
 1008868:	00c04074 	movhi	r3,257
 100886c:	18fd5304 	addi	r3,r3,-2740
 1008870:	d8c02415 	stw	r3,144(sp)
 1008874:	29400044 	addi	r5,r5,1
 1008878:	d8c02417 	ldw	r3,144(sp)
 100887c:	14c5883a 	add	r2,r2,r19
 1008880:	44c00115 	stw	r19,4(r8)
 1008884:	40c00015 	stw	r3,0(r8)
 1008888:	d8801c15 	stw	r2,112(sp)
 100888c:	d9401b15 	stw	r5,108(sp)
 1008890:	00c001c4 	movi	r3,7
 1008894:	1940070e 	bge	r3,r5,10088b4 <___vfiprintf_internal_r+0xd24>
 1008898:	103e4826 	beq	r2,zero,10081bc <___vfiprintf_internal_r+0x62c>
 100889c:	d9402117 	ldw	r5,132(sp)
 10088a0:	d9002017 	ldw	r4,128(sp)
 10088a4:	d9801a04 	addi	r6,sp,104
 10088a8:	1007a7c0 	call	1007a7c <__sprint_r.part.0>
 10088ac:	10000c1e 	bne	r2,zero,10088e0 <___vfiprintf_internal_r+0xd50>
 10088b0:	d8801c17 	ldw	r2,112(sp)
 10088b4:	8c80010e 	bge	r17,r18,10088bc <___vfiprintf_internal_r+0xd2c>
 10088b8:	9023883a 	mov	r17,r18
 10088bc:	da802317 	ldw	r10,140(sp)
 10088c0:	5455883a 	add	r10,r10,r17
 10088c4:	da802315 	stw	r10,140(sp)
 10088c8:	103e4126 	beq	r2,zero,10081d0 <___vfiprintf_internal_r+0x640>
 10088cc:	d9402117 	ldw	r5,132(sp)
 10088d0:	d9002017 	ldw	r4,128(sp)
 10088d4:	d9801a04 	addi	r6,sp,104
 10088d8:	1007a7c0 	call	1007a7c <__sprint_r.part.0>
 10088dc:	103e3c26 	beq	r2,zero,10081d0 <___vfiprintf_internal_r+0x640>
 10088e0:	dd002117 	ldw	r20,132(sp)
 10088e4:	a080030b 	ldhu	r2,12(r20)
 10088e8:	1080100c 	andi	r2,r2,64
 10088ec:	1001231e 	bne	r2,zero,1008d7c <___vfiprintf_internal_r+0x11ec>
 10088f0:	d8802317 	ldw	r2,140(sp)
 10088f4:	003d7b06 	br	1007ee4 <___vfiprintf_internal_r+0x354>
 10088f8:	1000991e 	bne	r2,zero,1008b60 <___vfiprintf_internal_r+0xfd0>
 10088fc:	00c00044 	movi	r3,1
 1008900:	9805883a 	mov	r2,r19
 1008904:	dd400015 	stw	r21,0(sp)
 1008908:	dcc00115 	stw	r19,4(sp)
 100890c:	dcc01c15 	stw	r19,112(sp)
 1008910:	d8c01b15 	stw	r3,108(sp)
 1008914:	d811883a 	mov	r8,sp
 1008918:	42000204 	addi	r8,r8,8
 100891c:	a2c0010c 	andi	r11,r20,4
 1008920:	583fe426 	beq	r11,zero,10088b4 <___vfiprintf_internal_r+0xd24>
 1008924:	8ca7c83a 	sub	r19,r17,r18
 1008928:	04ffe20e 	bge	zero,r19,10088b4 <___vfiprintf_internal_r+0xd24>
 100892c:	01c00404 	movi	r7,16
 1008930:	3cffcc0e 	bge	r7,r19,1008864 <___vfiprintf_internal_r+0xcd4>
 1008934:	02804074 	movhi	r10,257
 1008938:	52bd5304 	addi	r10,r10,-2740
 100893c:	d9001b17 	ldw	r4,108(sp)
 1008940:	da802415 	stw	r10,144(sp)
 1008944:	382b883a 	mov	r21,r7
 1008948:	050001c4 	movi	r20,7
 100894c:	df002017 	ldw	fp,128(sp)
 1008950:	00000506 	br	1008968 <___vfiprintf_internal_r+0xdd8>
 1008954:	21400084 	addi	r5,r4,2
 1008958:	42000204 	addi	r8,r8,8
 100895c:	1809883a 	mov	r4,r3
 1008960:	9cfffc04 	addi	r19,r19,-16
 1008964:	acffc40e 	bge	r21,r19,1008878 <___vfiprintf_internal_r+0xce8>
 1008968:	10800404 	addi	r2,r2,16
 100896c:	20c00044 	addi	r3,r4,1
 1008970:	45800015 	stw	r22,0(r8)
 1008974:	45400115 	stw	r21,4(r8)
 1008978:	d8801c15 	stw	r2,112(sp)
 100897c:	d8c01b15 	stw	r3,108(sp)
 1008980:	a0fff40e 	bge	r20,r3,1008954 <___vfiprintf_internal_r+0xdc4>
 1008984:	1000041e 	bne	r2,zero,1008998 <___vfiprintf_internal_r+0xe08>
 1008988:	01400044 	movi	r5,1
 100898c:	0009883a 	mov	r4,zero
 1008990:	d811883a 	mov	r8,sp
 1008994:	003ff206 	br	1008960 <___vfiprintf_internal_r+0xdd0>
 1008998:	d9402117 	ldw	r5,132(sp)
 100899c:	d9801a04 	addi	r6,sp,104
 10089a0:	e009883a 	mov	r4,fp
 10089a4:	1007a7c0 	call	1007a7c <__sprint_r.part.0>
 10089a8:	103fcd1e 	bne	r2,zero,10088e0 <___vfiprintf_internal_r+0xd50>
 10089ac:	d9001b17 	ldw	r4,108(sp)
 10089b0:	d8801c17 	ldw	r2,112(sp)
 10089b4:	d811883a 	mov	r8,sp
 10089b8:	21400044 	addi	r5,r4,1
 10089bc:	003fe806 	br	1008960 <___vfiprintf_internal_r+0xdd0>
 10089c0:	d9402117 	ldw	r5,132(sp)
 10089c4:	d9002017 	ldw	r4,128(sp)
 10089c8:	d9801a04 	addi	r6,sp,104
 10089cc:	d9c02b15 	stw	r7,172(sp)
 10089d0:	db402a15 	stw	r13,168(sp)
 10089d4:	1007a7c0 	call	1007a7c <__sprint_r.part.0>
 10089d8:	d9c02b17 	ldw	r7,172(sp)
 10089dc:	db402a17 	ldw	r13,168(sp)
 10089e0:	103fbf1e 	bne	r2,zero,10088e0 <___vfiprintf_internal_r+0xd50>
 10089e4:	d9401b17 	ldw	r5,108(sp)
 10089e8:	d8801c17 	ldw	r2,112(sp)
 10089ec:	d811883a 	mov	r8,sp
 10089f0:	29800044 	addi	r6,r5,1
 10089f4:	003dc406 	br	1008108 <___vfiprintf_internal_r+0x578>
 10089f8:	1000d21e 	bne	r2,zero,1008d44 <___vfiprintf_internal_r+0x11b4>
 10089fc:	d8c01d87 	ldb	r3,118(sp)
 1008a00:	18009526 	beq	r3,zero,1008c58 <___vfiprintf_internal_r+0x10c8>
 1008a04:	00800044 	movi	r2,1
 1008a08:	d8c01d84 	addi	r3,sp,118
 1008a0c:	1009883a 	mov	r4,r2
 1008a10:	d8c00015 	stw	r3,0(sp)
 1008a14:	d8800115 	stw	r2,4(sp)
 1008a18:	d811883a 	mov	r8,sp
 1008a1c:	200b883a 	mov	r5,r4
 1008a20:	42000204 	addi	r8,r8,8
 1008a24:	21000044 	addi	r4,r4,1
 1008a28:	003d9706 	br	1008088 <___vfiprintf_internal_r+0x4f8>
 1008a2c:	d9001d04 	addi	r4,sp,116
 1008a30:	00800084 	movi	r2,2
 1008a34:	d9000015 	stw	r4,0(sp)
 1008a38:	d8800115 	stw	r2,4(sp)
 1008a3c:	1809883a 	mov	r4,r3
 1008a40:	d811883a 	mov	r8,sp
 1008a44:	200b883a 	mov	r5,r4
 1008a48:	42000204 	addi	r8,r8,8
 1008a4c:	21000044 	addi	r4,r4,1
 1008a50:	003f4e06 	br	100878c <___vfiprintf_internal_r+0xbfc>
 1008a54:	d8001d85 	stb	zero,118(sp)
 1008a58:	48005016 	blt	r9,zero,1008b9c <___vfiprintf_internal_r+0x100c>
 1008a5c:	00ffdfc4 	movi	r3,-129
 1008a60:	94c4b03a 	or	r2,r18,r19
 1008a64:	a0e8703a 	and	r20,r20,r3
 1008a68:	103d4426 	beq	r2,zero,1007f7c <___vfiprintf_internal_r+0x3ec>
 1008a6c:	0039883a 	mov	fp,zero
 1008a70:	d9002617 	ldw	r4,152(sp)
 1008a74:	dd401a04 	addi	r21,sp,104
 1008a78:	908003cc 	andi	r2,r18,15
 1008a7c:	9806973a 	slli	r3,r19,28
 1008a80:	2085883a 	add	r2,r4,r2
 1008a84:	9024d13a 	srli	r18,r18,4
 1008a88:	10800003 	ldbu	r2,0(r2)
 1008a8c:	9826d13a 	srli	r19,r19,4
 1008a90:	ad7fffc4 	addi	r21,r21,-1
 1008a94:	1ca4b03a 	or	r18,r3,r18
 1008a98:	a8800005 	stb	r2,0(r21)
 1008a9c:	94c4b03a 	or	r2,r18,r19
 1008aa0:	103ff51e 	bne	r2,zero,1008a78 <___vfiprintf_internal_r+0xee8>
 1008aa4:	003e5906 	br	100840c <___vfiprintf_internal_r+0x87c>
 1008aa8:	d9402117 	ldw	r5,132(sp)
 1008aac:	d9002017 	ldw	r4,128(sp)
 1008ab0:	d9801a04 	addi	r6,sp,104
 1008ab4:	1007a7c0 	call	1007a7c <__sprint_r.part.0>
 1008ab8:	103f891e 	bne	r2,zero,10088e0 <___vfiprintf_internal_r+0xd50>
 1008abc:	d8801c17 	ldw	r2,112(sp)
 1008ac0:	d811883a 	mov	r8,sp
 1008ac4:	003f9506 	br	100891c <___vfiprintf_internal_r+0xd8c>
 1008ac8:	d9402117 	ldw	r5,132(sp)
 1008acc:	d9002017 	ldw	r4,128(sp)
 1008ad0:	d9801a04 	addi	r6,sp,104
 1008ad4:	1007a7c0 	call	1007a7c <__sprint_r.part.0>
 1008ad8:	103f811e 	bne	r2,zero,10088e0 <___vfiprintf_internal_r+0xd50>
 1008adc:	d811883a 	mov	r8,sp
 1008ae0:	003ced06 	br	1007e98 <___vfiprintf_internal_r+0x308>
 1008ae4:	d9402117 	ldw	r5,132(sp)
 1008ae8:	d9002017 	ldw	r4,128(sp)
 1008aec:	d9801a04 	addi	r6,sp,104
 1008af0:	da402c15 	stw	r9,176(sp)
 1008af4:	db802a15 	stw	r14,168(sp)
 1008af8:	1007a7c0 	call	1007a7c <__sprint_r.part.0>
 1008afc:	da402c17 	ldw	r9,176(sp)
 1008b00:	db802a17 	ldw	r14,168(sp)
 1008b04:	103f761e 	bne	r2,zero,10088e0 <___vfiprintf_internal_r+0xd50>
 1008b08:	d9401b17 	ldw	r5,108(sp)
 1008b0c:	d8801c17 	ldw	r2,112(sp)
 1008b10:	d811883a 	mov	r8,sp
 1008b14:	29000044 	addi	r4,r5,1
 1008b18:	003d5b06 	br	1008088 <___vfiprintf_internal_r+0x4f8>
 1008b1c:	d9402117 	ldw	r5,132(sp)
 1008b20:	d9002017 	ldw	r4,128(sp)
 1008b24:	d9801a04 	addi	r6,sp,104
 1008b28:	da402c15 	stw	r9,176(sp)
 1008b2c:	1007a7c0 	call	1007a7c <__sprint_r.part.0>
 1008b30:	da402c17 	ldw	r9,176(sp)
 1008b34:	103f6a1e 	bne	r2,zero,10088e0 <___vfiprintf_internal_r+0xd50>
 1008b38:	d9401b17 	ldw	r5,108(sp)
 1008b3c:	d8801c17 	ldw	r2,112(sp)
 1008b40:	d811883a 	mov	r8,sp
 1008b44:	29000044 	addi	r4,r5,1
 1008b48:	003f1006 	br	100878c <___vfiprintf_internal_r+0xbfc>
 1008b4c:	1000c31e 	bne	r2,zero,1008e5c <___vfiprintf_internal_r+0x12cc>
 1008b50:	01000044 	movi	r4,1
 1008b54:	000b883a 	mov	r5,zero
 1008b58:	d811883a 	mov	r8,sp
 1008b5c:	003f0d06 	br	1008794 <___vfiprintf_internal_r+0xc04>
 1008b60:	d9402117 	ldw	r5,132(sp)
 1008b64:	d9002017 	ldw	r4,128(sp)
 1008b68:	d9801a04 	addi	r6,sp,104
 1008b6c:	1007a7c0 	call	1007a7c <__sprint_r.part.0>
 1008b70:	103f5b1e 	bne	r2,zero,10088e0 <___vfiprintf_internal_r+0xd50>
 1008b74:	d9001b17 	ldw	r4,108(sp)
 1008b78:	d8801c17 	ldw	r2,112(sp)
 1008b7c:	d811883a 	mov	r8,sp
 1008b80:	21000044 	addi	r4,r4,1
 1008b84:	003d8006 	br	1008188 <___vfiprintf_internal_r+0x5f8>
 1008b88:	01004074 	movhi	r4,257
 1008b8c:	213cee04 	addi	r4,r4,-3144
 1008b90:	d9002615 	stw	r4,152(sp)
 1008b94:	d8c02215 	stw	r3,136(sp)
 1008b98:	1029883a 	mov	r20,r2
 1008b9c:	94c4b03a 	or	r2,r18,r19
 1008ba0:	103fb21e 	bne	r2,zero,1008a6c <___vfiprintf_internal_r+0xedc>
 1008ba4:	0039883a 	mov	fp,zero
 1008ba8:	00800084 	movi	r2,2
 1008bac:	003e6b06 	br	100855c <___vfiprintf_internal_r+0x9cc>
 1008bb0:	da802217 	ldw	r10,136(sp)
 1008bb4:	d8001d85 	stb	zero,118(sp)
 1008bb8:	0027883a 	mov	r19,zero
 1008bbc:	50800104 	addi	r2,r10,4
 1008bc0:	54800017 	ldw	r18,0(r10)
 1008bc4:	483e6016 	blt	r9,zero,1008548 <___vfiprintf_internal_r+0x9b8>
 1008bc8:	00ffdfc4 	movi	r3,-129
 1008bcc:	d8802215 	stw	r2,136(sp)
 1008bd0:	a0e8703a 	and	r20,r20,r3
 1008bd4:	0039883a 	mov	fp,zero
 1008bd8:	903ebb26 	beq	r18,zero,10086c8 <___vfiprintf_internal_r+0xb38>
 1008bdc:	00800244 	movi	r2,9
 1008be0:	14bdee36 	bltu	r2,r18,100839c <___vfiprintf_internal_r+0x80c>
 1008be4:	003eba06 	br	10086d0 <___vfiprintf_internal_r+0xb40>
 1008be8:	00800c04 	movi	r2,48
 1008bec:	d8c01d45 	stb	r3,117(sp)
 1008bf0:	d8801d05 	stb	r2,116(sp)
 1008bf4:	d8001d85 	stb	zero,118(sp)
 1008bf8:	a0c00094 	ori	r3,r20,2
 1008bfc:	4800a916 	blt	r9,zero,1008ea4 <___vfiprintf_internal_r+0x1314>
 1008c00:	00bfdfc4 	movi	r2,-129
 1008c04:	a096703a 	and	r11,r20,r2
 1008c08:	5d000094 	ori	r20,r11,2
 1008c0c:	0039883a 	mov	fp,zero
 1008c10:	003f9706 	br	1008a70 <___vfiprintf_internal_r+0xee0>
 1008c14:	8025883a 	mov	r18,r16
 1008c18:	003c2e06 	br	1007cd4 <___vfiprintf_internal_r+0x144>
 1008c1c:	00804074 	movhi	r2,257
 1008c20:	10bcee04 	addi	r2,r2,-3144
 1008c24:	0039883a 	mov	fp,zero
 1008c28:	d8802615 	stw	r2,152(sp)
 1008c2c:	003f9006 	br	1008a70 <___vfiprintf_internal_r+0xee0>
 1008c30:	04a5c83a 	sub	r18,zero,r18
 1008c34:	07000b44 	movi	fp,45
 1008c38:	9004c03a 	cmpne	r2,r18,zero
 1008c3c:	04e7c83a 	sub	r19,zero,r19
 1008c40:	df001d85 	stb	fp,118(sp)
 1008c44:	98a7c83a 	sub	r19,r19,r2
 1008c48:	48009f16 	blt	r9,zero,1008ec8 <___vfiprintf_internal_r+0x1338>
 1008c4c:	00bfdfc4 	movi	r2,-129
 1008c50:	a0a8703a 	and	r20,r20,r2
 1008c54:	003dd006 	br	1008398 <___vfiprintf_internal_r+0x808>
 1008c58:	70004c26 	beq	r14,zero,1008d8c <___vfiprintf_internal_r+0x11fc>
 1008c5c:	00800084 	movi	r2,2
 1008c60:	d8c01d04 	addi	r3,sp,116
 1008c64:	d8c00015 	stw	r3,0(sp)
 1008c68:	d8800115 	stw	r2,4(sp)
 1008c6c:	01000044 	movi	r4,1
 1008c70:	d811883a 	mov	r8,sp
 1008c74:	003f7306 	br	1008a44 <___vfiprintf_internal_r+0xeb4>
 1008c78:	a080100c 	andi	r2,r20,64
 1008c7c:	da802217 	ldw	r10,136(sp)
 1008c80:	103e0626 	beq	r2,zero,100849c <___vfiprintf_internal_r+0x90c>
 1008c84:	5480000f 	ldh	r18,0(r10)
 1008c88:	52800104 	addi	r10,r10,4
 1008c8c:	da802215 	stw	r10,136(sp)
 1008c90:	9027d7fa 	srai	r19,r18,31
 1008c94:	9805883a 	mov	r2,r19
 1008c98:	003db806 	br	100837c <___vfiprintf_internal_r+0x7ec>
 1008c9c:	a080040c 	andi	r2,r20,16
 1008ca0:	1000091e 	bne	r2,zero,1008cc8 <___vfiprintf_internal_r+0x1138>
 1008ca4:	a2c0100c 	andi	r11,r20,64
 1008ca8:	58000726 	beq	r11,zero,1008cc8 <___vfiprintf_internal_r+0x1138>
 1008cac:	da802217 	ldw	r10,136(sp)
 1008cb0:	50800017 	ldw	r2,0(r10)
 1008cb4:	52800104 	addi	r10,r10,4
 1008cb8:	da802215 	stw	r10,136(sp)
 1008cbc:	da802317 	ldw	r10,140(sp)
 1008cc0:	1280000d 	sth	r10,0(r2)
 1008cc4:	003be706 	br	1007c64 <___vfiprintf_internal_r+0xd4>
 1008cc8:	da802217 	ldw	r10,136(sp)
 1008ccc:	50800017 	ldw	r2,0(r10)
 1008cd0:	52800104 	addi	r10,r10,4
 1008cd4:	da802215 	stw	r10,136(sp)
 1008cd8:	da802317 	ldw	r10,140(sp)
 1008cdc:	12800015 	stw	r10,0(r2)
 1008ce0:	003be006 	br	1007c64 <___vfiprintf_internal_r+0xd4>
 1008ce4:	a080100c 	andi	r2,r20,64
 1008ce8:	da802217 	ldw	r10,136(sp)
 1008cec:	10003026 	beq	r2,zero,1008db0 <___vfiprintf_internal_r+0x1220>
 1008cf0:	5480000b 	ldhu	r18,0(r10)
 1008cf4:	52800104 	addi	r10,r10,4
 1008cf8:	0027883a 	mov	r19,zero
 1008cfc:	da802215 	stw	r10,136(sp)
 1008d00:	003d8006 	br	1008304 <___vfiprintf_internal_r+0x774>
 1008d04:	80c00007 	ldb	r3,0(r16)
 1008d08:	003c0006 	br	1007d0c <___vfiprintf_internal_r+0x17c>
 1008d0c:	a080100c 	andi	r2,r20,64
 1008d10:	d8001d85 	stb	zero,118(sp)
 1008d14:	da802217 	ldw	r10,136(sp)
 1008d18:	1000201e 	bne	r2,zero,1008d9c <___vfiprintf_internal_r+0x120c>
 1008d1c:	50800104 	addi	r2,r10,4
 1008d20:	54800017 	ldw	r18,0(r10)
 1008d24:	0027883a 	mov	r19,zero
 1008d28:	483def0e 	bge	r9,zero,10084e8 <___vfiprintf_internal_r+0x958>
 1008d2c:	94c6b03a 	or	r3,r18,r19
 1008d30:	d8802215 	stw	r2,136(sp)
 1008d34:	183d4e1e 	bne	r3,zero,1008270 <___vfiprintf_internal_r+0x6e0>
 1008d38:	0039883a 	mov	fp,zero
 1008d3c:	0005883a 	mov	r2,zero
 1008d40:	003e0606 	br	100855c <___vfiprintf_internal_r+0x9cc>
 1008d44:	d9402117 	ldw	r5,132(sp)
 1008d48:	d9002017 	ldw	r4,128(sp)
 1008d4c:	d9801a04 	addi	r6,sp,104
 1008d50:	da402c15 	stw	r9,176(sp)
 1008d54:	db802a15 	stw	r14,168(sp)
 1008d58:	1007a7c0 	call	1007a7c <__sprint_r.part.0>
 1008d5c:	da402c17 	ldw	r9,176(sp)
 1008d60:	db802a17 	ldw	r14,168(sp)
 1008d64:	103ede1e 	bne	r2,zero,10088e0 <___vfiprintf_internal_r+0xd50>
 1008d68:	d9401b17 	ldw	r5,108(sp)
 1008d6c:	d8801c17 	ldw	r2,112(sp)
 1008d70:	d811883a 	mov	r8,sp
 1008d74:	29000044 	addi	r4,r5,1
 1008d78:	003e7406 	br	100874c <___vfiprintf_internal_r+0xbbc>
 1008d7c:	00bfffc4 	movi	r2,-1
 1008d80:	003c5806 	br	1007ee4 <___vfiprintf_internal_r+0x354>
 1008d84:	d811883a 	mov	r8,sp
 1008d88:	003ee806 	br	100892c <___vfiprintf_internal_r+0xd9c>
 1008d8c:	000b883a 	mov	r5,zero
 1008d90:	01000044 	movi	r4,1
 1008d94:	d811883a 	mov	r8,sp
 1008d98:	003e7c06 	br	100878c <___vfiprintf_internal_r+0xbfc>
 1008d9c:	50800104 	addi	r2,r10,4
 1008da0:	5480000b 	ldhu	r18,0(r10)
 1008da4:	0027883a 	mov	r19,zero
 1008da8:	483dcf0e 	bge	r9,zero,10084e8 <___vfiprintf_internal_r+0x958>
 1008dac:	003fdf06 	br	1008d2c <___vfiprintf_internal_r+0x119c>
 1008db0:	54800017 	ldw	r18,0(r10)
 1008db4:	52800104 	addi	r10,r10,4
 1008db8:	0027883a 	mov	r19,zero
 1008dbc:	da802215 	stw	r10,136(sp)
 1008dc0:	003d5006 	br	1008304 <___vfiprintf_internal_r+0x774>
 1008dc4:	50800104 	addi	r2,r10,4
 1008dc8:	5480000b 	ldhu	r18,0(r10)
 1008dcc:	0027883a 	mov	r19,zero
 1008dd0:	483f7d0e 	bge	r9,zero,1008bc8 <___vfiprintf_internal_r+0x1038>
 1008dd4:	003ddc06 	br	1008548 <___vfiprintf_internal_r+0x9b8>
 1008dd8:	d8c02215 	stw	r3,136(sp)
 1008ddc:	0039883a 	mov	fp,zero
 1008de0:	003ddb06 	br	1008550 <___vfiprintf_internal_r+0x9c0>
 1008de4:	02804074 	movhi	r10,257
 1008de8:	52bd4f04 	addi	r10,r10,-2756
 1008dec:	da802415 	stw	r10,144(sp)
 1008df0:	003e8306 	br	1008800 <___vfiprintf_internal_r+0xc70>
 1008df4:	d8801c17 	ldw	r2,112(sp)
 1008df8:	dd002117 	ldw	r20,132(sp)
 1008dfc:	103eb926 	beq	r2,zero,10088e4 <___vfiprintf_internal_r+0xd54>
 1008e00:	d9002017 	ldw	r4,128(sp)
 1008e04:	d9801a04 	addi	r6,sp,104
 1008e08:	a00b883a 	mov	r5,r20
 1008e0c:	1007a7c0 	call	1007a7c <__sprint_r.part.0>
 1008e10:	003eb406 	br	10088e4 <___vfiprintf_internal_r+0xd54>
 1008e14:	80c00043 	ldbu	r3,1(r16)
 1008e18:	a5000814 	ori	r20,r20,32
 1008e1c:	84000044 	addi	r16,r16,1
 1008e20:	18c03fcc 	andi	r3,r3,255
 1008e24:	18c0201c 	xori	r3,r3,128
 1008e28:	18ffe004 	addi	r3,r3,-128
 1008e2c:	003bb706 	br	1007d0c <___vfiprintf_internal_r+0x17c>
 1008e30:	a809883a 	mov	r4,r21
 1008e34:	d8c02a15 	stw	r3,168(sp)
 1008e38:	da002b15 	stw	r8,172(sp)
 1008e3c:	10004e40 	call	10004e4 <strlen>
 1008e40:	d8c02a17 	ldw	r3,168(sp)
 1008e44:	1027883a 	mov	r19,r2
 1008e48:	df001d83 	ldbu	fp,118(sp)
 1008e4c:	d8c02215 	stw	r3,136(sp)
 1008e50:	0013883a 	mov	r9,zero
 1008e54:	da002b17 	ldw	r8,172(sp)
 1008e58:	003c4d06 	br	1007f90 <___vfiprintf_internal_r+0x400>
 1008e5c:	d9402117 	ldw	r5,132(sp)
 1008e60:	d9002017 	ldw	r4,128(sp)
 1008e64:	d9801a04 	addi	r6,sp,104
 1008e68:	da402c15 	stw	r9,176(sp)
 1008e6c:	1007a7c0 	call	1007a7c <__sprint_r.part.0>
 1008e70:	da402c17 	ldw	r9,176(sp)
 1008e74:	103e9a1e 	bne	r2,zero,10088e0 <___vfiprintf_internal_r+0xd50>
 1008e78:	d9401b17 	ldw	r5,108(sp)
 1008e7c:	d8801c17 	ldw	r2,112(sp)
 1008e80:	d811883a 	mov	r8,sp
 1008e84:	29000044 	addi	r4,r5,1
 1008e88:	003e4206 	br	1008794 <___vfiprintf_internal_r+0xc04>
 1008e8c:	d9401b17 	ldw	r5,108(sp)
 1008e90:	01004074 	movhi	r4,257
 1008e94:	213d5304 	addi	r4,r4,-2740
 1008e98:	d9002415 	stw	r4,144(sp)
 1008e9c:	29400044 	addi	r5,r5,1
 1008ea0:	003c6d06 	br	1008058 <___vfiprintf_internal_r+0x4c8>
 1008ea4:	0039883a 	mov	fp,zero
 1008ea8:	00800084 	movi	r2,2
 1008eac:	10803fcc 	andi	r2,r2,255
 1008eb0:	01000044 	movi	r4,1
 1008eb4:	11001e26 	beq	r2,r4,1008f30 <___vfiprintf_internal_r+0x13a0>
 1008eb8:	01000084 	movi	r4,2
 1008ebc:	11001e1e 	bne	r2,r4,1008f38 <___vfiprintf_internal_r+0x13a8>
 1008ec0:	1829883a 	mov	r20,r3
 1008ec4:	003eea06 	br	1008a70 <___vfiprintf_internal_r+0xee0>
 1008ec8:	a007883a 	mov	r3,r20
 1008ecc:	00800044 	movi	r2,1
 1008ed0:	003ff606 	br	1008eac <___vfiprintf_internal_r+0x131c>
 1008ed4:	00800184 	movi	r2,6
 1008ed8:	1240012e 	bgeu	r2,r9,1008ee0 <___vfiprintf_internal_r+0x1350>
 1008edc:	1013883a 	mov	r9,r2
 1008ee0:	4827883a 	mov	r19,r9
 1008ee4:	4825883a 	mov	r18,r9
 1008ee8:	48001516 	blt	r9,zero,1008f40 <___vfiprintf_internal_r+0x13b0>
 1008eec:	05404074 	movhi	r21,257
 1008ef0:	d8c02215 	stw	r3,136(sp)
 1008ef4:	ad7cf304 	addi	r21,r21,-3124
 1008ef8:	003d1406 	br	100834c <___vfiprintf_internal_r+0x7bc>
 1008efc:	02804074 	movhi	r10,257
 1008f00:	52bd4f04 	addi	r10,r10,-2756
 1008f04:	da802415 	stw	r10,144(sp)
 1008f08:	200d883a 	mov	r6,r4
 1008f0c:	003c9106 	br	1008154 <___vfiprintf_internal_r+0x5c4>
 1008f10:	5021883a 	mov	r16,r10
 1008f14:	0013883a 	mov	r9,zero
 1008f18:	003b7d06 	br	1007d10 <___vfiprintf_internal_r+0x180>
 1008f1c:	4827883a 	mov	r19,r9
 1008f20:	df001d83 	ldbu	fp,118(sp)
 1008f24:	d8c02215 	stw	r3,136(sp)
 1008f28:	0013883a 	mov	r9,zero
 1008f2c:	003c1806 	br	1007f90 <___vfiprintf_internal_r+0x400>
 1008f30:	1829883a 	mov	r20,r3
 1008f34:	003d1806 	br	1008398 <___vfiprintf_internal_r+0x808>
 1008f38:	1829883a 	mov	r20,r3
 1008f3c:	003ccd06 	br	1008274 <___vfiprintf_internal_r+0x6e4>
 1008f40:	0025883a 	mov	r18,zero
 1008f44:	003fe906 	br	1008eec <___vfiprintf_internal_r+0x135c>
 1008f48:	d8802217 	ldw	r2,136(sp)
 1008f4c:	80c00043 	ldbu	r3,1(r16)
 1008f50:	5021883a 	mov	r16,r10
 1008f54:	12400017 	ldw	r9,0(r2)
 1008f58:	10800104 	addi	r2,r2,4
 1008f5c:	d8802215 	stw	r2,136(sp)
 1008f60:	483faf0e 	bge	r9,zero,1008e20 <___vfiprintf_internal_r+0x1290>
 1008f64:	18c03fcc 	andi	r3,r3,255
 1008f68:	18c0201c 	xori	r3,r3,128
 1008f6c:	027fffc4 	movi	r9,-1
 1008f70:	18ffe004 	addi	r3,r3,-128
 1008f74:	003b6506 	br	1007d0c <___vfiprintf_internal_r+0x17c>
 1008f78:	d9c01d85 	stb	r7,118(sp)
 1008f7c:	003ca006 	br	1008200 <___vfiprintf_internal_r+0x670>
 1008f80:	d9c01d85 	stb	r7,118(sp)
 1008f84:	003cad06 	br	100823c <___vfiprintf_internal_r+0x6ac>
 1008f88:	d9c01d85 	stb	r7,118(sp)
 1008f8c:	003d7d06 	br	1008584 <___vfiprintf_internal_r+0x9f4>
 1008f90:	d9c01d85 	stb	r7,118(sp)
 1008f94:	003d5f06 	br	1008514 <___vfiprintf_internal_r+0x984>
 1008f98:	a080004c 	andi	r2,r20,1
 1008f9c:	0039883a 	mov	fp,zero
 1008fa0:	10000526 	beq	r2,zero,1008fb8 <___vfiprintf_internal_r+0x1428>
 1008fa4:	00800c04 	movi	r2,48
 1008fa8:	d88019c5 	stb	r2,103(sp)
 1008fac:	dcc02717 	ldw	r19,156(sp)
 1008fb0:	dd4019c4 	addi	r21,sp,103
 1008fb4:	003bf606 	br	1007f90 <___vfiprintf_internal_r+0x400>
 1008fb8:	0027883a 	mov	r19,zero
 1008fbc:	dd401a04 	addi	r21,sp,104
 1008fc0:	003bf306 	br	1007f90 <___vfiprintf_internal_r+0x400>
 1008fc4:	d9c01d85 	stb	r7,118(sp)
 1008fc8:	003dc806 	br	10086ec <___vfiprintf_internal_r+0xb5c>
 1008fcc:	d9c01d85 	stb	r7,118(sp)
 1008fd0:	003d3a06 	br	10084bc <___vfiprintf_internal_r+0x92c>
 1008fd4:	d9c01d85 	stb	r7,118(sp)
 1008fd8:	003d2a06 	br	1008484 <___vfiprintf_internal_r+0x8f4>
 1008fdc:	d9c01d85 	stb	r7,118(sp)
 1008fe0:	003cde06 	br	100835c <___vfiprintf_internal_r+0x7cc>
 1008fe4:	d9c01d85 	stb	r7,118(sp)
 1008fe8:	003cbc06 	br	10082dc <___vfiprintf_internal_r+0x74c>

01008fec <__vfiprintf_internal>:
 1008fec:	00804074 	movhi	r2,257
 1008ff0:	10844e04 	addi	r2,r2,4408
 1008ff4:	300f883a 	mov	r7,r6
 1008ff8:	280d883a 	mov	r6,r5
 1008ffc:	200b883a 	mov	r5,r4
 1009000:	11000017 	ldw	r4,0(r2)
 1009004:	1007b901 	jmpi	1007b90 <___vfiprintf_internal_r>

01009008 <__sbprintf>:
 1009008:	2880030b 	ldhu	r2,12(r5)
 100900c:	2ac01917 	ldw	r11,100(r5)
 1009010:	2a80038b 	ldhu	r10,14(r5)
 1009014:	2a400717 	ldw	r9,28(r5)
 1009018:	2a000917 	ldw	r8,36(r5)
 100901c:	defee204 	addi	sp,sp,-1144
 1009020:	00c10004 	movi	r3,1024
 1009024:	dc011a15 	stw	r16,1128(sp)
 1009028:	10bfff4c 	andi	r2,r2,65533
 100902c:	2821883a 	mov	r16,r5
 1009030:	d8cb883a 	add	r5,sp,r3
 1009034:	dc811c15 	stw	r18,1136(sp)
 1009038:	dc411b15 	stw	r17,1132(sp)
 100903c:	dfc11d15 	stw	ra,1140(sp)
 1009040:	2025883a 	mov	r18,r4
 1009044:	d881030d 	sth	r2,1036(sp)
 1009048:	dac11915 	stw	r11,1124(sp)
 100904c:	da81038d 	sth	r10,1038(sp)
 1009050:	da410715 	stw	r9,1052(sp)
 1009054:	da010915 	stw	r8,1060(sp)
 1009058:	dec10015 	stw	sp,1024(sp)
 100905c:	dec10415 	stw	sp,1040(sp)
 1009060:	d8c10215 	stw	r3,1032(sp)
 1009064:	d8c10515 	stw	r3,1044(sp)
 1009068:	d8010615 	stw	zero,1048(sp)
 100906c:	1007b900 	call	1007b90 <___vfiprintf_internal_r>
 1009070:	1023883a 	mov	r17,r2
 1009074:	10000416 	blt	r2,zero,1009088 <__sbprintf+0x80>
 1009078:	d9410004 	addi	r5,sp,1024
 100907c:	9009883a 	mov	r4,r18
 1009080:	10044440 	call	1004444 <_fflush_r>
 1009084:	10000d1e 	bne	r2,zero,10090bc <__sbprintf+0xb4>
 1009088:	d881030b 	ldhu	r2,1036(sp)
 100908c:	1080100c 	andi	r2,r2,64
 1009090:	10000326 	beq	r2,zero,10090a0 <__sbprintf+0x98>
 1009094:	8080030b 	ldhu	r2,12(r16)
 1009098:	10801014 	ori	r2,r2,64
 100909c:	8080030d 	sth	r2,12(r16)
 10090a0:	8805883a 	mov	r2,r17
 10090a4:	dfc11d17 	ldw	ra,1140(sp)
 10090a8:	dc811c17 	ldw	r18,1136(sp)
 10090ac:	dc411b17 	ldw	r17,1132(sp)
 10090b0:	dc011a17 	ldw	r16,1128(sp)
 10090b4:	dec11e04 	addi	sp,sp,1144
 10090b8:	f800283a 	ret
 10090bc:	047fffc4 	movi	r17,-1
 10090c0:	003ff106 	br	1009088 <__sbprintf+0x80>

010090c4 <_write_r>:
 10090c4:	defffd04 	addi	sp,sp,-12
 10090c8:	2805883a 	mov	r2,r5
 10090cc:	dc000015 	stw	r16,0(sp)
 10090d0:	04004074 	movhi	r16,257
 10090d4:	dc400115 	stw	r17,4(sp)
 10090d8:	300b883a 	mov	r5,r6
 10090dc:	840b1f04 	addi	r16,r16,11388
 10090e0:	2023883a 	mov	r17,r4
 10090e4:	380d883a 	mov	r6,r7
 10090e8:	1009883a 	mov	r4,r2
 10090ec:	dfc00215 	stw	ra,8(sp)
 10090f0:	80000015 	stw	zero,0(r16)
 10090f4:	100d7b00 	call	100d7b0 <write>
 10090f8:	00ffffc4 	movi	r3,-1
 10090fc:	10c00526 	beq	r2,r3,1009114 <_write_r+0x50>
 1009100:	dfc00217 	ldw	ra,8(sp)
 1009104:	dc400117 	ldw	r17,4(sp)
 1009108:	dc000017 	ldw	r16,0(sp)
 100910c:	dec00304 	addi	sp,sp,12
 1009110:	f800283a 	ret
 1009114:	80c00017 	ldw	r3,0(r16)
 1009118:	183ff926 	beq	r3,zero,1009100 <_write_r+0x3c>
 100911c:	88c00015 	stw	r3,0(r17)
 1009120:	003ff706 	br	1009100 <_write_r+0x3c>

01009124 <_close_r>:
 1009124:	defffd04 	addi	sp,sp,-12
 1009128:	dc000015 	stw	r16,0(sp)
 100912c:	04004074 	movhi	r16,257
 1009130:	dc400115 	stw	r17,4(sp)
 1009134:	840b1f04 	addi	r16,r16,11388
 1009138:	2023883a 	mov	r17,r4
 100913c:	2809883a 	mov	r4,r5
 1009140:	dfc00215 	stw	ra,8(sp)
 1009144:	80000015 	stw	zero,0(r16)
 1009148:	100cd000 	call	100cd00 <close>
 100914c:	00ffffc4 	movi	r3,-1
 1009150:	10c00526 	beq	r2,r3,1009168 <_close_r+0x44>
 1009154:	dfc00217 	ldw	ra,8(sp)
 1009158:	dc400117 	ldw	r17,4(sp)
 100915c:	dc000017 	ldw	r16,0(sp)
 1009160:	dec00304 	addi	sp,sp,12
 1009164:	f800283a 	ret
 1009168:	80c00017 	ldw	r3,0(r16)
 100916c:	183ff926 	beq	r3,zero,1009154 <_close_r+0x30>
 1009170:	88c00015 	stw	r3,0(r17)
 1009174:	003ff706 	br	1009154 <_close_r+0x30>

01009178 <_calloc_r>:
 1009178:	298b383a 	mul	r5,r5,r6
 100917c:	defffe04 	addi	sp,sp,-8
 1009180:	dfc00115 	stw	ra,4(sp)
 1009184:	dc000015 	stw	r16,0(sp)
 1009188:	10055800 	call	1005580 <_malloc_r>
 100918c:	10002926 	beq	r2,zero,1009234 <_calloc_r+0xbc>
 1009190:	11bfff17 	ldw	r6,-4(r2)
 1009194:	1021883a 	mov	r16,r2
 1009198:	00bfff04 	movi	r2,-4
 100919c:	308c703a 	and	r6,r6,r2
 10091a0:	00c00904 	movi	r3,36
 10091a4:	308d883a 	add	r6,r6,r2
 10091a8:	19801636 	bltu	r3,r6,1009204 <_calloc_r+0x8c>
 10091ac:	008004c4 	movi	r2,19
 10091b0:	11800b2e 	bgeu	r2,r6,10091e0 <_calloc_r+0x68>
 10091b4:	80000015 	stw	zero,0(r16)
 10091b8:	80000115 	stw	zero,4(r16)
 10091bc:	008006c4 	movi	r2,27
 10091c0:	11801a2e 	bgeu	r2,r6,100922c <_calloc_r+0xb4>
 10091c4:	80000215 	stw	zero,8(r16)
 10091c8:	80000315 	stw	zero,12(r16)
 10091cc:	30c0151e 	bne	r6,r3,1009224 <_calloc_r+0xac>
 10091d0:	80000415 	stw	zero,16(r16)
 10091d4:	80800604 	addi	r2,r16,24
 10091d8:	80000515 	stw	zero,20(r16)
 10091dc:	00000106 	br	10091e4 <_calloc_r+0x6c>
 10091e0:	8005883a 	mov	r2,r16
 10091e4:	10000015 	stw	zero,0(r2)
 10091e8:	10000115 	stw	zero,4(r2)
 10091ec:	10000215 	stw	zero,8(r2)
 10091f0:	8005883a 	mov	r2,r16
 10091f4:	dfc00117 	ldw	ra,4(sp)
 10091f8:	dc000017 	ldw	r16,0(sp)
 10091fc:	dec00204 	addi	sp,sp,8
 1009200:	f800283a 	ret
 1009204:	000b883a 	mov	r5,zero
 1009208:	8009883a 	mov	r4,r16
 100920c:	10061140 	call	1006114 <memset>
 1009210:	8005883a 	mov	r2,r16
 1009214:	dfc00117 	ldw	ra,4(sp)
 1009218:	dc000017 	ldw	r16,0(sp)
 100921c:	dec00204 	addi	sp,sp,8
 1009220:	f800283a 	ret
 1009224:	80800404 	addi	r2,r16,16
 1009228:	003fee06 	br	10091e4 <_calloc_r+0x6c>
 100922c:	80800204 	addi	r2,r16,8
 1009230:	003fec06 	br	10091e4 <_calloc_r+0x6c>
 1009234:	0005883a 	mov	r2,zero
 1009238:	003fee06 	br	10091f4 <_calloc_r+0x7c>

0100923c <_fclose_r>:
 100923c:	28003926 	beq	r5,zero,1009324 <_fclose_r+0xe8>
 1009240:	defffc04 	addi	sp,sp,-16
 1009244:	dc400115 	stw	r17,4(sp)
 1009248:	dc000015 	stw	r16,0(sp)
 100924c:	dfc00315 	stw	ra,12(sp)
 1009250:	dc800215 	stw	r18,8(sp)
 1009254:	2023883a 	mov	r17,r4
 1009258:	2821883a 	mov	r16,r5
 100925c:	20000226 	beq	r4,zero,1009268 <_fclose_r+0x2c>
 1009260:	20800e17 	ldw	r2,56(r4)
 1009264:	10002726 	beq	r2,zero,1009304 <_fclose_r+0xc8>
 1009268:	8080030f 	ldh	r2,12(r16)
 100926c:	1000071e 	bne	r2,zero,100928c <_fclose_r+0x50>
 1009270:	0005883a 	mov	r2,zero
 1009274:	dfc00317 	ldw	ra,12(sp)
 1009278:	dc800217 	ldw	r18,8(sp)
 100927c:	dc400117 	ldw	r17,4(sp)
 1009280:	dc000017 	ldw	r16,0(sp)
 1009284:	dec00404 	addi	sp,sp,16
 1009288:	f800283a 	ret
 100928c:	800b883a 	mov	r5,r16
 1009290:	8809883a 	mov	r4,r17
 1009294:	10042280 	call	1004228 <__sflush_r>
 1009298:	1025883a 	mov	r18,r2
 100929c:	80800b17 	ldw	r2,44(r16)
 10092a0:	10000426 	beq	r2,zero,10092b4 <_fclose_r+0x78>
 10092a4:	81400717 	ldw	r5,28(r16)
 10092a8:	8809883a 	mov	r4,r17
 10092ac:	103ee83a 	callr	r2
 10092b0:	10001616 	blt	r2,zero,100930c <_fclose_r+0xd0>
 10092b4:	8080030b 	ldhu	r2,12(r16)
 10092b8:	1080200c 	andi	r2,r2,128
 10092bc:	1000151e 	bne	r2,zero,1009314 <_fclose_r+0xd8>
 10092c0:	81400c17 	ldw	r5,48(r16)
 10092c4:	28000526 	beq	r5,zero,10092dc <_fclose_r+0xa0>
 10092c8:	80801004 	addi	r2,r16,64
 10092cc:	28800226 	beq	r5,r2,10092d8 <_fclose_r+0x9c>
 10092d0:	8809883a 	mov	r4,r17
 10092d4:	10049940 	call	1004994 <_free_r>
 10092d8:	80000c15 	stw	zero,48(r16)
 10092dc:	81401117 	ldw	r5,68(r16)
 10092e0:	28000326 	beq	r5,zero,10092f0 <_fclose_r+0xb4>
 10092e4:	8809883a 	mov	r4,r17
 10092e8:	10049940 	call	1004994 <_free_r>
 10092ec:	80001115 	stw	zero,68(r16)
 10092f0:	10048300 	call	1004830 <__sfp_lock_acquire>
 10092f4:	8000030d 	sth	zero,12(r16)
 10092f8:	10048340 	call	1004834 <__sfp_lock_release>
 10092fc:	9005883a 	mov	r2,r18
 1009300:	003fdc06 	br	1009274 <_fclose_r+0x38>
 1009304:	10048200 	call	1004820 <__sinit>
 1009308:	003fd706 	br	1009268 <_fclose_r+0x2c>
 100930c:	04bfffc4 	movi	r18,-1
 1009310:	003fe806 	br	10092b4 <_fclose_r+0x78>
 1009314:	81400417 	ldw	r5,16(r16)
 1009318:	8809883a 	mov	r4,r17
 100931c:	10049940 	call	1004994 <_free_r>
 1009320:	003fe706 	br	10092c0 <_fclose_r+0x84>
 1009324:	0005883a 	mov	r2,zero
 1009328:	f800283a 	ret

0100932c <fclose>:
 100932c:	00804074 	movhi	r2,257
 1009330:	10844e04 	addi	r2,r2,4408
 1009334:	200b883a 	mov	r5,r4
 1009338:	11000017 	ldw	r4,0(r2)
 100933c:	100923c1 	jmpi	100923c <_fclose_r>

01009340 <__fputwc>:
 1009340:	defff804 	addi	sp,sp,-32
 1009344:	dcc00415 	stw	r19,16(sp)
 1009348:	dc800315 	stw	r18,12(sp)
 100934c:	dc000115 	stw	r16,4(sp)
 1009350:	dfc00715 	stw	ra,28(sp)
 1009354:	dd400615 	stw	r21,24(sp)
 1009358:	dd000515 	stw	r20,20(sp)
 100935c:	dc400215 	stw	r17,8(sp)
 1009360:	2027883a 	mov	r19,r4
 1009364:	2825883a 	mov	r18,r5
 1009368:	3021883a 	mov	r16,r6
 100936c:	10053700 	call	1005370 <__locale_mb_cur_max>
 1009370:	00c00044 	movi	r3,1
 1009374:	10c03e26 	beq	r2,r3,1009470 <__fputwc+0x130>
 1009378:	81c01704 	addi	r7,r16,92
 100937c:	900d883a 	mov	r6,r18
 1009380:	d80b883a 	mov	r5,sp
 1009384:	9809883a 	mov	r4,r19
 1009388:	10098100 	call	1009810 <_wcrtomb_r>
 100938c:	1029883a 	mov	r20,r2
 1009390:	00bfffc4 	movi	r2,-1
 1009394:	a0802026 	beq	r20,r2,1009418 <__fputwc+0xd8>
 1009398:	d9400003 	ldbu	r5,0(sp)
 100939c:	a0001c26 	beq	r20,zero,1009410 <__fputwc+0xd0>
 10093a0:	0023883a 	mov	r17,zero
 10093a4:	05400284 	movi	r21,10
 10093a8:	00000906 	br	10093d0 <__fputwc+0x90>
 10093ac:	80800017 	ldw	r2,0(r16)
 10093b0:	11400005 	stb	r5,0(r2)
 10093b4:	80c00017 	ldw	r3,0(r16)
 10093b8:	18c00044 	addi	r3,r3,1
 10093bc:	80c00015 	stw	r3,0(r16)
 10093c0:	8c400044 	addi	r17,r17,1
 10093c4:	dc45883a 	add	r2,sp,r17
 10093c8:	8d00112e 	bgeu	r17,r20,1009410 <__fputwc+0xd0>
 10093cc:	11400003 	ldbu	r5,0(r2)
 10093d0:	80c00217 	ldw	r3,8(r16)
 10093d4:	18ffffc4 	addi	r3,r3,-1
 10093d8:	80c00215 	stw	r3,8(r16)
 10093dc:	183ff30e 	bge	r3,zero,10093ac <__fputwc+0x6c>
 10093e0:	80800617 	ldw	r2,24(r16)
 10093e4:	18801916 	blt	r3,r2,100944c <__fputwc+0x10c>
 10093e8:	80800017 	ldw	r2,0(r16)
 10093ec:	11400005 	stb	r5,0(r2)
 10093f0:	80800017 	ldw	r2,0(r16)
 10093f4:	10c00003 	ldbu	r3,0(r2)
 10093f8:	10800044 	addi	r2,r2,1
 10093fc:	1d402326 	beq	r3,r21,100948c <__fputwc+0x14c>
 1009400:	80800015 	stw	r2,0(r16)
 1009404:	8c400044 	addi	r17,r17,1
 1009408:	dc45883a 	add	r2,sp,r17
 100940c:	8d3fef36 	bltu	r17,r20,10093cc <__fputwc+0x8c>
 1009410:	9005883a 	mov	r2,r18
 1009414:	00000406 	br	1009428 <__fputwc+0xe8>
 1009418:	80c0030b 	ldhu	r3,12(r16)
 100941c:	a005883a 	mov	r2,r20
 1009420:	18c01014 	ori	r3,r3,64
 1009424:	80c0030d 	sth	r3,12(r16)
 1009428:	dfc00717 	ldw	ra,28(sp)
 100942c:	dd400617 	ldw	r21,24(sp)
 1009430:	dd000517 	ldw	r20,20(sp)
 1009434:	dcc00417 	ldw	r19,16(sp)
 1009438:	dc800317 	ldw	r18,12(sp)
 100943c:	dc400217 	ldw	r17,8(sp)
 1009440:	dc000117 	ldw	r16,4(sp)
 1009444:	dec00804 	addi	sp,sp,32
 1009448:	f800283a 	ret
 100944c:	800d883a 	mov	r6,r16
 1009450:	29403fcc 	andi	r5,r5,255
 1009454:	9809883a 	mov	r4,r19
 1009458:	10096b80 	call	10096b8 <__swbuf_r>
 100945c:	10bfffe0 	cmpeqi	r2,r2,-1
 1009460:	10803fcc 	andi	r2,r2,255
 1009464:	103fd626 	beq	r2,zero,10093c0 <__fputwc+0x80>
 1009468:	00bfffc4 	movi	r2,-1
 100946c:	003fee06 	br	1009428 <__fputwc+0xe8>
 1009470:	90ffffc4 	addi	r3,r18,-1
 1009474:	01003f84 	movi	r4,254
 1009478:	20ffbf36 	bltu	r4,r3,1009378 <__fputwc+0x38>
 100947c:	900b883a 	mov	r5,r18
 1009480:	dc800005 	stb	r18,0(sp)
 1009484:	1029883a 	mov	r20,r2
 1009488:	003fc506 	br	10093a0 <__fputwc+0x60>
 100948c:	800d883a 	mov	r6,r16
 1009490:	a80b883a 	mov	r5,r21
 1009494:	9809883a 	mov	r4,r19
 1009498:	10096b80 	call	10096b8 <__swbuf_r>
 100949c:	10bfffe0 	cmpeqi	r2,r2,-1
 10094a0:	003fef06 	br	1009460 <__fputwc+0x120>

010094a4 <_fputwc_r>:
 10094a4:	3080030b 	ldhu	r2,12(r6)
 10094a8:	10c8000c 	andi	r3,r2,8192
 10094ac:	1800051e 	bne	r3,zero,10094c4 <_fputwc_r+0x20>
 10094b0:	30c01917 	ldw	r3,100(r6)
 10094b4:	10880014 	ori	r2,r2,8192
 10094b8:	3080030d 	sth	r2,12(r6)
 10094bc:	18880014 	ori	r2,r3,8192
 10094c0:	30801915 	stw	r2,100(r6)
 10094c4:	10093401 	jmpi	1009340 <__fputwc>

010094c8 <fputwc>:
 10094c8:	00804074 	movhi	r2,257
 10094cc:	defffc04 	addi	sp,sp,-16
 10094d0:	10844e04 	addi	r2,r2,4408
 10094d4:	dc000115 	stw	r16,4(sp)
 10094d8:	14000017 	ldw	r16,0(r2)
 10094dc:	dc400215 	stw	r17,8(sp)
 10094e0:	dfc00315 	stw	ra,12(sp)
 10094e4:	2023883a 	mov	r17,r4
 10094e8:	80000226 	beq	r16,zero,10094f4 <fputwc+0x2c>
 10094ec:	80800e17 	ldw	r2,56(r16)
 10094f0:	10001026 	beq	r2,zero,1009534 <fputwc+0x6c>
 10094f4:	2880030b 	ldhu	r2,12(r5)
 10094f8:	10c8000c 	andi	r3,r2,8192
 10094fc:	1800051e 	bne	r3,zero,1009514 <fputwc+0x4c>
 1009500:	28c01917 	ldw	r3,100(r5)
 1009504:	10880014 	ori	r2,r2,8192
 1009508:	2880030d 	sth	r2,12(r5)
 100950c:	18880014 	ori	r2,r3,8192
 1009510:	28801915 	stw	r2,100(r5)
 1009514:	280d883a 	mov	r6,r5
 1009518:	8009883a 	mov	r4,r16
 100951c:	880b883a 	mov	r5,r17
 1009520:	dfc00317 	ldw	ra,12(sp)
 1009524:	dc400217 	ldw	r17,8(sp)
 1009528:	dc000117 	ldw	r16,4(sp)
 100952c:	dec00404 	addi	sp,sp,16
 1009530:	10093401 	jmpi	1009340 <__fputwc>
 1009534:	8009883a 	mov	r4,r16
 1009538:	d9400015 	stw	r5,0(sp)
 100953c:	10048200 	call	1004820 <__sinit>
 1009540:	d9400017 	ldw	r5,0(sp)
 1009544:	003feb06 	br	10094f4 <fputwc+0x2c>

01009548 <_fstat_r>:
 1009548:	defffd04 	addi	sp,sp,-12
 100954c:	2805883a 	mov	r2,r5
 1009550:	dc000015 	stw	r16,0(sp)
 1009554:	04004074 	movhi	r16,257
 1009558:	dc400115 	stw	r17,4(sp)
 100955c:	840b1f04 	addi	r16,r16,11388
 1009560:	2023883a 	mov	r17,r4
 1009564:	300b883a 	mov	r5,r6
 1009568:	1009883a 	mov	r4,r2
 100956c:	dfc00215 	stw	ra,8(sp)
 1009570:	80000015 	stw	zero,0(r16)
 1009574:	100ce380 	call	100ce38 <fstat>
 1009578:	00ffffc4 	movi	r3,-1
 100957c:	10c00526 	beq	r2,r3,1009594 <_fstat_r+0x4c>
 1009580:	dfc00217 	ldw	ra,8(sp)
 1009584:	dc400117 	ldw	r17,4(sp)
 1009588:	dc000017 	ldw	r16,0(sp)
 100958c:	dec00304 	addi	sp,sp,12
 1009590:	f800283a 	ret
 1009594:	80c00017 	ldw	r3,0(r16)
 1009598:	183ff926 	beq	r3,zero,1009580 <_fstat_r+0x38>
 100959c:	88c00015 	stw	r3,0(r17)
 10095a0:	003ff706 	br	1009580 <_fstat_r+0x38>

010095a4 <_isatty_r>:
 10095a4:	defffd04 	addi	sp,sp,-12
 10095a8:	dc000015 	stw	r16,0(sp)
 10095ac:	04004074 	movhi	r16,257
 10095b0:	dc400115 	stw	r17,4(sp)
 10095b4:	840b1f04 	addi	r16,r16,11388
 10095b8:	2023883a 	mov	r17,r4
 10095bc:	2809883a 	mov	r4,r5
 10095c0:	dfc00215 	stw	ra,8(sp)
 10095c4:	80000015 	stw	zero,0(r16)
 10095c8:	100d1c40 	call	100d1c4 <isatty>
 10095cc:	00ffffc4 	movi	r3,-1
 10095d0:	10c00526 	beq	r2,r3,10095e8 <_isatty_r+0x44>
 10095d4:	dfc00217 	ldw	ra,8(sp)
 10095d8:	dc400117 	ldw	r17,4(sp)
 10095dc:	dc000017 	ldw	r16,0(sp)
 10095e0:	dec00304 	addi	sp,sp,12
 10095e4:	f800283a 	ret
 10095e8:	80c00017 	ldw	r3,0(r16)
 10095ec:	183ff926 	beq	r3,zero,10095d4 <_isatty_r+0x30>
 10095f0:	88c00015 	stw	r3,0(r17)
 10095f4:	003ff706 	br	10095d4 <_isatty_r+0x30>

010095f8 <_lseek_r>:
 10095f8:	defffd04 	addi	sp,sp,-12
 10095fc:	2805883a 	mov	r2,r5
 1009600:	dc000015 	stw	r16,0(sp)
 1009604:	04004074 	movhi	r16,257
 1009608:	dc400115 	stw	r17,4(sp)
 100960c:	300b883a 	mov	r5,r6
 1009610:	840b1f04 	addi	r16,r16,11388
 1009614:	2023883a 	mov	r17,r4
 1009618:	380d883a 	mov	r6,r7
 100961c:	1009883a 	mov	r4,r2
 1009620:	dfc00215 	stw	ra,8(sp)
 1009624:	80000015 	stw	zero,0(r16)
 1009628:	100d3900 	call	100d390 <lseek>
 100962c:	00ffffc4 	movi	r3,-1
 1009630:	10c00526 	beq	r2,r3,1009648 <_lseek_r+0x50>
 1009634:	dfc00217 	ldw	ra,8(sp)
 1009638:	dc400117 	ldw	r17,4(sp)
 100963c:	dc000017 	ldw	r16,0(sp)
 1009640:	dec00304 	addi	sp,sp,12
 1009644:	f800283a 	ret
 1009648:	80c00017 	ldw	r3,0(r16)
 100964c:	183ff926 	beq	r3,zero,1009634 <_lseek_r+0x3c>
 1009650:	88c00015 	stw	r3,0(r17)
 1009654:	003ff706 	br	1009634 <_lseek_r+0x3c>

01009658 <_read_r>:
 1009658:	defffd04 	addi	sp,sp,-12
 100965c:	2805883a 	mov	r2,r5
 1009660:	dc000015 	stw	r16,0(sp)
 1009664:	04004074 	movhi	r16,257
 1009668:	dc400115 	stw	r17,4(sp)
 100966c:	300b883a 	mov	r5,r6
 1009670:	840b1f04 	addi	r16,r16,11388
 1009674:	2023883a 	mov	r17,r4
 1009678:	380d883a 	mov	r6,r7
 100967c:	1009883a 	mov	r4,r2
 1009680:	dfc00215 	stw	ra,8(sp)
 1009684:	80000015 	stw	zero,0(r16)
 1009688:	100d5640 	call	100d564 <read>
 100968c:	00ffffc4 	movi	r3,-1
 1009690:	10c00526 	beq	r2,r3,10096a8 <_read_r+0x50>
 1009694:	dfc00217 	ldw	ra,8(sp)
 1009698:	dc400117 	ldw	r17,4(sp)
 100969c:	dc000017 	ldw	r16,0(sp)
 10096a0:	dec00304 	addi	sp,sp,12
 10096a4:	f800283a 	ret
 10096a8:	80c00017 	ldw	r3,0(r16)
 10096ac:	183ff926 	beq	r3,zero,1009694 <_read_r+0x3c>
 10096b0:	88c00015 	stw	r3,0(r17)
 10096b4:	003ff706 	br	1009694 <_read_r+0x3c>

010096b8 <__swbuf_r>:
 10096b8:	defffb04 	addi	sp,sp,-20
 10096bc:	dcc00315 	stw	r19,12(sp)
 10096c0:	dc800215 	stw	r18,8(sp)
 10096c4:	dc000015 	stw	r16,0(sp)
 10096c8:	dfc00415 	stw	ra,16(sp)
 10096cc:	dc400115 	stw	r17,4(sp)
 10096d0:	2025883a 	mov	r18,r4
 10096d4:	2827883a 	mov	r19,r5
 10096d8:	3021883a 	mov	r16,r6
 10096dc:	20000226 	beq	r4,zero,10096e8 <__swbuf_r+0x30>
 10096e0:	20800e17 	ldw	r2,56(r4)
 10096e4:	10004226 	beq	r2,zero,10097f0 <__swbuf_r+0x138>
 10096e8:	80800617 	ldw	r2,24(r16)
 10096ec:	8100030b 	ldhu	r4,12(r16)
 10096f0:	80800215 	stw	r2,8(r16)
 10096f4:	2080020c 	andi	r2,r4,8
 10096f8:	10003626 	beq	r2,zero,10097d4 <__swbuf_r+0x11c>
 10096fc:	80c00417 	ldw	r3,16(r16)
 1009700:	18003426 	beq	r3,zero,10097d4 <__swbuf_r+0x11c>
 1009704:	2088000c 	andi	r2,r4,8192
 1009708:	9c403fcc 	andi	r17,r19,255
 100970c:	10001a26 	beq	r2,zero,1009778 <__swbuf_r+0xc0>
 1009710:	80800017 	ldw	r2,0(r16)
 1009714:	81000517 	ldw	r4,20(r16)
 1009718:	10c7c83a 	sub	r3,r2,r3
 100971c:	1900200e 	bge	r3,r4,10097a0 <__swbuf_r+0xe8>
 1009720:	18c00044 	addi	r3,r3,1
 1009724:	81000217 	ldw	r4,8(r16)
 1009728:	11400044 	addi	r5,r2,1
 100972c:	81400015 	stw	r5,0(r16)
 1009730:	213fffc4 	addi	r4,r4,-1
 1009734:	81000215 	stw	r4,8(r16)
 1009738:	14c00005 	stb	r19,0(r2)
 100973c:	80800517 	ldw	r2,20(r16)
 1009740:	10c01e26 	beq	r2,r3,10097bc <__swbuf_r+0x104>
 1009744:	8080030b 	ldhu	r2,12(r16)
 1009748:	1080004c 	andi	r2,r2,1
 100974c:	10000226 	beq	r2,zero,1009758 <__swbuf_r+0xa0>
 1009750:	00800284 	movi	r2,10
 1009754:	88801926 	beq	r17,r2,10097bc <__swbuf_r+0x104>
 1009758:	8805883a 	mov	r2,r17
 100975c:	dfc00417 	ldw	ra,16(sp)
 1009760:	dcc00317 	ldw	r19,12(sp)
 1009764:	dc800217 	ldw	r18,8(sp)
 1009768:	dc400117 	ldw	r17,4(sp)
 100976c:	dc000017 	ldw	r16,0(sp)
 1009770:	dec00504 	addi	sp,sp,20
 1009774:	f800283a 	ret
 1009778:	81401917 	ldw	r5,100(r16)
 100977c:	00b7ffc4 	movi	r2,-8193
 1009780:	21080014 	ori	r4,r4,8192
 1009784:	2884703a 	and	r2,r5,r2
 1009788:	80801915 	stw	r2,100(r16)
 100978c:	80800017 	ldw	r2,0(r16)
 1009790:	8100030d 	sth	r4,12(r16)
 1009794:	81000517 	ldw	r4,20(r16)
 1009798:	10c7c83a 	sub	r3,r2,r3
 100979c:	193fe016 	blt	r3,r4,1009720 <__swbuf_r+0x68>
 10097a0:	800b883a 	mov	r5,r16
 10097a4:	9009883a 	mov	r4,r18
 10097a8:	10044440 	call	1004444 <_fflush_r>
 10097ac:	1000071e 	bne	r2,zero,10097cc <__swbuf_r+0x114>
 10097b0:	80800017 	ldw	r2,0(r16)
 10097b4:	00c00044 	movi	r3,1
 10097b8:	003fda06 	br	1009724 <__swbuf_r+0x6c>
 10097bc:	800b883a 	mov	r5,r16
 10097c0:	9009883a 	mov	r4,r18
 10097c4:	10044440 	call	1004444 <_fflush_r>
 10097c8:	103fe326 	beq	r2,zero,1009758 <__swbuf_r+0xa0>
 10097cc:	00bfffc4 	movi	r2,-1
 10097d0:	003fe206 	br	100975c <__swbuf_r+0xa4>
 10097d4:	800b883a 	mov	r5,r16
 10097d8:	9009883a 	mov	r4,r18
 10097dc:	100284c0 	call	100284c <__swsetup_r>
 10097e0:	103ffa1e 	bne	r2,zero,10097cc <__swbuf_r+0x114>
 10097e4:	8100030b 	ldhu	r4,12(r16)
 10097e8:	80c00417 	ldw	r3,16(r16)
 10097ec:	003fc506 	br	1009704 <__swbuf_r+0x4c>
 10097f0:	10048200 	call	1004820 <__sinit>
 10097f4:	003fbc06 	br	10096e8 <__swbuf_r+0x30>

010097f8 <__swbuf>:
 10097f8:	00804074 	movhi	r2,257
 10097fc:	10844e04 	addi	r2,r2,4408
 1009800:	280d883a 	mov	r6,r5
 1009804:	200b883a 	mov	r5,r4
 1009808:	11000017 	ldw	r4,0(r2)
 100980c:	10096b81 	jmpi	10096b8 <__swbuf_r>

01009810 <_wcrtomb_r>:
 1009810:	defff604 	addi	sp,sp,-40
 1009814:	00804074 	movhi	r2,257
 1009818:	dc800815 	stw	r18,32(sp)
 100981c:	dc400715 	stw	r17,28(sp)
 1009820:	dc000615 	stw	r16,24(sp)
 1009824:	10845204 	addi	r2,r2,4424
 1009828:	dfc00915 	stw	ra,36(sp)
 100982c:	2021883a 	mov	r16,r4
 1009830:	3823883a 	mov	r17,r7
 1009834:	14800017 	ldw	r18,0(r2)
 1009838:	28001426 	beq	r5,zero,100988c <_wcrtomb_r+0x7c>
 100983c:	d9400415 	stw	r5,16(sp)
 1009840:	d9800515 	stw	r6,20(sp)
 1009844:	10053640 	call	1005364 <__locale_charset>
 1009848:	d9800517 	ldw	r6,20(sp)
 100984c:	d9400417 	ldw	r5,16(sp)
 1009850:	100f883a 	mov	r7,r2
 1009854:	dc400015 	stw	r17,0(sp)
 1009858:	8009883a 	mov	r4,r16
 100985c:	903ee83a 	callr	r18
 1009860:	00ffffc4 	movi	r3,-1
 1009864:	10c0031e 	bne	r2,r3,1009874 <_wcrtomb_r+0x64>
 1009868:	88000015 	stw	zero,0(r17)
 100986c:	00c02284 	movi	r3,138
 1009870:	80c00015 	stw	r3,0(r16)
 1009874:	dfc00917 	ldw	ra,36(sp)
 1009878:	dc800817 	ldw	r18,32(sp)
 100987c:	dc400717 	ldw	r17,28(sp)
 1009880:	dc000617 	ldw	r16,24(sp)
 1009884:	dec00a04 	addi	sp,sp,40
 1009888:	f800283a 	ret
 100988c:	10053640 	call	1005364 <__locale_charset>
 1009890:	100f883a 	mov	r7,r2
 1009894:	dc400015 	stw	r17,0(sp)
 1009898:	000d883a 	mov	r6,zero
 100989c:	d9400104 	addi	r5,sp,4
 10098a0:	8009883a 	mov	r4,r16
 10098a4:	903ee83a 	callr	r18
 10098a8:	003fed06 	br	1009860 <_wcrtomb_r+0x50>

010098ac <wcrtomb>:
 10098ac:	defff604 	addi	sp,sp,-40
 10098b0:	00804074 	movhi	r2,257
 10098b4:	dc800615 	stw	r18,24(sp)
 10098b8:	dc400515 	stw	r17,20(sp)
 10098bc:	10844e04 	addi	r2,r2,4408
 10098c0:	dfc00915 	stw	ra,36(sp)
 10098c4:	dd000815 	stw	r20,32(sp)
 10098c8:	dcc00715 	stw	r19,28(sp)
 10098cc:	dc000415 	stw	r16,16(sp)
 10098d0:	3025883a 	mov	r18,r6
 10098d4:	14400017 	ldw	r17,0(r2)
 10098d8:	20001926 	beq	r4,zero,1009940 <wcrtomb+0x94>
 10098dc:	00804074 	movhi	r2,257
 10098e0:	10845204 	addi	r2,r2,4424
 10098e4:	15000017 	ldw	r20,0(r2)
 10098e8:	2021883a 	mov	r16,r4
 10098ec:	2827883a 	mov	r19,r5
 10098f0:	10053640 	call	1005364 <__locale_charset>
 10098f4:	100f883a 	mov	r7,r2
 10098f8:	dc800015 	stw	r18,0(sp)
 10098fc:	980d883a 	mov	r6,r19
 1009900:	800b883a 	mov	r5,r16
 1009904:	8809883a 	mov	r4,r17
 1009908:	a03ee83a 	callr	r20
 100990c:	00ffffc4 	movi	r3,-1
 1009910:	10c0031e 	bne	r2,r3,1009920 <wcrtomb+0x74>
 1009914:	90000015 	stw	zero,0(r18)
 1009918:	00c02284 	movi	r3,138
 100991c:	88c00015 	stw	r3,0(r17)
 1009920:	dfc00917 	ldw	ra,36(sp)
 1009924:	dd000817 	ldw	r20,32(sp)
 1009928:	dcc00717 	ldw	r19,28(sp)
 100992c:	dc800617 	ldw	r18,24(sp)
 1009930:	dc400517 	ldw	r17,20(sp)
 1009934:	dc000417 	ldw	r16,16(sp)
 1009938:	dec00a04 	addi	sp,sp,40
 100993c:	f800283a 	ret
 1009940:	00804074 	movhi	r2,257
 1009944:	10845204 	addi	r2,r2,4424
 1009948:	14000017 	ldw	r16,0(r2)
 100994c:	10053640 	call	1005364 <__locale_charset>
 1009950:	100f883a 	mov	r7,r2
 1009954:	dc800015 	stw	r18,0(sp)
 1009958:	000d883a 	mov	r6,zero
 100995c:	d9400104 	addi	r5,sp,4
 1009960:	8809883a 	mov	r4,r17
 1009964:	803ee83a 	callr	r16
 1009968:	003fe806 	br	100990c <wcrtomb+0x60>

0100996c <__ascii_wctomb>:
 100996c:	28000526 	beq	r5,zero,1009984 <__ascii_wctomb+0x18>
 1009970:	00803fc4 	movi	r2,255
 1009974:	11800536 	bltu	r2,r6,100998c <__ascii_wctomb+0x20>
 1009978:	29800005 	stb	r6,0(r5)
 100997c:	00800044 	movi	r2,1
 1009980:	f800283a 	ret
 1009984:	0005883a 	mov	r2,zero
 1009988:	f800283a 	ret
 100998c:	00802284 	movi	r2,138
 1009990:	20800015 	stw	r2,0(r4)
 1009994:	00bfffc4 	movi	r2,-1
 1009998:	f800283a 	ret

0100999c <_wctomb_r>:
 100999c:	00804074 	movhi	r2,257
 10099a0:	defff904 	addi	sp,sp,-28
 10099a4:	10845204 	addi	r2,r2,4424
 10099a8:	dfc00615 	stw	ra,24(sp)
 10099ac:	dc400515 	stw	r17,20(sp)
 10099b0:	dc000415 	stw	r16,16(sp)
 10099b4:	3823883a 	mov	r17,r7
 10099b8:	14000017 	ldw	r16,0(r2)
 10099bc:	d9000115 	stw	r4,4(sp)
 10099c0:	d9400215 	stw	r5,8(sp)
 10099c4:	d9800315 	stw	r6,12(sp)
 10099c8:	10053640 	call	1005364 <__locale_charset>
 10099cc:	d9800317 	ldw	r6,12(sp)
 10099d0:	d9400217 	ldw	r5,8(sp)
 10099d4:	d9000117 	ldw	r4,4(sp)
 10099d8:	100f883a 	mov	r7,r2
 10099dc:	dc400015 	stw	r17,0(sp)
 10099e0:	803ee83a 	callr	r16
 10099e4:	dfc00617 	ldw	ra,24(sp)
 10099e8:	dc400517 	ldw	r17,20(sp)
 10099ec:	dc000417 	ldw	r16,16(sp)
 10099f0:	dec00704 	addi	sp,sp,28
 10099f4:	f800283a 	ret

010099f8 <__udivdi3>:
 10099f8:	defff504 	addi	sp,sp,-44
 10099fc:	dcc00415 	stw	r19,16(sp)
 1009a00:	dc000115 	stw	r16,4(sp)
 1009a04:	dfc00a15 	stw	ra,40(sp)
 1009a08:	df000915 	stw	fp,36(sp)
 1009a0c:	ddc00815 	stw	r23,32(sp)
 1009a10:	dd800715 	stw	r22,28(sp)
 1009a14:	dd400615 	stw	r21,24(sp)
 1009a18:	dd000515 	stw	r20,20(sp)
 1009a1c:	dc800315 	stw	r18,12(sp)
 1009a20:	dc400215 	stw	r17,8(sp)
 1009a24:	2027883a 	mov	r19,r4
 1009a28:	2821883a 	mov	r16,r5
 1009a2c:	3800411e 	bne	r7,zero,1009b34 <__udivdi3+0x13c>
 1009a30:	3023883a 	mov	r17,r6
 1009a34:	2025883a 	mov	r18,r4
 1009a38:	2980522e 	bgeu	r5,r6,1009b84 <__udivdi3+0x18c>
 1009a3c:	00bfffd4 	movui	r2,65535
 1009a40:	282d883a 	mov	r22,r5
 1009a44:	1180a836 	bltu	r2,r6,1009ce8 <__udivdi3+0x2f0>
 1009a48:	00803fc4 	movi	r2,255
 1009a4c:	1185803a 	cmpltu	r2,r2,r6
 1009a50:	100490fa 	slli	r2,r2,3
 1009a54:	3086d83a 	srl	r3,r6,r2
 1009a58:	01004074 	movhi	r4,257
 1009a5c:	213d5704 	addi	r4,r4,-2724
 1009a60:	20c7883a 	add	r3,r4,r3
 1009a64:	18c00003 	ldbu	r3,0(r3)
 1009a68:	1885883a 	add	r2,r3,r2
 1009a6c:	00c00804 	movi	r3,32
 1009a70:	1887c83a 	sub	r3,r3,r2
 1009a74:	18000526 	beq	r3,zero,1009a8c <__udivdi3+0x94>
 1009a78:	80e0983a 	sll	r16,r16,r3
 1009a7c:	9884d83a 	srl	r2,r19,r2
 1009a80:	30e2983a 	sll	r17,r6,r3
 1009a84:	98e4983a 	sll	r18,r19,r3
 1009a88:	142cb03a 	or	r22,r2,r16
 1009a8c:	882ad43a 	srli	r21,r17,16
 1009a90:	b009883a 	mov	r4,r22
 1009a94:	8d3fffcc 	andi	r20,r17,65535
 1009a98:	a80b883a 	mov	r5,r21
 1009a9c:	100a6040 	call	100a604 <__umodsi3>
 1009aa0:	b009883a 	mov	r4,r22
 1009aa4:	a80b883a 	mov	r5,r21
 1009aa8:	1027883a 	mov	r19,r2
 1009aac:	100a5a00 	call	100a5a0 <__udivsi3>
 1009ab0:	102d883a 	mov	r22,r2
 1009ab4:	9826943a 	slli	r19,r19,16
 1009ab8:	9004d43a 	srli	r2,r18,16
 1009abc:	a5a1383a 	mul	r16,r20,r22
 1009ac0:	14c4b03a 	or	r2,r2,r19
 1009ac4:	1400052e 	bgeu	r2,r16,1009adc <__udivdi3+0xe4>
 1009ac8:	1445883a 	add	r2,r2,r17
 1009acc:	b0ffffc4 	addi	r3,r22,-1
 1009ad0:	14400136 	bltu	r2,r17,1009ad8 <__udivdi3+0xe0>
 1009ad4:	14012336 	bltu	r2,r16,1009f64 <__udivdi3+0x56c>
 1009ad8:	182d883a 	mov	r22,r3
 1009adc:	1421c83a 	sub	r16,r2,r16
 1009ae0:	a80b883a 	mov	r5,r21
 1009ae4:	8009883a 	mov	r4,r16
 1009ae8:	100a6040 	call	100a604 <__umodsi3>
 1009aec:	1027883a 	mov	r19,r2
 1009af0:	a80b883a 	mov	r5,r21
 1009af4:	8009883a 	mov	r4,r16
 1009af8:	100a5a00 	call	100a5a0 <__udivsi3>
 1009afc:	9826943a 	slli	r19,r19,16
 1009b00:	a0a9383a 	mul	r20,r20,r2
 1009b04:	94bfffcc 	andi	r18,r18,65535
 1009b08:	94e4b03a 	or	r18,r18,r19
 1009b0c:	9500052e 	bgeu	r18,r20,1009b24 <__udivdi3+0x12c>
 1009b10:	8ca5883a 	add	r18,r17,r18
 1009b14:	10ffffc4 	addi	r3,r2,-1
 1009b18:	9440f136 	bltu	r18,r17,1009ee0 <__udivdi3+0x4e8>
 1009b1c:	9500f02e 	bgeu	r18,r20,1009ee0 <__udivdi3+0x4e8>
 1009b20:	10bfff84 	addi	r2,r2,-2
 1009b24:	b00c943a 	slli	r6,r22,16
 1009b28:	0007883a 	mov	r3,zero
 1009b2c:	3084b03a 	or	r2,r6,r2
 1009b30:	00005906 	br	1009c98 <__udivdi3+0x2a0>
 1009b34:	29c05636 	bltu	r5,r7,1009c90 <__udivdi3+0x298>
 1009b38:	00bfffd4 	movui	r2,65535
 1009b3c:	11c0622e 	bgeu	r2,r7,1009cc8 <__udivdi3+0x2d0>
 1009b40:	00804034 	movhi	r2,256
 1009b44:	10bfffc4 	addi	r2,r2,-1
 1009b48:	11c0ee36 	bltu	r2,r7,1009f04 <__udivdi3+0x50c>
 1009b4c:	00800404 	movi	r2,16
 1009b50:	3886d83a 	srl	r3,r7,r2
 1009b54:	01004074 	movhi	r4,257
 1009b58:	213d5704 	addi	r4,r4,-2724
 1009b5c:	20c7883a 	add	r3,r4,r3
 1009b60:	18c00003 	ldbu	r3,0(r3)
 1009b64:	05400804 	movi	r21,32
 1009b68:	1885883a 	add	r2,r3,r2
 1009b6c:	a8abc83a 	sub	r21,r21,r2
 1009b70:	a800621e 	bne	r21,zero,1009cfc <__udivdi3+0x304>
 1009b74:	3c00e936 	bltu	r7,r16,1009f1c <__udivdi3+0x524>
 1009b78:	9985403a 	cmpgeu	r2,r19,r6
 1009b7c:	0007883a 	mov	r3,zero
 1009b80:	00004506 	br	1009c98 <__udivdi3+0x2a0>
 1009b84:	3000041e 	bne	r6,zero,1009b98 <__udivdi3+0x1a0>
 1009b88:	000b883a 	mov	r5,zero
 1009b8c:	01000044 	movi	r4,1
 1009b90:	100a5a00 	call	100a5a0 <__udivsi3>
 1009b94:	1023883a 	mov	r17,r2
 1009b98:	00bfffd4 	movui	r2,65535
 1009b9c:	14404e2e 	bgeu	r2,r17,1009cd8 <__udivdi3+0x2e0>
 1009ba0:	00804034 	movhi	r2,256
 1009ba4:	10bfffc4 	addi	r2,r2,-1
 1009ba8:	1440d836 	bltu	r2,r17,1009f0c <__udivdi3+0x514>
 1009bac:	00800404 	movi	r2,16
 1009bb0:	8886d83a 	srl	r3,r17,r2
 1009bb4:	01004074 	movhi	r4,257
 1009bb8:	213d5704 	addi	r4,r4,-2724
 1009bbc:	20c7883a 	add	r3,r4,r3
 1009bc0:	18c00003 	ldbu	r3,0(r3)
 1009bc4:	1885883a 	add	r2,r3,r2
 1009bc8:	00c00804 	movi	r3,32
 1009bcc:	1887c83a 	sub	r3,r3,r2
 1009bd0:	18008f1e 	bne	r3,zero,1009e10 <__udivdi3+0x418>
 1009bd4:	882ad43a 	srli	r21,r17,16
 1009bd8:	8461c83a 	sub	r16,r16,r17
 1009bdc:	8d3fffcc 	andi	r20,r17,65535
 1009be0:	00c00044 	movi	r3,1
 1009be4:	8009883a 	mov	r4,r16
 1009be8:	a80b883a 	mov	r5,r21
 1009bec:	d8c00015 	stw	r3,0(sp)
 1009bf0:	100a6040 	call	100a604 <__umodsi3>
 1009bf4:	8009883a 	mov	r4,r16
 1009bf8:	a80b883a 	mov	r5,r21
 1009bfc:	1027883a 	mov	r19,r2
 1009c00:	100a5a00 	call	100a5a0 <__udivsi3>
 1009c04:	9826943a 	slli	r19,r19,16
 1009c08:	9008d43a 	srli	r4,r18,16
 1009c0c:	1521383a 	mul	r16,r2,r20
 1009c10:	102d883a 	mov	r22,r2
 1009c14:	24c8b03a 	or	r4,r4,r19
 1009c18:	d8c00017 	ldw	r3,0(sp)
 1009c1c:	2400052e 	bgeu	r4,r16,1009c34 <__udivdi3+0x23c>
 1009c20:	2449883a 	add	r4,r4,r17
 1009c24:	b0bfffc4 	addi	r2,r22,-1
 1009c28:	24400136 	bltu	r4,r17,1009c30 <__udivdi3+0x238>
 1009c2c:	2400ca36 	bltu	r4,r16,1009f58 <__udivdi3+0x560>
 1009c30:	102d883a 	mov	r22,r2
 1009c34:	2421c83a 	sub	r16,r4,r16
 1009c38:	a80b883a 	mov	r5,r21
 1009c3c:	8009883a 	mov	r4,r16
 1009c40:	d8c00015 	stw	r3,0(sp)
 1009c44:	100a6040 	call	100a604 <__umodsi3>
 1009c48:	1027883a 	mov	r19,r2
 1009c4c:	a80b883a 	mov	r5,r21
 1009c50:	8009883a 	mov	r4,r16
 1009c54:	100a5a00 	call	100a5a0 <__udivsi3>
 1009c58:	9826943a 	slli	r19,r19,16
 1009c5c:	1529383a 	mul	r20,r2,r20
 1009c60:	94bfffcc 	andi	r18,r18,65535
 1009c64:	94e4b03a 	or	r18,r18,r19
 1009c68:	d8c00017 	ldw	r3,0(sp)
 1009c6c:	9500052e 	bgeu	r18,r20,1009c84 <__udivdi3+0x28c>
 1009c70:	8ca5883a 	add	r18,r17,r18
 1009c74:	113fffc4 	addi	r4,r2,-1
 1009c78:	94409736 	bltu	r18,r17,1009ed8 <__udivdi3+0x4e0>
 1009c7c:	9500962e 	bgeu	r18,r20,1009ed8 <__udivdi3+0x4e0>
 1009c80:	10bfff84 	addi	r2,r2,-2
 1009c84:	b00c943a 	slli	r6,r22,16
 1009c88:	3084b03a 	or	r2,r6,r2
 1009c8c:	00000206 	br	1009c98 <__udivdi3+0x2a0>
 1009c90:	0007883a 	mov	r3,zero
 1009c94:	0005883a 	mov	r2,zero
 1009c98:	dfc00a17 	ldw	ra,40(sp)
 1009c9c:	df000917 	ldw	fp,36(sp)
 1009ca0:	ddc00817 	ldw	r23,32(sp)
 1009ca4:	dd800717 	ldw	r22,28(sp)
 1009ca8:	dd400617 	ldw	r21,24(sp)
 1009cac:	dd000517 	ldw	r20,20(sp)
 1009cb0:	dcc00417 	ldw	r19,16(sp)
 1009cb4:	dc800317 	ldw	r18,12(sp)
 1009cb8:	dc400217 	ldw	r17,8(sp)
 1009cbc:	dc000117 	ldw	r16,4(sp)
 1009cc0:	dec00b04 	addi	sp,sp,44
 1009cc4:	f800283a 	ret
 1009cc8:	00803fc4 	movi	r2,255
 1009ccc:	11c5803a 	cmpltu	r2,r2,r7
 1009cd0:	100490fa 	slli	r2,r2,3
 1009cd4:	003f9e06 	br	1009b50 <__udivdi3+0x158>
 1009cd8:	00803fc4 	movi	r2,255
 1009cdc:	1445803a 	cmpltu	r2,r2,r17
 1009ce0:	100490fa 	slli	r2,r2,3
 1009ce4:	003fb206 	br	1009bb0 <__udivdi3+0x1b8>
 1009ce8:	00804034 	movhi	r2,256
 1009cec:	10bfffc4 	addi	r2,r2,-1
 1009cf0:	11808836 	bltu	r2,r6,1009f14 <__udivdi3+0x51c>
 1009cf4:	00800404 	movi	r2,16
 1009cf8:	003f5606 	br	1009a54 <__udivdi3+0x5c>
 1009cfc:	30aed83a 	srl	r23,r6,r2
 1009d00:	3d4e983a 	sll	r7,r7,r21
 1009d04:	80acd83a 	srl	r22,r16,r2
 1009d08:	9884d83a 	srl	r2,r19,r2
 1009d0c:	3deeb03a 	or	r23,r7,r23
 1009d10:	b824d43a 	srli	r18,r23,16
 1009d14:	8560983a 	sll	r16,r16,r21
 1009d18:	b009883a 	mov	r4,r22
 1009d1c:	900b883a 	mov	r5,r18
 1009d20:	3568983a 	sll	r20,r6,r21
 1009d24:	1420b03a 	or	r16,r2,r16
 1009d28:	100a6040 	call	100a604 <__umodsi3>
 1009d2c:	b009883a 	mov	r4,r22
 1009d30:	900b883a 	mov	r5,r18
 1009d34:	1023883a 	mov	r17,r2
 1009d38:	100a5a00 	call	100a5a0 <__udivsi3>
 1009d3c:	8808943a 	slli	r4,r17,16
 1009d40:	bf3fffcc 	andi	fp,r23,65535
 1009d44:	8006d43a 	srli	r3,r16,16
 1009d48:	e0a3383a 	mul	r17,fp,r2
 1009d4c:	100d883a 	mov	r6,r2
 1009d50:	1906b03a 	or	r3,r3,r4
 1009d54:	1c40042e 	bgeu	r3,r17,1009d68 <__udivdi3+0x370>
 1009d58:	1dc7883a 	add	r3,r3,r23
 1009d5c:	10bfffc4 	addi	r2,r2,-1
 1009d60:	1dc0752e 	bgeu	r3,r23,1009f38 <__udivdi3+0x540>
 1009d64:	100d883a 	mov	r6,r2
 1009d68:	1c63c83a 	sub	r17,r3,r17
 1009d6c:	900b883a 	mov	r5,r18
 1009d70:	8809883a 	mov	r4,r17
 1009d74:	d9800015 	stw	r6,0(sp)
 1009d78:	100a6040 	call	100a604 <__umodsi3>
 1009d7c:	102d883a 	mov	r22,r2
 1009d80:	8809883a 	mov	r4,r17
 1009d84:	900b883a 	mov	r5,r18
 1009d88:	100a5a00 	call	100a5a0 <__udivsi3>
 1009d8c:	b02c943a 	slli	r22,r22,16
 1009d90:	e089383a 	mul	r4,fp,r2
 1009d94:	843fffcc 	andi	r16,r16,65535
 1009d98:	85a0b03a 	or	r16,r16,r22
 1009d9c:	d9800017 	ldw	r6,0(sp)
 1009da0:	8100042e 	bgeu	r16,r4,1009db4 <__udivdi3+0x3bc>
 1009da4:	85e1883a 	add	r16,r16,r23
 1009da8:	10ffffc4 	addi	r3,r2,-1
 1009dac:	85c05e2e 	bgeu	r16,r23,1009f28 <__udivdi3+0x530>
 1009db0:	1805883a 	mov	r2,r3
 1009db4:	300c943a 	slli	r6,r6,16
 1009db8:	a17fffcc 	andi	r5,r20,65535
 1009dbc:	a028d43a 	srli	r20,r20,16
 1009dc0:	3084b03a 	or	r2,r6,r2
 1009dc4:	10ffffcc 	andi	r3,r2,65535
 1009dc8:	100cd43a 	srli	r6,r2,16
 1009dcc:	194f383a 	mul	r7,r3,r5
 1009dd0:	1d07383a 	mul	r3,r3,r20
 1009dd4:	314b383a 	mul	r5,r6,r5
 1009dd8:	3810d43a 	srli	r8,r7,16
 1009ddc:	8121c83a 	sub	r16,r16,r4
 1009de0:	1947883a 	add	r3,r3,r5
 1009de4:	40c7883a 	add	r3,r8,r3
 1009de8:	350d383a 	mul	r6,r6,r20
 1009dec:	1940022e 	bgeu	r3,r5,1009df8 <__udivdi3+0x400>
 1009df0:	01000074 	movhi	r4,1
 1009df4:	310d883a 	add	r6,r6,r4
 1009df8:	1828d43a 	srli	r20,r3,16
 1009dfc:	a18d883a 	add	r6,r20,r6
 1009e00:	81803e36 	bltu	r16,r6,1009efc <__udivdi3+0x504>
 1009e04:	81803826 	beq	r16,r6,1009ee8 <__udivdi3+0x4f0>
 1009e08:	0007883a 	mov	r3,zero
 1009e0c:	003fa206 	br	1009c98 <__udivdi3+0x2a0>
 1009e10:	88e2983a 	sll	r17,r17,r3
 1009e14:	80a8d83a 	srl	r20,r16,r2
 1009e18:	80e0983a 	sll	r16,r16,r3
 1009e1c:	882ad43a 	srli	r21,r17,16
 1009e20:	9884d83a 	srl	r2,r19,r2
 1009e24:	a009883a 	mov	r4,r20
 1009e28:	a80b883a 	mov	r5,r21
 1009e2c:	142eb03a 	or	r23,r2,r16
 1009e30:	98e4983a 	sll	r18,r19,r3
 1009e34:	100a6040 	call	100a604 <__umodsi3>
 1009e38:	a009883a 	mov	r4,r20
 1009e3c:	a80b883a 	mov	r5,r21
 1009e40:	1021883a 	mov	r16,r2
 1009e44:	100a5a00 	call	100a5a0 <__udivsi3>
 1009e48:	1039883a 	mov	fp,r2
 1009e4c:	8d3fffcc 	andi	r20,r17,65535
 1009e50:	8020943a 	slli	r16,r16,16
 1009e54:	b804d43a 	srli	r2,r23,16
 1009e58:	a72d383a 	mul	r22,r20,fp
 1009e5c:	1404b03a 	or	r2,r2,r16
 1009e60:	1580062e 	bgeu	r2,r22,1009e7c <__udivdi3+0x484>
 1009e64:	1445883a 	add	r2,r2,r17
 1009e68:	e0ffffc4 	addi	r3,fp,-1
 1009e6c:	14403836 	bltu	r2,r17,1009f50 <__udivdi3+0x558>
 1009e70:	1580372e 	bgeu	r2,r22,1009f50 <__udivdi3+0x558>
 1009e74:	e73fff84 	addi	fp,fp,-2
 1009e78:	1445883a 	add	r2,r2,r17
 1009e7c:	15adc83a 	sub	r22,r2,r22
 1009e80:	a80b883a 	mov	r5,r21
 1009e84:	b009883a 	mov	r4,r22
 1009e88:	100a6040 	call	100a604 <__umodsi3>
 1009e8c:	1027883a 	mov	r19,r2
 1009e90:	b009883a 	mov	r4,r22
 1009e94:	a80b883a 	mov	r5,r21
 1009e98:	100a5a00 	call	100a5a0 <__udivsi3>
 1009e9c:	9826943a 	slli	r19,r19,16
 1009ea0:	a0a1383a 	mul	r16,r20,r2
 1009ea4:	b93fffcc 	andi	r4,r23,65535
 1009ea8:	24c8b03a 	or	r4,r4,r19
 1009eac:	2400062e 	bgeu	r4,r16,1009ec8 <__udivdi3+0x4d0>
 1009eb0:	2449883a 	add	r4,r4,r17
 1009eb4:	10ffffc4 	addi	r3,r2,-1
 1009eb8:	24402336 	bltu	r4,r17,1009f48 <__udivdi3+0x550>
 1009ebc:	2400222e 	bgeu	r4,r16,1009f48 <__udivdi3+0x550>
 1009ec0:	10bfff84 	addi	r2,r2,-2
 1009ec4:	2449883a 	add	r4,r4,r17
 1009ec8:	e038943a 	slli	fp,fp,16
 1009ecc:	2421c83a 	sub	r16,r4,r16
 1009ed0:	e086b03a 	or	r3,fp,r2
 1009ed4:	003f4306 	br	1009be4 <__udivdi3+0x1ec>
 1009ed8:	2005883a 	mov	r2,r4
 1009edc:	003f6906 	br	1009c84 <__udivdi3+0x28c>
 1009ee0:	1805883a 	mov	r2,r3
 1009ee4:	003f0f06 	br	1009b24 <__udivdi3+0x12c>
 1009ee8:	1806943a 	slli	r3,r3,16
 1009eec:	9d66983a 	sll	r19,r19,r21
 1009ef0:	39ffffcc 	andi	r7,r7,65535
 1009ef4:	19c7883a 	add	r3,r3,r7
 1009ef8:	98ffc32e 	bgeu	r19,r3,1009e08 <__udivdi3+0x410>
 1009efc:	10bfffc4 	addi	r2,r2,-1
 1009f00:	003fc106 	br	1009e08 <__udivdi3+0x410>
 1009f04:	00800604 	movi	r2,24
 1009f08:	003f1106 	br	1009b50 <__udivdi3+0x158>
 1009f0c:	00800604 	movi	r2,24
 1009f10:	003f2706 	br	1009bb0 <__udivdi3+0x1b8>
 1009f14:	00800604 	movi	r2,24
 1009f18:	003ece06 	br	1009a54 <__udivdi3+0x5c>
 1009f1c:	0007883a 	mov	r3,zero
 1009f20:	00800044 	movi	r2,1
 1009f24:	003f5c06 	br	1009c98 <__udivdi3+0x2a0>
 1009f28:	813fa12e 	bgeu	r16,r4,1009db0 <__udivdi3+0x3b8>
 1009f2c:	10bfff84 	addi	r2,r2,-2
 1009f30:	85e1883a 	add	r16,r16,r23
 1009f34:	003f9f06 	br	1009db4 <__udivdi3+0x3bc>
 1009f38:	1c7f8a2e 	bgeu	r3,r17,1009d64 <__udivdi3+0x36c>
 1009f3c:	31bfff84 	addi	r6,r6,-2
 1009f40:	1dc7883a 	add	r3,r3,r23
 1009f44:	003f8806 	br	1009d68 <__udivdi3+0x370>
 1009f48:	1805883a 	mov	r2,r3
 1009f4c:	003fde06 	br	1009ec8 <__udivdi3+0x4d0>
 1009f50:	1839883a 	mov	fp,r3
 1009f54:	003fc906 	br	1009e7c <__udivdi3+0x484>
 1009f58:	b5bfff84 	addi	r22,r22,-2
 1009f5c:	2449883a 	add	r4,r4,r17
 1009f60:	003f3406 	br	1009c34 <__udivdi3+0x23c>
 1009f64:	b5bfff84 	addi	r22,r22,-2
 1009f68:	1445883a 	add	r2,r2,r17
 1009f6c:	003edb06 	br	1009adc <__udivdi3+0xe4>

01009f70 <__umoddi3>:
 1009f70:	defff404 	addi	sp,sp,-48
 1009f74:	df000a15 	stw	fp,40(sp)
 1009f78:	dc400315 	stw	r17,12(sp)
 1009f7c:	dc000215 	stw	r16,8(sp)
 1009f80:	dfc00b15 	stw	ra,44(sp)
 1009f84:	ddc00915 	stw	r23,36(sp)
 1009f88:	dd800815 	stw	r22,32(sp)
 1009f8c:	dd400715 	stw	r21,28(sp)
 1009f90:	dd000615 	stw	r20,24(sp)
 1009f94:	dcc00515 	stw	r19,20(sp)
 1009f98:	dc800415 	stw	r18,16(sp)
 1009f9c:	2021883a 	mov	r16,r4
 1009fa0:	2823883a 	mov	r17,r5
 1009fa4:	2839883a 	mov	fp,r5
 1009fa8:	38003c1e 	bne	r7,zero,100a09c <__umoddi3+0x12c>
 1009fac:	3027883a 	mov	r19,r6
 1009fb0:	2029883a 	mov	r20,r4
 1009fb4:	2980512e 	bgeu	r5,r6,100a0fc <__umoddi3+0x18c>
 1009fb8:	00bfffd4 	movui	r2,65535
 1009fbc:	11809a36 	bltu	r2,r6,100a228 <__umoddi3+0x2b8>
 1009fc0:	01003fc4 	movi	r4,255
 1009fc4:	2189803a 	cmpltu	r4,r4,r6
 1009fc8:	200890fa 	slli	r4,r4,3
 1009fcc:	3104d83a 	srl	r2,r6,r4
 1009fd0:	00c04074 	movhi	r3,257
 1009fd4:	18fd5704 	addi	r3,r3,-2724
 1009fd8:	1885883a 	add	r2,r3,r2
 1009fdc:	10c00003 	ldbu	r3,0(r2)
 1009fe0:	00800804 	movi	r2,32
 1009fe4:	1909883a 	add	r4,r3,r4
 1009fe8:	1125c83a 	sub	r18,r2,r4
 1009fec:	90000526 	beq	r18,zero,100a004 <__umoddi3+0x94>
 1009ff0:	8ca2983a 	sll	r17,r17,r18
 1009ff4:	8108d83a 	srl	r4,r16,r4
 1009ff8:	34a6983a 	sll	r19,r6,r18
 1009ffc:	84a8983a 	sll	r20,r16,r18
 100a000:	2478b03a 	or	fp,r4,r17
 100a004:	982ed43a 	srli	r23,r19,16
 100a008:	e009883a 	mov	r4,fp
 100a00c:	9dbfffcc 	andi	r22,r19,65535
 100a010:	b80b883a 	mov	r5,r23
 100a014:	100a6040 	call	100a604 <__umodsi3>
 100a018:	e009883a 	mov	r4,fp
 100a01c:	b80b883a 	mov	r5,r23
 100a020:	102b883a 	mov	r21,r2
 100a024:	100a5a00 	call	100a5a0 <__udivsi3>
 100a028:	a806943a 	slli	r3,r21,16
 100a02c:	a008d43a 	srli	r4,r20,16
 100a030:	b085383a 	mul	r2,r22,r2
 100a034:	20c8b03a 	or	r4,r4,r3
 100a038:	2080032e 	bgeu	r4,r2,100a048 <__umoddi3+0xd8>
 100a03c:	24c9883a 	add	r4,r4,r19
 100a040:	24c00136 	bltu	r4,r19,100a048 <__umoddi3+0xd8>
 100a044:	20811036 	bltu	r4,r2,100a488 <__umoddi3+0x518>
 100a048:	20abc83a 	sub	r21,r4,r2
 100a04c:	b80b883a 	mov	r5,r23
 100a050:	a809883a 	mov	r4,r21
 100a054:	100a6040 	call	100a604 <__umodsi3>
 100a058:	1023883a 	mov	r17,r2
 100a05c:	b80b883a 	mov	r5,r23
 100a060:	a809883a 	mov	r4,r21
 100a064:	100a5a00 	call	100a5a0 <__udivsi3>
 100a068:	8822943a 	slli	r17,r17,16
 100a06c:	b085383a 	mul	r2,r22,r2
 100a070:	a0ffffcc 	andi	r3,r20,65535
 100a074:	1c46b03a 	or	r3,r3,r17
 100a078:	1880042e 	bgeu	r3,r2,100a08c <__umoddi3+0x11c>
 100a07c:	1cc7883a 	add	r3,r3,r19
 100a080:	1cc00236 	bltu	r3,r19,100a08c <__umoddi3+0x11c>
 100a084:	1880012e 	bgeu	r3,r2,100a08c <__umoddi3+0x11c>
 100a088:	1cc7883a 	add	r3,r3,r19
 100a08c:	1885c83a 	sub	r2,r3,r2
 100a090:	1484d83a 	srl	r2,r2,r18
 100a094:	0007883a 	mov	r3,zero
 100a098:	00004f06 	br	100a1d8 <__umoddi3+0x268>
 100a09c:	29c04c36 	bltu	r5,r7,100a1d0 <__umoddi3+0x260>
 100a0a0:	00bfffd4 	movui	r2,65535
 100a0a4:	11c0582e 	bgeu	r2,r7,100a208 <__umoddi3+0x298>
 100a0a8:	00804034 	movhi	r2,256
 100a0ac:	10bfffc4 	addi	r2,r2,-1
 100a0b0:	11c0e736 	bltu	r2,r7,100a450 <__umoddi3+0x4e0>
 100a0b4:	01000404 	movi	r4,16
 100a0b8:	3904d83a 	srl	r2,r7,r4
 100a0bc:	00c04074 	movhi	r3,257
 100a0c0:	18fd5704 	addi	r3,r3,-2724
 100a0c4:	1885883a 	add	r2,r3,r2
 100a0c8:	14c00003 	ldbu	r19,0(r2)
 100a0cc:	00c00804 	movi	r3,32
 100a0d0:	9927883a 	add	r19,r19,r4
 100a0d4:	1ce9c83a 	sub	r20,r3,r19
 100a0d8:	a000581e 	bne	r20,zero,100a23c <__umoddi3+0x2cc>
 100a0dc:	3c400136 	bltu	r7,r17,100a0e4 <__umoddi3+0x174>
 100a0e0:	8180eb36 	bltu	r16,r6,100a490 <__umoddi3+0x520>
 100a0e4:	8185c83a 	sub	r2,r16,r6
 100a0e8:	89e3c83a 	sub	r17,r17,r7
 100a0ec:	8089803a 	cmpltu	r4,r16,r2
 100a0f0:	8939c83a 	sub	fp,r17,r4
 100a0f4:	e007883a 	mov	r3,fp
 100a0f8:	00003706 	br	100a1d8 <__umoddi3+0x268>
 100a0fc:	3000041e 	bne	r6,zero,100a110 <__umoddi3+0x1a0>
 100a100:	000b883a 	mov	r5,zero
 100a104:	01000044 	movi	r4,1
 100a108:	100a5a00 	call	100a5a0 <__udivsi3>
 100a10c:	1027883a 	mov	r19,r2
 100a110:	00bfffd4 	movui	r2,65535
 100a114:	14c0402e 	bgeu	r2,r19,100a218 <__umoddi3+0x2a8>
 100a118:	00804034 	movhi	r2,256
 100a11c:	10bfffc4 	addi	r2,r2,-1
 100a120:	14c0cd36 	bltu	r2,r19,100a458 <__umoddi3+0x4e8>
 100a124:	00800404 	movi	r2,16
 100a128:	9886d83a 	srl	r3,r19,r2
 100a12c:	01004074 	movhi	r4,257
 100a130:	213d5704 	addi	r4,r4,-2724
 100a134:	20c7883a 	add	r3,r4,r3
 100a138:	18c00003 	ldbu	r3,0(r3)
 100a13c:	1887883a 	add	r3,r3,r2
 100a140:	00800804 	movi	r2,32
 100a144:	10e5c83a 	sub	r18,r2,r3
 100a148:	9000901e 	bne	r18,zero,100a38c <__umoddi3+0x41c>
 100a14c:	982cd43a 	srli	r22,r19,16
 100a150:	8ce3c83a 	sub	r17,r17,r19
 100a154:	9d7fffcc 	andi	r21,r19,65535
 100a158:	b00b883a 	mov	r5,r22
 100a15c:	8809883a 	mov	r4,r17
 100a160:	100a6040 	call	100a604 <__umodsi3>
 100a164:	8809883a 	mov	r4,r17
 100a168:	b00b883a 	mov	r5,r22
 100a16c:	1021883a 	mov	r16,r2
 100a170:	100a5a00 	call	100a5a0 <__udivsi3>
 100a174:	8006943a 	slli	r3,r16,16
 100a178:	a008d43a 	srli	r4,r20,16
 100a17c:	1545383a 	mul	r2,r2,r21
 100a180:	20c8b03a 	or	r4,r4,r3
 100a184:	2080042e 	bgeu	r4,r2,100a198 <__umoddi3+0x228>
 100a188:	24c9883a 	add	r4,r4,r19
 100a18c:	24c00236 	bltu	r4,r19,100a198 <__umoddi3+0x228>
 100a190:	2080012e 	bgeu	r4,r2,100a198 <__umoddi3+0x228>
 100a194:	24c9883a 	add	r4,r4,r19
 100a198:	20a1c83a 	sub	r16,r4,r2
 100a19c:	b00b883a 	mov	r5,r22
 100a1a0:	8009883a 	mov	r4,r16
 100a1a4:	100a6040 	call	100a604 <__umodsi3>
 100a1a8:	1023883a 	mov	r17,r2
 100a1ac:	b00b883a 	mov	r5,r22
 100a1b0:	8009883a 	mov	r4,r16
 100a1b4:	100a5a00 	call	100a5a0 <__udivsi3>
 100a1b8:	8822943a 	slli	r17,r17,16
 100a1bc:	1545383a 	mul	r2,r2,r21
 100a1c0:	a53fffcc 	andi	r20,r20,65535
 100a1c4:	a446b03a 	or	r3,r20,r17
 100a1c8:	18bfb02e 	bgeu	r3,r2,100a08c <__umoddi3+0x11c>
 100a1cc:	003fab06 	br	100a07c <__umoddi3+0x10c>
 100a1d0:	2005883a 	mov	r2,r4
 100a1d4:	2807883a 	mov	r3,r5
 100a1d8:	dfc00b17 	ldw	ra,44(sp)
 100a1dc:	df000a17 	ldw	fp,40(sp)
 100a1e0:	ddc00917 	ldw	r23,36(sp)
 100a1e4:	dd800817 	ldw	r22,32(sp)
 100a1e8:	dd400717 	ldw	r21,28(sp)
 100a1ec:	dd000617 	ldw	r20,24(sp)
 100a1f0:	dcc00517 	ldw	r19,20(sp)
 100a1f4:	dc800417 	ldw	r18,16(sp)
 100a1f8:	dc400317 	ldw	r17,12(sp)
 100a1fc:	dc000217 	ldw	r16,8(sp)
 100a200:	dec00c04 	addi	sp,sp,48
 100a204:	f800283a 	ret
 100a208:	04c03fc4 	movi	r19,255
 100a20c:	99c9803a 	cmpltu	r4,r19,r7
 100a210:	200890fa 	slli	r4,r4,3
 100a214:	003fa806 	br	100a0b8 <__umoddi3+0x148>
 100a218:	00803fc4 	movi	r2,255
 100a21c:	14c5803a 	cmpltu	r2,r2,r19
 100a220:	100490fa 	slli	r2,r2,3
 100a224:	003fc006 	br	100a128 <__umoddi3+0x1b8>
 100a228:	00804034 	movhi	r2,256
 100a22c:	10bfffc4 	addi	r2,r2,-1
 100a230:	11808b36 	bltu	r2,r6,100a460 <__umoddi3+0x4f0>
 100a234:	01000404 	movi	r4,16
 100a238:	003f6406 	br	1009fcc <__umoddi3+0x5c>
 100a23c:	34c4d83a 	srl	r2,r6,r19
 100a240:	3d0e983a 	sll	r7,r7,r20
 100a244:	8cf8d83a 	srl	fp,r17,r19
 100a248:	8d10983a 	sll	r8,r17,r20
 100a24c:	38aab03a 	or	r21,r7,r2
 100a250:	a82cd43a 	srli	r22,r21,16
 100a254:	84e2d83a 	srl	r17,r16,r19
 100a258:	e009883a 	mov	r4,fp
 100a25c:	b00b883a 	mov	r5,r22
 100a260:	8a22b03a 	or	r17,r17,r8
 100a264:	3524983a 	sll	r18,r6,r20
 100a268:	100a6040 	call	100a604 <__umodsi3>
 100a26c:	e009883a 	mov	r4,fp
 100a270:	b00b883a 	mov	r5,r22
 100a274:	102f883a 	mov	r23,r2
 100a278:	100a5a00 	call	100a5a0 <__udivsi3>
 100a27c:	100d883a 	mov	r6,r2
 100a280:	b808943a 	slli	r4,r23,16
 100a284:	aa3fffcc 	andi	r8,r21,65535
 100a288:	8804d43a 	srli	r2,r17,16
 100a28c:	41af383a 	mul	r23,r8,r6
 100a290:	8520983a 	sll	r16,r16,r20
 100a294:	1104b03a 	or	r2,r2,r4
 100a298:	15c0042e 	bgeu	r2,r23,100a2ac <__umoddi3+0x33c>
 100a29c:	1545883a 	add	r2,r2,r21
 100a2a0:	30ffffc4 	addi	r3,r6,-1
 100a2a4:	1540742e 	bgeu	r2,r21,100a478 <__umoddi3+0x508>
 100a2a8:	180d883a 	mov	r6,r3
 100a2ac:	15efc83a 	sub	r23,r2,r23
 100a2b0:	b00b883a 	mov	r5,r22
 100a2b4:	b809883a 	mov	r4,r23
 100a2b8:	d9800115 	stw	r6,4(sp)
 100a2bc:	da000015 	stw	r8,0(sp)
 100a2c0:	100a6040 	call	100a604 <__umodsi3>
 100a2c4:	b00b883a 	mov	r5,r22
 100a2c8:	b809883a 	mov	r4,r23
 100a2cc:	1039883a 	mov	fp,r2
 100a2d0:	100a5a00 	call	100a5a0 <__udivsi3>
 100a2d4:	da000017 	ldw	r8,0(sp)
 100a2d8:	e038943a 	slli	fp,fp,16
 100a2dc:	100b883a 	mov	r5,r2
 100a2e0:	4089383a 	mul	r4,r8,r2
 100a2e4:	8a3fffcc 	andi	r8,r17,65535
 100a2e8:	4710b03a 	or	r8,r8,fp
 100a2ec:	d9800117 	ldw	r6,4(sp)
 100a2f0:	4100042e 	bgeu	r8,r4,100a304 <__umoddi3+0x394>
 100a2f4:	4551883a 	add	r8,r8,r21
 100a2f8:	10bfffc4 	addi	r2,r2,-1
 100a2fc:	45405a2e 	bgeu	r8,r21,100a468 <__umoddi3+0x4f8>
 100a300:	100b883a 	mov	r5,r2
 100a304:	300c943a 	slli	r6,r6,16
 100a308:	91ffffcc 	andi	r7,r18,65535
 100a30c:	9004d43a 	srli	r2,r18,16
 100a310:	314cb03a 	or	r6,r6,r5
 100a314:	317fffcc 	andi	r5,r6,65535
 100a318:	300cd43a 	srli	r6,r6,16
 100a31c:	29d3383a 	mul	r9,r5,r7
 100a320:	288b383a 	mul	r5,r5,r2
 100a324:	31cf383a 	mul	r7,r6,r7
 100a328:	4806d43a 	srli	r3,r9,16
 100a32c:	4111c83a 	sub	r8,r8,r4
 100a330:	29cb883a 	add	r5,r5,r7
 100a334:	194b883a 	add	r5,r3,r5
 100a338:	3085383a 	mul	r2,r6,r2
 100a33c:	29c0022e 	bgeu	r5,r7,100a348 <__umoddi3+0x3d8>
 100a340:	00c00074 	movhi	r3,1
 100a344:	10c5883a 	add	r2,r2,r3
 100a348:	2808d43a 	srli	r4,r5,16
 100a34c:	280a943a 	slli	r5,r5,16
 100a350:	4a7fffcc 	andi	r9,r9,65535
 100a354:	2085883a 	add	r2,r4,r2
 100a358:	2a4b883a 	add	r5,r5,r9
 100a35c:	40803636 	bltu	r8,r2,100a438 <__umoddi3+0x4c8>
 100a360:	40804d26 	beq	r8,r2,100a498 <__umoddi3+0x528>
 100a364:	4089c83a 	sub	r4,r8,r2
 100a368:	280f883a 	mov	r7,r5
 100a36c:	81cfc83a 	sub	r7,r16,r7
 100a370:	81c7803a 	cmpltu	r3,r16,r7
 100a374:	20c7c83a 	sub	r3,r4,r3
 100a378:	1cc4983a 	sll	r2,r3,r19
 100a37c:	3d0ed83a 	srl	r7,r7,r20
 100a380:	1d06d83a 	srl	r3,r3,r20
 100a384:	11c4b03a 	or	r2,r2,r7
 100a388:	003f9306 	br	100a1d8 <__umoddi3+0x268>
 100a38c:	9ca6983a 	sll	r19,r19,r18
 100a390:	88e8d83a 	srl	r20,r17,r3
 100a394:	80c4d83a 	srl	r2,r16,r3
 100a398:	982cd43a 	srli	r22,r19,16
 100a39c:	8ca2983a 	sll	r17,r17,r18
 100a3a0:	a009883a 	mov	r4,r20
 100a3a4:	b00b883a 	mov	r5,r22
 100a3a8:	1478b03a 	or	fp,r2,r17
 100a3ac:	100a6040 	call	100a604 <__umodsi3>
 100a3b0:	a009883a 	mov	r4,r20
 100a3b4:	b00b883a 	mov	r5,r22
 100a3b8:	1023883a 	mov	r17,r2
 100a3bc:	100a5a00 	call	100a5a0 <__udivsi3>
 100a3c0:	9d7fffcc 	andi	r21,r19,65535
 100a3c4:	880a943a 	slli	r5,r17,16
 100a3c8:	e008d43a 	srli	r4,fp,16
 100a3cc:	a885383a 	mul	r2,r21,r2
 100a3d0:	84a8983a 	sll	r20,r16,r18
 100a3d4:	2148b03a 	or	r4,r4,r5
 100a3d8:	2080042e 	bgeu	r4,r2,100a3ec <__umoddi3+0x47c>
 100a3dc:	24c9883a 	add	r4,r4,r19
 100a3e0:	24c00236 	bltu	r4,r19,100a3ec <__umoddi3+0x47c>
 100a3e4:	2080012e 	bgeu	r4,r2,100a3ec <__umoddi3+0x47c>
 100a3e8:	24c9883a 	add	r4,r4,r19
 100a3ec:	20a3c83a 	sub	r17,r4,r2
 100a3f0:	b00b883a 	mov	r5,r22
 100a3f4:	8809883a 	mov	r4,r17
 100a3f8:	100a6040 	call	100a604 <__umodsi3>
 100a3fc:	102f883a 	mov	r23,r2
 100a400:	8809883a 	mov	r4,r17
 100a404:	b00b883a 	mov	r5,r22
 100a408:	100a5a00 	call	100a5a0 <__udivsi3>
 100a40c:	b82e943a 	slli	r23,r23,16
 100a410:	a885383a 	mul	r2,r21,r2
 100a414:	e13fffcc 	andi	r4,fp,65535
 100a418:	25c8b03a 	or	r4,r4,r23
 100a41c:	2080042e 	bgeu	r4,r2,100a430 <__umoddi3+0x4c0>
 100a420:	24c9883a 	add	r4,r4,r19
 100a424:	24c00236 	bltu	r4,r19,100a430 <__umoddi3+0x4c0>
 100a428:	2080012e 	bgeu	r4,r2,100a430 <__umoddi3+0x4c0>
 100a42c:	24c9883a 	add	r4,r4,r19
 100a430:	20a3c83a 	sub	r17,r4,r2
 100a434:	003f4806 	br	100a158 <__umoddi3+0x1e8>
 100a438:	2c8fc83a 	sub	r7,r5,r18
 100a43c:	1545c83a 	sub	r2,r2,r21
 100a440:	29cb803a 	cmpltu	r5,r5,r7
 100a444:	1145c83a 	sub	r2,r2,r5
 100a448:	4089c83a 	sub	r4,r8,r2
 100a44c:	003fc706 	br	100a36c <__umoddi3+0x3fc>
 100a450:	01000604 	movi	r4,24
 100a454:	003f1806 	br	100a0b8 <__umoddi3+0x148>
 100a458:	00800604 	movi	r2,24
 100a45c:	003f3206 	br	100a128 <__umoddi3+0x1b8>
 100a460:	01000604 	movi	r4,24
 100a464:	003ed906 	br	1009fcc <__umoddi3+0x5c>
 100a468:	413fa52e 	bgeu	r8,r4,100a300 <__umoddi3+0x390>
 100a46c:	297fff84 	addi	r5,r5,-2
 100a470:	4551883a 	add	r8,r8,r21
 100a474:	003fa306 	br	100a304 <__umoddi3+0x394>
 100a478:	15ff8b2e 	bgeu	r2,r23,100a2a8 <__umoddi3+0x338>
 100a47c:	31bfff84 	addi	r6,r6,-2
 100a480:	1545883a 	add	r2,r2,r21
 100a484:	003f8906 	br	100a2ac <__umoddi3+0x33c>
 100a488:	24c9883a 	add	r4,r4,r19
 100a48c:	003eee06 	br	100a048 <__umoddi3+0xd8>
 100a490:	8005883a 	mov	r2,r16
 100a494:	003f1706 	br	100a0f4 <__umoddi3+0x184>
 100a498:	817fe736 	bltu	r16,r5,100a438 <__umoddi3+0x4c8>
 100a49c:	280f883a 	mov	r7,r5
 100a4a0:	0009883a 	mov	r4,zero
 100a4a4:	003fb106 	br	100a36c <__umoddi3+0x3fc>

0100a4a8 <__divsi3>:
 100a4a8:	20001b16 	blt	r4,zero,100a518 <__divsi3+0x70>
 100a4ac:	000f883a 	mov	r7,zero
 100a4b0:	28001616 	blt	r5,zero,100a50c <__divsi3+0x64>
 100a4b4:	200d883a 	mov	r6,r4
 100a4b8:	29001a2e 	bgeu	r5,r4,100a524 <__divsi3+0x7c>
 100a4bc:	00800804 	movi	r2,32
 100a4c0:	00c00044 	movi	r3,1
 100a4c4:	00000106 	br	100a4cc <__divsi3+0x24>
 100a4c8:	10000d26 	beq	r2,zero,100a500 <__divsi3+0x58>
 100a4cc:	294b883a 	add	r5,r5,r5
 100a4d0:	10bfffc4 	addi	r2,r2,-1
 100a4d4:	18c7883a 	add	r3,r3,r3
 100a4d8:	293ffb36 	bltu	r5,r4,100a4c8 <__divsi3+0x20>
 100a4dc:	0005883a 	mov	r2,zero
 100a4e0:	18000726 	beq	r3,zero,100a500 <__divsi3+0x58>
 100a4e4:	0005883a 	mov	r2,zero
 100a4e8:	31400236 	bltu	r6,r5,100a4f4 <__divsi3+0x4c>
 100a4ec:	314dc83a 	sub	r6,r6,r5
 100a4f0:	10c4b03a 	or	r2,r2,r3
 100a4f4:	1806d07a 	srli	r3,r3,1
 100a4f8:	280ad07a 	srli	r5,r5,1
 100a4fc:	183ffa1e 	bne	r3,zero,100a4e8 <__divsi3+0x40>
 100a500:	38000126 	beq	r7,zero,100a508 <__divsi3+0x60>
 100a504:	0085c83a 	sub	r2,zero,r2
 100a508:	f800283a 	ret
 100a50c:	014bc83a 	sub	r5,zero,r5
 100a510:	39c0005c 	xori	r7,r7,1
 100a514:	003fe706 	br	100a4b4 <__divsi3+0xc>
 100a518:	0109c83a 	sub	r4,zero,r4
 100a51c:	01c00044 	movi	r7,1
 100a520:	003fe306 	br	100a4b0 <__divsi3+0x8>
 100a524:	00c00044 	movi	r3,1
 100a528:	003fee06 	br	100a4e4 <__divsi3+0x3c>

0100a52c <__modsi3>:
 100a52c:	20001716 	blt	r4,zero,100a58c <__modsi3+0x60>
 100a530:	000f883a 	mov	r7,zero
 100a534:	2005883a 	mov	r2,r4
 100a538:	28001216 	blt	r5,zero,100a584 <__modsi3+0x58>
 100a53c:	2900162e 	bgeu	r5,r4,100a598 <__modsi3+0x6c>
 100a540:	01800804 	movi	r6,32
 100a544:	00c00044 	movi	r3,1
 100a548:	00000106 	br	100a550 <__modsi3+0x24>
 100a54c:	30000a26 	beq	r6,zero,100a578 <__modsi3+0x4c>
 100a550:	294b883a 	add	r5,r5,r5
 100a554:	31bfffc4 	addi	r6,r6,-1
 100a558:	18c7883a 	add	r3,r3,r3
 100a55c:	293ffb36 	bltu	r5,r4,100a54c <__modsi3+0x20>
 100a560:	18000526 	beq	r3,zero,100a578 <__modsi3+0x4c>
 100a564:	1806d07a 	srli	r3,r3,1
 100a568:	11400136 	bltu	r2,r5,100a570 <__modsi3+0x44>
 100a56c:	1145c83a 	sub	r2,r2,r5
 100a570:	280ad07a 	srli	r5,r5,1
 100a574:	183ffb1e 	bne	r3,zero,100a564 <__modsi3+0x38>
 100a578:	38000126 	beq	r7,zero,100a580 <__modsi3+0x54>
 100a57c:	0085c83a 	sub	r2,zero,r2
 100a580:	f800283a 	ret
 100a584:	014bc83a 	sub	r5,zero,r5
 100a588:	003fec06 	br	100a53c <__modsi3+0x10>
 100a58c:	0109c83a 	sub	r4,zero,r4
 100a590:	01c00044 	movi	r7,1
 100a594:	003fe706 	br	100a534 <__modsi3+0x8>
 100a598:	00c00044 	movi	r3,1
 100a59c:	003ff106 	br	100a564 <__modsi3+0x38>

0100a5a0 <__udivsi3>:
 100a5a0:	200d883a 	mov	r6,r4
 100a5a4:	2900152e 	bgeu	r5,r4,100a5fc <__udivsi3+0x5c>
 100a5a8:	28001416 	blt	r5,zero,100a5fc <__udivsi3+0x5c>
 100a5ac:	00800804 	movi	r2,32
 100a5b0:	00c00044 	movi	r3,1
 100a5b4:	00000206 	br	100a5c0 <__udivsi3+0x20>
 100a5b8:	10000e26 	beq	r2,zero,100a5f4 <__udivsi3+0x54>
 100a5bc:	28000516 	blt	r5,zero,100a5d4 <__udivsi3+0x34>
 100a5c0:	294b883a 	add	r5,r5,r5
 100a5c4:	10bfffc4 	addi	r2,r2,-1
 100a5c8:	18c7883a 	add	r3,r3,r3
 100a5cc:	293ffa36 	bltu	r5,r4,100a5b8 <__udivsi3+0x18>
 100a5d0:	18000826 	beq	r3,zero,100a5f4 <__udivsi3+0x54>
 100a5d4:	0005883a 	mov	r2,zero
 100a5d8:	31400236 	bltu	r6,r5,100a5e4 <__udivsi3+0x44>
 100a5dc:	314dc83a 	sub	r6,r6,r5
 100a5e0:	10c4b03a 	or	r2,r2,r3
 100a5e4:	1806d07a 	srli	r3,r3,1
 100a5e8:	280ad07a 	srli	r5,r5,1
 100a5ec:	183ffa1e 	bne	r3,zero,100a5d8 <__udivsi3+0x38>
 100a5f0:	f800283a 	ret
 100a5f4:	0005883a 	mov	r2,zero
 100a5f8:	f800283a 	ret
 100a5fc:	00c00044 	movi	r3,1
 100a600:	003ff406 	br	100a5d4 <__udivsi3+0x34>

0100a604 <__umodsi3>:
 100a604:	2005883a 	mov	r2,r4
 100a608:	2900122e 	bgeu	r5,r4,100a654 <__umodsi3+0x50>
 100a60c:	28001116 	blt	r5,zero,100a654 <__umodsi3+0x50>
 100a610:	01800804 	movi	r6,32
 100a614:	00c00044 	movi	r3,1
 100a618:	00000206 	br	100a624 <__umodsi3+0x20>
 100a61c:	30000c26 	beq	r6,zero,100a650 <__umodsi3+0x4c>
 100a620:	28000516 	blt	r5,zero,100a638 <__umodsi3+0x34>
 100a624:	294b883a 	add	r5,r5,r5
 100a628:	31bfffc4 	addi	r6,r6,-1
 100a62c:	18c7883a 	add	r3,r3,r3
 100a630:	293ffa36 	bltu	r5,r4,100a61c <__umodsi3+0x18>
 100a634:	18000626 	beq	r3,zero,100a650 <__umodsi3+0x4c>
 100a638:	1806d07a 	srli	r3,r3,1
 100a63c:	11400136 	bltu	r2,r5,100a644 <__umodsi3+0x40>
 100a640:	1145c83a 	sub	r2,r2,r5
 100a644:	280ad07a 	srli	r5,r5,1
 100a648:	183ffb1e 	bne	r3,zero,100a638 <__umodsi3+0x34>
 100a64c:	f800283a 	ret
 100a650:	f800283a 	ret
 100a654:	00c00044 	movi	r3,1
 100a658:	003ff706 	br	100a638 <__umodsi3+0x34>

0100a65c <__adddf3>:
 100a65c:	02c00434 	movhi	r11,16
 100a660:	5affffc4 	addi	r11,r11,-1
 100a664:	2806d7fa 	srli	r3,r5,31
 100a668:	2ad4703a 	and	r10,r5,r11
 100a66c:	3ad2703a 	and	r9,r7,r11
 100a670:	3804d53a 	srli	r2,r7,20
 100a674:	3018d77a 	srli	r12,r6,29
 100a678:	280ad53a 	srli	r5,r5,20
 100a67c:	501490fa 	slli	r10,r10,3
 100a680:	2010d77a 	srli	r8,r4,29
 100a684:	481290fa 	slli	r9,r9,3
 100a688:	380ed7fa 	srli	r7,r7,31
 100a68c:	defffb04 	addi	sp,sp,-20
 100a690:	dc800215 	stw	r18,8(sp)
 100a694:	dc400115 	stw	r17,4(sp)
 100a698:	dc000015 	stw	r16,0(sp)
 100a69c:	dfc00415 	stw	ra,16(sp)
 100a6a0:	dcc00315 	stw	r19,12(sp)
 100a6a4:	1c803fcc 	andi	r18,r3,255
 100a6a8:	2c01ffcc 	andi	r16,r5,2047
 100a6ac:	5210b03a 	or	r8,r10,r8
 100a6b0:	202290fa 	slli	r17,r4,3
 100a6b4:	1081ffcc 	andi	r2,r2,2047
 100a6b8:	4b12b03a 	or	r9,r9,r12
 100a6bc:	300c90fa 	slli	r6,r6,3
 100a6c0:	91c07526 	beq	r18,r7,100a898 <__adddf3+0x23c>
 100a6c4:	8087c83a 	sub	r3,r16,r2
 100a6c8:	00c0ab0e 	bge	zero,r3,100a978 <__adddf3+0x31c>
 100a6cc:	10002a1e 	bne	r2,zero,100a778 <__adddf3+0x11c>
 100a6d0:	4984b03a 	or	r2,r9,r6
 100a6d4:	1000961e 	bne	r2,zero,100a930 <__adddf3+0x2d4>
 100a6d8:	888001cc 	andi	r2,r17,7
 100a6dc:	10000726 	beq	r2,zero,100a6fc <__adddf3+0xa0>
 100a6e0:	888003cc 	andi	r2,r17,15
 100a6e4:	00c00104 	movi	r3,4
 100a6e8:	10c00426 	beq	r2,r3,100a6fc <__adddf3+0xa0>
 100a6ec:	88c7883a 	add	r3,r17,r3
 100a6f0:	1c63803a 	cmpltu	r17,r3,r17
 100a6f4:	4451883a 	add	r8,r8,r17
 100a6f8:	1823883a 	mov	r17,r3
 100a6fc:	4080202c 	andhi	r2,r8,128
 100a700:	10005926 	beq	r2,zero,100a868 <__adddf3+0x20c>
 100a704:	84000044 	addi	r16,r16,1
 100a708:	0081ffc4 	movi	r2,2047
 100a70c:	8080ba26 	beq	r16,r2,100a9f8 <__adddf3+0x39c>
 100a710:	00bfe034 	movhi	r2,65408
 100a714:	10bfffc4 	addi	r2,r2,-1
 100a718:	4090703a 	and	r8,r8,r2
 100a71c:	4004977a 	slli	r2,r8,29
 100a720:	4010927a 	slli	r8,r8,9
 100a724:	8822d0fa 	srli	r17,r17,3
 100a728:	8401ffcc 	andi	r16,r16,2047
 100a72c:	4010d33a 	srli	r8,r8,12
 100a730:	9007883a 	mov	r3,r18
 100a734:	1444b03a 	or	r2,r2,r17
 100a738:	8401ffcc 	andi	r16,r16,2047
 100a73c:	8020953a 	slli	r16,r16,20
 100a740:	18c03fcc 	andi	r3,r3,255
 100a744:	01000434 	movhi	r4,16
 100a748:	213fffc4 	addi	r4,r4,-1
 100a74c:	180697fa 	slli	r3,r3,31
 100a750:	4110703a 	and	r8,r8,r4
 100a754:	4410b03a 	or	r8,r8,r16
 100a758:	40c6b03a 	or	r3,r8,r3
 100a75c:	dfc00417 	ldw	ra,16(sp)
 100a760:	dcc00317 	ldw	r19,12(sp)
 100a764:	dc800217 	ldw	r18,8(sp)
 100a768:	dc400117 	ldw	r17,4(sp)
 100a76c:	dc000017 	ldw	r16,0(sp)
 100a770:	dec00504 	addi	sp,sp,20
 100a774:	f800283a 	ret
 100a778:	0081ffc4 	movi	r2,2047
 100a77c:	80bfd626 	beq	r16,r2,100a6d8 <__adddf3+0x7c>
 100a780:	4a402034 	orhi	r9,r9,128
 100a784:	00800e04 	movi	r2,56
 100a788:	10c09f16 	blt	r2,r3,100aa08 <__adddf3+0x3ac>
 100a78c:	008007c4 	movi	r2,31
 100a790:	10c0c216 	blt	r2,r3,100aa9c <__adddf3+0x440>
 100a794:	00800804 	movi	r2,32
 100a798:	10c5c83a 	sub	r2,r2,r3
 100a79c:	488a983a 	sll	r5,r9,r2
 100a7a0:	30c8d83a 	srl	r4,r6,r3
 100a7a4:	3084983a 	sll	r2,r6,r2
 100a7a8:	48c6d83a 	srl	r3,r9,r3
 100a7ac:	290cb03a 	or	r6,r5,r4
 100a7b0:	1004c03a 	cmpne	r2,r2,zero
 100a7b4:	308cb03a 	or	r6,r6,r2
 100a7b8:	898dc83a 	sub	r6,r17,r6
 100a7bc:	89a3803a 	cmpltu	r17,r17,r6
 100a7c0:	40d1c83a 	sub	r8,r8,r3
 100a7c4:	4451c83a 	sub	r8,r8,r17
 100a7c8:	3023883a 	mov	r17,r6
 100a7cc:	4080202c 	andhi	r2,r8,128
 100a7d0:	10002326 	beq	r2,zero,100a860 <__adddf3+0x204>
 100a7d4:	04c02034 	movhi	r19,128
 100a7d8:	9cffffc4 	addi	r19,r19,-1
 100a7dc:	44e6703a 	and	r19,r8,r19
 100a7e0:	98007626 	beq	r19,zero,100a9bc <__adddf3+0x360>
 100a7e4:	9809883a 	mov	r4,r19
 100a7e8:	100cc600 	call	100cc60 <__clzsi2>
 100a7ec:	10fffe04 	addi	r3,r2,-8
 100a7f0:	010007c4 	movi	r4,31
 100a7f4:	20c07716 	blt	r4,r3,100a9d4 <__adddf3+0x378>
 100a7f8:	00800804 	movi	r2,32
 100a7fc:	10c5c83a 	sub	r2,r2,r3
 100a800:	8884d83a 	srl	r2,r17,r2
 100a804:	98d0983a 	sll	r8,r19,r3
 100a808:	88e2983a 	sll	r17,r17,r3
 100a80c:	1204b03a 	or	r2,r2,r8
 100a810:	1c007416 	blt	r3,r16,100a9e4 <__adddf3+0x388>
 100a814:	1c21c83a 	sub	r16,r3,r16
 100a818:	82000044 	addi	r8,r16,1
 100a81c:	00c007c4 	movi	r3,31
 100a820:	1a009116 	blt	r3,r8,100aa68 <__adddf3+0x40c>
 100a824:	00c00804 	movi	r3,32
 100a828:	1a07c83a 	sub	r3,r3,r8
 100a82c:	8a08d83a 	srl	r4,r17,r8
 100a830:	88e2983a 	sll	r17,r17,r3
 100a834:	10c6983a 	sll	r3,r2,r3
 100a838:	1210d83a 	srl	r8,r2,r8
 100a83c:	8804c03a 	cmpne	r2,r17,zero
 100a840:	1906b03a 	or	r3,r3,r4
 100a844:	18a2b03a 	or	r17,r3,r2
 100a848:	0021883a 	mov	r16,zero
 100a84c:	003fa206 	br	100a6d8 <__adddf3+0x7c>
 100a850:	1890b03a 	or	r8,r3,r2
 100a854:	40017d26 	beq	r8,zero,100ae4c <__adddf3+0x7f0>
 100a858:	1011883a 	mov	r8,r2
 100a85c:	1823883a 	mov	r17,r3
 100a860:	888001cc 	andi	r2,r17,7
 100a864:	103f9e1e 	bne	r2,zero,100a6e0 <__adddf3+0x84>
 100a868:	4004977a 	slli	r2,r8,29
 100a86c:	8822d0fa 	srli	r17,r17,3
 100a870:	4010d0fa 	srli	r8,r8,3
 100a874:	9007883a 	mov	r3,r18
 100a878:	1444b03a 	or	r2,r2,r17
 100a87c:	0101ffc4 	movi	r4,2047
 100a880:	81002426 	beq	r16,r4,100a914 <__adddf3+0x2b8>
 100a884:	8120703a 	and	r16,r16,r4
 100a888:	01000434 	movhi	r4,16
 100a88c:	213fffc4 	addi	r4,r4,-1
 100a890:	4110703a 	and	r8,r8,r4
 100a894:	003fa806 	br	100a738 <__adddf3+0xdc>
 100a898:	8089c83a 	sub	r4,r16,r2
 100a89c:	01005e0e 	bge	zero,r4,100aa18 <__adddf3+0x3bc>
 100a8a0:	10002b26 	beq	r2,zero,100a950 <__adddf3+0x2f4>
 100a8a4:	0081ffc4 	movi	r2,2047
 100a8a8:	80bf8b26 	beq	r16,r2,100a6d8 <__adddf3+0x7c>
 100a8ac:	4a402034 	orhi	r9,r9,128
 100a8b0:	00800e04 	movi	r2,56
 100a8b4:	1100a40e 	bge	r2,r4,100ab48 <__adddf3+0x4ec>
 100a8b8:	498cb03a 	or	r6,r9,r6
 100a8bc:	300ac03a 	cmpne	r5,r6,zero
 100a8c0:	0013883a 	mov	r9,zero
 100a8c4:	2c4b883a 	add	r5,r5,r17
 100a8c8:	2c63803a 	cmpltu	r17,r5,r17
 100a8cc:	4a11883a 	add	r8,r9,r8
 100a8d0:	8a11883a 	add	r8,r17,r8
 100a8d4:	2823883a 	mov	r17,r5
 100a8d8:	4080202c 	andhi	r2,r8,128
 100a8dc:	103fe026 	beq	r2,zero,100a860 <__adddf3+0x204>
 100a8e0:	84000044 	addi	r16,r16,1
 100a8e4:	0081ffc4 	movi	r2,2047
 100a8e8:	8080d226 	beq	r16,r2,100ac34 <__adddf3+0x5d8>
 100a8ec:	00bfe034 	movhi	r2,65408
 100a8f0:	10bfffc4 	addi	r2,r2,-1
 100a8f4:	4090703a 	and	r8,r8,r2
 100a8f8:	880ad07a 	srli	r5,r17,1
 100a8fc:	400897fa 	slli	r4,r8,31
 100a900:	88c0004c 	andi	r3,r17,1
 100a904:	28e2b03a 	or	r17,r5,r3
 100a908:	4010d07a 	srli	r8,r8,1
 100a90c:	2462b03a 	or	r17,r4,r17
 100a910:	003f7106 	br	100a6d8 <__adddf3+0x7c>
 100a914:	4088b03a 	or	r4,r8,r2
 100a918:	20014526 	beq	r4,zero,100ae30 <__adddf3+0x7d4>
 100a91c:	01000434 	movhi	r4,16
 100a920:	42000234 	orhi	r8,r8,8
 100a924:	213fffc4 	addi	r4,r4,-1
 100a928:	4110703a 	and	r8,r8,r4
 100a92c:	003f8206 	br	100a738 <__adddf3+0xdc>
 100a930:	18ffffc4 	addi	r3,r3,-1
 100a934:	1800491e 	bne	r3,zero,100aa5c <__adddf3+0x400>
 100a938:	898bc83a 	sub	r5,r17,r6
 100a93c:	8963803a 	cmpltu	r17,r17,r5
 100a940:	4251c83a 	sub	r8,r8,r9
 100a944:	4451c83a 	sub	r8,r8,r17
 100a948:	2823883a 	mov	r17,r5
 100a94c:	003f9f06 	br	100a7cc <__adddf3+0x170>
 100a950:	4984b03a 	or	r2,r9,r6
 100a954:	103f6026 	beq	r2,zero,100a6d8 <__adddf3+0x7c>
 100a958:	213fffc4 	addi	r4,r4,-1
 100a95c:	2000931e 	bne	r4,zero,100abac <__adddf3+0x550>
 100a960:	898d883a 	add	r6,r17,r6
 100a964:	3463803a 	cmpltu	r17,r6,r17
 100a968:	4251883a 	add	r8,r8,r9
 100a96c:	8a11883a 	add	r8,r17,r8
 100a970:	3023883a 	mov	r17,r6
 100a974:	003fd806 	br	100a8d8 <__adddf3+0x27c>
 100a978:	1800541e 	bne	r3,zero,100aacc <__adddf3+0x470>
 100a97c:	80800044 	addi	r2,r16,1
 100a980:	1081ffcc 	andi	r2,r2,2047
 100a984:	00c00044 	movi	r3,1
 100a988:	1880a00e 	bge	r3,r2,100ac0c <__adddf3+0x5b0>
 100a98c:	8989c83a 	sub	r4,r17,r6
 100a990:	8905803a 	cmpltu	r2,r17,r4
 100a994:	4267c83a 	sub	r19,r8,r9
 100a998:	98a7c83a 	sub	r19,r19,r2
 100a99c:	9880202c 	andhi	r2,r19,128
 100a9a0:	10006326 	beq	r2,zero,100ab30 <__adddf3+0x4d4>
 100a9a4:	3463c83a 	sub	r17,r6,r17
 100a9a8:	4a07c83a 	sub	r3,r9,r8
 100a9ac:	344d803a 	cmpltu	r6,r6,r17
 100a9b0:	19a7c83a 	sub	r19,r3,r6
 100a9b4:	3825883a 	mov	r18,r7
 100a9b8:	983f8a1e 	bne	r19,zero,100a7e4 <__adddf3+0x188>
 100a9bc:	8809883a 	mov	r4,r17
 100a9c0:	100cc600 	call	100cc60 <__clzsi2>
 100a9c4:	10800804 	addi	r2,r2,32
 100a9c8:	10fffe04 	addi	r3,r2,-8
 100a9cc:	010007c4 	movi	r4,31
 100a9d0:	20ff890e 	bge	r4,r3,100a7f8 <__adddf3+0x19c>
 100a9d4:	10bff604 	addi	r2,r2,-40
 100a9d8:	8884983a 	sll	r2,r17,r2
 100a9dc:	0023883a 	mov	r17,zero
 100a9e0:	1c3f8c0e 	bge	r3,r16,100a814 <__adddf3+0x1b8>
 100a9e4:	023fe034 	movhi	r8,65408
 100a9e8:	423fffc4 	addi	r8,r8,-1
 100a9ec:	80e1c83a 	sub	r16,r16,r3
 100a9f0:	1210703a 	and	r8,r2,r8
 100a9f4:	003f3806 	br	100a6d8 <__adddf3+0x7c>
 100a9f8:	9007883a 	mov	r3,r18
 100a9fc:	0011883a 	mov	r8,zero
 100aa00:	0005883a 	mov	r2,zero
 100aa04:	003f4c06 	br	100a738 <__adddf3+0xdc>
 100aa08:	498cb03a 	or	r6,r9,r6
 100aa0c:	300cc03a 	cmpne	r6,r6,zero
 100aa10:	0007883a 	mov	r3,zero
 100aa14:	003f6806 	br	100a7b8 <__adddf3+0x15c>
 100aa18:	20009c1e 	bne	r4,zero,100ac8c <__adddf3+0x630>
 100aa1c:	80800044 	addi	r2,r16,1
 100aa20:	1141ffcc 	andi	r5,r2,2047
 100aa24:	01000044 	movi	r4,1
 100aa28:	2140670e 	bge	r4,r5,100abc8 <__adddf3+0x56c>
 100aa2c:	0101ffc4 	movi	r4,2047
 100aa30:	11007f26 	beq	r2,r4,100ac30 <__adddf3+0x5d4>
 100aa34:	898d883a 	add	r6,r17,r6
 100aa38:	4247883a 	add	r3,r8,r9
 100aa3c:	3451803a 	cmpltu	r8,r6,r17
 100aa40:	40d1883a 	add	r8,r8,r3
 100aa44:	402297fa 	slli	r17,r8,31
 100aa48:	300cd07a 	srli	r6,r6,1
 100aa4c:	4010d07a 	srli	r8,r8,1
 100aa50:	1021883a 	mov	r16,r2
 100aa54:	89a2b03a 	or	r17,r17,r6
 100aa58:	003f1f06 	br	100a6d8 <__adddf3+0x7c>
 100aa5c:	0081ffc4 	movi	r2,2047
 100aa60:	80bf481e 	bne	r16,r2,100a784 <__adddf3+0x128>
 100aa64:	003f1c06 	br	100a6d8 <__adddf3+0x7c>
 100aa68:	843ff844 	addi	r16,r16,-31
 100aa6c:	01000804 	movi	r4,32
 100aa70:	1406d83a 	srl	r3,r2,r16
 100aa74:	41005026 	beq	r8,r4,100abb8 <__adddf3+0x55c>
 100aa78:	01001004 	movi	r4,64
 100aa7c:	2211c83a 	sub	r8,r4,r8
 100aa80:	1204983a 	sll	r2,r2,r8
 100aa84:	88a2b03a 	or	r17,r17,r2
 100aa88:	8822c03a 	cmpne	r17,r17,zero
 100aa8c:	1c62b03a 	or	r17,r3,r17
 100aa90:	0011883a 	mov	r8,zero
 100aa94:	0021883a 	mov	r16,zero
 100aa98:	003f7106 	br	100a860 <__adddf3+0x204>
 100aa9c:	193ff804 	addi	r4,r3,-32
 100aaa0:	00800804 	movi	r2,32
 100aaa4:	4908d83a 	srl	r4,r9,r4
 100aaa8:	18804526 	beq	r3,r2,100abc0 <__adddf3+0x564>
 100aaac:	00801004 	movi	r2,64
 100aab0:	10c5c83a 	sub	r2,r2,r3
 100aab4:	4886983a 	sll	r3,r9,r2
 100aab8:	198cb03a 	or	r6,r3,r6
 100aabc:	300cc03a 	cmpne	r6,r6,zero
 100aac0:	218cb03a 	or	r6,r4,r6
 100aac4:	0007883a 	mov	r3,zero
 100aac8:	003f3b06 	br	100a7b8 <__adddf3+0x15c>
 100aacc:	80002a26 	beq	r16,zero,100ab78 <__adddf3+0x51c>
 100aad0:	0101ffc4 	movi	r4,2047
 100aad4:	11006826 	beq	r2,r4,100ac78 <__adddf3+0x61c>
 100aad8:	00c7c83a 	sub	r3,zero,r3
 100aadc:	42002034 	orhi	r8,r8,128
 100aae0:	01000e04 	movi	r4,56
 100aae4:	20c07c16 	blt	r4,r3,100acd8 <__adddf3+0x67c>
 100aae8:	010007c4 	movi	r4,31
 100aaec:	20c0da16 	blt	r4,r3,100ae58 <__adddf3+0x7fc>
 100aaf0:	01000804 	movi	r4,32
 100aaf4:	20c9c83a 	sub	r4,r4,r3
 100aaf8:	4114983a 	sll	r10,r8,r4
 100aafc:	88cad83a 	srl	r5,r17,r3
 100ab00:	8908983a 	sll	r4,r17,r4
 100ab04:	40c6d83a 	srl	r3,r8,r3
 100ab08:	5162b03a 	or	r17,r10,r5
 100ab0c:	2008c03a 	cmpne	r4,r4,zero
 100ab10:	8922b03a 	or	r17,r17,r4
 100ab14:	3463c83a 	sub	r17,r6,r17
 100ab18:	48c7c83a 	sub	r3,r9,r3
 100ab1c:	344d803a 	cmpltu	r6,r6,r17
 100ab20:	1991c83a 	sub	r8,r3,r6
 100ab24:	1021883a 	mov	r16,r2
 100ab28:	3825883a 	mov	r18,r7
 100ab2c:	003f2706 	br	100a7cc <__adddf3+0x170>
 100ab30:	24d0b03a 	or	r8,r4,r19
 100ab34:	40001b1e 	bne	r8,zero,100aba4 <__adddf3+0x548>
 100ab38:	0005883a 	mov	r2,zero
 100ab3c:	0007883a 	mov	r3,zero
 100ab40:	0021883a 	mov	r16,zero
 100ab44:	003f4d06 	br	100a87c <__adddf3+0x220>
 100ab48:	008007c4 	movi	r2,31
 100ab4c:	11003c16 	blt	r2,r4,100ac40 <__adddf3+0x5e4>
 100ab50:	00800804 	movi	r2,32
 100ab54:	1105c83a 	sub	r2,r2,r4
 100ab58:	488e983a 	sll	r7,r9,r2
 100ab5c:	310ad83a 	srl	r5,r6,r4
 100ab60:	3084983a 	sll	r2,r6,r2
 100ab64:	4912d83a 	srl	r9,r9,r4
 100ab68:	394ab03a 	or	r5,r7,r5
 100ab6c:	1004c03a 	cmpne	r2,r2,zero
 100ab70:	288ab03a 	or	r5,r5,r2
 100ab74:	003f5306 	br	100a8c4 <__adddf3+0x268>
 100ab78:	4448b03a 	or	r4,r8,r17
 100ab7c:	20003e26 	beq	r4,zero,100ac78 <__adddf3+0x61c>
 100ab80:	00c6303a 	nor	r3,zero,r3
 100ab84:	18003a1e 	bne	r3,zero,100ac70 <__adddf3+0x614>
 100ab88:	3463c83a 	sub	r17,r6,r17
 100ab8c:	4a07c83a 	sub	r3,r9,r8
 100ab90:	344d803a 	cmpltu	r6,r6,r17
 100ab94:	1991c83a 	sub	r8,r3,r6
 100ab98:	1021883a 	mov	r16,r2
 100ab9c:	3825883a 	mov	r18,r7
 100aba0:	003f0a06 	br	100a7cc <__adddf3+0x170>
 100aba4:	2023883a 	mov	r17,r4
 100aba8:	003f0d06 	br	100a7e0 <__adddf3+0x184>
 100abac:	0081ffc4 	movi	r2,2047
 100abb0:	80bf3f1e 	bne	r16,r2,100a8b0 <__adddf3+0x254>
 100abb4:	003ec806 	br	100a6d8 <__adddf3+0x7c>
 100abb8:	0005883a 	mov	r2,zero
 100abbc:	003fb106 	br	100aa84 <__adddf3+0x428>
 100abc0:	0007883a 	mov	r3,zero
 100abc4:	003fbc06 	br	100aab8 <__adddf3+0x45c>
 100abc8:	4444b03a 	or	r2,r8,r17
 100abcc:	8000871e 	bne	r16,zero,100adec <__adddf3+0x790>
 100abd0:	1000ba26 	beq	r2,zero,100aebc <__adddf3+0x860>
 100abd4:	4984b03a 	or	r2,r9,r6
 100abd8:	103ebf26 	beq	r2,zero,100a6d8 <__adddf3+0x7c>
 100abdc:	8985883a 	add	r2,r17,r6
 100abe0:	4247883a 	add	r3,r8,r9
 100abe4:	1451803a 	cmpltu	r8,r2,r17
 100abe8:	40d1883a 	add	r8,r8,r3
 100abec:	40c0202c 	andhi	r3,r8,128
 100abf0:	1023883a 	mov	r17,r2
 100abf4:	183f1a26 	beq	r3,zero,100a860 <__adddf3+0x204>
 100abf8:	00bfe034 	movhi	r2,65408
 100abfc:	10bfffc4 	addi	r2,r2,-1
 100ac00:	2021883a 	mov	r16,r4
 100ac04:	4090703a 	and	r8,r8,r2
 100ac08:	003eb306 	br	100a6d8 <__adddf3+0x7c>
 100ac0c:	4444b03a 	or	r2,r8,r17
 100ac10:	8000291e 	bne	r16,zero,100acb8 <__adddf3+0x65c>
 100ac14:	10004b1e 	bne	r2,zero,100ad44 <__adddf3+0x6e8>
 100ac18:	4990b03a 	or	r8,r9,r6
 100ac1c:	40008b26 	beq	r8,zero,100ae4c <__adddf3+0x7f0>
 100ac20:	4811883a 	mov	r8,r9
 100ac24:	3023883a 	mov	r17,r6
 100ac28:	3825883a 	mov	r18,r7
 100ac2c:	003eaa06 	br	100a6d8 <__adddf3+0x7c>
 100ac30:	1021883a 	mov	r16,r2
 100ac34:	0011883a 	mov	r8,zero
 100ac38:	0005883a 	mov	r2,zero
 100ac3c:	003f0f06 	br	100a87c <__adddf3+0x220>
 100ac40:	217ff804 	addi	r5,r4,-32
 100ac44:	00800804 	movi	r2,32
 100ac48:	494ad83a 	srl	r5,r9,r5
 100ac4c:	20807d26 	beq	r4,r2,100ae44 <__adddf3+0x7e8>
 100ac50:	00801004 	movi	r2,64
 100ac54:	1109c83a 	sub	r4,r2,r4
 100ac58:	4912983a 	sll	r9,r9,r4
 100ac5c:	498cb03a 	or	r6,r9,r6
 100ac60:	300cc03a 	cmpne	r6,r6,zero
 100ac64:	298ab03a 	or	r5,r5,r6
 100ac68:	0013883a 	mov	r9,zero
 100ac6c:	003f1506 	br	100a8c4 <__adddf3+0x268>
 100ac70:	0101ffc4 	movi	r4,2047
 100ac74:	113f9a1e 	bne	r2,r4,100aae0 <__adddf3+0x484>
 100ac78:	4811883a 	mov	r8,r9
 100ac7c:	3023883a 	mov	r17,r6
 100ac80:	1021883a 	mov	r16,r2
 100ac84:	3825883a 	mov	r18,r7
 100ac88:	003e9306 	br	100a6d8 <__adddf3+0x7c>
 100ac8c:	8000161e 	bne	r16,zero,100ace8 <__adddf3+0x68c>
 100ac90:	444ab03a 	or	r5,r8,r17
 100ac94:	28005126 	beq	r5,zero,100addc <__adddf3+0x780>
 100ac98:	0108303a 	nor	r4,zero,r4
 100ac9c:	20004d1e 	bne	r4,zero,100add4 <__adddf3+0x778>
 100aca0:	89a3883a 	add	r17,r17,r6
 100aca4:	4253883a 	add	r9,r8,r9
 100aca8:	898d803a 	cmpltu	r6,r17,r6
 100acac:	3251883a 	add	r8,r6,r9
 100acb0:	1021883a 	mov	r16,r2
 100acb4:	003f0806 	br	100a8d8 <__adddf3+0x27c>
 100acb8:	1000301e 	bne	r2,zero,100ad7c <__adddf3+0x720>
 100acbc:	4984b03a 	or	r2,r9,r6
 100acc0:	10007126 	beq	r2,zero,100ae88 <__adddf3+0x82c>
 100acc4:	4811883a 	mov	r8,r9
 100acc8:	3023883a 	mov	r17,r6
 100accc:	3825883a 	mov	r18,r7
 100acd0:	0401ffc4 	movi	r16,2047
 100acd4:	003e8006 	br	100a6d8 <__adddf3+0x7c>
 100acd8:	4462b03a 	or	r17,r8,r17
 100acdc:	8822c03a 	cmpne	r17,r17,zero
 100ace0:	0007883a 	mov	r3,zero
 100ace4:	003f8b06 	br	100ab14 <__adddf3+0x4b8>
 100ace8:	0141ffc4 	movi	r5,2047
 100acec:	11403b26 	beq	r2,r5,100addc <__adddf3+0x780>
 100acf0:	0109c83a 	sub	r4,zero,r4
 100acf4:	42002034 	orhi	r8,r8,128
 100acf8:	01400e04 	movi	r5,56
 100acfc:	29006716 	blt	r5,r4,100ae9c <__adddf3+0x840>
 100ad00:	014007c4 	movi	r5,31
 100ad04:	29007016 	blt	r5,r4,100aec8 <__adddf3+0x86c>
 100ad08:	01400804 	movi	r5,32
 100ad0c:	290bc83a 	sub	r5,r5,r4
 100ad10:	4154983a 	sll	r10,r8,r5
 100ad14:	890ed83a 	srl	r7,r17,r4
 100ad18:	894a983a 	sll	r5,r17,r5
 100ad1c:	4108d83a 	srl	r4,r8,r4
 100ad20:	51e2b03a 	or	r17,r10,r7
 100ad24:	280ac03a 	cmpne	r5,r5,zero
 100ad28:	8962b03a 	or	r17,r17,r5
 100ad2c:	89a3883a 	add	r17,r17,r6
 100ad30:	2253883a 	add	r9,r4,r9
 100ad34:	898d803a 	cmpltu	r6,r17,r6
 100ad38:	3251883a 	add	r8,r6,r9
 100ad3c:	1021883a 	mov	r16,r2
 100ad40:	003ee506 	br	100a8d8 <__adddf3+0x27c>
 100ad44:	4984b03a 	or	r2,r9,r6
 100ad48:	103e6326 	beq	r2,zero,100a6d8 <__adddf3+0x7c>
 100ad4c:	8987c83a 	sub	r3,r17,r6
 100ad50:	88c9803a 	cmpltu	r4,r17,r3
 100ad54:	4245c83a 	sub	r2,r8,r9
 100ad58:	1105c83a 	sub	r2,r2,r4
 100ad5c:	1100202c 	andhi	r4,r2,128
 100ad60:	203ebb26 	beq	r4,zero,100a850 <__adddf3+0x1f4>
 100ad64:	3463c83a 	sub	r17,r6,r17
 100ad68:	4a07c83a 	sub	r3,r9,r8
 100ad6c:	344d803a 	cmpltu	r6,r6,r17
 100ad70:	1991c83a 	sub	r8,r3,r6
 100ad74:	3825883a 	mov	r18,r7
 100ad78:	003e5706 	br	100a6d8 <__adddf3+0x7c>
 100ad7c:	4984b03a 	or	r2,r9,r6
 100ad80:	10002e26 	beq	r2,zero,100ae3c <__adddf3+0x7e0>
 100ad84:	4004d0fa 	srli	r2,r8,3
 100ad88:	8822d0fa 	srli	r17,r17,3
 100ad8c:	4010977a 	slli	r8,r8,29
 100ad90:	10c0022c 	andhi	r3,r2,8
 100ad94:	4462b03a 	or	r17,r8,r17
 100ad98:	18000826 	beq	r3,zero,100adbc <__adddf3+0x760>
 100ad9c:	4808d0fa 	srli	r4,r9,3
 100ada0:	20c0022c 	andhi	r3,r4,8
 100ada4:	1800051e 	bne	r3,zero,100adbc <__adddf3+0x760>
 100ada8:	300cd0fa 	srli	r6,r6,3
 100adac:	4806977a 	slli	r3,r9,29
 100adb0:	2005883a 	mov	r2,r4
 100adb4:	3825883a 	mov	r18,r7
 100adb8:	19a2b03a 	or	r17,r3,r6
 100adbc:	8810d77a 	srli	r8,r17,29
 100adc0:	100490fa 	slli	r2,r2,3
 100adc4:	882290fa 	slli	r17,r17,3
 100adc8:	0401ffc4 	movi	r16,2047
 100adcc:	4090b03a 	or	r8,r8,r2
 100add0:	003e4106 	br	100a6d8 <__adddf3+0x7c>
 100add4:	0141ffc4 	movi	r5,2047
 100add8:	117fc71e 	bne	r2,r5,100acf8 <__adddf3+0x69c>
 100addc:	4811883a 	mov	r8,r9
 100ade0:	3023883a 	mov	r17,r6
 100ade4:	1021883a 	mov	r16,r2
 100ade8:	003e3b06 	br	100a6d8 <__adddf3+0x7c>
 100adec:	10002f26 	beq	r2,zero,100aeac <__adddf3+0x850>
 100adf0:	4984b03a 	or	r2,r9,r6
 100adf4:	10001126 	beq	r2,zero,100ae3c <__adddf3+0x7e0>
 100adf8:	4004d0fa 	srli	r2,r8,3
 100adfc:	8822d0fa 	srli	r17,r17,3
 100ae00:	4010977a 	slli	r8,r8,29
 100ae04:	10c0022c 	andhi	r3,r2,8
 100ae08:	4462b03a 	or	r17,r8,r17
 100ae0c:	183feb26 	beq	r3,zero,100adbc <__adddf3+0x760>
 100ae10:	4808d0fa 	srli	r4,r9,3
 100ae14:	20c0022c 	andhi	r3,r4,8
 100ae18:	183fe81e 	bne	r3,zero,100adbc <__adddf3+0x760>
 100ae1c:	300cd0fa 	srli	r6,r6,3
 100ae20:	4806977a 	slli	r3,r9,29
 100ae24:	2005883a 	mov	r2,r4
 100ae28:	19a2b03a 	or	r17,r3,r6
 100ae2c:	003fe306 	br	100adbc <__adddf3+0x760>
 100ae30:	0011883a 	mov	r8,zero
 100ae34:	0005883a 	mov	r2,zero
 100ae38:	003e3f06 	br	100a738 <__adddf3+0xdc>
 100ae3c:	0401ffc4 	movi	r16,2047
 100ae40:	003e2506 	br	100a6d8 <__adddf3+0x7c>
 100ae44:	0013883a 	mov	r9,zero
 100ae48:	003f8406 	br	100ac5c <__adddf3+0x600>
 100ae4c:	0005883a 	mov	r2,zero
 100ae50:	0007883a 	mov	r3,zero
 100ae54:	003e8906 	br	100a87c <__adddf3+0x220>
 100ae58:	197ff804 	addi	r5,r3,-32
 100ae5c:	01000804 	movi	r4,32
 100ae60:	414ad83a 	srl	r5,r8,r5
 100ae64:	19002426 	beq	r3,r4,100aef8 <__adddf3+0x89c>
 100ae68:	01001004 	movi	r4,64
 100ae6c:	20c7c83a 	sub	r3,r4,r3
 100ae70:	40c6983a 	sll	r3,r8,r3
 100ae74:	1c46b03a 	or	r3,r3,r17
 100ae78:	1806c03a 	cmpne	r3,r3,zero
 100ae7c:	28e2b03a 	or	r17,r5,r3
 100ae80:	0007883a 	mov	r3,zero
 100ae84:	003f2306 	br	100ab14 <__adddf3+0x4b8>
 100ae88:	0007883a 	mov	r3,zero
 100ae8c:	5811883a 	mov	r8,r11
 100ae90:	00bfffc4 	movi	r2,-1
 100ae94:	0401ffc4 	movi	r16,2047
 100ae98:	003e7806 	br	100a87c <__adddf3+0x220>
 100ae9c:	4462b03a 	or	r17,r8,r17
 100aea0:	8822c03a 	cmpne	r17,r17,zero
 100aea4:	0009883a 	mov	r4,zero
 100aea8:	003fa006 	br	100ad2c <__adddf3+0x6d0>
 100aeac:	4811883a 	mov	r8,r9
 100aeb0:	3023883a 	mov	r17,r6
 100aeb4:	0401ffc4 	movi	r16,2047
 100aeb8:	003e0706 	br	100a6d8 <__adddf3+0x7c>
 100aebc:	4811883a 	mov	r8,r9
 100aec0:	3023883a 	mov	r17,r6
 100aec4:	003e0406 	br	100a6d8 <__adddf3+0x7c>
 100aec8:	21fff804 	addi	r7,r4,-32
 100aecc:	01400804 	movi	r5,32
 100aed0:	41ced83a 	srl	r7,r8,r7
 100aed4:	21400a26 	beq	r4,r5,100af00 <__adddf3+0x8a4>
 100aed8:	01401004 	movi	r5,64
 100aedc:	2909c83a 	sub	r4,r5,r4
 100aee0:	4108983a 	sll	r4,r8,r4
 100aee4:	2448b03a 	or	r4,r4,r17
 100aee8:	2008c03a 	cmpne	r4,r4,zero
 100aeec:	3922b03a 	or	r17,r7,r4
 100aef0:	0009883a 	mov	r4,zero
 100aef4:	003f8d06 	br	100ad2c <__adddf3+0x6d0>
 100aef8:	0007883a 	mov	r3,zero
 100aefc:	003fdd06 	br	100ae74 <__adddf3+0x818>
 100af00:	0009883a 	mov	r4,zero
 100af04:	003ff706 	br	100aee4 <__adddf3+0x888>

0100af08 <__divdf3>:
 100af08:	defff204 	addi	sp,sp,-56
 100af0c:	dd400915 	stw	r21,36(sp)
 100af10:	282ad53a 	srli	r21,r5,20
 100af14:	dd000815 	stw	r20,32(sp)
 100af18:	2828d7fa 	srli	r20,r5,31
 100af1c:	dc000415 	stw	r16,16(sp)
 100af20:	04000434 	movhi	r16,16
 100af24:	df000c15 	stw	fp,48(sp)
 100af28:	843fffc4 	addi	r16,r16,-1
 100af2c:	dfc00d15 	stw	ra,52(sp)
 100af30:	ddc00b15 	stw	r23,44(sp)
 100af34:	dd800a15 	stw	r22,40(sp)
 100af38:	dcc00715 	stw	r19,28(sp)
 100af3c:	dc800615 	stw	r18,24(sp)
 100af40:	dc400515 	stw	r17,20(sp)
 100af44:	ad41ffcc 	andi	r21,r21,2047
 100af48:	2c20703a 	and	r16,r5,r16
 100af4c:	a7003fcc 	andi	fp,r20,255
 100af50:	a8006126 	beq	r21,zero,100b0d8 <__divdf3+0x1d0>
 100af54:	0081ffc4 	movi	r2,2047
 100af58:	2025883a 	mov	r18,r4
 100af5c:	a8803726 	beq	r21,r2,100b03c <__divdf3+0x134>
 100af60:	80800434 	orhi	r2,r16,16
 100af64:	100490fa 	slli	r2,r2,3
 100af68:	2020d77a 	srli	r16,r4,29
 100af6c:	202490fa 	slli	r18,r4,3
 100af70:	ad7f0044 	addi	r21,r21,-1023
 100af74:	80a0b03a 	or	r16,r16,r2
 100af78:	0027883a 	mov	r19,zero
 100af7c:	0013883a 	mov	r9,zero
 100af80:	3804d53a 	srli	r2,r7,20
 100af84:	382cd7fa 	srli	r22,r7,31
 100af88:	04400434 	movhi	r17,16
 100af8c:	8c7fffc4 	addi	r17,r17,-1
 100af90:	1081ffcc 	andi	r2,r2,2047
 100af94:	3011883a 	mov	r8,r6
 100af98:	3c62703a 	and	r17,r7,r17
 100af9c:	b5c03fcc 	andi	r23,r22,255
 100afa0:	10006c26 	beq	r2,zero,100b154 <__divdf3+0x24c>
 100afa4:	00c1ffc4 	movi	r3,2047
 100afa8:	10c06426 	beq	r2,r3,100b13c <__divdf3+0x234>
 100afac:	88c00434 	orhi	r3,r17,16
 100afb0:	180690fa 	slli	r3,r3,3
 100afb4:	3022d77a 	srli	r17,r6,29
 100afb8:	301090fa 	slli	r8,r6,3
 100afbc:	10bf0044 	addi	r2,r2,-1023
 100afc0:	88e2b03a 	or	r17,r17,r3
 100afc4:	000f883a 	mov	r7,zero
 100afc8:	a58cf03a 	xor	r6,r20,r22
 100afcc:	3cc8b03a 	or	r4,r7,r19
 100afd0:	a8abc83a 	sub	r21,r21,r2
 100afd4:	008003c4 	movi	r2,15
 100afd8:	3007883a 	mov	r3,r6
 100afdc:	34c03fcc 	andi	r19,r6,255
 100afe0:	11009036 	bltu	r2,r4,100b224 <__divdf3+0x31c>
 100afe4:	200890ba 	slli	r4,r4,2
 100afe8:	00804074 	movhi	r2,257
 100afec:	10abff04 	addi	r2,r2,-20484
 100aff0:	2089883a 	add	r4,r4,r2
 100aff4:	20800017 	ldw	r2,0(r4)
 100aff8:	1000683a 	jmp	r2
 100affc:	0100b224 	muli	r4,zero,712
 100b000:	0100b074 	movhi	r4,705
 100b004:	0100b214 	movui	r4,712
 100b008:	0100b068 	cmpgeui	r4,zero,705
 100b00c:	0100b214 	movui	r4,712
 100b010:	0100b1e8 	cmpgeui	r4,zero,711
 100b014:	0100b214 	movui	r4,712
 100b018:	0100b068 	cmpgeui	r4,zero,705
 100b01c:	0100b074 	movhi	r4,705
 100b020:	0100b074 	movhi	r4,705
 100b024:	0100b1e8 	cmpgeui	r4,zero,711
 100b028:	0100b068 	cmpgeui	r4,zero,705
 100b02c:	0100b058 	cmpnei	r4,zero,705
 100b030:	0100b058 	cmpnei	r4,zero,705
 100b034:	0100b058 	cmpnei	r4,zero,705
 100b038:	0100b508 	cmpgei	r4,zero,724
 100b03c:	2404b03a 	or	r2,r4,r16
 100b040:	1000661e 	bne	r2,zero,100b1dc <__divdf3+0x2d4>
 100b044:	04c00204 	movi	r19,8
 100b048:	0021883a 	mov	r16,zero
 100b04c:	0025883a 	mov	r18,zero
 100b050:	02400084 	movi	r9,2
 100b054:	003fca06 	br	100af80 <__divdf3+0x78>
 100b058:	8023883a 	mov	r17,r16
 100b05c:	9011883a 	mov	r8,r18
 100b060:	e02f883a 	mov	r23,fp
 100b064:	480f883a 	mov	r7,r9
 100b068:	00800084 	movi	r2,2
 100b06c:	3881311e 	bne	r7,r2,100b534 <__divdf3+0x62c>
 100b070:	b827883a 	mov	r19,r23
 100b074:	98c0004c 	andi	r3,r19,1
 100b078:	0081ffc4 	movi	r2,2047
 100b07c:	000b883a 	mov	r5,zero
 100b080:	0025883a 	mov	r18,zero
 100b084:	1004953a 	slli	r2,r2,20
 100b088:	18c03fcc 	andi	r3,r3,255
 100b08c:	04400434 	movhi	r17,16
 100b090:	8c7fffc4 	addi	r17,r17,-1
 100b094:	180697fa 	slli	r3,r3,31
 100b098:	2c4a703a 	and	r5,r5,r17
 100b09c:	288ab03a 	or	r5,r5,r2
 100b0a0:	28c6b03a 	or	r3,r5,r3
 100b0a4:	9005883a 	mov	r2,r18
 100b0a8:	dfc00d17 	ldw	ra,52(sp)
 100b0ac:	df000c17 	ldw	fp,48(sp)
 100b0b0:	ddc00b17 	ldw	r23,44(sp)
 100b0b4:	dd800a17 	ldw	r22,40(sp)
 100b0b8:	dd400917 	ldw	r21,36(sp)
 100b0bc:	dd000817 	ldw	r20,32(sp)
 100b0c0:	dcc00717 	ldw	r19,28(sp)
 100b0c4:	dc800617 	ldw	r18,24(sp)
 100b0c8:	dc400517 	ldw	r17,20(sp)
 100b0cc:	dc000417 	ldw	r16,16(sp)
 100b0d0:	dec00e04 	addi	sp,sp,56
 100b0d4:	f800283a 	ret
 100b0d8:	2404b03a 	or	r2,r4,r16
 100b0dc:	2027883a 	mov	r19,r4
 100b0e0:	10003926 	beq	r2,zero,100b1c8 <__divdf3+0x2c0>
 100b0e4:	80012e26 	beq	r16,zero,100b5a0 <__divdf3+0x698>
 100b0e8:	8009883a 	mov	r4,r16
 100b0ec:	d9800315 	stw	r6,12(sp)
 100b0f0:	d9c00215 	stw	r7,8(sp)
 100b0f4:	100cc600 	call	100cc60 <__clzsi2>
 100b0f8:	d9800317 	ldw	r6,12(sp)
 100b0fc:	d9c00217 	ldw	r7,8(sp)
 100b100:	113ffd44 	addi	r4,r2,-11
 100b104:	00c00704 	movi	r3,28
 100b108:	19012116 	blt	r3,r4,100b590 <__divdf3+0x688>
 100b10c:	00c00744 	movi	r3,29
 100b110:	147ffe04 	addi	r17,r2,-8
 100b114:	1907c83a 	sub	r3,r3,r4
 100b118:	8460983a 	sll	r16,r16,r17
 100b11c:	98c6d83a 	srl	r3,r19,r3
 100b120:	9c64983a 	sll	r18,r19,r17
 100b124:	1c20b03a 	or	r16,r3,r16
 100b128:	1080fcc4 	addi	r2,r2,1011
 100b12c:	00abc83a 	sub	r21,zero,r2
 100b130:	0027883a 	mov	r19,zero
 100b134:	0013883a 	mov	r9,zero
 100b138:	003f9106 	br	100af80 <__divdf3+0x78>
 100b13c:	3446b03a 	or	r3,r6,r17
 100b140:	18001f1e 	bne	r3,zero,100b1c0 <__divdf3+0x2b8>
 100b144:	0023883a 	mov	r17,zero
 100b148:	0011883a 	mov	r8,zero
 100b14c:	01c00084 	movi	r7,2
 100b150:	003f9d06 	br	100afc8 <__divdf3+0xc0>
 100b154:	3446b03a 	or	r3,r6,r17
 100b158:	18001526 	beq	r3,zero,100b1b0 <__divdf3+0x2a8>
 100b15c:	88011b26 	beq	r17,zero,100b5cc <__divdf3+0x6c4>
 100b160:	8809883a 	mov	r4,r17
 100b164:	d9800315 	stw	r6,12(sp)
 100b168:	da400115 	stw	r9,4(sp)
 100b16c:	100cc600 	call	100cc60 <__clzsi2>
 100b170:	d9800317 	ldw	r6,12(sp)
 100b174:	da400117 	ldw	r9,4(sp)
 100b178:	113ffd44 	addi	r4,r2,-11
 100b17c:	00c00704 	movi	r3,28
 100b180:	19010e16 	blt	r3,r4,100b5bc <__divdf3+0x6b4>
 100b184:	00c00744 	movi	r3,29
 100b188:	123ffe04 	addi	r8,r2,-8
 100b18c:	1907c83a 	sub	r3,r3,r4
 100b190:	8a22983a 	sll	r17,r17,r8
 100b194:	30c6d83a 	srl	r3,r6,r3
 100b198:	3210983a 	sll	r8,r6,r8
 100b19c:	1c62b03a 	or	r17,r3,r17
 100b1a0:	1080fcc4 	addi	r2,r2,1011
 100b1a4:	0085c83a 	sub	r2,zero,r2
 100b1a8:	000f883a 	mov	r7,zero
 100b1ac:	003f8606 	br	100afc8 <__divdf3+0xc0>
 100b1b0:	0023883a 	mov	r17,zero
 100b1b4:	0011883a 	mov	r8,zero
 100b1b8:	01c00044 	movi	r7,1
 100b1bc:	003f8206 	br	100afc8 <__divdf3+0xc0>
 100b1c0:	01c000c4 	movi	r7,3
 100b1c4:	003f8006 	br	100afc8 <__divdf3+0xc0>
 100b1c8:	04c00104 	movi	r19,4
 100b1cc:	0021883a 	mov	r16,zero
 100b1d0:	0025883a 	mov	r18,zero
 100b1d4:	02400044 	movi	r9,1
 100b1d8:	003f6906 	br	100af80 <__divdf3+0x78>
 100b1dc:	04c00304 	movi	r19,12
 100b1e0:	024000c4 	movi	r9,3
 100b1e4:	003f6606 	br	100af80 <__divdf3+0x78>
 100b1e8:	01400434 	movhi	r5,16
 100b1ec:	0007883a 	mov	r3,zero
 100b1f0:	297fffc4 	addi	r5,r5,-1
 100b1f4:	04bfffc4 	movi	r18,-1
 100b1f8:	0081ffc4 	movi	r2,2047
 100b1fc:	003fa106 	br	100b084 <__divdf3+0x17c>
 100b200:	00c00044 	movi	r3,1
 100b204:	1887c83a 	sub	r3,r3,r2
 100b208:	01000e04 	movi	r4,56
 100b20c:	20c1210e 	bge	r4,r3,100b694 <__divdf3+0x78c>
 100b210:	98c0004c 	andi	r3,r19,1
 100b214:	0005883a 	mov	r2,zero
 100b218:	000b883a 	mov	r5,zero
 100b21c:	0025883a 	mov	r18,zero
 100b220:	003f9806 	br	100b084 <__divdf3+0x17c>
 100b224:	8c00fd36 	bltu	r17,r16,100b61c <__divdf3+0x714>
 100b228:	8440fb26 	beq	r16,r17,100b618 <__divdf3+0x710>
 100b22c:	8007883a 	mov	r3,r16
 100b230:	ad7fffc4 	addi	r21,r21,-1
 100b234:	0021883a 	mov	r16,zero
 100b238:	4004d63a 	srli	r2,r8,24
 100b23c:	8822923a 	slli	r17,r17,8
 100b240:	1809883a 	mov	r4,r3
 100b244:	402c923a 	slli	r22,r8,8
 100b248:	88b8b03a 	or	fp,r17,r2
 100b24c:	e028d43a 	srli	r20,fp,16
 100b250:	d8c00015 	stw	r3,0(sp)
 100b254:	e5ffffcc 	andi	r23,fp,65535
 100b258:	a00b883a 	mov	r5,r20
 100b25c:	100a5a00 	call	100a5a0 <__udivsi3>
 100b260:	d8c00017 	ldw	r3,0(sp)
 100b264:	a00b883a 	mov	r5,r20
 100b268:	d8800315 	stw	r2,12(sp)
 100b26c:	1809883a 	mov	r4,r3
 100b270:	100a6040 	call	100a604 <__umodsi3>
 100b274:	d9800317 	ldw	r6,12(sp)
 100b278:	1006943a 	slli	r3,r2,16
 100b27c:	9004d43a 	srli	r2,r18,16
 100b280:	b9a3383a 	mul	r17,r23,r6
 100b284:	10c4b03a 	or	r2,r2,r3
 100b288:	1440062e 	bgeu	r2,r17,100b2a4 <__divdf3+0x39c>
 100b28c:	1705883a 	add	r2,r2,fp
 100b290:	30ffffc4 	addi	r3,r6,-1
 100b294:	1700ee36 	bltu	r2,fp,100b650 <__divdf3+0x748>
 100b298:	1440ed2e 	bgeu	r2,r17,100b650 <__divdf3+0x748>
 100b29c:	31bfff84 	addi	r6,r6,-2
 100b2a0:	1705883a 	add	r2,r2,fp
 100b2a4:	1463c83a 	sub	r17,r2,r17
 100b2a8:	a00b883a 	mov	r5,r20
 100b2ac:	8809883a 	mov	r4,r17
 100b2b0:	d9800315 	stw	r6,12(sp)
 100b2b4:	100a5a00 	call	100a5a0 <__udivsi3>
 100b2b8:	a00b883a 	mov	r5,r20
 100b2bc:	8809883a 	mov	r4,r17
 100b2c0:	d8800215 	stw	r2,8(sp)
 100b2c4:	100a6040 	call	100a604 <__umodsi3>
 100b2c8:	d9c00217 	ldw	r7,8(sp)
 100b2cc:	1004943a 	slli	r2,r2,16
 100b2d0:	94bfffcc 	andi	r18,r18,65535
 100b2d4:	b9d1383a 	mul	r8,r23,r7
 100b2d8:	90a4b03a 	or	r18,r18,r2
 100b2dc:	d9800317 	ldw	r6,12(sp)
 100b2e0:	9200062e 	bgeu	r18,r8,100b2fc <__divdf3+0x3f4>
 100b2e4:	9725883a 	add	r18,r18,fp
 100b2e8:	38bfffc4 	addi	r2,r7,-1
 100b2ec:	9700d636 	bltu	r18,fp,100b648 <__divdf3+0x740>
 100b2f0:	9200d52e 	bgeu	r18,r8,100b648 <__divdf3+0x740>
 100b2f4:	39ffff84 	addi	r7,r7,-2
 100b2f8:	9725883a 	add	r18,r18,fp
 100b2fc:	3004943a 	slli	r2,r6,16
 100b300:	b012d43a 	srli	r9,r22,16
 100b304:	b1bfffcc 	andi	r6,r22,65535
 100b308:	11e2b03a 	or	r17,r2,r7
 100b30c:	8806d43a 	srli	r3,r17,16
 100b310:	893fffcc 	andi	r4,r17,65535
 100b314:	218b383a 	mul	r5,r4,r6
 100b318:	30c5383a 	mul	r2,r6,r3
 100b31c:	2249383a 	mul	r4,r4,r9
 100b320:	280ed43a 	srli	r7,r5,16
 100b324:	9225c83a 	sub	r18,r18,r8
 100b328:	2089883a 	add	r4,r4,r2
 100b32c:	3909883a 	add	r4,r7,r4
 100b330:	1a47383a 	mul	r3,r3,r9
 100b334:	2080022e 	bgeu	r4,r2,100b340 <__divdf3+0x438>
 100b338:	00800074 	movhi	r2,1
 100b33c:	1887883a 	add	r3,r3,r2
 100b340:	2004d43a 	srli	r2,r4,16
 100b344:	2008943a 	slli	r4,r4,16
 100b348:	297fffcc 	andi	r5,r5,65535
 100b34c:	10c7883a 	add	r3,r2,r3
 100b350:	2149883a 	add	r4,r4,r5
 100b354:	90c0a536 	bltu	r18,r3,100b5ec <__divdf3+0x6e4>
 100b358:	90c0bf26 	beq	r18,r3,100b658 <__divdf3+0x750>
 100b35c:	90c7c83a 	sub	r3,r18,r3
 100b360:	810fc83a 	sub	r7,r16,r4
 100b364:	81e5803a 	cmpltu	r18,r16,r7
 100b368:	1ca5c83a 	sub	r18,r3,r18
 100b36c:	e480c126 	beq	fp,r18,100b674 <__divdf3+0x76c>
 100b370:	a00b883a 	mov	r5,r20
 100b374:	9009883a 	mov	r4,r18
 100b378:	d9800315 	stw	r6,12(sp)
 100b37c:	d9c00215 	stw	r7,8(sp)
 100b380:	da400115 	stw	r9,4(sp)
 100b384:	100a5a00 	call	100a5a0 <__udivsi3>
 100b388:	a00b883a 	mov	r5,r20
 100b38c:	9009883a 	mov	r4,r18
 100b390:	d8800015 	stw	r2,0(sp)
 100b394:	100a6040 	call	100a604 <__umodsi3>
 100b398:	d9c00217 	ldw	r7,8(sp)
 100b39c:	da000017 	ldw	r8,0(sp)
 100b3a0:	1006943a 	slli	r3,r2,16
 100b3a4:	3804d43a 	srli	r2,r7,16
 100b3a8:	ba21383a 	mul	r16,r23,r8
 100b3ac:	d9800317 	ldw	r6,12(sp)
 100b3b0:	10c4b03a 	or	r2,r2,r3
 100b3b4:	da400117 	ldw	r9,4(sp)
 100b3b8:	1400062e 	bgeu	r2,r16,100b3d4 <__divdf3+0x4cc>
 100b3bc:	1705883a 	add	r2,r2,fp
 100b3c0:	40ffffc4 	addi	r3,r8,-1
 100b3c4:	1700ad36 	bltu	r2,fp,100b67c <__divdf3+0x774>
 100b3c8:	1400ac2e 	bgeu	r2,r16,100b67c <__divdf3+0x774>
 100b3cc:	423fff84 	addi	r8,r8,-2
 100b3d0:	1705883a 	add	r2,r2,fp
 100b3d4:	1421c83a 	sub	r16,r2,r16
 100b3d8:	a00b883a 	mov	r5,r20
 100b3dc:	8009883a 	mov	r4,r16
 100b3e0:	d9800315 	stw	r6,12(sp)
 100b3e4:	d9c00215 	stw	r7,8(sp)
 100b3e8:	da000015 	stw	r8,0(sp)
 100b3ec:	da400115 	stw	r9,4(sp)
 100b3f0:	100a5a00 	call	100a5a0 <__udivsi3>
 100b3f4:	8009883a 	mov	r4,r16
 100b3f8:	a00b883a 	mov	r5,r20
 100b3fc:	1025883a 	mov	r18,r2
 100b400:	100a6040 	call	100a604 <__umodsi3>
 100b404:	d9c00217 	ldw	r7,8(sp)
 100b408:	1004943a 	slli	r2,r2,16
 100b40c:	bcaf383a 	mul	r23,r23,r18
 100b410:	393fffcc 	andi	r4,r7,65535
 100b414:	2088b03a 	or	r4,r4,r2
 100b418:	d9800317 	ldw	r6,12(sp)
 100b41c:	da000017 	ldw	r8,0(sp)
 100b420:	da400117 	ldw	r9,4(sp)
 100b424:	25c0062e 	bgeu	r4,r23,100b440 <__divdf3+0x538>
 100b428:	2709883a 	add	r4,r4,fp
 100b42c:	90bfffc4 	addi	r2,r18,-1
 100b430:	27009436 	bltu	r4,fp,100b684 <__divdf3+0x77c>
 100b434:	25c0932e 	bgeu	r4,r23,100b684 <__divdf3+0x77c>
 100b438:	94bfff84 	addi	r18,r18,-2
 100b43c:	2709883a 	add	r4,r4,fp
 100b440:	4004943a 	slli	r2,r8,16
 100b444:	25efc83a 	sub	r23,r4,r23
 100b448:	1490b03a 	or	r8,r2,r18
 100b44c:	4008d43a 	srli	r4,r8,16
 100b450:	40ffffcc 	andi	r3,r8,65535
 100b454:	30c5383a 	mul	r2,r6,r3
 100b458:	1a47383a 	mul	r3,r3,r9
 100b45c:	310d383a 	mul	r6,r6,r4
 100b460:	100ad43a 	srli	r5,r2,16
 100b464:	4913383a 	mul	r9,r9,r4
 100b468:	1987883a 	add	r3,r3,r6
 100b46c:	28c7883a 	add	r3,r5,r3
 100b470:	1980022e 	bgeu	r3,r6,100b47c <__divdf3+0x574>
 100b474:	01000074 	movhi	r4,1
 100b478:	4913883a 	add	r9,r9,r4
 100b47c:	1808d43a 	srli	r4,r3,16
 100b480:	1806943a 	slli	r3,r3,16
 100b484:	10bfffcc 	andi	r2,r2,65535
 100b488:	2253883a 	add	r9,r4,r9
 100b48c:	1887883a 	add	r3,r3,r2
 100b490:	ba403836 	bltu	r23,r9,100b574 <__divdf3+0x66c>
 100b494:	ba403626 	beq	r23,r9,100b570 <__divdf3+0x668>
 100b498:	42000054 	ori	r8,r8,1
 100b49c:	a880ffc4 	addi	r2,r21,1023
 100b4a0:	00bf570e 	bge	zero,r2,100b200 <__divdf3+0x2f8>
 100b4a4:	40c001cc 	andi	r3,r8,7
 100b4a8:	18000726 	beq	r3,zero,100b4c8 <__divdf3+0x5c0>
 100b4ac:	40c003cc 	andi	r3,r8,15
 100b4b0:	01000104 	movi	r4,4
 100b4b4:	19000426 	beq	r3,r4,100b4c8 <__divdf3+0x5c0>
 100b4b8:	4107883a 	add	r3,r8,r4
 100b4bc:	1a11803a 	cmpltu	r8,r3,r8
 100b4c0:	8a23883a 	add	r17,r17,r8
 100b4c4:	1811883a 	mov	r8,r3
 100b4c8:	88c0402c 	andhi	r3,r17,256
 100b4cc:	18000426 	beq	r3,zero,100b4e0 <__divdf3+0x5d8>
 100b4d0:	00ffc034 	movhi	r3,65280
 100b4d4:	18ffffc4 	addi	r3,r3,-1
 100b4d8:	a8810004 	addi	r2,r21,1024
 100b4dc:	88e2703a 	and	r17,r17,r3
 100b4e0:	00c1ff84 	movi	r3,2046
 100b4e4:	18bee316 	blt	r3,r2,100b074 <__divdf3+0x16c>
 100b4e8:	8824977a 	slli	r18,r17,29
 100b4ec:	4010d0fa 	srli	r8,r8,3
 100b4f0:	8822927a 	slli	r17,r17,9
 100b4f4:	1081ffcc 	andi	r2,r2,2047
 100b4f8:	9224b03a 	or	r18,r18,r8
 100b4fc:	880ad33a 	srli	r5,r17,12
 100b500:	98c0004c 	andi	r3,r19,1
 100b504:	003edf06 	br	100b084 <__divdf3+0x17c>
 100b508:	8080022c 	andhi	r2,r16,8
 100b50c:	10001226 	beq	r2,zero,100b558 <__divdf3+0x650>
 100b510:	8880022c 	andhi	r2,r17,8
 100b514:	1000101e 	bne	r2,zero,100b558 <__divdf3+0x650>
 100b518:	00800434 	movhi	r2,16
 100b51c:	89400234 	orhi	r5,r17,8
 100b520:	10bfffc4 	addi	r2,r2,-1
 100b524:	b007883a 	mov	r3,r22
 100b528:	288a703a 	and	r5,r5,r2
 100b52c:	4025883a 	mov	r18,r8
 100b530:	003f3106 	br	100b1f8 <__divdf3+0x2f0>
 100b534:	008000c4 	movi	r2,3
 100b538:	3880a626 	beq	r7,r2,100b7d4 <__divdf3+0x8cc>
 100b53c:	00800044 	movi	r2,1
 100b540:	3880521e 	bne	r7,r2,100b68c <__divdf3+0x784>
 100b544:	b807883a 	mov	r3,r23
 100b548:	0005883a 	mov	r2,zero
 100b54c:	000b883a 	mov	r5,zero
 100b550:	0025883a 	mov	r18,zero
 100b554:	003ecb06 	br	100b084 <__divdf3+0x17c>
 100b558:	00800434 	movhi	r2,16
 100b55c:	81400234 	orhi	r5,r16,8
 100b560:	10bfffc4 	addi	r2,r2,-1
 100b564:	a007883a 	mov	r3,r20
 100b568:	288a703a 	and	r5,r5,r2
 100b56c:	003f2206 	br	100b1f8 <__divdf3+0x2f0>
 100b570:	183fca26 	beq	r3,zero,100b49c <__divdf3+0x594>
 100b574:	e5ef883a 	add	r23,fp,r23
 100b578:	40bfffc4 	addi	r2,r8,-1
 100b57c:	bf00392e 	bgeu	r23,fp,100b664 <__divdf3+0x75c>
 100b580:	1011883a 	mov	r8,r2
 100b584:	ba7fc41e 	bne	r23,r9,100b498 <__divdf3+0x590>
 100b588:	b0ffc31e 	bne	r22,r3,100b498 <__divdf3+0x590>
 100b58c:	003fc306 	br	100b49c <__divdf3+0x594>
 100b590:	143ff604 	addi	r16,r2,-40
 100b594:	9c20983a 	sll	r16,r19,r16
 100b598:	0025883a 	mov	r18,zero
 100b59c:	003ee206 	br	100b128 <__divdf3+0x220>
 100b5a0:	d9800315 	stw	r6,12(sp)
 100b5a4:	d9c00215 	stw	r7,8(sp)
 100b5a8:	100cc600 	call	100cc60 <__clzsi2>
 100b5ac:	10800804 	addi	r2,r2,32
 100b5b0:	d9c00217 	ldw	r7,8(sp)
 100b5b4:	d9800317 	ldw	r6,12(sp)
 100b5b8:	003ed106 	br	100b100 <__divdf3+0x1f8>
 100b5bc:	147ff604 	addi	r17,r2,-40
 100b5c0:	3462983a 	sll	r17,r6,r17
 100b5c4:	0011883a 	mov	r8,zero
 100b5c8:	003ef506 	br	100b1a0 <__divdf3+0x298>
 100b5cc:	3009883a 	mov	r4,r6
 100b5d0:	d9800315 	stw	r6,12(sp)
 100b5d4:	da400115 	stw	r9,4(sp)
 100b5d8:	100cc600 	call	100cc60 <__clzsi2>
 100b5dc:	10800804 	addi	r2,r2,32
 100b5e0:	da400117 	ldw	r9,4(sp)
 100b5e4:	d9800317 	ldw	r6,12(sp)
 100b5e8:	003ee306 	br	100b178 <__divdf3+0x270>
 100b5ec:	85a1883a 	add	r16,r16,r22
 100b5f0:	8585803a 	cmpltu	r2,r16,r22
 100b5f4:	1705883a 	add	r2,r2,fp
 100b5f8:	14a5883a 	add	r18,r2,r18
 100b5fc:	88bfffc4 	addi	r2,r17,-1
 100b600:	e4800c2e 	bgeu	fp,r18,100b634 <__divdf3+0x72c>
 100b604:	90c03e36 	bltu	r18,r3,100b700 <__divdf3+0x7f8>
 100b608:	1c806926 	beq	r3,r18,100b7b0 <__divdf3+0x8a8>
 100b60c:	90c7c83a 	sub	r3,r18,r3
 100b610:	1023883a 	mov	r17,r2
 100b614:	003f5206 	br	100b360 <__divdf3+0x458>
 100b618:	923f0436 	bltu	r18,r8,100b22c <__divdf3+0x324>
 100b61c:	800897fa 	slli	r4,r16,31
 100b620:	9004d07a 	srli	r2,r18,1
 100b624:	8006d07a 	srli	r3,r16,1
 100b628:	902097fa 	slli	r16,r18,31
 100b62c:	20a4b03a 	or	r18,r4,r2
 100b630:	003f0106 	br	100b238 <__divdf3+0x330>
 100b634:	e4bff51e 	bne	fp,r18,100b60c <__divdf3+0x704>
 100b638:	85bff22e 	bgeu	r16,r22,100b604 <__divdf3+0x6fc>
 100b63c:	e0c7c83a 	sub	r3,fp,r3
 100b640:	1023883a 	mov	r17,r2
 100b644:	003f4606 	br	100b360 <__divdf3+0x458>
 100b648:	100f883a 	mov	r7,r2
 100b64c:	003f2b06 	br	100b2fc <__divdf3+0x3f4>
 100b650:	180d883a 	mov	r6,r3
 100b654:	003f1306 	br	100b2a4 <__divdf3+0x39c>
 100b658:	813fe436 	bltu	r16,r4,100b5ec <__divdf3+0x6e4>
 100b65c:	0007883a 	mov	r3,zero
 100b660:	003f3f06 	br	100b360 <__divdf3+0x458>
 100b664:	ba402c36 	bltu	r23,r9,100b718 <__divdf3+0x810>
 100b668:	4dc05426 	beq	r9,r23,100b7bc <__divdf3+0x8b4>
 100b66c:	1011883a 	mov	r8,r2
 100b670:	003f8906 	br	100b498 <__divdf3+0x590>
 100b674:	023fffc4 	movi	r8,-1
 100b678:	003f8806 	br	100b49c <__divdf3+0x594>
 100b67c:	1811883a 	mov	r8,r3
 100b680:	003f5406 	br	100b3d4 <__divdf3+0x4cc>
 100b684:	1025883a 	mov	r18,r2
 100b688:	003f6d06 	br	100b440 <__divdf3+0x538>
 100b68c:	b827883a 	mov	r19,r23
 100b690:	003f8206 	br	100b49c <__divdf3+0x594>
 100b694:	010007c4 	movi	r4,31
 100b698:	20c02616 	blt	r4,r3,100b734 <__divdf3+0x82c>
 100b69c:	00800804 	movi	r2,32
 100b6a0:	10c5c83a 	sub	r2,r2,r3
 100b6a4:	888a983a 	sll	r5,r17,r2
 100b6a8:	40c8d83a 	srl	r4,r8,r3
 100b6ac:	4084983a 	sll	r2,r8,r2
 100b6b0:	88e2d83a 	srl	r17,r17,r3
 100b6b4:	2906b03a 	or	r3,r5,r4
 100b6b8:	1004c03a 	cmpne	r2,r2,zero
 100b6bc:	1886b03a 	or	r3,r3,r2
 100b6c0:	188001cc 	andi	r2,r3,7
 100b6c4:	10000726 	beq	r2,zero,100b6e4 <__divdf3+0x7dc>
 100b6c8:	188003cc 	andi	r2,r3,15
 100b6cc:	01000104 	movi	r4,4
 100b6d0:	11000426 	beq	r2,r4,100b6e4 <__divdf3+0x7dc>
 100b6d4:	1805883a 	mov	r2,r3
 100b6d8:	10c00104 	addi	r3,r2,4
 100b6dc:	1885803a 	cmpltu	r2,r3,r2
 100b6e0:	88a3883a 	add	r17,r17,r2
 100b6e4:	8880202c 	andhi	r2,r17,128
 100b6e8:	10002726 	beq	r2,zero,100b788 <__divdf3+0x880>
 100b6ec:	98c0004c 	andi	r3,r19,1
 100b6f0:	00800044 	movi	r2,1
 100b6f4:	000b883a 	mov	r5,zero
 100b6f8:	0025883a 	mov	r18,zero
 100b6fc:	003e6106 	br	100b084 <__divdf3+0x17c>
 100b700:	85a1883a 	add	r16,r16,r22
 100b704:	8585803a 	cmpltu	r2,r16,r22
 100b708:	1705883a 	add	r2,r2,fp
 100b70c:	14a5883a 	add	r18,r2,r18
 100b710:	8c7fff84 	addi	r17,r17,-2
 100b714:	003f1106 	br	100b35c <__divdf3+0x454>
 100b718:	b589883a 	add	r4,r22,r22
 100b71c:	25ad803a 	cmpltu	r22,r4,r22
 100b720:	b739883a 	add	fp,r22,fp
 100b724:	40bfff84 	addi	r2,r8,-2
 100b728:	bf2f883a 	add	r23,r23,fp
 100b72c:	202d883a 	mov	r22,r4
 100b730:	003f9306 	br	100b580 <__divdf3+0x678>
 100b734:	013ff844 	movi	r4,-31
 100b738:	2085c83a 	sub	r2,r4,r2
 100b73c:	8888d83a 	srl	r4,r17,r2
 100b740:	00800804 	movi	r2,32
 100b744:	18802126 	beq	r3,r2,100b7cc <__divdf3+0x8c4>
 100b748:	00801004 	movi	r2,64
 100b74c:	10c5c83a 	sub	r2,r2,r3
 100b750:	8884983a 	sll	r2,r17,r2
 100b754:	1204b03a 	or	r2,r2,r8
 100b758:	1004c03a 	cmpne	r2,r2,zero
 100b75c:	2084b03a 	or	r2,r4,r2
 100b760:	144001cc 	andi	r17,r2,7
 100b764:	88000d1e 	bne	r17,zero,100b79c <__divdf3+0x894>
 100b768:	000b883a 	mov	r5,zero
 100b76c:	1024d0fa 	srli	r18,r2,3
 100b770:	98c0004c 	andi	r3,r19,1
 100b774:	0005883a 	mov	r2,zero
 100b778:	9464b03a 	or	r18,r18,r17
 100b77c:	003e4106 	br	100b084 <__divdf3+0x17c>
 100b780:	1007883a 	mov	r3,r2
 100b784:	0023883a 	mov	r17,zero
 100b788:	880a927a 	slli	r5,r17,9
 100b78c:	1805883a 	mov	r2,r3
 100b790:	8822977a 	slli	r17,r17,29
 100b794:	280ad33a 	srli	r5,r5,12
 100b798:	003ff406 	br	100b76c <__divdf3+0x864>
 100b79c:	10c003cc 	andi	r3,r2,15
 100b7a0:	01000104 	movi	r4,4
 100b7a4:	193ff626 	beq	r3,r4,100b780 <__divdf3+0x878>
 100b7a8:	0023883a 	mov	r17,zero
 100b7ac:	003fca06 	br	100b6d8 <__divdf3+0x7d0>
 100b7b0:	813fd336 	bltu	r16,r4,100b700 <__divdf3+0x7f8>
 100b7b4:	1023883a 	mov	r17,r2
 100b7b8:	003fa806 	br	100b65c <__divdf3+0x754>
 100b7bc:	b0ffd636 	bltu	r22,r3,100b718 <__divdf3+0x810>
 100b7c0:	1011883a 	mov	r8,r2
 100b7c4:	b0ff341e 	bne	r22,r3,100b498 <__divdf3+0x590>
 100b7c8:	003f3406 	br	100b49c <__divdf3+0x594>
 100b7cc:	0005883a 	mov	r2,zero
 100b7d0:	003fe006 	br	100b754 <__divdf3+0x84c>
 100b7d4:	00800434 	movhi	r2,16
 100b7d8:	89400234 	orhi	r5,r17,8
 100b7dc:	10bfffc4 	addi	r2,r2,-1
 100b7e0:	b807883a 	mov	r3,r23
 100b7e4:	288a703a 	and	r5,r5,r2
 100b7e8:	4025883a 	mov	r18,r8
 100b7ec:	003e8206 	br	100b1f8 <__divdf3+0x2f0>

0100b7f0 <__eqdf2>:
 100b7f0:	2804d53a 	srli	r2,r5,20
 100b7f4:	3806d53a 	srli	r3,r7,20
 100b7f8:	02000434 	movhi	r8,16
 100b7fc:	423fffc4 	addi	r8,r8,-1
 100b800:	1081ffcc 	andi	r2,r2,2047
 100b804:	0281ffc4 	movi	r10,2047
 100b808:	2a12703a 	and	r9,r5,r8
 100b80c:	18c1ffcc 	andi	r3,r3,2047
 100b810:	3a10703a 	and	r8,r7,r8
 100b814:	280ad7fa 	srli	r5,r5,31
 100b818:	380ed7fa 	srli	r7,r7,31
 100b81c:	12801026 	beq	r2,r10,100b860 <__eqdf2+0x70>
 100b820:	0281ffc4 	movi	r10,2047
 100b824:	1a800a26 	beq	r3,r10,100b850 <__eqdf2+0x60>
 100b828:	10c00226 	beq	r2,r3,100b834 <__eqdf2+0x44>
 100b82c:	00800044 	movi	r2,1
 100b830:	f800283a 	ret
 100b834:	4a3ffd1e 	bne	r9,r8,100b82c <__eqdf2+0x3c>
 100b838:	21bffc1e 	bne	r4,r6,100b82c <__eqdf2+0x3c>
 100b83c:	29c00c26 	beq	r5,r7,100b870 <__eqdf2+0x80>
 100b840:	103ffa1e 	bne	r2,zero,100b82c <__eqdf2+0x3c>
 100b844:	2244b03a 	or	r2,r4,r9
 100b848:	1004c03a 	cmpne	r2,r2,zero
 100b84c:	f800283a 	ret
 100b850:	3214b03a 	or	r10,r6,r8
 100b854:	503ff426 	beq	r10,zero,100b828 <__eqdf2+0x38>
 100b858:	00800044 	movi	r2,1
 100b85c:	f800283a 	ret
 100b860:	2254b03a 	or	r10,r4,r9
 100b864:	503fee26 	beq	r10,zero,100b820 <__eqdf2+0x30>
 100b868:	00800044 	movi	r2,1
 100b86c:	f800283a 	ret
 100b870:	0005883a 	mov	r2,zero
 100b874:	f800283a 	ret

0100b878 <__gedf2>:
 100b878:	2804d53a 	srli	r2,r5,20
 100b87c:	3806d53a 	srli	r3,r7,20
 100b880:	02000434 	movhi	r8,16
 100b884:	423fffc4 	addi	r8,r8,-1
 100b888:	1081ffcc 	andi	r2,r2,2047
 100b88c:	0241ffc4 	movi	r9,2047
 100b890:	2a14703a 	and	r10,r5,r8
 100b894:	18c1ffcc 	andi	r3,r3,2047
 100b898:	3a10703a 	and	r8,r7,r8
 100b89c:	280ad7fa 	srli	r5,r5,31
 100b8a0:	380ed7fa 	srli	r7,r7,31
 100b8a4:	12401d26 	beq	r2,r9,100b91c <__gedf2+0xa4>
 100b8a8:	0241ffc4 	movi	r9,2047
 100b8ac:	1a401226 	beq	r3,r9,100b8f8 <__gedf2+0x80>
 100b8b0:	1000081e 	bne	r2,zero,100b8d4 <__gedf2+0x5c>
 100b8b4:	2296b03a 	or	r11,r4,r10
 100b8b8:	5813003a 	cmpeq	r9,r11,zero
 100b8bc:	1800091e 	bne	r3,zero,100b8e4 <__gedf2+0x6c>
 100b8c0:	3218b03a 	or	r12,r6,r8
 100b8c4:	6000071e 	bne	r12,zero,100b8e4 <__gedf2+0x6c>
 100b8c8:	0005883a 	mov	r2,zero
 100b8cc:	5800101e 	bne	r11,zero,100b910 <__gedf2+0x98>
 100b8d0:	f800283a 	ret
 100b8d4:	18000c1e 	bne	r3,zero,100b908 <__gedf2+0x90>
 100b8d8:	3212b03a 	or	r9,r6,r8
 100b8dc:	48000c26 	beq	r9,zero,100b910 <__gedf2+0x98>
 100b8e0:	0013883a 	mov	r9,zero
 100b8e4:	39c03fcc 	andi	r7,r7,255
 100b8e8:	48000826 	beq	r9,zero,100b90c <__gedf2+0x94>
 100b8ec:	38000926 	beq	r7,zero,100b914 <__gedf2+0x9c>
 100b8f0:	00800044 	movi	r2,1
 100b8f4:	f800283a 	ret
 100b8f8:	3212b03a 	or	r9,r6,r8
 100b8fc:	483fec26 	beq	r9,zero,100b8b0 <__gedf2+0x38>
 100b900:	00bfff84 	movi	r2,-2
 100b904:	f800283a 	ret
 100b908:	39c03fcc 	andi	r7,r7,255
 100b90c:	29c00626 	beq	r5,r7,100b928 <__gedf2+0xb0>
 100b910:	283ff726 	beq	r5,zero,100b8f0 <__gedf2+0x78>
 100b914:	00bfffc4 	movi	r2,-1
 100b918:	f800283a 	ret
 100b91c:	2292b03a 	or	r9,r4,r10
 100b920:	483fe126 	beq	r9,zero,100b8a8 <__gedf2+0x30>
 100b924:	003ff606 	br	100b900 <__gedf2+0x88>
 100b928:	18bff916 	blt	r3,r2,100b910 <__gedf2+0x98>
 100b92c:	10c00316 	blt	r2,r3,100b93c <__gedf2+0xc4>
 100b930:	42bff736 	bltu	r8,r10,100b910 <__gedf2+0x98>
 100b934:	52000326 	beq	r10,r8,100b944 <__gedf2+0xcc>
 100b938:	5200042e 	bgeu	r10,r8,100b94c <__gedf2+0xd4>
 100b93c:	283fec1e 	bne	r5,zero,100b8f0 <__gedf2+0x78>
 100b940:	003ff406 	br	100b914 <__gedf2+0x9c>
 100b944:	313ff236 	bltu	r6,r4,100b910 <__gedf2+0x98>
 100b948:	21bffc36 	bltu	r4,r6,100b93c <__gedf2+0xc4>
 100b94c:	0005883a 	mov	r2,zero
 100b950:	f800283a 	ret

0100b954 <__ledf2>:
 100b954:	2804d53a 	srli	r2,r5,20
 100b958:	3810d53a 	srli	r8,r7,20
 100b95c:	00c00434 	movhi	r3,16
 100b960:	18ffffc4 	addi	r3,r3,-1
 100b964:	1081ffcc 	andi	r2,r2,2047
 100b968:	0241ffc4 	movi	r9,2047
 100b96c:	28d4703a 	and	r10,r5,r3
 100b970:	4201ffcc 	andi	r8,r8,2047
 100b974:	38c6703a 	and	r3,r7,r3
 100b978:	280ad7fa 	srli	r5,r5,31
 100b97c:	380ed7fa 	srli	r7,r7,31
 100b980:	12401f26 	beq	r2,r9,100ba00 <__ledf2+0xac>
 100b984:	0241ffc4 	movi	r9,2047
 100b988:	42401426 	beq	r8,r9,100b9dc <__ledf2+0x88>
 100b98c:	1000091e 	bne	r2,zero,100b9b4 <__ledf2+0x60>
 100b990:	2296b03a 	or	r11,r4,r10
 100b994:	5813003a 	cmpeq	r9,r11,zero
 100b998:	29403fcc 	andi	r5,r5,255
 100b99c:	40000a1e 	bne	r8,zero,100b9c8 <__ledf2+0x74>
 100b9a0:	30d8b03a 	or	r12,r6,r3
 100b9a4:	6000081e 	bne	r12,zero,100b9c8 <__ledf2+0x74>
 100b9a8:	0005883a 	mov	r2,zero
 100b9ac:	5800111e 	bne	r11,zero,100b9f4 <__ledf2+0xa0>
 100b9b0:	f800283a 	ret
 100b9b4:	29403fcc 	andi	r5,r5,255
 100b9b8:	40000c1e 	bne	r8,zero,100b9ec <__ledf2+0x98>
 100b9bc:	30d2b03a 	or	r9,r6,r3
 100b9c0:	48000c26 	beq	r9,zero,100b9f4 <__ledf2+0xa0>
 100b9c4:	0013883a 	mov	r9,zero
 100b9c8:	39c03fcc 	andi	r7,r7,255
 100b9cc:	48000826 	beq	r9,zero,100b9f0 <__ledf2+0x9c>
 100b9d0:	38001126 	beq	r7,zero,100ba18 <__ledf2+0xc4>
 100b9d4:	00800044 	movi	r2,1
 100b9d8:	f800283a 	ret
 100b9dc:	30d2b03a 	or	r9,r6,r3
 100b9e0:	483fea26 	beq	r9,zero,100b98c <__ledf2+0x38>
 100b9e4:	00800084 	movi	r2,2
 100b9e8:	f800283a 	ret
 100b9ec:	39c03fcc 	andi	r7,r7,255
 100b9f0:	39400726 	beq	r7,r5,100ba10 <__ledf2+0xbc>
 100b9f4:	2800081e 	bne	r5,zero,100ba18 <__ledf2+0xc4>
 100b9f8:	00800044 	movi	r2,1
 100b9fc:	f800283a 	ret
 100ba00:	2292b03a 	or	r9,r4,r10
 100ba04:	483fdf26 	beq	r9,zero,100b984 <__ledf2+0x30>
 100ba08:	00800084 	movi	r2,2
 100ba0c:	f800283a 	ret
 100ba10:	4080030e 	bge	r8,r2,100ba20 <__ledf2+0xcc>
 100ba14:	383fef26 	beq	r7,zero,100b9d4 <__ledf2+0x80>
 100ba18:	00bfffc4 	movi	r2,-1
 100ba1c:	f800283a 	ret
 100ba20:	123feb16 	blt	r2,r8,100b9d0 <__ledf2+0x7c>
 100ba24:	1abff336 	bltu	r3,r10,100b9f4 <__ledf2+0xa0>
 100ba28:	50c00326 	beq	r10,r3,100ba38 <__ledf2+0xe4>
 100ba2c:	50c0042e 	bgeu	r10,r3,100ba40 <__ledf2+0xec>
 100ba30:	283fe81e 	bne	r5,zero,100b9d4 <__ledf2+0x80>
 100ba34:	003ff806 	br	100ba18 <__ledf2+0xc4>
 100ba38:	313fee36 	bltu	r6,r4,100b9f4 <__ledf2+0xa0>
 100ba3c:	21bffc36 	bltu	r4,r6,100ba30 <__ledf2+0xdc>
 100ba40:	0005883a 	mov	r2,zero
 100ba44:	f800283a 	ret

0100ba48 <__muldf3>:
 100ba48:	defff304 	addi	sp,sp,-52
 100ba4c:	2804d53a 	srli	r2,r5,20
 100ba50:	dd800915 	stw	r22,36(sp)
 100ba54:	282cd7fa 	srli	r22,r5,31
 100ba58:	dc000315 	stw	r16,12(sp)
 100ba5c:	04000434 	movhi	r16,16
 100ba60:	dd400815 	stw	r21,32(sp)
 100ba64:	dc800515 	stw	r18,20(sp)
 100ba68:	843fffc4 	addi	r16,r16,-1
 100ba6c:	dfc00c15 	stw	ra,48(sp)
 100ba70:	df000b15 	stw	fp,44(sp)
 100ba74:	ddc00a15 	stw	r23,40(sp)
 100ba78:	dd000715 	stw	r20,28(sp)
 100ba7c:	dcc00615 	stw	r19,24(sp)
 100ba80:	dc400415 	stw	r17,16(sp)
 100ba84:	1481ffcc 	andi	r18,r2,2047
 100ba88:	2c20703a 	and	r16,r5,r16
 100ba8c:	b02b883a 	mov	r21,r22
 100ba90:	b2403fcc 	andi	r9,r22,255
 100ba94:	90006026 	beq	r18,zero,100bc18 <__muldf3+0x1d0>
 100ba98:	0081ffc4 	movi	r2,2047
 100ba9c:	2029883a 	mov	r20,r4
 100baa0:	90803626 	beq	r18,r2,100bb7c <__muldf3+0x134>
 100baa4:	80800434 	orhi	r2,r16,16
 100baa8:	100490fa 	slli	r2,r2,3
 100baac:	2020d77a 	srli	r16,r4,29
 100bab0:	202890fa 	slli	r20,r4,3
 100bab4:	94bf0044 	addi	r18,r18,-1023
 100bab8:	80a0b03a 	or	r16,r16,r2
 100babc:	0027883a 	mov	r19,zero
 100bac0:	0039883a 	mov	fp,zero
 100bac4:	3804d53a 	srli	r2,r7,20
 100bac8:	382ed7fa 	srli	r23,r7,31
 100bacc:	04400434 	movhi	r17,16
 100bad0:	8c7fffc4 	addi	r17,r17,-1
 100bad4:	1081ffcc 	andi	r2,r2,2047
 100bad8:	3011883a 	mov	r8,r6
 100badc:	3c62703a 	and	r17,r7,r17
 100bae0:	ba803fcc 	andi	r10,r23,255
 100bae4:	10006d26 	beq	r2,zero,100bc9c <__muldf3+0x254>
 100bae8:	00c1ffc4 	movi	r3,2047
 100baec:	10c06526 	beq	r2,r3,100bc84 <__muldf3+0x23c>
 100baf0:	88c00434 	orhi	r3,r17,16
 100baf4:	180690fa 	slli	r3,r3,3
 100baf8:	3022d77a 	srli	r17,r6,29
 100bafc:	301090fa 	slli	r8,r6,3
 100bb00:	10bf0044 	addi	r2,r2,-1023
 100bb04:	88e2b03a 	or	r17,r17,r3
 100bb08:	000b883a 	mov	r5,zero
 100bb0c:	9085883a 	add	r2,r18,r2
 100bb10:	2cc8b03a 	or	r4,r5,r19
 100bb14:	00c003c4 	movi	r3,15
 100bb18:	bdacf03a 	xor	r22,r23,r22
 100bb1c:	12c00044 	addi	r11,r2,1
 100bb20:	19009936 	bltu	r3,r4,100bd88 <__muldf3+0x340>
 100bb24:	200890ba 	slli	r4,r4,2
 100bb28:	00c04074 	movhi	r3,257
 100bb2c:	18eecf04 	addi	r3,r3,-17604
 100bb30:	20c9883a 	add	r4,r4,r3
 100bb34:	20c00017 	ldw	r3,0(r4)
 100bb38:	1800683a 	jmp	r3
 100bb3c:	0100bd88 	cmpgei	r4,zero,758
 100bb40:	0100bb9c 	xori	r4,zero,750
 100bb44:	0100bb9c 	xori	r4,zero,750
 100bb48:	0100bb98 	cmpnei	r4,zero,750
 100bb4c:	0100bd64 	muli	r4,zero,757
 100bb50:	0100bd64 	muli	r4,zero,757
 100bb54:	0100bd4c 	andi	r4,zero,757
 100bb58:	0100bb98 	cmpnei	r4,zero,750
 100bb5c:	0100bd64 	muli	r4,zero,757
 100bb60:	0100bd4c 	andi	r4,zero,757
 100bb64:	0100bd64 	muli	r4,zero,757
 100bb68:	0100bb98 	cmpnei	r4,zero,750
 100bb6c:	0100bd74 	movhi	r4,757
 100bb70:	0100bd74 	movhi	r4,757
 100bb74:	0100bd74 	movhi	r4,757
 100bb78:	0100bf90 	cmplti	r4,zero,766
 100bb7c:	2404b03a 	or	r2,r4,r16
 100bb80:	10006f1e 	bne	r2,zero,100bd40 <__muldf3+0x2f8>
 100bb84:	04c00204 	movi	r19,8
 100bb88:	0021883a 	mov	r16,zero
 100bb8c:	0029883a 	mov	r20,zero
 100bb90:	07000084 	movi	fp,2
 100bb94:	003fcb06 	br	100bac4 <__muldf3+0x7c>
 100bb98:	502d883a 	mov	r22,r10
 100bb9c:	00800084 	movi	r2,2
 100bba0:	28805726 	beq	r5,r2,100bd00 <__muldf3+0x2b8>
 100bba4:	008000c4 	movi	r2,3
 100bba8:	28816626 	beq	r5,r2,100c144 <__muldf3+0x6fc>
 100bbac:	00800044 	movi	r2,1
 100bbb0:	2881411e 	bne	r5,r2,100c0b8 <__muldf3+0x670>
 100bbb4:	b02b883a 	mov	r21,r22
 100bbb8:	0005883a 	mov	r2,zero
 100bbbc:	000b883a 	mov	r5,zero
 100bbc0:	0029883a 	mov	r20,zero
 100bbc4:	1004953a 	slli	r2,r2,20
 100bbc8:	a8c03fcc 	andi	r3,r21,255
 100bbcc:	04400434 	movhi	r17,16
 100bbd0:	8c7fffc4 	addi	r17,r17,-1
 100bbd4:	180697fa 	slli	r3,r3,31
 100bbd8:	2c4a703a 	and	r5,r5,r17
 100bbdc:	288ab03a 	or	r5,r5,r2
 100bbe0:	28c6b03a 	or	r3,r5,r3
 100bbe4:	a005883a 	mov	r2,r20
 100bbe8:	dfc00c17 	ldw	ra,48(sp)
 100bbec:	df000b17 	ldw	fp,44(sp)
 100bbf0:	ddc00a17 	ldw	r23,40(sp)
 100bbf4:	dd800917 	ldw	r22,36(sp)
 100bbf8:	dd400817 	ldw	r21,32(sp)
 100bbfc:	dd000717 	ldw	r20,28(sp)
 100bc00:	dcc00617 	ldw	r19,24(sp)
 100bc04:	dc800517 	ldw	r18,20(sp)
 100bc08:	dc400417 	ldw	r17,16(sp)
 100bc0c:	dc000317 	ldw	r16,12(sp)
 100bc10:	dec00d04 	addi	sp,sp,52
 100bc14:	f800283a 	ret
 100bc18:	2404b03a 	or	r2,r4,r16
 100bc1c:	2027883a 	mov	r19,r4
 100bc20:	10004226 	beq	r2,zero,100bd2c <__muldf3+0x2e4>
 100bc24:	8000fc26 	beq	r16,zero,100c018 <__muldf3+0x5d0>
 100bc28:	8009883a 	mov	r4,r16
 100bc2c:	d9800215 	stw	r6,8(sp)
 100bc30:	d9c00015 	stw	r7,0(sp)
 100bc34:	da400115 	stw	r9,4(sp)
 100bc38:	100cc600 	call	100cc60 <__clzsi2>
 100bc3c:	d9800217 	ldw	r6,8(sp)
 100bc40:	d9c00017 	ldw	r7,0(sp)
 100bc44:	da400117 	ldw	r9,4(sp)
 100bc48:	113ffd44 	addi	r4,r2,-11
 100bc4c:	00c00704 	movi	r3,28
 100bc50:	1900ed16 	blt	r3,r4,100c008 <__muldf3+0x5c0>
 100bc54:	00c00744 	movi	r3,29
 100bc58:	147ffe04 	addi	r17,r2,-8
 100bc5c:	1907c83a 	sub	r3,r3,r4
 100bc60:	8460983a 	sll	r16,r16,r17
 100bc64:	98c6d83a 	srl	r3,r19,r3
 100bc68:	9c68983a 	sll	r20,r19,r17
 100bc6c:	1c20b03a 	or	r16,r3,r16
 100bc70:	1080fcc4 	addi	r2,r2,1011
 100bc74:	00a5c83a 	sub	r18,zero,r2
 100bc78:	0027883a 	mov	r19,zero
 100bc7c:	0039883a 	mov	fp,zero
 100bc80:	003f9006 	br	100bac4 <__muldf3+0x7c>
 100bc84:	3446b03a 	or	r3,r6,r17
 100bc88:	1800261e 	bne	r3,zero,100bd24 <__muldf3+0x2dc>
 100bc8c:	0023883a 	mov	r17,zero
 100bc90:	0011883a 	mov	r8,zero
 100bc94:	01400084 	movi	r5,2
 100bc98:	003f9c06 	br	100bb0c <__muldf3+0xc4>
 100bc9c:	3446b03a 	or	r3,r6,r17
 100bca0:	18001c26 	beq	r3,zero,100bd14 <__muldf3+0x2cc>
 100bca4:	8800ce26 	beq	r17,zero,100bfe0 <__muldf3+0x598>
 100bca8:	8809883a 	mov	r4,r17
 100bcac:	d9800215 	stw	r6,8(sp)
 100bcb0:	da400115 	stw	r9,4(sp)
 100bcb4:	da800015 	stw	r10,0(sp)
 100bcb8:	100cc600 	call	100cc60 <__clzsi2>
 100bcbc:	d9800217 	ldw	r6,8(sp)
 100bcc0:	da400117 	ldw	r9,4(sp)
 100bcc4:	da800017 	ldw	r10,0(sp)
 100bcc8:	113ffd44 	addi	r4,r2,-11
 100bccc:	00c00704 	movi	r3,28
 100bcd0:	1900bf16 	blt	r3,r4,100bfd0 <__muldf3+0x588>
 100bcd4:	00c00744 	movi	r3,29
 100bcd8:	123ffe04 	addi	r8,r2,-8
 100bcdc:	1907c83a 	sub	r3,r3,r4
 100bce0:	8a22983a 	sll	r17,r17,r8
 100bce4:	30c6d83a 	srl	r3,r6,r3
 100bce8:	3210983a 	sll	r8,r6,r8
 100bcec:	1c62b03a 	or	r17,r3,r17
 100bcf0:	1080fcc4 	addi	r2,r2,1011
 100bcf4:	0085c83a 	sub	r2,zero,r2
 100bcf8:	000b883a 	mov	r5,zero
 100bcfc:	003f8306 	br	100bb0c <__muldf3+0xc4>
 100bd00:	b02b883a 	mov	r21,r22
 100bd04:	0081ffc4 	movi	r2,2047
 100bd08:	000b883a 	mov	r5,zero
 100bd0c:	0029883a 	mov	r20,zero
 100bd10:	003fac06 	br	100bbc4 <__muldf3+0x17c>
 100bd14:	0023883a 	mov	r17,zero
 100bd18:	0011883a 	mov	r8,zero
 100bd1c:	01400044 	movi	r5,1
 100bd20:	003f7a06 	br	100bb0c <__muldf3+0xc4>
 100bd24:	014000c4 	movi	r5,3
 100bd28:	003f7806 	br	100bb0c <__muldf3+0xc4>
 100bd2c:	04c00104 	movi	r19,4
 100bd30:	0021883a 	mov	r16,zero
 100bd34:	0029883a 	mov	r20,zero
 100bd38:	07000044 	movi	fp,1
 100bd3c:	003f6106 	br	100bac4 <__muldf3+0x7c>
 100bd40:	04c00304 	movi	r19,12
 100bd44:	070000c4 	movi	fp,3
 100bd48:	003f5e06 	br	100bac4 <__muldf3+0x7c>
 100bd4c:	01400434 	movhi	r5,16
 100bd50:	002b883a 	mov	r21,zero
 100bd54:	297fffc4 	addi	r5,r5,-1
 100bd58:	053fffc4 	movi	r20,-1
 100bd5c:	0081ffc4 	movi	r2,2047
 100bd60:	003f9806 	br	100bbc4 <__muldf3+0x17c>
 100bd64:	8023883a 	mov	r17,r16
 100bd68:	a011883a 	mov	r8,r20
 100bd6c:	e00b883a 	mov	r5,fp
 100bd70:	003f8a06 	br	100bb9c <__muldf3+0x154>
 100bd74:	8023883a 	mov	r17,r16
 100bd78:	a011883a 	mov	r8,r20
 100bd7c:	482d883a 	mov	r22,r9
 100bd80:	e00b883a 	mov	r5,fp
 100bd84:	003f8506 	br	100bb9c <__muldf3+0x154>
 100bd88:	a00ad43a 	srli	r5,r20,16
 100bd8c:	401ad43a 	srli	r13,r8,16
 100bd90:	a53fffcc 	andi	r20,r20,65535
 100bd94:	423fffcc 	andi	r8,r8,65535
 100bd98:	4519383a 	mul	r12,r8,r20
 100bd9c:	4147383a 	mul	r3,r8,r5
 100bda0:	6d09383a 	mul	r4,r13,r20
 100bda4:	600cd43a 	srli	r6,r12,16
 100bda8:	2b5d383a 	mul	r14,r5,r13
 100bdac:	20c9883a 	add	r4,r4,r3
 100bdb0:	310d883a 	add	r6,r6,r4
 100bdb4:	30c0022e 	bgeu	r6,r3,100bdc0 <__muldf3+0x378>
 100bdb8:	00c00074 	movhi	r3,1
 100bdbc:	70dd883a 	add	r14,r14,r3
 100bdc0:	8826d43a 	srli	r19,r17,16
 100bdc4:	8bffffcc 	andi	r15,r17,65535
 100bdc8:	7d23383a 	mul	r17,r15,r20
 100bdcc:	7949383a 	mul	r4,r15,r5
 100bdd0:	9d29383a 	mul	r20,r19,r20
 100bdd4:	8814d43a 	srli	r10,r17,16
 100bdd8:	3012943a 	slli	r9,r6,16
 100bddc:	a129883a 	add	r20,r20,r4
 100bde0:	633fffcc 	andi	r12,r12,65535
 100bde4:	5515883a 	add	r10,r10,r20
 100bde8:	3006d43a 	srli	r3,r6,16
 100bdec:	4b13883a 	add	r9,r9,r12
 100bdf0:	2ccb383a 	mul	r5,r5,r19
 100bdf4:	5100022e 	bgeu	r10,r4,100be00 <__muldf3+0x3b8>
 100bdf8:	01000074 	movhi	r4,1
 100bdfc:	290b883a 	add	r5,r5,r4
 100be00:	802ad43a 	srli	r21,r16,16
 100be04:	843fffcc 	andi	r16,r16,65535
 100be08:	440d383a 	mul	r6,r8,r16
 100be0c:	4565383a 	mul	r18,r8,r21
 100be10:	8349383a 	mul	r4,r16,r13
 100be14:	500e943a 	slli	r7,r10,16
 100be18:	3010d43a 	srli	r8,r6,16
 100be1c:	5028d43a 	srli	r20,r10,16
 100be20:	2489883a 	add	r4,r4,r18
 100be24:	8abfffcc 	andi	r10,r17,65535
 100be28:	3a95883a 	add	r10,r7,r10
 100be2c:	4119883a 	add	r12,r8,r4
 100be30:	a169883a 	add	r20,r20,r5
 100be34:	1a87883a 	add	r3,r3,r10
 100be38:	6d5b383a 	mul	r13,r13,r21
 100be3c:	6480022e 	bgeu	r12,r18,100be48 <__muldf3+0x400>
 100be40:	01000074 	movhi	r4,1
 100be44:	691b883a 	add	r13,r13,r4
 100be48:	7c25383a 	mul	r18,r15,r16
 100be4c:	7d4b383a 	mul	r5,r15,r21
 100be50:	84cf383a 	mul	r7,r16,r19
 100be54:	901ed43a 	srli	r15,r18,16
 100be58:	6008d43a 	srli	r4,r12,16
 100be5c:	6010943a 	slli	r8,r12,16
 100be60:	394f883a 	add	r7,r7,r5
 100be64:	333fffcc 	andi	r12,r6,65535
 100be68:	79df883a 	add	r15,r15,r7
 100be6c:	235b883a 	add	r13,r4,r13
 100be70:	9d63383a 	mul	r17,r19,r21
 100be74:	4309883a 	add	r4,r8,r12
 100be78:	7940022e 	bgeu	r15,r5,100be84 <__muldf3+0x43c>
 100be7c:	01400074 	movhi	r5,1
 100be80:	8963883a 	add	r17,r17,r5
 100be84:	780a943a 	slli	r5,r15,16
 100be88:	91bfffcc 	andi	r6,r18,65535
 100be8c:	70c7883a 	add	r3,r14,r3
 100be90:	298d883a 	add	r6,r5,r6
 100be94:	1a8f803a 	cmpltu	r7,r3,r10
 100be98:	350b883a 	add	r5,r6,r20
 100be9c:	20c7883a 	add	r3,r4,r3
 100bea0:	3955883a 	add	r10,r7,r5
 100bea4:	1909803a 	cmpltu	r4,r3,r4
 100bea8:	6a91883a 	add	r8,r13,r10
 100beac:	780cd43a 	srli	r6,r15,16
 100beb0:	2219883a 	add	r12,r4,r8
 100beb4:	2d0b803a 	cmpltu	r5,r5,r20
 100beb8:	51cf803a 	cmpltu	r7,r10,r7
 100bebc:	29ceb03a 	or	r7,r5,r7
 100bec0:	4351803a 	cmpltu	r8,r8,r13
 100bec4:	610b803a 	cmpltu	r5,r12,r4
 100bec8:	4148b03a 	or	r4,r8,r5
 100becc:	398f883a 	add	r7,r7,r6
 100bed0:	3909883a 	add	r4,r7,r4
 100bed4:	1810927a 	slli	r8,r3,9
 100bed8:	2449883a 	add	r4,r4,r17
 100bedc:	2008927a 	slli	r4,r4,9
 100bee0:	6022d5fa 	srli	r17,r12,23
 100bee4:	1806d5fa 	srli	r3,r3,23
 100bee8:	4252b03a 	or	r9,r8,r9
 100beec:	600a927a 	slli	r5,r12,9
 100bef0:	4810c03a 	cmpne	r8,r9,zero
 100bef4:	2462b03a 	or	r17,r4,r17
 100bef8:	40c6b03a 	or	r3,r8,r3
 100befc:	8900402c 	andhi	r4,r17,256
 100bf00:	1950b03a 	or	r8,r3,r5
 100bf04:	20000726 	beq	r4,zero,100bf24 <__muldf3+0x4dc>
 100bf08:	4006d07a 	srli	r3,r8,1
 100bf0c:	880497fa 	slli	r2,r17,31
 100bf10:	4200004c 	andi	r8,r8,1
 100bf14:	8822d07a 	srli	r17,r17,1
 100bf18:	1a10b03a 	or	r8,r3,r8
 100bf1c:	1210b03a 	or	r8,r2,r8
 100bf20:	5805883a 	mov	r2,r11
 100bf24:	1140ffc4 	addi	r5,r2,1023
 100bf28:	0140440e 	bge	zero,r5,100c03c <__muldf3+0x5f4>
 100bf2c:	40c001cc 	andi	r3,r8,7
 100bf30:	18000726 	beq	r3,zero,100bf50 <__muldf3+0x508>
 100bf34:	40c003cc 	andi	r3,r8,15
 100bf38:	01000104 	movi	r4,4
 100bf3c:	19000426 	beq	r3,r4,100bf50 <__muldf3+0x508>
 100bf40:	4107883a 	add	r3,r8,r4
 100bf44:	1a11803a 	cmpltu	r8,r3,r8
 100bf48:	8a23883a 	add	r17,r17,r8
 100bf4c:	1811883a 	mov	r8,r3
 100bf50:	88c0402c 	andhi	r3,r17,256
 100bf54:	18000426 	beq	r3,zero,100bf68 <__muldf3+0x520>
 100bf58:	11410004 	addi	r5,r2,1024
 100bf5c:	00bfc034 	movhi	r2,65280
 100bf60:	10bfffc4 	addi	r2,r2,-1
 100bf64:	88a2703a 	and	r17,r17,r2
 100bf68:	0081ff84 	movi	r2,2046
 100bf6c:	117f6416 	blt	r2,r5,100bd00 <__muldf3+0x2b8>
 100bf70:	8828977a 	slli	r20,r17,29
 100bf74:	4010d0fa 	srli	r8,r8,3
 100bf78:	8822927a 	slli	r17,r17,9
 100bf7c:	2881ffcc 	andi	r2,r5,2047
 100bf80:	a228b03a 	or	r20,r20,r8
 100bf84:	880ad33a 	srli	r5,r17,12
 100bf88:	b02b883a 	mov	r21,r22
 100bf8c:	003f0d06 	br	100bbc4 <__muldf3+0x17c>
 100bf90:	8080022c 	andhi	r2,r16,8
 100bf94:	10000926 	beq	r2,zero,100bfbc <__muldf3+0x574>
 100bf98:	8880022c 	andhi	r2,r17,8
 100bf9c:	1000071e 	bne	r2,zero,100bfbc <__muldf3+0x574>
 100bfa0:	00800434 	movhi	r2,16
 100bfa4:	89400234 	orhi	r5,r17,8
 100bfa8:	10bfffc4 	addi	r2,r2,-1
 100bfac:	b82b883a 	mov	r21,r23
 100bfb0:	288a703a 	and	r5,r5,r2
 100bfb4:	4029883a 	mov	r20,r8
 100bfb8:	003f6806 	br	100bd5c <__muldf3+0x314>
 100bfbc:	00800434 	movhi	r2,16
 100bfc0:	81400234 	orhi	r5,r16,8
 100bfc4:	10bfffc4 	addi	r2,r2,-1
 100bfc8:	288a703a 	and	r5,r5,r2
 100bfcc:	003f6306 	br	100bd5c <__muldf3+0x314>
 100bfd0:	147ff604 	addi	r17,r2,-40
 100bfd4:	3462983a 	sll	r17,r6,r17
 100bfd8:	0011883a 	mov	r8,zero
 100bfdc:	003f4406 	br	100bcf0 <__muldf3+0x2a8>
 100bfe0:	3009883a 	mov	r4,r6
 100bfe4:	d9800215 	stw	r6,8(sp)
 100bfe8:	da400115 	stw	r9,4(sp)
 100bfec:	da800015 	stw	r10,0(sp)
 100bff0:	100cc600 	call	100cc60 <__clzsi2>
 100bff4:	10800804 	addi	r2,r2,32
 100bff8:	da800017 	ldw	r10,0(sp)
 100bffc:	da400117 	ldw	r9,4(sp)
 100c000:	d9800217 	ldw	r6,8(sp)
 100c004:	003f3006 	br	100bcc8 <__muldf3+0x280>
 100c008:	143ff604 	addi	r16,r2,-40
 100c00c:	9c20983a 	sll	r16,r19,r16
 100c010:	0029883a 	mov	r20,zero
 100c014:	003f1606 	br	100bc70 <__muldf3+0x228>
 100c018:	d9800215 	stw	r6,8(sp)
 100c01c:	d9c00015 	stw	r7,0(sp)
 100c020:	da400115 	stw	r9,4(sp)
 100c024:	100cc600 	call	100cc60 <__clzsi2>
 100c028:	10800804 	addi	r2,r2,32
 100c02c:	da400117 	ldw	r9,4(sp)
 100c030:	d9c00017 	ldw	r7,0(sp)
 100c034:	d9800217 	ldw	r6,8(sp)
 100c038:	003f0306 	br	100bc48 <__muldf3+0x200>
 100c03c:	00c00044 	movi	r3,1
 100c040:	1947c83a 	sub	r3,r3,r5
 100c044:	00800e04 	movi	r2,56
 100c048:	10feda16 	blt	r2,r3,100bbb4 <__muldf3+0x16c>
 100c04c:	008007c4 	movi	r2,31
 100c050:	10c01b16 	blt	r2,r3,100c0c0 <__muldf3+0x678>
 100c054:	00800804 	movi	r2,32
 100c058:	10c5c83a 	sub	r2,r2,r3
 100c05c:	888a983a 	sll	r5,r17,r2
 100c060:	40c8d83a 	srl	r4,r8,r3
 100c064:	4084983a 	sll	r2,r8,r2
 100c068:	88e2d83a 	srl	r17,r17,r3
 100c06c:	2906b03a 	or	r3,r5,r4
 100c070:	1004c03a 	cmpne	r2,r2,zero
 100c074:	1886b03a 	or	r3,r3,r2
 100c078:	188001cc 	andi	r2,r3,7
 100c07c:	10000726 	beq	r2,zero,100c09c <__muldf3+0x654>
 100c080:	188003cc 	andi	r2,r3,15
 100c084:	01000104 	movi	r4,4
 100c088:	11000426 	beq	r2,r4,100c09c <__muldf3+0x654>
 100c08c:	1805883a 	mov	r2,r3
 100c090:	10c00104 	addi	r3,r2,4
 100c094:	1885803a 	cmpltu	r2,r3,r2
 100c098:	88a3883a 	add	r17,r17,r2
 100c09c:	8880202c 	andhi	r2,r17,128
 100c0a0:	10001c26 	beq	r2,zero,100c114 <__muldf3+0x6cc>
 100c0a4:	b02b883a 	mov	r21,r22
 100c0a8:	00800044 	movi	r2,1
 100c0ac:	000b883a 	mov	r5,zero
 100c0b0:	0029883a 	mov	r20,zero
 100c0b4:	003ec306 	br	100bbc4 <__muldf3+0x17c>
 100c0b8:	5805883a 	mov	r2,r11
 100c0bc:	003f9906 	br	100bf24 <__muldf3+0x4dc>
 100c0c0:	00bff844 	movi	r2,-31
 100c0c4:	1145c83a 	sub	r2,r2,r5
 100c0c8:	8888d83a 	srl	r4,r17,r2
 100c0cc:	00800804 	movi	r2,32
 100c0d0:	18801a26 	beq	r3,r2,100c13c <__muldf3+0x6f4>
 100c0d4:	00801004 	movi	r2,64
 100c0d8:	10c5c83a 	sub	r2,r2,r3
 100c0dc:	8884983a 	sll	r2,r17,r2
 100c0e0:	1204b03a 	or	r2,r2,r8
 100c0e4:	1004c03a 	cmpne	r2,r2,zero
 100c0e8:	2084b03a 	or	r2,r4,r2
 100c0ec:	144001cc 	andi	r17,r2,7
 100c0f0:	88000d1e 	bne	r17,zero,100c128 <__muldf3+0x6e0>
 100c0f4:	000b883a 	mov	r5,zero
 100c0f8:	1028d0fa 	srli	r20,r2,3
 100c0fc:	b02b883a 	mov	r21,r22
 100c100:	0005883a 	mov	r2,zero
 100c104:	a468b03a 	or	r20,r20,r17
 100c108:	003eae06 	br	100bbc4 <__muldf3+0x17c>
 100c10c:	1007883a 	mov	r3,r2
 100c110:	0023883a 	mov	r17,zero
 100c114:	880a927a 	slli	r5,r17,9
 100c118:	1805883a 	mov	r2,r3
 100c11c:	8822977a 	slli	r17,r17,29
 100c120:	280ad33a 	srli	r5,r5,12
 100c124:	003ff406 	br	100c0f8 <__muldf3+0x6b0>
 100c128:	10c003cc 	andi	r3,r2,15
 100c12c:	01000104 	movi	r4,4
 100c130:	193ff626 	beq	r3,r4,100c10c <__muldf3+0x6c4>
 100c134:	0023883a 	mov	r17,zero
 100c138:	003fd506 	br	100c090 <__muldf3+0x648>
 100c13c:	0005883a 	mov	r2,zero
 100c140:	003fe706 	br	100c0e0 <__muldf3+0x698>
 100c144:	00800434 	movhi	r2,16
 100c148:	89400234 	orhi	r5,r17,8
 100c14c:	10bfffc4 	addi	r2,r2,-1
 100c150:	b02b883a 	mov	r21,r22
 100c154:	288a703a 	and	r5,r5,r2
 100c158:	4029883a 	mov	r20,r8
 100c15c:	003eff06 	br	100bd5c <__muldf3+0x314>

0100c160 <__subdf3>:
 100c160:	02000434 	movhi	r8,16
 100c164:	423fffc4 	addi	r8,r8,-1
 100c168:	defffb04 	addi	sp,sp,-20
 100c16c:	2a14703a 	and	r10,r5,r8
 100c170:	3812d53a 	srli	r9,r7,20
 100c174:	3a10703a 	and	r8,r7,r8
 100c178:	2006d77a 	srli	r3,r4,29
 100c17c:	3004d77a 	srli	r2,r6,29
 100c180:	dc000015 	stw	r16,0(sp)
 100c184:	501490fa 	slli	r10,r10,3
 100c188:	2820d53a 	srli	r16,r5,20
 100c18c:	401090fa 	slli	r8,r8,3
 100c190:	dc800215 	stw	r18,8(sp)
 100c194:	dc400115 	stw	r17,4(sp)
 100c198:	dfc00415 	stw	ra,16(sp)
 100c19c:	202290fa 	slli	r17,r4,3
 100c1a0:	dcc00315 	stw	r19,12(sp)
 100c1a4:	4a41ffcc 	andi	r9,r9,2047
 100c1a8:	0101ffc4 	movi	r4,2047
 100c1ac:	2824d7fa 	srli	r18,r5,31
 100c1b0:	8401ffcc 	andi	r16,r16,2047
 100c1b4:	50c6b03a 	or	r3,r10,r3
 100c1b8:	380ed7fa 	srli	r7,r7,31
 100c1bc:	408ab03a 	or	r5,r8,r2
 100c1c0:	300c90fa 	slli	r6,r6,3
 100c1c4:	49009626 	beq	r9,r4,100c420 <__subdf3+0x2c0>
 100c1c8:	39c0005c 	xori	r7,r7,1
 100c1cc:	8245c83a 	sub	r2,r16,r9
 100c1d0:	3c807426 	beq	r7,r18,100c3a4 <__subdf3+0x244>
 100c1d4:	0080af0e 	bge	zero,r2,100c494 <__subdf3+0x334>
 100c1d8:	48002a1e 	bne	r9,zero,100c284 <__subdf3+0x124>
 100c1dc:	2988b03a 	or	r4,r5,r6
 100c1e0:	20009a1e 	bne	r4,zero,100c44c <__subdf3+0x2ec>
 100c1e4:	888001cc 	andi	r2,r17,7
 100c1e8:	10000726 	beq	r2,zero,100c208 <__subdf3+0xa8>
 100c1ec:	888003cc 	andi	r2,r17,15
 100c1f0:	01000104 	movi	r4,4
 100c1f4:	11000426 	beq	r2,r4,100c208 <__subdf3+0xa8>
 100c1f8:	890b883a 	add	r5,r17,r4
 100c1fc:	2c63803a 	cmpltu	r17,r5,r17
 100c200:	1c47883a 	add	r3,r3,r17
 100c204:	2823883a 	mov	r17,r5
 100c208:	1880202c 	andhi	r2,r3,128
 100c20c:	10005926 	beq	r2,zero,100c374 <__subdf3+0x214>
 100c210:	84000044 	addi	r16,r16,1
 100c214:	0081ffc4 	movi	r2,2047
 100c218:	8080be26 	beq	r16,r2,100c514 <__subdf3+0x3b4>
 100c21c:	017fe034 	movhi	r5,65408
 100c220:	297fffc4 	addi	r5,r5,-1
 100c224:	1946703a 	and	r3,r3,r5
 100c228:	1804977a 	slli	r2,r3,29
 100c22c:	1806927a 	slli	r3,r3,9
 100c230:	8822d0fa 	srli	r17,r17,3
 100c234:	8401ffcc 	andi	r16,r16,2047
 100c238:	180ad33a 	srli	r5,r3,12
 100c23c:	9100004c 	andi	r4,r18,1
 100c240:	1444b03a 	or	r2,r2,r17
 100c244:	80c1ffcc 	andi	r3,r16,2047
 100c248:	1820953a 	slli	r16,r3,20
 100c24c:	20c03fcc 	andi	r3,r4,255
 100c250:	180897fa 	slli	r4,r3,31
 100c254:	00c00434 	movhi	r3,16
 100c258:	18ffffc4 	addi	r3,r3,-1
 100c25c:	28c6703a 	and	r3,r5,r3
 100c260:	1c06b03a 	or	r3,r3,r16
 100c264:	1906b03a 	or	r3,r3,r4
 100c268:	dfc00417 	ldw	ra,16(sp)
 100c26c:	dcc00317 	ldw	r19,12(sp)
 100c270:	dc800217 	ldw	r18,8(sp)
 100c274:	dc400117 	ldw	r17,4(sp)
 100c278:	dc000017 	ldw	r16,0(sp)
 100c27c:	dec00504 	addi	sp,sp,20
 100c280:	f800283a 	ret
 100c284:	0101ffc4 	movi	r4,2047
 100c288:	813fd626 	beq	r16,r4,100c1e4 <__subdf3+0x84>
 100c28c:	29402034 	orhi	r5,r5,128
 100c290:	01000e04 	movi	r4,56
 100c294:	2080a316 	blt	r4,r2,100c524 <__subdf3+0x3c4>
 100c298:	010007c4 	movi	r4,31
 100c29c:	2080c616 	blt	r4,r2,100c5b8 <__subdf3+0x458>
 100c2a0:	01000804 	movi	r4,32
 100c2a4:	2089c83a 	sub	r4,r4,r2
 100c2a8:	2910983a 	sll	r8,r5,r4
 100c2ac:	308ed83a 	srl	r7,r6,r2
 100c2b0:	3108983a 	sll	r4,r6,r4
 100c2b4:	2884d83a 	srl	r2,r5,r2
 100c2b8:	41ccb03a 	or	r6,r8,r7
 100c2bc:	2008c03a 	cmpne	r4,r4,zero
 100c2c0:	310cb03a 	or	r6,r6,r4
 100c2c4:	898dc83a 	sub	r6,r17,r6
 100c2c8:	89a3803a 	cmpltu	r17,r17,r6
 100c2cc:	1887c83a 	sub	r3,r3,r2
 100c2d0:	1c47c83a 	sub	r3,r3,r17
 100c2d4:	3023883a 	mov	r17,r6
 100c2d8:	1880202c 	andhi	r2,r3,128
 100c2dc:	10002326 	beq	r2,zero,100c36c <__subdf3+0x20c>
 100c2e0:	04c02034 	movhi	r19,128
 100c2e4:	9cffffc4 	addi	r19,r19,-1
 100c2e8:	1ce6703a 	and	r19,r3,r19
 100c2ec:	98007a26 	beq	r19,zero,100c4d8 <__subdf3+0x378>
 100c2f0:	9809883a 	mov	r4,r19
 100c2f4:	100cc600 	call	100cc60 <__clzsi2>
 100c2f8:	113ffe04 	addi	r4,r2,-8
 100c2fc:	00c007c4 	movi	r3,31
 100c300:	19007b16 	blt	r3,r4,100c4f0 <__subdf3+0x390>
 100c304:	00800804 	movi	r2,32
 100c308:	1105c83a 	sub	r2,r2,r4
 100c30c:	8884d83a 	srl	r2,r17,r2
 100c310:	9906983a 	sll	r3,r19,r4
 100c314:	8922983a 	sll	r17,r17,r4
 100c318:	10c4b03a 	or	r2,r2,r3
 100c31c:	24007816 	blt	r4,r16,100c500 <__subdf3+0x3a0>
 100c320:	2421c83a 	sub	r16,r4,r16
 100c324:	80c00044 	addi	r3,r16,1
 100c328:	010007c4 	movi	r4,31
 100c32c:	20c09516 	blt	r4,r3,100c584 <__subdf3+0x424>
 100c330:	01400804 	movi	r5,32
 100c334:	28cbc83a 	sub	r5,r5,r3
 100c338:	88c8d83a 	srl	r4,r17,r3
 100c33c:	8962983a 	sll	r17,r17,r5
 100c340:	114a983a 	sll	r5,r2,r5
 100c344:	10c6d83a 	srl	r3,r2,r3
 100c348:	8804c03a 	cmpne	r2,r17,zero
 100c34c:	290ab03a 	or	r5,r5,r4
 100c350:	28a2b03a 	or	r17,r5,r2
 100c354:	0021883a 	mov	r16,zero
 100c358:	003fa206 	br	100c1e4 <__subdf3+0x84>
 100c35c:	2090b03a 	or	r8,r4,r2
 100c360:	40018e26 	beq	r8,zero,100c99c <__subdf3+0x83c>
 100c364:	1007883a 	mov	r3,r2
 100c368:	2023883a 	mov	r17,r4
 100c36c:	888001cc 	andi	r2,r17,7
 100c370:	103f9e1e 	bne	r2,zero,100c1ec <__subdf3+0x8c>
 100c374:	1804977a 	slli	r2,r3,29
 100c378:	8822d0fa 	srli	r17,r17,3
 100c37c:	1810d0fa 	srli	r8,r3,3
 100c380:	9100004c 	andi	r4,r18,1
 100c384:	1444b03a 	or	r2,r2,r17
 100c388:	00c1ffc4 	movi	r3,2047
 100c38c:	80c02826 	beq	r16,r3,100c430 <__subdf3+0x2d0>
 100c390:	01400434 	movhi	r5,16
 100c394:	297fffc4 	addi	r5,r5,-1
 100c398:	80e0703a 	and	r16,r16,r3
 100c39c:	414a703a 	and	r5,r8,r5
 100c3a0:	003fa806 	br	100c244 <__subdf3+0xe4>
 100c3a4:	0080630e 	bge	zero,r2,100c534 <__subdf3+0x3d4>
 100c3a8:	48003026 	beq	r9,zero,100c46c <__subdf3+0x30c>
 100c3ac:	0101ffc4 	movi	r4,2047
 100c3b0:	813f8c26 	beq	r16,r4,100c1e4 <__subdf3+0x84>
 100c3b4:	29402034 	orhi	r5,r5,128
 100c3b8:	01000e04 	movi	r4,56
 100c3bc:	2080a90e 	bge	r4,r2,100c664 <__subdf3+0x504>
 100c3c0:	298cb03a 	or	r6,r5,r6
 100c3c4:	3012c03a 	cmpne	r9,r6,zero
 100c3c8:	0005883a 	mov	r2,zero
 100c3cc:	4c53883a 	add	r9,r9,r17
 100c3d0:	4c63803a 	cmpltu	r17,r9,r17
 100c3d4:	10c7883a 	add	r3,r2,r3
 100c3d8:	88c7883a 	add	r3,r17,r3
 100c3dc:	4823883a 	mov	r17,r9
 100c3e0:	1880202c 	andhi	r2,r3,128
 100c3e4:	1000d026 	beq	r2,zero,100c728 <__subdf3+0x5c8>
 100c3e8:	84000044 	addi	r16,r16,1
 100c3ec:	0081ffc4 	movi	r2,2047
 100c3f0:	8080fe26 	beq	r16,r2,100c7ec <__subdf3+0x68c>
 100c3f4:	00bfe034 	movhi	r2,65408
 100c3f8:	10bfffc4 	addi	r2,r2,-1
 100c3fc:	1886703a 	and	r3,r3,r2
 100c400:	880ad07a 	srli	r5,r17,1
 100c404:	180497fa 	slli	r2,r3,31
 100c408:	8900004c 	andi	r4,r17,1
 100c40c:	2922b03a 	or	r17,r5,r4
 100c410:	1806d07a 	srli	r3,r3,1
 100c414:	1462b03a 	or	r17,r2,r17
 100c418:	3825883a 	mov	r18,r7
 100c41c:	003f7106 	br	100c1e4 <__subdf3+0x84>
 100c420:	2984b03a 	or	r2,r5,r6
 100c424:	103f6826 	beq	r2,zero,100c1c8 <__subdf3+0x68>
 100c428:	39c03fcc 	andi	r7,r7,255
 100c42c:	003f6706 	br	100c1cc <__subdf3+0x6c>
 100c430:	4086b03a 	or	r3,r8,r2
 100c434:	18015226 	beq	r3,zero,100c980 <__subdf3+0x820>
 100c438:	00c00434 	movhi	r3,16
 100c43c:	41400234 	orhi	r5,r8,8
 100c440:	18ffffc4 	addi	r3,r3,-1
 100c444:	28ca703a 	and	r5,r5,r3
 100c448:	003f7e06 	br	100c244 <__subdf3+0xe4>
 100c44c:	10bfffc4 	addi	r2,r2,-1
 100c450:	1000491e 	bne	r2,zero,100c578 <__subdf3+0x418>
 100c454:	898fc83a 	sub	r7,r17,r6
 100c458:	89e3803a 	cmpltu	r17,r17,r7
 100c45c:	1947c83a 	sub	r3,r3,r5
 100c460:	1c47c83a 	sub	r3,r3,r17
 100c464:	3823883a 	mov	r17,r7
 100c468:	003f9b06 	br	100c2d8 <__subdf3+0x178>
 100c46c:	2988b03a 	or	r4,r5,r6
 100c470:	203f5c26 	beq	r4,zero,100c1e4 <__subdf3+0x84>
 100c474:	10bfffc4 	addi	r2,r2,-1
 100c478:	1000931e 	bne	r2,zero,100c6c8 <__subdf3+0x568>
 100c47c:	898d883a 	add	r6,r17,r6
 100c480:	3463803a 	cmpltu	r17,r6,r17
 100c484:	1947883a 	add	r3,r3,r5
 100c488:	88c7883a 	add	r3,r17,r3
 100c48c:	3023883a 	mov	r17,r6
 100c490:	003fd306 	br	100c3e0 <__subdf3+0x280>
 100c494:	1000541e 	bne	r2,zero,100c5e8 <__subdf3+0x488>
 100c498:	80800044 	addi	r2,r16,1
 100c49c:	1081ffcc 	andi	r2,r2,2047
 100c4a0:	01000044 	movi	r4,1
 100c4a4:	2080a20e 	bge	r4,r2,100c730 <__subdf3+0x5d0>
 100c4a8:	8989c83a 	sub	r4,r17,r6
 100c4ac:	8905803a 	cmpltu	r2,r17,r4
 100c4b0:	1967c83a 	sub	r19,r3,r5
 100c4b4:	98a7c83a 	sub	r19,r19,r2
 100c4b8:	9880202c 	andhi	r2,r19,128
 100c4bc:	10006326 	beq	r2,zero,100c64c <__subdf3+0x4ec>
 100c4c0:	3463c83a 	sub	r17,r6,r17
 100c4c4:	28c7c83a 	sub	r3,r5,r3
 100c4c8:	344d803a 	cmpltu	r6,r6,r17
 100c4cc:	19a7c83a 	sub	r19,r3,r6
 100c4d0:	3825883a 	mov	r18,r7
 100c4d4:	983f861e 	bne	r19,zero,100c2f0 <__subdf3+0x190>
 100c4d8:	8809883a 	mov	r4,r17
 100c4dc:	100cc600 	call	100cc60 <__clzsi2>
 100c4e0:	10800804 	addi	r2,r2,32
 100c4e4:	113ffe04 	addi	r4,r2,-8
 100c4e8:	00c007c4 	movi	r3,31
 100c4ec:	193f850e 	bge	r3,r4,100c304 <__subdf3+0x1a4>
 100c4f0:	10bff604 	addi	r2,r2,-40
 100c4f4:	8884983a 	sll	r2,r17,r2
 100c4f8:	0023883a 	mov	r17,zero
 100c4fc:	243f880e 	bge	r4,r16,100c320 <__subdf3+0x1c0>
 100c500:	00ffe034 	movhi	r3,65408
 100c504:	18ffffc4 	addi	r3,r3,-1
 100c508:	8121c83a 	sub	r16,r16,r4
 100c50c:	10c6703a 	and	r3,r2,r3
 100c510:	003f3406 	br	100c1e4 <__subdf3+0x84>
 100c514:	9100004c 	andi	r4,r18,1
 100c518:	000b883a 	mov	r5,zero
 100c51c:	0005883a 	mov	r2,zero
 100c520:	003f4806 	br	100c244 <__subdf3+0xe4>
 100c524:	298cb03a 	or	r6,r5,r6
 100c528:	300cc03a 	cmpne	r6,r6,zero
 100c52c:	0005883a 	mov	r2,zero
 100c530:	003f6406 	br	100c2c4 <__subdf3+0x164>
 100c534:	10009a1e 	bne	r2,zero,100c7a0 <__subdf3+0x640>
 100c538:	82400044 	addi	r9,r16,1
 100c53c:	4881ffcc 	andi	r2,r9,2047
 100c540:	02800044 	movi	r10,1
 100c544:	5080670e 	bge	r10,r2,100c6e4 <__subdf3+0x584>
 100c548:	0081ffc4 	movi	r2,2047
 100c54c:	4880af26 	beq	r9,r2,100c80c <__subdf3+0x6ac>
 100c550:	898d883a 	add	r6,r17,r6
 100c554:	1945883a 	add	r2,r3,r5
 100c558:	3447803a 	cmpltu	r3,r6,r17
 100c55c:	1887883a 	add	r3,r3,r2
 100c560:	182297fa 	slli	r17,r3,31
 100c564:	300cd07a 	srli	r6,r6,1
 100c568:	1806d07a 	srli	r3,r3,1
 100c56c:	4821883a 	mov	r16,r9
 100c570:	89a2b03a 	or	r17,r17,r6
 100c574:	003f1b06 	br	100c1e4 <__subdf3+0x84>
 100c578:	0101ffc4 	movi	r4,2047
 100c57c:	813f441e 	bne	r16,r4,100c290 <__subdf3+0x130>
 100c580:	003f1806 	br	100c1e4 <__subdf3+0x84>
 100c584:	843ff844 	addi	r16,r16,-31
 100c588:	01400804 	movi	r5,32
 100c58c:	1408d83a 	srl	r4,r2,r16
 100c590:	19405026 	beq	r3,r5,100c6d4 <__subdf3+0x574>
 100c594:	01401004 	movi	r5,64
 100c598:	28c7c83a 	sub	r3,r5,r3
 100c59c:	10c4983a 	sll	r2,r2,r3
 100c5a0:	88a2b03a 	or	r17,r17,r2
 100c5a4:	8822c03a 	cmpne	r17,r17,zero
 100c5a8:	2462b03a 	or	r17,r4,r17
 100c5ac:	0007883a 	mov	r3,zero
 100c5b0:	0021883a 	mov	r16,zero
 100c5b4:	003f6d06 	br	100c36c <__subdf3+0x20c>
 100c5b8:	11fff804 	addi	r7,r2,-32
 100c5bc:	01000804 	movi	r4,32
 100c5c0:	29ced83a 	srl	r7,r5,r7
 100c5c4:	11004526 	beq	r2,r4,100c6dc <__subdf3+0x57c>
 100c5c8:	01001004 	movi	r4,64
 100c5cc:	2089c83a 	sub	r4,r4,r2
 100c5d0:	2904983a 	sll	r2,r5,r4
 100c5d4:	118cb03a 	or	r6,r2,r6
 100c5d8:	300cc03a 	cmpne	r6,r6,zero
 100c5dc:	398cb03a 	or	r6,r7,r6
 100c5e0:	0005883a 	mov	r2,zero
 100c5e4:	003f3706 	br	100c2c4 <__subdf3+0x164>
 100c5e8:	80002a26 	beq	r16,zero,100c694 <__subdf3+0x534>
 100c5ec:	0101ffc4 	movi	r4,2047
 100c5f0:	49006626 	beq	r9,r4,100c78c <__subdf3+0x62c>
 100c5f4:	0085c83a 	sub	r2,zero,r2
 100c5f8:	18c02034 	orhi	r3,r3,128
 100c5fc:	01000e04 	movi	r4,56
 100c600:	20807e16 	blt	r4,r2,100c7fc <__subdf3+0x69c>
 100c604:	010007c4 	movi	r4,31
 100c608:	2080e716 	blt	r4,r2,100c9a8 <__subdf3+0x848>
 100c60c:	01000804 	movi	r4,32
 100c610:	2089c83a 	sub	r4,r4,r2
 100c614:	1914983a 	sll	r10,r3,r4
 100c618:	8890d83a 	srl	r8,r17,r2
 100c61c:	8908983a 	sll	r4,r17,r4
 100c620:	1884d83a 	srl	r2,r3,r2
 100c624:	5222b03a 	or	r17,r10,r8
 100c628:	2006c03a 	cmpne	r3,r4,zero
 100c62c:	88e2b03a 	or	r17,r17,r3
 100c630:	3463c83a 	sub	r17,r6,r17
 100c634:	2885c83a 	sub	r2,r5,r2
 100c638:	344d803a 	cmpltu	r6,r6,r17
 100c63c:	1187c83a 	sub	r3,r2,r6
 100c640:	4821883a 	mov	r16,r9
 100c644:	3825883a 	mov	r18,r7
 100c648:	003f2306 	br	100c2d8 <__subdf3+0x178>
 100c64c:	24d0b03a 	or	r8,r4,r19
 100c650:	40001b1e 	bne	r8,zero,100c6c0 <__subdf3+0x560>
 100c654:	0005883a 	mov	r2,zero
 100c658:	0009883a 	mov	r4,zero
 100c65c:	0021883a 	mov	r16,zero
 100c660:	003f4906 	br	100c388 <__subdf3+0x228>
 100c664:	010007c4 	movi	r4,31
 100c668:	20803a16 	blt	r4,r2,100c754 <__subdf3+0x5f4>
 100c66c:	01000804 	movi	r4,32
 100c670:	2089c83a 	sub	r4,r4,r2
 100c674:	2912983a 	sll	r9,r5,r4
 100c678:	3090d83a 	srl	r8,r6,r2
 100c67c:	3108983a 	sll	r4,r6,r4
 100c680:	2884d83a 	srl	r2,r5,r2
 100c684:	4a12b03a 	or	r9,r9,r8
 100c688:	2008c03a 	cmpne	r4,r4,zero
 100c68c:	4912b03a 	or	r9,r9,r4
 100c690:	003f4e06 	br	100c3cc <__subdf3+0x26c>
 100c694:	1c48b03a 	or	r4,r3,r17
 100c698:	20003c26 	beq	r4,zero,100c78c <__subdf3+0x62c>
 100c69c:	0084303a 	nor	r2,zero,r2
 100c6a0:	1000381e 	bne	r2,zero,100c784 <__subdf3+0x624>
 100c6a4:	3463c83a 	sub	r17,r6,r17
 100c6a8:	28c5c83a 	sub	r2,r5,r3
 100c6ac:	344d803a 	cmpltu	r6,r6,r17
 100c6b0:	1187c83a 	sub	r3,r2,r6
 100c6b4:	4821883a 	mov	r16,r9
 100c6b8:	3825883a 	mov	r18,r7
 100c6bc:	003f0606 	br	100c2d8 <__subdf3+0x178>
 100c6c0:	2023883a 	mov	r17,r4
 100c6c4:	003f0906 	br	100c2ec <__subdf3+0x18c>
 100c6c8:	0101ffc4 	movi	r4,2047
 100c6cc:	813f3a1e 	bne	r16,r4,100c3b8 <__subdf3+0x258>
 100c6d0:	003ec406 	br	100c1e4 <__subdf3+0x84>
 100c6d4:	0005883a 	mov	r2,zero
 100c6d8:	003fb106 	br	100c5a0 <__subdf3+0x440>
 100c6dc:	0005883a 	mov	r2,zero
 100c6e0:	003fbc06 	br	100c5d4 <__subdf3+0x474>
 100c6e4:	1c44b03a 	or	r2,r3,r17
 100c6e8:	80008e1e 	bne	r16,zero,100c924 <__subdf3+0x7c4>
 100c6ec:	1000c826 	beq	r2,zero,100ca10 <__subdf3+0x8b0>
 100c6f0:	2984b03a 	or	r2,r5,r6
 100c6f4:	103ebb26 	beq	r2,zero,100c1e4 <__subdf3+0x84>
 100c6f8:	8989883a 	add	r4,r17,r6
 100c6fc:	1945883a 	add	r2,r3,r5
 100c700:	2447803a 	cmpltu	r3,r4,r17
 100c704:	1887883a 	add	r3,r3,r2
 100c708:	1880202c 	andhi	r2,r3,128
 100c70c:	2023883a 	mov	r17,r4
 100c710:	103f1626 	beq	r2,zero,100c36c <__subdf3+0x20c>
 100c714:	00bfe034 	movhi	r2,65408
 100c718:	10bfffc4 	addi	r2,r2,-1
 100c71c:	5021883a 	mov	r16,r10
 100c720:	1886703a 	and	r3,r3,r2
 100c724:	003eaf06 	br	100c1e4 <__subdf3+0x84>
 100c728:	3825883a 	mov	r18,r7
 100c72c:	003f0f06 	br	100c36c <__subdf3+0x20c>
 100c730:	1c44b03a 	or	r2,r3,r17
 100c734:	8000251e 	bne	r16,zero,100c7cc <__subdf3+0x66c>
 100c738:	1000661e 	bne	r2,zero,100c8d4 <__subdf3+0x774>
 100c73c:	2990b03a 	or	r8,r5,r6
 100c740:	40009626 	beq	r8,zero,100c99c <__subdf3+0x83c>
 100c744:	2807883a 	mov	r3,r5
 100c748:	3023883a 	mov	r17,r6
 100c74c:	3825883a 	mov	r18,r7
 100c750:	003ea406 	br	100c1e4 <__subdf3+0x84>
 100c754:	127ff804 	addi	r9,r2,-32
 100c758:	01000804 	movi	r4,32
 100c75c:	2a52d83a 	srl	r9,r5,r9
 100c760:	11008c26 	beq	r2,r4,100c994 <__subdf3+0x834>
 100c764:	01001004 	movi	r4,64
 100c768:	2085c83a 	sub	r2,r4,r2
 100c76c:	2884983a 	sll	r2,r5,r2
 100c770:	118cb03a 	or	r6,r2,r6
 100c774:	300cc03a 	cmpne	r6,r6,zero
 100c778:	4992b03a 	or	r9,r9,r6
 100c77c:	0005883a 	mov	r2,zero
 100c780:	003f1206 	br	100c3cc <__subdf3+0x26c>
 100c784:	0101ffc4 	movi	r4,2047
 100c788:	493f9c1e 	bne	r9,r4,100c5fc <__subdf3+0x49c>
 100c78c:	2807883a 	mov	r3,r5
 100c790:	3023883a 	mov	r17,r6
 100c794:	4821883a 	mov	r16,r9
 100c798:	3825883a 	mov	r18,r7
 100c79c:	003e9106 	br	100c1e4 <__subdf3+0x84>
 100c7a0:	80001f1e 	bne	r16,zero,100c820 <__subdf3+0x6c0>
 100c7a4:	1c48b03a 	or	r4,r3,r17
 100c7a8:	20005a26 	beq	r4,zero,100c914 <__subdf3+0x7b4>
 100c7ac:	0084303a 	nor	r2,zero,r2
 100c7b0:	1000561e 	bne	r2,zero,100c90c <__subdf3+0x7ac>
 100c7b4:	89a3883a 	add	r17,r17,r6
 100c7b8:	1945883a 	add	r2,r3,r5
 100c7bc:	898d803a 	cmpltu	r6,r17,r6
 100c7c0:	3087883a 	add	r3,r6,r2
 100c7c4:	4821883a 	mov	r16,r9
 100c7c8:	003f0506 	br	100c3e0 <__subdf3+0x280>
 100c7cc:	10002b1e 	bne	r2,zero,100c87c <__subdf3+0x71c>
 100c7d0:	2984b03a 	or	r2,r5,r6
 100c7d4:	10008026 	beq	r2,zero,100c9d8 <__subdf3+0x878>
 100c7d8:	2807883a 	mov	r3,r5
 100c7dc:	3023883a 	mov	r17,r6
 100c7e0:	3825883a 	mov	r18,r7
 100c7e4:	0401ffc4 	movi	r16,2047
 100c7e8:	003e7e06 	br	100c1e4 <__subdf3+0x84>
 100c7ec:	3809883a 	mov	r4,r7
 100c7f0:	0011883a 	mov	r8,zero
 100c7f4:	0005883a 	mov	r2,zero
 100c7f8:	003ee306 	br	100c388 <__subdf3+0x228>
 100c7fc:	1c62b03a 	or	r17,r3,r17
 100c800:	8822c03a 	cmpne	r17,r17,zero
 100c804:	0005883a 	mov	r2,zero
 100c808:	003f8906 	br	100c630 <__subdf3+0x4d0>
 100c80c:	3809883a 	mov	r4,r7
 100c810:	4821883a 	mov	r16,r9
 100c814:	0011883a 	mov	r8,zero
 100c818:	0005883a 	mov	r2,zero
 100c81c:	003eda06 	br	100c388 <__subdf3+0x228>
 100c820:	0101ffc4 	movi	r4,2047
 100c824:	49003b26 	beq	r9,r4,100c914 <__subdf3+0x7b4>
 100c828:	0085c83a 	sub	r2,zero,r2
 100c82c:	18c02034 	orhi	r3,r3,128
 100c830:	01000e04 	movi	r4,56
 100c834:	20806e16 	blt	r4,r2,100c9f0 <__subdf3+0x890>
 100c838:	010007c4 	movi	r4,31
 100c83c:	20807716 	blt	r4,r2,100ca1c <__subdf3+0x8bc>
 100c840:	01000804 	movi	r4,32
 100c844:	2089c83a 	sub	r4,r4,r2
 100c848:	1914983a 	sll	r10,r3,r4
 100c84c:	8890d83a 	srl	r8,r17,r2
 100c850:	8908983a 	sll	r4,r17,r4
 100c854:	1884d83a 	srl	r2,r3,r2
 100c858:	5222b03a 	or	r17,r10,r8
 100c85c:	2006c03a 	cmpne	r3,r4,zero
 100c860:	88e2b03a 	or	r17,r17,r3
 100c864:	89a3883a 	add	r17,r17,r6
 100c868:	1145883a 	add	r2,r2,r5
 100c86c:	898d803a 	cmpltu	r6,r17,r6
 100c870:	3087883a 	add	r3,r6,r2
 100c874:	4821883a 	mov	r16,r9
 100c878:	003ed906 	br	100c3e0 <__subdf3+0x280>
 100c87c:	2984b03a 	or	r2,r5,r6
 100c880:	10004226 	beq	r2,zero,100c98c <__subdf3+0x82c>
 100c884:	1808d0fa 	srli	r4,r3,3
 100c888:	8822d0fa 	srli	r17,r17,3
 100c88c:	1806977a 	slli	r3,r3,29
 100c890:	2080022c 	andhi	r2,r4,8
 100c894:	1c62b03a 	or	r17,r3,r17
 100c898:	10000826 	beq	r2,zero,100c8bc <__subdf3+0x75c>
 100c89c:	2812d0fa 	srli	r9,r5,3
 100c8a0:	4880022c 	andhi	r2,r9,8
 100c8a4:	1000051e 	bne	r2,zero,100c8bc <__subdf3+0x75c>
 100c8a8:	300cd0fa 	srli	r6,r6,3
 100c8ac:	2804977a 	slli	r2,r5,29
 100c8b0:	4809883a 	mov	r4,r9
 100c8b4:	3825883a 	mov	r18,r7
 100c8b8:	11a2b03a 	or	r17,r2,r6
 100c8bc:	8806d77a 	srli	r3,r17,29
 100c8c0:	200890fa 	slli	r4,r4,3
 100c8c4:	882290fa 	slli	r17,r17,3
 100c8c8:	0401ffc4 	movi	r16,2047
 100c8cc:	1906b03a 	or	r3,r3,r4
 100c8d0:	003e4406 	br	100c1e4 <__subdf3+0x84>
 100c8d4:	2984b03a 	or	r2,r5,r6
 100c8d8:	103e4226 	beq	r2,zero,100c1e4 <__subdf3+0x84>
 100c8dc:	8989c83a 	sub	r4,r17,r6
 100c8e0:	8911803a 	cmpltu	r8,r17,r4
 100c8e4:	1945c83a 	sub	r2,r3,r5
 100c8e8:	1205c83a 	sub	r2,r2,r8
 100c8ec:	1200202c 	andhi	r8,r2,128
 100c8f0:	403e9a26 	beq	r8,zero,100c35c <__subdf3+0x1fc>
 100c8f4:	3463c83a 	sub	r17,r6,r17
 100c8f8:	28c5c83a 	sub	r2,r5,r3
 100c8fc:	344d803a 	cmpltu	r6,r6,r17
 100c900:	1187c83a 	sub	r3,r2,r6
 100c904:	3825883a 	mov	r18,r7
 100c908:	003e3606 	br	100c1e4 <__subdf3+0x84>
 100c90c:	0101ffc4 	movi	r4,2047
 100c910:	493fc71e 	bne	r9,r4,100c830 <__subdf3+0x6d0>
 100c914:	2807883a 	mov	r3,r5
 100c918:	3023883a 	mov	r17,r6
 100c91c:	4821883a 	mov	r16,r9
 100c920:	003e3006 	br	100c1e4 <__subdf3+0x84>
 100c924:	10003626 	beq	r2,zero,100ca00 <__subdf3+0x8a0>
 100c928:	2984b03a 	or	r2,r5,r6
 100c92c:	10001726 	beq	r2,zero,100c98c <__subdf3+0x82c>
 100c930:	1808d0fa 	srli	r4,r3,3
 100c934:	8822d0fa 	srli	r17,r17,3
 100c938:	1806977a 	slli	r3,r3,29
 100c93c:	2080022c 	andhi	r2,r4,8
 100c940:	1c62b03a 	or	r17,r3,r17
 100c944:	10000726 	beq	r2,zero,100c964 <__subdf3+0x804>
 100c948:	2812d0fa 	srli	r9,r5,3
 100c94c:	4880022c 	andhi	r2,r9,8
 100c950:	1000041e 	bne	r2,zero,100c964 <__subdf3+0x804>
 100c954:	300cd0fa 	srli	r6,r6,3
 100c958:	2804977a 	slli	r2,r5,29
 100c95c:	4809883a 	mov	r4,r9
 100c960:	11a2b03a 	or	r17,r2,r6
 100c964:	8806d77a 	srli	r3,r17,29
 100c968:	200890fa 	slli	r4,r4,3
 100c96c:	882290fa 	slli	r17,r17,3
 100c970:	3825883a 	mov	r18,r7
 100c974:	1906b03a 	or	r3,r3,r4
 100c978:	0401ffc4 	movi	r16,2047
 100c97c:	003e1906 	br	100c1e4 <__subdf3+0x84>
 100c980:	000b883a 	mov	r5,zero
 100c984:	0005883a 	mov	r2,zero
 100c988:	003e2e06 	br	100c244 <__subdf3+0xe4>
 100c98c:	0401ffc4 	movi	r16,2047
 100c990:	003e1406 	br	100c1e4 <__subdf3+0x84>
 100c994:	0005883a 	mov	r2,zero
 100c998:	003f7506 	br	100c770 <__subdf3+0x610>
 100c99c:	0005883a 	mov	r2,zero
 100c9a0:	0009883a 	mov	r4,zero
 100c9a4:	003e7806 	br	100c388 <__subdf3+0x228>
 100c9a8:	123ff804 	addi	r8,r2,-32
 100c9ac:	01000804 	movi	r4,32
 100c9b0:	1a10d83a 	srl	r8,r3,r8
 100c9b4:	11002526 	beq	r2,r4,100ca4c <__subdf3+0x8ec>
 100c9b8:	01001004 	movi	r4,64
 100c9bc:	2085c83a 	sub	r2,r4,r2
 100c9c0:	1884983a 	sll	r2,r3,r2
 100c9c4:	1444b03a 	or	r2,r2,r17
 100c9c8:	1004c03a 	cmpne	r2,r2,zero
 100c9cc:	40a2b03a 	or	r17,r8,r2
 100c9d0:	0005883a 	mov	r2,zero
 100c9d4:	003f1606 	br	100c630 <__subdf3+0x4d0>
 100c9d8:	02000434 	movhi	r8,16
 100c9dc:	0009883a 	mov	r4,zero
 100c9e0:	423fffc4 	addi	r8,r8,-1
 100c9e4:	00bfffc4 	movi	r2,-1
 100c9e8:	0401ffc4 	movi	r16,2047
 100c9ec:	003e6606 	br	100c388 <__subdf3+0x228>
 100c9f0:	1c62b03a 	or	r17,r3,r17
 100c9f4:	8822c03a 	cmpne	r17,r17,zero
 100c9f8:	0005883a 	mov	r2,zero
 100c9fc:	003f9906 	br	100c864 <__subdf3+0x704>
 100ca00:	2807883a 	mov	r3,r5
 100ca04:	3023883a 	mov	r17,r6
 100ca08:	0401ffc4 	movi	r16,2047
 100ca0c:	003df506 	br	100c1e4 <__subdf3+0x84>
 100ca10:	2807883a 	mov	r3,r5
 100ca14:	3023883a 	mov	r17,r6
 100ca18:	003df206 	br	100c1e4 <__subdf3+0x84>
 100ca1c:	123ff804 	addi	r8,r2,-32
 100ca20:	01000804 	movi	r4,32
 100ca24:	1a10d83a 	srl	r8,r3,r8
 100ca28:	11000a26 	beq	r2,r4,100ca54 <__subdf3+0x8f4>
 100ca2c:	01001004 	movi	r4,64
 100ca30:	2085c83a 	sub	r2,r4,r2
 100ca34:	1884983a 	sll	r2,r3,r2
 100ca38:	1444b03a 	or	r2,r2,r17
 100ca3c:	1004c03a 	cmpne	r2,r2,zero
 100ca40:	40a2b03a 	or	r17,r8,r2
 100ca44:	0005883a 	mov	r2,zero
 100ca48:	003f8606 	br	100c864 <__subdf3+0x704>
 100ca4c:	0005883a 	mov	r2,zero
 100ca50:	003fdc06 	br	100c9c4 <__subdf3+0x864>
 100ca54:	0005883a 	mov	r2,zero
 100ca58:	003ff706 	br	100ca38 <__subdf3+0x8d8>

0100ca5c <__fixdfsi>:
 100ca5c:	280cd53a 	srli	r6,r5,20
 100ca60:	00c00434 	movhi	r3,16
 100ca64:	18ffffc4 	addi	r3,r3,-1
 100ca68:	3181ffcc 	andi	r6,r6,2047
 100ca6c:	01c0ff84 	movi	r7,1022
 100ca70:	28c6703a 	and	r3,r5,r3
 100ca74:	280ad7fa 	srli	r5,r5,31
 100ca78:	3980120e 	bge	r7,r6,100cac4 <__fixdfsi+0x68>
 100ca7c:	00810744 	movi	r2,1053
 100ca80:	11800c16 	blt	r2,r6,100cab4 <__fixdfsi+0x58>
 100ca84:	00810cc4 	movi	r2,1075
 100ca88:	1185c83a 	sub	r2,r2,r6
 100ca8c:	01c007c4 	movi	r7,31
 100ca90:	18c00434 	orhi	r3,r3,16
 100ca94:	38800d16 	blt	r7,r2,100cacc <__fixdfsi+0x70>
 100ca98:	31befb44 	addi	r6,r6,-1043
 100ca9c:	2084d83a 	srl	r2,r4,r2
 100caa0:	1986983a 	sll	r3,r3,r6
 100caa4:	1884b03a 	or	r2,r3,r2
 100caa8:	28000726 	beq	r5,zero,100cac8 <__fixdfsi+0x6c>
 100caac:	0085c83a 	sub	r2,zero,r2
 100cab0:	f800283a 	ret
 100cab4:	00a00034 	movhi	r2,32768
 100cab8:	10bfffc4 	addi	r2,r2,-1
 100cabc:	2885883a 	add	r2,r5,r2
 100cac0:	f800283a 	ret
 100cac4:	0005883a 	mov	r2,zero
 100cac8:	f800283a 	ret
 100cacc:	008104c4 	movi	r2,1043
 100cad0:	1185c83a 	sub	r2,r2,r6
 100cad4:	1884d83a 	srl	r2,r3,r2
 100cad8:	003ff306 	br	100caa8 <__fixdfsi+0x4c>

0100cadc <__floatsidf>:
 100cadc:	defffd04 	addi	sp,sp,-12
 100cae0:	dfc00215 	stw	ra,8(sp)
 100cae4:	dc400115 	stw	r17,4(sp)
 100cae8:	dc000015 	stw	r16,0(sp)
 100caec:	20002b26 	beq	r4,zero,100cb9c <__floatsidf+0xc0>
 100caf0:	2023883a 	mov	r17,r4
 100caf4:	2020d7fa 	srli	r16,r4,31
 100caf8:	20002d16 	blt	r4,zero,100cbb0 <__floatsidf+0xd4>
 100cafc:	8809883a 	mov	r4,r17
 100cb00:	100cc600 	call	100cc60 <__clzsi2>
 100cb04:	01410784 	movi	r5,1054
 100cb08:	288bc83a 	sub	r5,r5,r2
 100cb0c:	01010cc4 	movi	r4,1075
 100cb10:	2149c83a 	sub	r4,r4,r5
 100cb14:	00c007c4 	movi	r3,31
 100cb18:	1900160e 	bge	r3,r4,100cb74 <__floatsidf+0x98>
 100cb1c:	00c104c4 	movi	r3,1043
 100cb20:	1947c83a 	sub	r3,r3,r5
 100cb24:	88c6983a 	sll	r3,r17,r3
 100cb28:	00800434 	movhi	r2,16
 100cb2c:	10bfffc4 	addi	r2,r2,-1
 100cb30:	1886703a 	and	r3,r3,r2
 100cb34:	2941ffcc 	andi	r5,r5,2047
 100cb38:	800d883a 	mov	r6,r16
 100cb3c:	0005883a 	mov	r2,zero
 100cb40:	280a953a 	slli	r5,r5,20
 100cb44:	31803fcc 	andi	r6,r6,255
 100cb48:	01000434 	movhi	r4,16
 100cb4c:	300c97fa 	slli	r6,r6,31
 100cb50:	213fffc4 	addi	r4,r4,-1
 100cb54:	1906703a 	and	r3,r3,r4
 100cb58:	1946b03a 	or	r3,r3,r5
 100cb5c:	1986b03a 	or	r3,r3,r6
 100cb60:	dfc00217 	ldw	ra,8(sp)
 100cb64:	dc400117 	ldw	r17,4(sp)
 100cb68:	dc000017 	ldw	r16,0(sp)
 100cb6c:	dec00304 	addi	sp,sp,12
 100cb70:	f800283a 	ret
 100cb74:	00c002c4 	movi	r3,11
 100cb78:	1887c83a 	sub	r3,r3,r2
 100cb7c:	88c6d83a 	srl	r3,r17,r3
 100cb80:	8904983a 	sll	r2,r17,r4
 100cb84:	01000434 	movhi	r4,16
 100cb88:	213fffc4 	addi	r4,r4,-1
 100cb8c:	2941ffcc 	andi	r5,r5,2047
 100cb90:	1906703a 	and	r3,r3,r4
 100cb94:	800d883a 	mov	r6,r16
 100cb98:	003fe906 	br	100cb40 <__floatsidf+0x64>
 100cb9c:	000d883a 	mov	r6,zero
 100cba0:	000b883a 	mov	r5,zero
 100cba4:	0007883a 	mov	r3,zero
 100cba8:	0005883a 	mov	r2,zero
 100cbac:	003fe406 	br	100cb40 <__floatsidf+0x64>
 100cbb0:	0123c83a 	sub	r17,zero,r4
 100cbb4:	003fd106 	br	100cafc <__floatsidf+0x20>

0100cbb8 <__floatunsidf>:
 100cbb8:	defffe04 	addi	sp,sp,-8
 100cbbc:	dc000015 	stw	r16,0(sp)
 100cbc0:	dfc00115 	stw	ra,4(sp)
 100cbc4:	2021883a 	mov	r16,r4
 100cbc8:	20002226 	beq	r4,zero,100cc54 <__floatunsidf+0x9c>
 100cbcc:	100cc600 	call	100cc60 <__clzsi2>
 100cbd0:	01010784 	movi	r4,1054
 100cbd4:	2089c83a 	sub	r4,r4,r2
 100cbd8:	01810cc4 	movi	r6,1075
 100cbdc:	310dc83a 	sub	r6,r6,r4
 100cbe0:	00c007c4 	movi	r3,31
 100cbe4:	1980120e 	bge	r3,r6,100cc30 <__floatunsidf+0x78>
 100cbe8:	00c104c4 	movi	r3,1043
 100cbec:	1907c83a 	sub	r3,r3,r4
 100cbf0:	80ca983a 	sll	r5,r16,r3
 100cbf4:	00800434 	movhi	r2,16
 100cbf8:	10bfffc4 	addi	r2,r2,-1
 100cbfc:	2101ffcc 	andi	r4,r4,2047
 100cc00:	0021883a 	mov	r16,zero
 100cc04:	288a703a 	and	r5,r5,r2
 100cc08:	2008953a 	slli	r4,r4,20
 100cc0c:	00c00434 	movhi	r3,16
 100cc10:	18ffffc4 	addi	r3,r3,-1
 100cc14:	28c6703a 	and	r3,r5,r3
 100cc18:	8005883a 	mov	r2,r16
 100cc1c:	1906b03a 	or	r3,r3,r4
 100cc20:	dfc00117 	ldw	ra,4(sp)
 100cc24:	dc000017 	ldw	r16,0(sp)
 100cc28:	dec00204 	addi	sp,sp,8
 100cc2c:	f800283a 	ret
 100cc30:	00c002c4 	movi	r3,11
 100cc34:	188bc83a 	sub	r5,r3,r2
 100cc38:	814ad83a 	srl	r5,r16,r5
 100cc3c:	00c00434 	movhi	r3,16
 100cc40:	18ffffc4 	addi	r3,r3,-1
 100cc44:	81a0983a 	sll	r16,r16,r6
 100cc48:	2101ffcc 	andi	r4,r4,2047
 100cc4c:	28ca703a 	and	r5,r5,r3
 100cc50:	003fed06 	br	100cc08 <__floatunsidf+0x50>
 100cc54:	0009883a 	mov	r4,zero
 100cc58:	000b883a 	mov	r5,zero
 100cc5c:	003fea06 	br	100cc08 <__floatunsidf+0x50>

0100cc60 <__clzsi2>:
 100cc60:	00bfffd4 	movui	r2,65535
 100cc64:	11000536 	bltu	r2,r4,100cc7c <__clzsi2+0x1c>
 100cc68:	00803fc4 	movi	r2,255
 100cc6c:	11000f36 	bltu	r2,r4,100ccac <__clzsi2+0x4c>
 100cc70:	00800804 	movi	r2,32
 100cc74:	0007883a 	mov	r3,zero
 100cc78:	00000506 	br	100cc90 <__clzsi2+0x30>
 100cc7c:	00804034 	movhi	r2,256
 100cc80:	10bfffc4 	addi	r2,r2,-1
 100cc84:	11000c2e 	bgeu	r2,r4,100ccb8 <__clzsi2+0x58>
 100cc88:	00800204 	movi	r2,8
 100cc8c:	00c00604 	movi	r3,24
 100cc90:	20c8d83a 	srl	r4,r4,r3
 100cc94:	00c04074 	movhi	r3,257
 100cc98:	18fd5704 	addi	r3,r3,-2724
 100cc9c:	1909883a 	add	r4,r3,r4
 100cca0:	20c00003 	ldbu	r3,0(r4)
 100cca4:	10c5c83a 	sub	r2,r2,r3
 100cca8:	f800283a 	ret
 100ccac:	00800604 	movi	r2,24
 100ccb0:	00c00204 	movi	r3,8
 100ccb4:	003ff606 	br	100cc90 <__clzsi2+0x30>
 100ccb8:	00800404 	movi	r2,16
 100ccbc:	1007883a 	mov	r3,r2
 100ccc0:	003ff306 	br	100cc90 <__clzsi2+0x30>

0100ccc4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 100ccc4:	defffe04 	addi	sp,sp,-8
 100ccc8:	dfc00115 	stw	ra,4(sp)
 100cccc:	df000015 	stw	fp,0(sp)
 100ccd0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 100ccd4:	d0a00b17 	ldw	r2,-32724(gp)
 100ccd8:	10000326 	beq	r2,zero,100cce8 <alt_get_errno+0x24>
 100ccdc:	d0a00b17 	ldw	r2,-32724(gp)
 100cce0:	103ee83a 	callr	r2
 100cce4:	00000106 	br	100ccec <alt_get_errno+0x28>
 100cce8:	d0a6d204 	addi	r2,gp,-25784
}
 100ccec:	e037883a 	mov	sp,fp
 100ccf0:	dfc00117 	ldw	ra,4(sp)
 100ccf4:	df000017 	ldw	fp,0(sp)
 100ccf8:	dec00204 	addi	sp,sp,8
 100ccfc:	f800283a 	ret

0100cd00 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 100cd00:	defffb04 	addi	sp,sp,-20
 100cd04:	dfc00415 	stw	ra,16(sp)
 100cd08:	df000315 	stw	fp,12(sp)
 100cd0c:	df000304 	addi	fp,sp,12
 100cd10:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 100cd14:	e0bfff17 	ldw	r2,-4(fp)
 100cd18:	10000616 	blt	r2,zero,100cd34 <close+0x34>
 100cd1c:	e0bfff17 	ldw	r2,-4(fp)
 100cd20:	10c00324 	muli	r3,r2,12
 100cd24:	00804074 	movhi	r2,257
 100cd28:	10bfd504 	addi	r2,r2,-172
 100cd2c:	1885883a 	add	r2,r3,r2
 100cd30:	00000106 	br	100cd38 <close+0x38>
 100cd34:	0005883a 	mov	r2,zero
 100cd38:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 100cd3c:	e0bffd17 	ldw	r2,-12(fp)
 100cd40:	10001926 	beq	r2,zero,100cda8 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 100cd44:	e0bffd17 	ldw	r2,-12(fp)
 100cd48:	10800017 	ldw	r2,0(r2)
 100cd4c:	10800417 	ldw	r2,16(r2)
 100cd50:	10000626 	beq	r2,zero,100cd6c <close+0x6c>
 100cd54:	e0bffd17 	ldw	r2,-12(fp)
 100cd58:	10800017 	ldw	r2,0(r2)
 100cd5c:	10800417 	ldw	r2,16(r2)
 100cd60:	e13ffd17 	ldw	r4,-12(fp)
 100cd64:	103ee83a 	callr	r2
 100cd68:	00000106 	br	100cd70 <close+0x70>
 100cd6c:	0005883a 	mov	r2,zero
 100cd70:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 100cd74:	e13fff17 	ldw	r4,-4(fp)
 100cd78:	100d6600 	call	100d660 <alt_release_fd>
    if (rval < 0)
 100cd7c:	e0bffe17 	ldw	r2,-8(fp)
 100cd80:	1000070e 	bge	r2,zero,100cda0 <close+0xa0>
    {
      ALT_ERRNO = -rval;
 100cd84:	100ccc40 	call	100ccc4 <alt_get_errno>
 100cd88:	1007883a 	mov	r3,r2
 100cd8c:	e0bffe17 	ldw	r2,-8(fp)
 100cd90:	0085c83a 	sub	r2,zero,r2
 100cd94:	18800015 	stw	r2,0(r3)
      return -1;
 100cd98:	00bfffc4 	movi	r2,-1
 100cd9c:	00000706 	br	100cdbc <close+0xbc>
    }
    return 0;
 100cda0:	0005883a 	mov	r2,zero
 100cda4:	00000506 	br	100cdbc <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 100cda8:	100ccc40 	call	100ccc4 <alt_get_errno>
 100cdac:	1007883a 	mov	r3,r2
 100cdb0:	00801444 	movi	r2,81
 100cdb4:	18800015 	stw	r2,0(r3)
    return -1;
 100cdb8:	00bfffc4 	movi	r2,-1
  }
}
 100cdbc:	e037883a 	mov	sp,fp
 100cdc0:	dfc00117 	ldw	ra,4(sp)
 100cdc4:	df000017 	ldw	fp,0(sp)
 100cdc8:	dec00204 	addi	sp,sp,8
 100cdcc:	f800283a 	ret

0100cdd0 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 100cdd0:	defffc04 	addi	sp,sp,-16
 100cdd4:	df000315 	stw	fp,12(sp)
 100cdd8:	df000304 	addi	fp,sp,12
 100cddc:	e13ffd15 	stw	r4,-12(fp)
 100cde0:	e17ffe15 	stw	r5,-8(fp)
 100cde4:	e1bfff15 	stw	r6,-4(fp)
  return len;
 100cde8:	e0bfff17 	ldw	r2,-4(fp)
}
 100cdec:	e037883a 	mov	sp,fp
 100cdf0:	df000017 	ldw	fp,0(sp)
 100cdf4:	dec00104 	addi	sp,sp,4
 100cdf8:	f800283a 	ret

0100cdfc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 100cdfc:	defffe04 	addi	sp,sp,-8
 100ce00:	dfc00115 	stw	ra,4(sp)
 100ce04:	df000015 	stw	fp,0(sp)
 100ce08:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 100ce0c:	d0a00b17 	ldw	r2,-32724(gp)
 100ce10:	10000326 	beq	r2,zero,100ce20 <alt_get_errno+0x24>
 100ce14:	d0a00b17 	ldw	r2,-32724(gp)
 100ce18:	103ee83a 	callr	r2
 100ce1c:	00000106 	br	100ce24 <alt_get_errno+0x28>
 100ce20:	d0a6d204 	addi	r2,gp,-25784
}
 100ce24:	e037883a 	mov	sp,fp
 100ce28:	dfc00117 	ldw	ra,4(sp)
 100ce2c:	df000017 	ldw	fp,0(sp)
 100ce30:	dec00204 	addi	sp,sp,8
 100ce34:	f800283a 	ret

0100ce38 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 100ce38:	defffb04 	addi	sp,sp,-20
 100ce3c:	dfc00415 	stw	ra,16(sp)
 100ce40:	df000315 	stw	fp,12(sp)
 100ce44:	df000304 	addi	fp,sp,12
 100ce48:	e13ffe15 	stw	r4,-8(fp)
 100ce4c:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 100ce50:	e0bffe17 	ldw	r2,-8(fp)
 100ce54:	10000616 	blt	r2,zero,100ce70 <fstat+0x38>
 100ce58:	e0bffe17 	ldw	r2,-8(fp)
 100ce5c:	10c00324 	muli	r3,r2,12
 100ce60:	00804074 	movhi	r2,257
 100ce64:	10bfd504 	addi	r2,r2,-172
 100ce68:	1885883a 	add	r2,r3,r2
 100ce6c:	00000106 	br	100ce74 <fstat+0x3c>
 100ce70:	0005883a 	mov	r2,zero
 100ce74:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
 100ce78:	e0bffd17 	ldw	r2,-12(fp)
 100ce7c:	10001026 	beq	r2,zero,100cec0 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 100ce80:	e0bffd17 	ldw	r2,-12(fp)
 100ce84:	10800017 	ldw	r2,0(r2)
 100ce88:	10800817 	ldw	r2,32(r2)
 100ce8c:	10000726 	beq	r2,zero,100ceac <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
 100ce90:	e0bffd17 	ldw	r2,-12(fp)
 100ce94:	10800017 	ldw	r2,0(r2)
 100ce98:	10800817 	ldw	r2,32(r2)
 100ce9c:	e17fff17 	ldw	r5,-4(fp)
 100cea0:	e13ffd17 	ldw	r4,-12(fp)
 100cea4:	103ee83a 	callr	r2
 100cea8:	00000a06 	br	100ced4 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 100ceac:	e0bfff17 	ldw	r2,-4(fp)
 100ceb0:	00c80004 	movi	r3,8192
 100ceb4:	10c00115 	stw	r3,4(r2)
      return 0;
 100ceb8:	0005883a 	mov	r2,zero
 100cebc:	00000506 	br	100ced4 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 100cec0:	100cdfc0 	call	100cdfc <alt_get_errno>
 100cec4:	1007883a 	mov	r3,r2
 100cec8:	00801444 	movi	r2,81
 100cecc:	18800015 	stw	r2,0(r3)
    return -1;
 100ced0:	00bfffc4 	movi	r2,-1
  }
}
 100ced4:	e037883a 	mov	sp,fp
 100ced8:	dfc00117 	ldw	ra,4(sp)
 100cedc:	df000017 	ldw	fp,0(sp)
 100cee0:	dec00204 	addi	sp,sp,8
 100cee4:	f800283a 	ret

0100cee8 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 100cee8:	defff904 	addi	sp,sp,-28
 100ceec:	dfc00615 	stw	ra,24(sp)
 100cef0:	df000515 	stw	fp,20(sp)
 100cef4:	df000504 	addi	fp,sp,20
 100cef8:	e13ffc15 	stw	r4,-16(fp)
 100cefc:	e17ffd15 	stw	r5,-12(fp)
 100cf00:	e1bffe15 	stw	r6,-8(fp)
 100cf04:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 100cf08:	e0800217 	ldw	r2,8(fp)
 100cf0c:	d8800015 	stw	r2,0(sp)
 100cf10:	e1ffff17 	ldw	r7,-4(fp)
 100cf14:	e1bffe17 	ldw	r6,-8(fp)
 100cf18:	e17ffd17 	ldw	r5,-12(fp)
 100cf1c:	e13ffc17 	ldw	r4,-16(fp)
 100cf20:	100d0980 	call	100d098 <alt_iic_isr_register>
}  
 100cf24:	e037883a 	mov	sp,fp
 100cf28:	dfc00117 	ldw	ra,4(sp)
 100cf2c:	df000017 	ldw	fp,0(sp)
 100cf30:	dec00204 	addi	sp,sp,8
 100cf34:	f800283a 	ret

0100cf38 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 100cf38:	defff904 	addi	sp,sp,-28
 100cf3c:	df000615 	stw	fp,24(sp)
 100cf40:	df000604 	addi	fp,sp,24
 100cf44:	e13ffe15 	stw	r4,-8(fp)
 100cf48:	e17fff15 	stw	r5,-4(fp)
 100cf4c:	e0bfff17 	ldw	r2,-4(fp)
 100cf50:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100cf54:	0005303a 	rdctl	r2,status
 100cf58:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100cf5c:	e0fffb17 	ldw	r3,-20(fp)
 100cf60:	00bfff84 	movi	r2,-2
 100cf64:	1884703a 	and	r2,r3,r2
 100cf68:	1001703a 	wrctl	status,r2
  
  return context;
 100cf6c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 100cf70:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
 100cf74:	00c00044 	movi	r3,1
 100cf78:	e0bffa17 	ldw	r2,-24(fp)
 100cf7c:	1884983a 	sll	r2,r3,r2
 100cf80:	1007883a 	mov	r3,r2
 100cf84:	d0a6d317 	ldw	r2,-25780(gp)
 100cf88:	1884b03a 	or	r2,r3,r2
 100cf8c:	d0a6d315 	stw	r2,-25780(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 100cf90:	d0a6d317 	ldw	r2,-25780(gp)
 100cf94:	100170fa 	wrctl	ienable,r2
 100cf98:	e0bffc17 	ldw	r2,-16(fp)
 100cf9c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100cfa0:	e0bffd17 	ldw	r2,-12(fp)
 100cfa4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 100cfa8:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
 100cfac:	0001883a 	nop
}
 100cfb0:	e037883a 	mov	sp,fp
 100cfb4:	df000017 	ldw	fp,0(sp)
 100cfb8:	dec00104 	addi	sp,sp,4
 100cfbc:	f800283a 	ret

0100cfc0 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 100cfc0:	defff904 	addi	sp,sp,-28
 100cfc4:	df000615 	stw	fp,24(sp)
 100cfc8:	df000604 	addi	fp,sp,24
 100cfcc:	e13ffe15 	stw	r4,-8(fp)
 100cfd0:	e17fff15 	stw	r5,-4(fp)
 100cfd4:	e0bfff17 	ldw	r2,-4(fp)
 100cfd8:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100cfdc:	0005303a 	rdctl	r2,status
 100cfe0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100cfe4:	e0fffb17 	ldw	r3,-20(fp)
 100cfe8:	00bfff84 	movi	r2,-2
 100cfec:	1884703a 	and	r2,r3,r2
 100cff0:	1001703a 	wrctl	status,r2
  
  return context;
 100cff4:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 100cff8:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
 100cffc:	00c00044 	movi	r3,1
 100d000:	e0bffa17 	ldw	r2,-24(fp)
 100d004:	1884983a 	sll	r2,r3,r2
 100d008:	0084303a 	nor	r2,zero,r2
 100d00c:	1007883a 	mov	r3,r2
 100d010:	d0a6d317 	ldw	r2,-25780(gp)
 100d014:	1884703a 	and	r2,r3,r2
 100d018:	d0a6d315 	stw	r2,-25780(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 100d01c:	d0a6d317 	ldw	r2,-25780(gp)
 100d020:	100170fa 	wrctl	ienable,r2
 100d024:	e0bffc17 	ldw	r2,-16(fp)
 100d028:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100d02c:	e0bffd17 	ldw	r2,-12(fp)
 100d030:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 100d034:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
 100d038:	0001883a 	nop
}
 100d03c:	e037883a 	mov	sp,fp
 100d040:	df000017 	ldw	fp,0(sp)
 100d044:	dec00104 	addi	sp,sp,4
 100d048:	f800283a 	ret

0100d04c <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 100d04c:	defffc04 	addi	sp,sp,-16
 100d050:	df000315 	stw	fp,12(sp)
 100d054:	df000304 	addi	fp,sp,12
 100d058:	e13ffe15 	stw	r4,-8(fp)
 100d05c:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 100d060:	000530fa 	rdctl	r2,ienable
 100d064:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 100d068:	00c00044 	movi	r3,1
 100d06c:	e0bfff17 	ldw	r2,-4(fp)
 100d070:	1884983a 	sll	r2,r3,r2
 100d074:	1007883a 	mov	r3,r2
 100d078:	e0bffd17 	ldw	r2,-12(fp)
 100d07c:	1884703a 	and	r2,r3,r2
 100d080:	1004c03a 	cmpne	r2,r2,zero
 100d084:	10803fcc 	andi	r2,r2,255
}
 100d088:	e037883a 	mov	sp,fp
 100d08c:	df000017 	ldw	fp,0(sp)
 100d090:	dec00104 	addi	sp,sp,4
 100d094:	f800283a 	ret

0100d098 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 100d098:	defff504 	addi	sp,sp,-44
 100d09c:	dfc00a15 	stw	ra,40(sp)
 100d0a0:	df000915 	stw	fp,36(sp)
 100d0a4:	df000904 	addi	fp,sp,36
 100d0a8:	e13ffc15 	stw	r4,-16(fp)
 100d0ac:	e17ffd15 	stw	r5,-12(fp)
 100d0b0:	e1bffe15 	stw	r6,-8(fp)
 100d0b4:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
 100d0b8:	00bffa84 	movi	r2,-22
 100d0bc:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 100d0c0:	e0bffd17 	ldw	r2,-12(fp)
 100d0c4:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 100d0c8:	e0bff817 	ldw	r2,-32(fp)
 100d0cc:	10800808 	cmpgei	r2,r2,32
 100d0d0:	1000271e 	bne	r2,zero,100d170 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100d0d4:	0005303a 	rdctl	r2,status
 100d0d8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100d0dc:	e0fffb17 	ldw	r3,-20(fp)
 100d0e0:	00bfff84 	movi	r2,-2
 100d0e4:	1884703a 	and	r2,r3,r2
 100d0e8:	1001703a 	wrctl	status,r2
  
  return context;
 100d0ec:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 100d0f0:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
 100d0f4:	00804074 	movhi	r2,257
 100d0f8:	108b3104 	addi	r2,r2,11460
 100d0fc:	e0fff817 	ldw	r3,-32(fp)
 100d100:	180690fa 	slli	r3,r3,3
 100d104:	10c5883a 	add	r2,r2,r3
 100d108:	e0fffe17 	ldw	r3,-8(fp)
 100d10c:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
 100d110:	00804074 	movhi	r2,257
 100d114:	108b3104 	addi	r2,r2,11460
 100d118:	e0fff817 	ldw	r3,-32(fp)
 100d11c:	180690fa 	slli	r3,r3,3
 100d120:	10c5883a 	add	r2,r2,r3
 100d124:	10800104 	addi	r2,r2,4
 100d128:	e0ffff17 	ldw	r3,-4(fp)
 100d12c:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 100d130:	e0bffe17 	ldw	r2,-8(fp)
 100d134:	10000526 	beq	r2,zero,100d14c <alt_iic_isr_register+0xb4>
 100d138:	e0bff817 	ldw	r2,-32(fp)
 100d13c:	100b883a 	mov	r5,r2
 100d140:	e13ffc17 	ldw	r4,-16(fp)
 100d144:	100cf380 	call	100cf38 <alt_ic_irq_enable>
 100d148:	00000406 	br	100d15c <alt_iic_isr_register+0xc4>
 100d14c:	e0bff817 	ldw	r2,-32(fp)
 100d150:	100b883a 	mov	r5,r2
 100d154:	e13ffc17 	ldw	r4,-16(fp)
 100d158:	100cfc00 	call	100cfc0 <alt_ic_irq_disable>
 100d15c:	e0bff715 	stw	r2,-36(fp)
 100d160:	e0bffa17 	ldw	r2,-24(fp)
 100d164:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100d168:	e0bff917 	ldw	r2,-28(fp)
 100d16c:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 100d170:	e0bff717 	ldw	r2,-36(fp)
}
 100d174:	e037883a 	mov	sp,fp
 100d178:	dfc00117 	ldw	ra,4(sp)
 100d17c:	df000017 	ldw	fp,0(sp)
 100d180:	dec00204 	addi	sp,sp,8
 100d184:	f800283a 	ret

0100d188 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 100d188:	defffe04 	addi	sp,sp,-8
 100d18c:	dfc00115 	stw	ra,4(sp)
 100d190:	df000015 	stw	fp,0(sp)
 100d194:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 100d198:	d0a00b17 	ldw	r2,-32724(gp)
 100d19c:	10000326 	beq	r2,zero,100d1ac <alt_get_errno+0x24>
 100d1a0:	d0a00b17 	ldw	r2,-32724(gp)
 100d1a4:	103ee83a 	callr	r2
 100d1a8:	00000106 	br	100d1b0 <alt_get_errno+0x28>
 100d1ac:	d0a6d204 	addi	r2,gp,-25784
}
 100d1b0:	e037883a 	mov	sp,fp
 100d1b4:	dfc00117 	ldw	ra,4(sp)
 100d1b8:	df000017 	ldw	fp,0(sp)
 100d1bc:	dec00204 	addi	sp,sp,8
 100d1c0:	f800283a 	ret

0100d1c4 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 100d1c4:	deffed04 	addi	sp,sp,-76
 100d1c8:	dfc01215 	stw	ra,72(sp)
 100d1cc:	df001115 	stw	fp,68(sp)
 100d1d0:	df001104 	addi	fp,sp,68
 100d1d4:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 100d1d8:	e0bfff17 	ldw	r2,-4(fp)
 100d1dc:	10000616 	blt	r2,zero,100d1f8 <isatty+0x34>
 100d1e0:	e0bfff17 	ldw	r2,-4(fp)
 100d1e4:	10c00324 	muli	r3,r2,12
 100d1e8:	00804074 	movhi	r2,257
 100d1ec:	10bfd504 	addi	r2,r2,-172
 100d1f0:	1885883a 	add	r2,r3,r2
 100d1f4:	00000106 	br	100d1fc <isatty+0x38>
 100d1f8:	0005883a 	mov	r2,zero
 100d1fc:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
 100d200:	e0bfef17 	ldw	r2,-68(fp)
 100d204:	10000e26 	beq	r2,zero,100d240 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 100d208:	e0bfef17 	ldw	r2,-68(fp)
 100d20c:	10800017 	ldw	r2,0(r2)
 100d210:	10800817 	ldw	r2,32(r2)
 100d214:	1000021e 	bne	r2,zero,100d220 <isatty+0x5c>
    {
      return 1;
 100d218:	00800044 	movi	r2,1
 100d21c:	00000d06 	br	100d254 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 100d220:	e0bff004 	addi	r2,fp,-64
 100d224:	100b883a 	mov	r5,r2
 100d228:	e13fff17 	ldw	r4,-4(fp)
 100d22c:	100ce380 	call	100ce38 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 100d230:	e0bff117 	ldw	r2,-60(fp)
 100d234:	10880020 	cmpeqi	r2,r2,8192
 100d238:	10803fcc 	andi	r2,r2,255
 100d23c:	00000506 	br	100d254 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 100d240:	100d1880 	call	100d188 <alt_get_errno>
 100d244:	1007883a 	mov	r3,r2
 100d248:	00801444 	movi	r2,81
 100d24c:	18800015 	stw	r2,0(r3)
    return 0;
 100d250:	0005883a 	mov	r2,zero
  }
}
 100d254:	e037883a 	mov	sp,fp
 100d258:	dfc00117 	ldw	ra,4(sp)
 100d25c:	df000017 	ldw	fp,0(sp)
 100d260:	dec00204 	addi	sp,sp,8
 100d264:	f800283a 	ret

0100d268 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 100d268:	defffc04 	addi	sp,sp,-16
 100d26c:	df000315 	stw	fp,12(sp)
 100d270:	df000304 	addi	fp,sp,12
 100d274:	e13ffd15 	stw	r4,-12(fp)
 100d278:	e17ffe15 	stw	r5,-8(fp)
 100d27c:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 100d280:	e0fffe17 	ldw	r3,-8(fp)
 100d284:	e0bffd17 	ldw	r2,-12(fp)
 100d288:	18800c26 	beq	r3,r2,100d2bc <alt_load_section+0x54>
  {
    while( to != end )
 100d28c:	00000806 	br	100d2b0 <alt_load_section+0x48>
    {
      *to++ = *from++;
 100d290:	e0bffe17 	ldw	r2,-8(fp)
 100d294:	10c00104 	addi	r3,r2,4
 100d298:	e0fffe15 	stw	r3,-8(fp)
 100d29c:	e0fffd17 	ldw	r3,-12(fp)
 100d2a0:	19000104 	addi	r4,r3,4
 100d2a4:	e13ffd15 	stw	r4,-12(fp)
 100d2a8:	18c00017 	ldw	r3,0(r3)
 100d2ac:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 100d2b0:	e0fffe17 	ldw	r3,-8(fp)
 100d2b4:	e0bfff17 	ldw	r2,-4(fp)
 100d2b8:	18bff51e 	bne	r3,r2,100d290 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
 100d2bc:	0001883a 	nop
 100d2c0:	e037883a 	mov	sp,fp
 100d2c4:	df000017 	ldw	fp,0(sp)
 100d2c8:	dec00104 	addi	sp,sp,4
 100d2cc:	f800283a 	ret

0100d2d0 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 100d2d0:	defffe04 	addi	sp,sp,-8
 100d2d4:	dfc00115 	stw	ra,4(sp)
 100d2d8:	df000015 	stw	fp,0(sp)
 100d2dc:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 100d2e0:	01804074 	movhi	r6,257
 100d2e4:	31845d04 	addi	r6,r6,4468
 100d2e8:	01404074 	movhi	r5,257
 100d2ec:	297da204 	addi	r5,r5,-2424
 100d2f0:	01004074 	movhi	r4,257
 100d2f4:	21045d04 	addi	r4,r4,4468
 100d2f8:	100d2680 	call	100d268 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 100d2fc:	01804034 	movhi	r6,256
 100d300:	31809104 	addi	r6,r6,580
 100d304:	01404034 	movhi	r5,256
 100d308:	29400804 	addi	r5,r5,32
 100d30c:	01004034 	movhi	r4,256
 100d310:	21000804 	addi	r4,r4,32
 100d314:	100d2680 	call	100d268 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 100d318:	01804074 	movhi	r6,257
 100d31c:	31bda204 	addi	r6,r6,-2424
 100d320:	01404074 	movhi	r5,257
 100d324:	297cda04 	addi	r5,r5,-3224
 100d328:	01004074 	movhi	r4,257
 100d32c:	213cda04 	addi	r4,r4,-3224
 100d330:	100d2680 	call	100d268 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 100d334:	100e4f40 	call	100e4f4 <alt_dcache_flush_all>
  alt_icache_flush_all();
 100d338:	100e6dc0 	call	100e6dc <alt_icache_flush_all>
}
 100d33c:	0001883a 	nop
 100d340:	e037883a 	mov	sp,fp
 100d344:	dfc00117 	ldw	ra,4(sp)
 100d348:	df000017 	ldw	fp,0(sp)
 100d34c:	dec00204 	addi	sp,sp,8
 100d350:	f800283a 	ret

0100d354 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 100d354:	defffe04 	addi	sp,sp,-8
 100d358:	dfc00115 	stw	ra,4(sp)
 100d35c:	df000015 	stw	fp,0(sp)
 100d360:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 100d364:	d0a00b17 	ldw	r2,-32724(gp)
 100d368:	10000326 	beq	r2,zero,100d378 <alt_get_errno+0x24>
 100d36c:	d0a00b17 	ldw	r2,-32724(gp)
 100d370:	103ee83a 	callr	r2
 100d374:	00000106 	br	100d37c <alt_get_errno+0x28>
 100d378:	d0a6d204 	addi	r2,gp,-25784
}
 100d37c:	e037883a 	mov	sp,fp
 100d380:	dfc00117 	ldw	ra,4(sp)
 100d384:	df000017 	ldw	fp,0(sp)
 100d388:	dec00204 	addi	sp,sp,8
 100d38c:	f800283a 	ret

0100d390 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 100d390:	defff904 	addi	sp,sp,-28
 100d394:	dfc00615 	stw	ra,24(sp)
 100d398:	df000515 	stw	fp,20(sp)
 100d39c:	df000504 	addi	fp,sp,20
 100d3a0:	e13ffd15 	stw	r4,-12(fp)
 100d3a4:	e17ffe15 	stw	r5,-8(fp)
 100d3a8:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 100d3ac:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 100d3b0:	e0bffd17 	ldw	r2,-12(fp)
 100d3b4:	10000616 	blt	r2,zero,100d3d0 <lseek+0x40>
 100d3b8:	e0bffd17 	ldw	r2,-12(fp)
 100d3bc:	10c00324 	muli	r3,r2,12
 100d3c0:	00804074 	movhi	r2,257
 100d3c4:	10bfd504 	addi	r2,r2,-172
 100d3c8:	1885883a 	add	r2,r3,r2
 100d3cc:	00000106 	br	100d3d4 <lseek+0x44>
 100d3d0:	0005883a 	mov	r2,zero
 100d3d4:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
 100d3d8:	e0bffc17 	ldw	r2,-16(fp)
 100d3dc:	10001026 	beq	r2,zero,100d420 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 100d3e0:	e0bffc17 	ldw	r2,-16(fp)
 100d3e4:	10800017 	ldw	r2,0(r2)
 100d3e8:	10800717 	ldw	r2,28(r2)
 100d3ec:	10000926 	beq	r2,zero,100d414 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 100d3f0:	e0bffc17 	ldw	r2,-16(fp)
 100d3f4:	10800017 	ldw	r2,0(r2)
 100d3f8:	10800717 	ldw	r2,28(r2)
 100d3fc:	e1bfff17 	ldw	r6,-4(fp)
 100d400:	e17ffe17 	ldw	r5,-8(fp)
 100d404:	e13ffc17 	ldw	r4,-16(fp)
 100d408:	103ee83a 	callr	r2
 100d40c:	e0bffb15 	stw	r2,-20(fp)
 100d410:	00000506 	br	100d428 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 100d414:	00bfde84 	movi	r2,-134
 100d418:	e0bffb15 	stw	r2,-20(fp)
 100d41c:	00000206 	br	100d428 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
 100d420:	00bfebc4 	movi	r2,-81
 100d424:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
 100d428:	e0bffb17 	ldw	r2,-20(fp)
 100d42c:	1000070e 	bge	r2,zero,100d44c <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
 100d430:	100d3540 	call	100d354 <alt_get_errno>
 100d434:	1007883a 	mov	r3,r2
 100d438:	e0bffb17 	ldw	r2,-20(fp)
 100d43c:	0085c83a 	sub	r2,zero,r2
 100d440:	18800015 	stw	r2,0(r3)
    rc = -1;
 100d444:	00bfffc4 	movi	r2,-1
 100d448:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
 100d44c:	e0bffb17 	ldw	r2,-20(fp)
}
 100d450:	e037883a 	mov	sp,fp
 100d454:	dfc00117 	ldw	ra,4(sp)
 100d458:	df000017 	ldw	fp,0(sp)
 100d45c:	dec00204 	addi	sp,sp,8
 100d460:	f800283a 	ret

0100d464 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 100d464:	defffd04 	addi	sp,sp,-12
 100d468:	dfc00215 	stw	ra,8(sp)
 100d46c:	df000115 	stw	fp,4(sp)
 100d470:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 100d474:	0009883a 	mov	r4,zero
 100d478:	100d8dc0 	call	100d8dc <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 100d47c:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 100d480:	100d9140 	call	100d914 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 100d484:	01804074 	movhi	r6,257
 100d488:	31bd9a04 	addi	r6,r6,-2456
 100d48c:	01404074 	movhi	r5,257
 100d490:	297d9a04 	addi	r5,r5,-2456
 100d494:	01004074 	movhi	r4,257
 100d498:	213d9a04 	addi	r4,r4,-2456
 100d49c:	100e8700 	call	100e870 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 100d4a0:	100e61c0 	call	100e61c <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 100d4a4:	01004074 	movhi	r4,257
 100d4a8:	21399f04 	addi	r4,r4,-6532
 100d4ac:	100efd40 	call	100efd4 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 100d4b0:	d0a6d417 	ldw	r2,-25776(gp)
 100d4b4:	d0e6d517 	ldw	r3,-25772(gp)
 100d4b8:	d126d617 	ldw	r4,-25768(gp)
 100d4bc:	200d883a 	mov	r6,r4
 100d4c0:	180b883a 	mov	r5,r3
 100d4c4:	1009883a 	mov	r4,r2
 100d4c8:	10003680 	call	1000368 <main>
 100d4cc:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 100d4d0:	01000044 	movi	r4,1
 100d4d4:	100cd000 	call	100cd00 <close>
  exit (result);
 100d4d8:	e13fff17 	ldw	r4,-4(fp)
 100d4dc:	100efe80 	call	100efe8 <exit>

0100d4e0 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 100d4e0:	defffe04 	addi	sp,sp,-8
 100d4e4:	df000115 	stw	fp,4(sp)
 100d4e8:	df000104 	addi	fp,sp,4
 100d4ec:	e13fff15 	stw	r4,-4(fp)
}
 100d4f0:	0001883a 	nop
 100d4f4:	e037883a 	mov	sp,fp
 100d4f8:	df000017 	ldw	fp,0(sp)
 100d4fc:	dec00104 	addi	sp,sp,4
 100d500:	f800283a 	ret

0100d504 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 100d504:	defffe04 	addi	sp,sp,-8
 100d508:	df000115 	stw	fp,4(sp)
 100d50c:	df000104 	addi	fp,sp,4
 100d510:	e13fff15 	stw	r4,-4(fp)
}
 100d514:	0001883a 	nop
 100d518:	e037883a 	mov	sp,fp
 100d51c:	df000017 	ldw	fp,0(sp)
 100d520:	dec00104 	addi	sp,sp,4
 100d524:	f800283a 	ret

0100d528 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 100d528:	defffe04 	addi	sp,sp,-8
 100d52c:	dfc00115 	stw	ra,4(sp)
 100d530:	df000015 	stw	fp,0(sp)
 100d534:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 100d538:	d0a00b17 	ldw	r2,-32724(gp)
 100d53c:	10000326 	beq	r2,zero,100d54c <alt_get_errno+0x24>
 100d540:	d0a00b17 	ldw	r2,-32724(gp)
 100d544:	103ee83a 	callr	r2
 100d548:	00000106 	br	100d550 <alt_get_errno+0x28>
 100d54c:	d0a6d204 	addi	r2,gp,-25784
}
 100d550:	e037883a 	mov	sp,fp
 100d554:	dfc00117 	ldw	ra,4(sp)
 100d558:	df000017 	ldw	fp,0(sp)
 100d55c:	dec00204 	addi	sp,sp,8
 100d560:	f800283a 	ret

0100d564 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 100d564:	defff904 	addi	sp,sp,-28
 100d568:	dfc00615 	stw	ra,24(sp)
 100d56c:	df000515 	stw	fp,20(sp)
 100d570:	df000504 	addi	fp,sp,20
 100d574:	e13ffd15 	stw	r4,-12(fp)
 100d578:	e17ffe15 	stw	r5,-8(fp)
 100d57c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 100d580:	e0bffd17 	ldw	r2,-12(fp)
 100d584:	10000616 	blt	r2,zero,100d5a0 <read+0x3c>
 100d588:	e0bffd17 	ldw	r2,-12(fp)
 100d58c:	10c00324 	muli	r3,r2,12
 100d590:	00804074 	movhi	r2,257
 100d594:	10bfd504 	addi	r2,r2,-172
 100d598:	1885883a 	add	r2,r3,r2
 100d59c:	00000106 	br	100d5a4 <read+0x40>
 100d5a0:	0005883a 	mov	r2,zero
 100d5a4:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 100d5a8:	e0bffb17 	ldw	r2,-20(fp)
 100d5ac:	10002226 	beq	r2,zero,100d638 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 100d5b0:	e0bffb17 	ldw	r2,-20(fp)
 100d5b4:	10800217 	ldw	r2,8(r2)
 100d5b8:	108000cc 	andi	r2,r2,3
 100d5bc:	10800060 	cmpeqi	r2,r2,1
 100d5c0:	1000181e 	bne	r2,zero,100d624 <read+0xc0>
        (fd->dev->read))
 100d5c4:	e0bffb17 	ldw	r2,-20(fp)
 100d5c8:	10800017 	ldw	r2,0(r2)
 100d5cc:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 100d5d0:	10001426 	beq	r2,zero,100d624 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 100d5d4:	e0bffb17 	ldw	r2,-20(fp)
 100d5d8:	10800017 	ldw	r2,0(r2)
 100d5dc:	10800517 	ldw	r2,20(r2)
 100d5e0:	e0ffff17 	ldw	r3,-4(fp)
 100d5e4:	180d883a 	mov	r6,r3
 100d5e8:	e17ffe17 	ldw	r5,-8(fp)
 100d5ec:	e13ffb17 	ldw	r4,-20(fp)
 100d5f0:	103ee83a 	callr	r2
 100d5f4:	e0bffc15 	stw	r2,-16(fp)
 100d5f8:	e0bffc17 	ldw	r2,-16(fp)
 100d5fc:	1000070e 	bge	r2,zero,100d61c <read+0xb8>
        {
          ALT_ERRNO = -rval;
 100d600:	100d5280 	call	100d528 <alt_get_errno>
 100d604:	1007883a 	mov	r3,r2
 100d608:	e0bffc17 	ldw	r2,-16(fp)
 100d60c:	0085c83a 	sub	r2,zero,r2
 100d610:	18800015 	stw	r2,0(r3)
          return -1;
 100d614:	00bfffc4 	movi	r2,-1
 100d618:	00000c06 	br	100d64c <read+0xe8>
        }
        return rval;
 100d61c:	e0bffc17 	ldw	r2,-16(fp)
 100d620:	00000a06 	br	100d64c <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
 100d624:	100d5280 	call	100d528 <alt_get_errno>
 100d628:	1007883a 	mov	r3,r2
 100d62c:	00800344 	movi	r2,13
 100d630:	18800015 	stw	r2,0(r3)
 100d634:	00000406 	br	100d648 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 100d638:	100d5280 	call	100d528 <alt_get_errno>
 100d63c:	1007883a 	mov	r3,r2
 100d640:	00801444 	movi	r2,81
 100d644:	18800015 	stw	r2,0(r3)
  }
  return -1;
 100d648:	00bfffc4 	movi	r2,-1
}
 100d64c:	e037883a 	mov	sp,fp
 100d650:	dfc00117 	ldw	ra,4(sp)
 100d654:	df000017 	ldw	fp,0(sp)
 100d658:	dec00204 	addi	sp,sp,8
 100d65c:	f800283a 	ret

0100d660 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 100d660:	defffe04 	addi	sp,sp,-8
 100d664:	df000115 	stw	fp,4(sp)
 100d668:	df000104 	addi	fp,sp,4
 100d66c:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 100d670:	e0bfff17 	ldw	r2,-4(fp)
 100d674:	108000d0 	cmplti	r2,r2,3
 100d678:	10000d1e 	bne	r2,zero,100d6b0 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
 100d67c:	00804074 	movhi	r2,257
 100d680:	10bfd504 	addi	r2,r2,-172
 100d684:	e0ffff17 	ldw	r3,-4(fp)
 100d688:	18c00324 	muli	r3,r3,12
 100d68c:	10c5883a 	add	r2,r2,r3
 100d690:	10800204 	addi	r2,r2,8
 100d694:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 100d698:	00804074 	movhi	r2,257
 100d69c:	10bfd504 	addi	r2,r2,-172
 100d6a0:	e0ffff17 	ldw	r3,-4(fp)
 100d6a4:	18c00324 	muli	r3,r3,12
 100d6a8:	10c5883a 	add	r2,r2,r3
 100d6ac:	10000015 	stw	zero,0(r2)
  }
}
 100d6b0:	0001883a 	nop
 100d6b4:	e037883a 	mov	sp,fp
 100d6b8:	df000017 	ldw	fp,0(sp)
 100d6bc:	dec00104 	addi	sp,sp,4
 100d6c0:	f800283a 	ret

0100d6c4 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 100d6c4:	defff904 	addi	sp,sp,-28
 100d6c8:	df000615 	stw	fp,24(sp)
 100d6cc:	df000604 	addi	fp,sp,24
 100d6d0:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100d6d4:	0005303a 	rdctl	r2,status
 100d6d8:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100d6dc:	e0fffe17 	ldw	r3,-8(fp)
 100d6e0:	00bfff84 	movi	r2,-2
 100d6e4:	1884703a 	and	r2,r3,r2
 100d6e8:	1001703a 	wrctl	status,r2
  
  return context;
 100d6ec:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 100d6f0:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 100d6f4:	d0a00d17 	ldw	r2,-32716(gp)
 100d6f8:	10c000c4 	addi	r3,r2,3
 100d6fc:	00bfff04 	movi	r2,-4
 100d700:	1884703a 	and	r2,r3,r2
 100d704:	d0a00d15 	stw	r2,-32716(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 100d708:	d0e00d17 	ldw	r3,-32716(gp)
 100d70c:	e0bfff17 	ldw	r2,-4(fp)
 100d710:	1887883a 	add	r3,r3,r2
 100d714:	00808034 	movhi	r2,512
 100d718:	10800004 	addi	r2,r2,0
 100d71c:	10c0062e 	bgeu	r2,r3,100d738 <sbrk+0x74>
 100d720:	e0bffb17 	ldw	r2,-20(fp)
 100d724:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100d728:	e0bffa17 	ldw	r2,-24(fp)
 100d72c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 100d730:	00bfffc4 	movi	r2,-1
 100d734:	00000b06 	br	100d764 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
 100d738:	d0a00d17 	ldw	r2,-32716(gp)
 100d73c:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
 100d740:	d0e00d17 	ldw	r3,-32716(gp)
 100d744:	e0bfff17 	ldw	r2,-4(fp)
 100d748:	1885883a 	add	r2,r3,r2
 100d74c:	d0a00d15 	stw	r2,-32716(gp)
 100d750:	e0bffb17 	ldw	r2,-20(fp)
 100d754:	e0bffc15 	stw	r2,-16(fp)
 100d758:	e0bffc17 	ldw	r2,-16(fp)
 100d75c:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 100d760:	e0bffd17 	ldw	r2,-12(fp)
} 
 100d764:	e037883a 	mov	sp,fp
 100d768:	df000017 	ldw	fp,0(sp)
 100d76c:	dec00104 	addi	sp,sp,4
 100d770:	f800283a 	ret

0100d774 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 100d774:	defffe04 	addi	sp,sp,-8
 100d778:	dfc00115 	stw	ra,4(sp)
 100d77c:	df000015 	stw	fp,0(sp)
 100d780:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 100d784:	d0a00b17 	ldw	r2,-32724(gp)
 100d788:	10000326 	beq	r2,zero,100d798 <alt_get_errno+0x24>
 100d78c:	d0a00b17 	ldw	r2,-32724(gp)
 100d790:	103ee83a 	callr	r2
 100d794:	00000106 	br	100d79c <alt_get_errno+0x28>
 100d798:	d0a6d204 	addi	r2,gp,-25784
}
 100d79c:	e037883a 	mov	sp,fp
 100d7a0:	dfc00117 	ldw	ra,4(sp)
 100d7a4:	df000017 	ldw	fp,0(sp)
 100d7a8:	dec00204 	addi	sp,sp,8
 100d7ac:	f800283a 	ret

0100d7b0 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 100d7b0:	defff904 	addi	sp,sp,-28
 100d7b4:	dfc00615 	stw	ra,24(sp)
 100d7b8:	df000515 	stw	fp,20(sp)
 100d7bc:	df000504 	addi	fp,sp,20
 100d7c0:	e13ffd15 	stw	r4,-12(fp)
 100d7c4:	e17ffe15 	stw	r5,-8(fp)
 100d7c8:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 100d7cc:	e0bffd17 	ldw	r2,-12(fp)
 100d7d0:	10000616 	blt	r2,zero,100d7ec <write+0x3c>
 100d7d4:	e0bffd17 	ldw	r2,-12(fp)
 100d7d8:	10c00324 	muli	r3,r2,12
 100d7dc:	00804074 	movhi	r2,257
 100d7e0:	10bfd504 	addi	r2,r2,-172
 100d7e4:	1885883a 	add	r2,r3,r2
 100d7e8:	00000106 	br	100d7f0 <write+0x40>
 100d7ec:	0005883a 	mov	r2,zero
 100d7f0:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 100d7f4:	e0bffb17 	ldw	r2,-20(fp)
 100d7f8:	10002126 	beq	r2,zero,100d880 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 100d7fc:	e0bffb17 	ldw	r2,-20(fp)
 100d800:	10800217 	ldw	r2,8(r2)
 100d804:	108000cc 	andi	r2,r2,3
 100d808:	10001826 	beq	r2,zero,100d86c <write+0xbc>
 100d80c:	e0bffb17 	ldw	r2,-20(fp)
 100d810:	10800017 	ldw	r2,0(r2)
 100d814:	10800617 	ldw	r2,24(r2)
 100d818:	10001426 	beq	r2,zero,100d86c <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 100d81c:	e0bffb17 	ldw	r2,-20(fp)
 100d820:	10800017 	ldw	r2,0(r2)
 100d824:	10800617 	ldw	r2,24(r2)
 100d828:	e0ffff17 	ldw	r3,-4(fp)
 100d82c:	180d883a 	mov	r6,r3
 100d830:	e17ffe17 	ldw	r5,-8(fp)
 100d834:	e13ffb17 	ldw	r4,-20(fp)
 100d838:	103ee83a 	callr	r2
 100d83c:	e0bffc15 	stw	r2,-16(fp)
 100d840:	e0bffc17 	ldw	r2,-16(fp)
 100d844:	1000070e 	bge	r2,zero,100d864 <write+0xb4>
      {
        ALT_ERRNO = -rval;
 100d848:	100d7740 	call	100d774 <alt_get_errno>
 100d84c:	1007883a 	mov	r3,r2
 100d850:	e0bffc17 	ldw	r2,-16(fp)
 100d854:	0085c83a 	sub	r2,zero,r2
 100d858:	18800015 	stw	r2,0(r3)
        return -1;
 100d85c:	00bfffc4 	movi	r2,-1
 100d860:	00000c06 	br	100d894 <write+0xe4>
      }
      return rval;
 100d864:	e0bffc17 	ldw	r2,-16(fp)
 100d868:	00000a06 	br	100d894 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
 100d86c:	100d7740 	call	100d774 <alt_get_errno>
 100d870:	1007883a 	mov	r3,r2
 100d874:	00800344 	movi	r2,13
 100d878:	18800015 	stw	r2,0(r3)
 100d87c:	00000406 	br	100d890 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 100d880:	100d7740 	call	100d774 <alt_get_errno>
 100d884:	1007883a 	mov	r3,r2
 100d888:	00801444 	movi	r2,81
 100d88c:	18800015 	stw	r2,0(r3)
  }
  return -1;
 100d890:	00bfffc4 	movi	r2,-1
}
 100d894:	e037883a 	mov	sp,fp
 100d898:	dfc00117 	ldw	ra,4(sp)
 100d89c:	df000017 	ldw	fp,0(sp)
 100d8a0:	dec00204 	addi	sp,sp,8
 100d8a4:	f800283a 	ret

0100d8a8 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 100d8a8:	defffd04 	addi	sp,sp,-12
 100d8ac:	dfc00215 	stw	ra,8(sp)
 100d8b0:	df000115 	stw	fp,4(sp)
 100d8b4:	df000104 	addi	fp,sp,4
 100d8b8:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 100d8bc:	d1600804 	addi	r5,gp,-32736
 100d8c0:	e13fff17 	ldw	r4,-4(fp)
 100d8c4:	100e5780 	call	100e578 <alt_dev_llist_insert>
}
 100d8c8:	e037883a 	mov	sp,fp
 100d8cc:	dfc00117 	ldw	ra,4(sp)
 100d8d0:	df000017 	ldw	fp,0(sp)
 100d8d4:	dec00204 	addi	sp,sp,8
 100d8d8:	f800283a 	ret

0100d8dc <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 100d8dc:	defffd04 	addi	sp,sp,-12
 100d8e0:	dfc00215 	stw	ra,8(sp)
 100d8e4:	df000115 	stw	fp,4(sp)
 100d8e8:	df000104 	addi	fp,sp,4
 100d8ec:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, CPU);
 100d8f0:	100ece40 	call	100ece4 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 100d8f4:	00800044 	movi	r2,1
 100d8f8:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 100d8fc:	0001883a 	nop
 100d900:	e037883a 	mov	sp,fp
 100d904:	dfc00117 	ldw	ra,4(sp)
 100d908:	df000017 	ldw	fp,0(sp)
 100d90c:	dec00204 	addi	sp,sp,8
 100d910:	f800283a 	ret

0100d914 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 100d914:	defffe04 	addi	sp,sp,-8
 100d918:	dfc00115 	stw	ra,4(sp)
 100d91c:	df000015 	stw	fp,0(sp)
 100d920:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
 100d924:	000d883a 	mov	r6,zero
 100d928:	000b883a 	mov	r5,zero
 100d92c:	01004074 	movhi	r4,257
 100d930:	21003f04 	addi	r4,r4,252
 100d934:	100dac40 	call	100dac4 <altera_avalon_jtag_uart_init>
 100d938:	01004074 	movhi	r4,257
 100d93c:	21003504 	addi	r4,r4,212
 100d940:	100d8a80 	call	100d8a8 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
 100d944:	0001883a 	nop
}
 100d948:	0001883a 	nop
 100d94c:	e037883a 	mov	sp,fp
 100d950:	dfc00117 	ldw	ra,4(sp)
 100d954:	df000017 	ldw	fp,0(sp)
 100d958:	dec00204 	addi	sp,sp,8
 100d95c:	f800283a 	ret

0100d960 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 100d960:	defffa04 	addi	sp,sp,-24
 100d964:	dfc00515 	stw	ra,20(sp)
 100d968:	df000415 	stw	fp,16(sp)
 100d96c:	df000404 	addi	fp,sp,16
 100d970:	e13ffd15 	stw	r4,-12(fp)
 100d974:	e17ffe15 	stw	r5,-8(fp)
 100d978:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 100d97c:	e0bffd17 	ldw	r2,-12(fp)
 100d980:	10800017 	ldw	r2,0(r2)
 100d984:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 100d988:	e0bffc17 	ldw	r2,-16(fp)
 100d98c:	10c00a04 	addi	r3,r2,40
 100d990:	e0bffd17 	ldw	r2,-12(fp)
 100d994:	10800217 	ldw	r2,8(r2)
 100d998:	100f883a 	mov	r7,r2
 100d99c:	e1bfff17 	ldw	r6,-4(fp)
 100d9a0:	e17ffe17 	ldw	r5,-8(fp)
 100d9a4:	1809883a 	mov	r4,r3
 100d9a8:	100df880 	call	100df88 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 100d9ac:	e037883a 	mov	sp,fp
 100d9b0:	dfc00117 	ldw	ra,4(sp)
 100d9b4:	df000017 	ldw	fp,0(sp)
 100d9b8:	dec00204 	addi	sp,sp,8
 100d9bc:	f800283a 	ret

0100d9c0 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 100d9c0:	defffa04 	addi	sp,sp,-24
 100d9c4:	dfc00515 	stw	ra,20(sp)
 100d9c8:	df000415 	stw	fp,16(sp)
 100d9cc:	df000404 	addi	fp,sp,16
 100d9d0:	e13ffd15 	stw	r4,-12(fp)
 100d9d4:	e17ffe15 	stw	r5,-8(fp)
 100d9d8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 100d9dc:	e0bffd17 	ldw	r2,-12(fp)
 100d9e0:	10800017 	ldw	r2,0(r2)
 100d9e4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 100d9e8:	e0bffc17 	ldw	r2,-16(fp)
 100d9ec:	10c00a04 	addi	r3,r2,40
 100d9f0:	e0bffd17 	ldw	r2,-12(fp)
 100d9f4:	10800217 	ldw	r2,8(r2)
 100d9f8:	100f883a 	mov	r7,r2
 100d9fc:	e1bfff17 	ldw	r6,-4(fp)
 100da00:	e17ffe17 	ldw	r5,-8(fp)
 100da04:	1809883a 	mov	r4,r3
 100da08:	100e1a40 	call	100e1a4 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 100da0c:	e037883a 	mov	sp,fp
 100da10:	dfc00117 	ldw	ra,4(sp)
 100da14:	df000017 	ldw	fp,0(sp)
 100da18:	dec00204 	addi	sp,sp,8
 100da1c:	f800283a 	ret

0100da20 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 100da20:	defffc04 	addi	sp,sp,-16
 100da24:	dfc00315 	stw	ra,12(sp)
 100da28:	df000215 	stw	fp,8(sp)
 100da2c:	df000204 	addi	fp,sp,8
 100da30:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 100da34:	e0bfff17 	ldw	r2,-4(fp)
 100da38:	10800017 	ldw	r2,0(r2)
 100da3c:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 100da40:	e0bffe17 	ldw	r2,-8(fp)
 100da44:	10c00a04 	addi	r3,r2,40
 100da48:	e0bfff17 	ldw	r2,-4(fp)
 100da4c:	10800217 	ldw	r2,8(r2)
 100da50:	100b883a 	mov	r5,r2
 100da54:	1809883a 	mov	r4,r3
 100da58:	100de300 	call	100de30 <altera_avalon_jtag_uart_close>
}
 100da5c:	e037883a 	mov	sp,fp
 100da60:	dfc00117 	ldw	ra,4(sp)
 100da64:	df000017 	ldw	fp,0(sp)
 100da68:	dec00204 	addi	sp,sp,8
 100da6c:	f800283a 	ret

0100da70 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 100da70:	defffa04 	addi	sp,sp,-24
 100da74:	dfc00515 	stw	ra,20(sp)
 100da78:	df000415 	stw	fp,16(sp)
 100da7c:	df000404 	addi	fp,sp,16
 100da80:	e13ffd15 	stw	r4,-12(fp)
 100da84:	e17ffe15 	stw	r5,-8(fp)
 100da88:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 100da8c:	e0bffd17 	ldw	r2,-12(fp)
 100da90:	10800017 	ldw	r2,0(r2)
 100da94:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 100da98:	e0bffc17 	ldw	r2,-16(fp)
 100da9c:	10800a04 	addi	r2,r2,40
 100daa0:	e1bfff17 	ldw	r6,-4(fp)
 100daa4:	e17ffe17 	ldw	r5,-8(fp)
 100daa8:	1009883a 	mov	r4,r2
 100daac:	100de980 	call	100de98 <altera_avalon_jtag_uart_ioctl>
}
 100dab0:	e037883a 	mov	sp,fp
 100dab4:	dfc00117 	ldw	ra,4(sp)
 100dab8:	df000017 	ldw	fp,0(sp)
 100dabc:	dec00204 	addi	sp,sp,8
 100dac0:	f800283a 	ret

0100dac4 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 100dac4:	defffa04 	addi	sp,sp,-24
 100dac8:	dfc00515 	stw	ra,20(sp)
 100dacc:	df000415 	stw	fp,16(sp)
 100dad0:	df000404 	addi	fp,sp,16
 100dad4:	e13ffd15 	stw	r4,-12(fp)
 100dad8:	e17ffe15 	stw	r5,-8(fp)
 100dadc:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 100dae0:	e0bffd17 	ldw	r2,-12(fp)
 100dae4:	00c00044 	movi	r3,1
 100dae8:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 100daec:	e0bffd17 	ldw	r2,-12(fp)
 100daf0:	10800017 	ldw	r2,0(r2)
 100daf4:	10800104 	addi	r2,r2,4
 100daf8:	1007883a 	mov	r3,r2
 100dafc:	e0bffd17 	ldw	r2,-12(fp)
 100db00:	10800817 	ldw	r2,32(r2)
 100db04:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 100db08:	e0bffe17 	ldw	r2,-8(fp)
 100db0c:	e0ffff17 	ldw	r3,-4(fp)
 100db10:	d8000015 	stw	zero,0(sp)
 100db14:	e1fffd17 	ldw	r7,-12(fp)
 100db18:	01804074 	movhi	r6,257
 100db1c:	31b6e104 	addi	r6,r6,-9340
 100db20:	180b883a 	mov	r5,r3
 100db24:	1009883a 	mov	r4,r2
 100db28:	100cee80 	call	100cee8 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 100db2c:	e0bffd17 	ldw	r2,-12(fp)
 100db30:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 100db34:	e0bffd17 	ldw	r2,-12(fp)
 100db38:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 100db3c:	d0e6d817 	ldw	r3,-25760(gp)
 100db40:	e1fffd17 	ldw	r7,-12(fp)
 100db44:	01804074 	movhi	r6,257
 100db48:	31b76404 	addi	r6,r6,-8816
 100db4c:	180b883a 	mov	r5,r3
 100db50:	1009883a 	mov	r4,r2
 100db54:	100e3c80 	call	100e3c8 <alt_alarm_start>
 100db58:	1000040e 	bge	r2,zero,100db6c <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 100db5c:	e0fffd17 	ldw	r3,-12(fp)
 100db60:	00a00034 	movhi	r2,32768
 100db64:	10bfffc4 	addi	r2,r2,-1
 100db68:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 100db6c:	0001883a 	nop
 100db70:	e037883a 	mov	sp,fp
 100db74:	dfc00117 	ldw	ra,4(sp)
 100db78:	df000017 	ldw	fp,0(sp)
 100db7c:	dec00204 	addi	sp,sp,8
 100db80:	f800283a 	ret

0100db84 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 100db84:	defff804 	addi	sp,sp,-32
 100db88:	df000715 	stw	fp,28(sp)
 100db8c:	df000704 	addi	fp,sp,28
 100db90:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 100db94:	e0bfff17 	ldw	r2,-4(fp)
 100db98:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
 100db9c:	e0bffb17 	ldw	r2,-20(fp)
 100dba0:	10800017 	ldw	r2,0(r2)
 100dba4:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 100dba8:	e0bffc17 	ldw	r2,-16(fp)
 100dbac:	10800104 	addi	r2,r2,4
 100dbb0:	10800037 	ldwio	r2,0(r2)
 100dbb4:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 100dbb8:	e0bffd17 	ldw	r2,-12(fp)
 100dbbc:	1080c00c 	andi	r2,r2,768
 100dbc0:	10006d26 	beq	r2,zero,100dd78 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 100dbc4:	e0bffd17 	ldw	r2,-12(fp)
 100dbc8:	1080400c 	andi	r2,r2,256
 100dbcc:	10003526 	beq	r2,zero,100dca4 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 100dbd0:	00800074 	movhi	r2,1
 100dbd4:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 100dbd8:	e0bffb17 	ldw	r2,-20(fp)
 100dbdc:	10800a17 	ldw	r2,40(r2)
 100dbe0:	10800044 	addi	r2,r2,1
 100dbe4:	1081ffcc 	andi	r2,r2,2047
 100dbe8:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
 100dbec:	e0bffb17 	ldw	r2,-20(fp)
 100dbf0:	10c00b17 	ldw	r3,44(r2)
 100dbf4:	e0bffe17 	ldw	r2,-8(fp)
 100dbf8:	18801526 	beq	r3,r2,100dc50 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 100dbfc:	e0bffc17 	ldw	r2,-16(fp)
 100dc00:	10800037 	ldwio	r2,0(r2)
 100dc04:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 100dc08:	e0bff917 	ldw	r2,-28(fp)
 100dc0c:	10a0000c 	andi	r2,r2,32768
 100dc10:	10001126 	beq	r2,zero,100dc58 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 100dc14:	e0bffb17 	ldw	r2,-20(fp)
 100dc18:	10800a17 	ldw	r2,40(r2)
 100dc1c:	e0fff917 	ldw	r3,-28(fp)
 100dc20:	1809883a 	mov	r4,r3
 100dc24:	e0fffb17 	ldw	r3,-20(fp)
 100dc28:	1885883a 	add	r2,r3,r2
 100dc2c:	10800e04 	addi	r2,r2,56
 100dc30:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 100dc34:	e0bffb17 	ldw	r2,-20(fp)
 100dc38:	10800a17 	ldw	r2,40(r2)
 100dc3c:	10800044 	addi	r2,r2,1
 100dc40:	10c1ffcc 	andi	r3,r2,2047
 100dc44:	e0bffb17 	ldw	r2,-20(fp)
 100dc48:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 100dc4c:	003fe206 	br	100dbd8 <altera_avalon_jtag_uart_irq+0x54>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
 100dc50:	0001883a 	nop
 100dc54:	00000106 	br	100dc5c <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
 100dc58:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 100dc5c:	e0bff917 	ldw	r2,-28(fp)
 100dc60:	10bfffec 	andhi	r2,r2,65535
 100dc64:	10000f26 	beq	r2,zero,100dca4 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 100dc68:	e0bffb17 	ldw	r2,-20(fp)
 100dc6c:	10c00817 	ldw	r3,32(r2)
 100dc70:	00bfff84 	movi	r2,-2
 100dc74:	1886703a 	and	r3,r3,r2
 100dc78:	e0bffb17 	ldw	r2,-20(fp)
 100dc7c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 100dc80:	e0bffc17 	ldw	r2,-16(fp)
 100dc84:	10800104 	addi	r2,r2,4
 100dc88:	1007883a 	mov	r3,r2
 100dc8c:	e0bffb17 	ldw	r2,-20(fp)
 100dc90:	10800817 	ldw	r2,32(r2)
 100dc94:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 100dc98:	e0bffc17 	ldw	r2,-16(fp)
 100dc9c:	10800104 	addi	r2,r2,4
 100dca0:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 100dca4:	e0bffd17 	ldw	r2,-12(fp)
 100dca8:	1080800c 	andi	r2,r2,512
 100dcac:	103fbe26 	beq	r2,zero,100dba8 <altera_avalon_jtag_uart_irq+0x24>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 100dcb0:	e0bffd17 	ldw	r2,-12(fp)
 100dcb4:	1004d43a 	srli	r2,r2,16
 100dcb8:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 100dcbc:	00001406 	br	100dd10 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 100dcc0:	e0bffc17 	ldw	r2,-16(fp)
 100dcc4:	e0fffb17 	ldw	r3,-20(fp)
 100dcc8:	18c00d17 	ldw	r3,52(r3)
 100dccc:	e13ffb17 	ldw	r4,-20(fp)
 100dcd0:	20c7883a 	add	r3,r4,r3
 100dcd4:	18c20e04 	addi	r3,r3,2104
 100dcd8:	18c00003 	ldbu	r3,0(r3)
 100dcdc:	18c03fcc 	andi	r3,r3,255
 100dce0:	18c0201c 	xori	r3,r3,128
 100dce4:	18ffe004 	addi	r3,r3,-128
 100dce8:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 100dcec:	e0bffb17 	ldw	r2,-20(fp)
 100dcf0:	10800d17 	ldw	r2,52(r2)
 100dcf4:	10800044 	addi	r2,r2,1
 100dcf8:	10c1ffcc 	andi	r3,r2,2047
 100dcfc:	e0bffb17 	ldw	r2,-20(fp)
 100dd00:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 100dd04:	e0bffa17 	ldw	r2,-24(fp)
 100dd08:	10bfffc4 	addi	r2,r2,-1
 100dd0c:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 100dd10:	e0bffa17 	ldw	r2,-24(fp)
 100dd14:	10000526 	beq	r2,zero,100dd2c <altera_avalon_jtag_uart_irq+0x1a8>
 100dd18:	e0bffb17 	ldw	r2,-20(fp)
 100dd1c:	10c00d17 	ldw	r3,52(r2)
 100dd20:	e0bffb17 	ldw	r2,-20(fp)
 100dd24:	10800c17 	ldw	r2,48(r2)
 100dd28:	18bfe51e 	bne	r3,r2,100dcc0 <altera_avalon_jtag_uart_irq+0x13c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 100dd2c:	e0bffa17 	ldw	r2,-24(fp)
 100dd30:	103f9d26 	beq	r2,zero,100dba8 <altera_avalon_jtag_uart_irq+0x24>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 100dd34:	e0bffb17 	ldw	r2,-20(fp)
 100dd38:	10c00817 	ldw	r3,32(r2)
 100dd3c:	00bfff44 	movi	r2,-3
 100dd40:	1886703a 	and	r3,r3,r2
 100dd44:	e0bffb17 	ldw	r2,-20(fp)
 100dd48:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 100dd4c:	e0bffb17 	ldw	r2,-20(fp)
 100dd50:	10800017 	ldw	r2,0(r2)
 100dd54:	10800104 	addi	r2,r2,4
 100dd58:	1007883a 	mov	r3,r2
 100dd5c:	e0bffb17 	ldw	r2,-20(fp)
 100dd60:	10800817 	ldw	r2,32(r2)
 100dd64:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 100dd68:	e0bffc17 	ldw	r2,-16(fp)
 100dd6c:	10800104 	addi	r2,r2,4
 100dd70:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 100dd74:	003f8c06 	br	100dba8 <altera_avalon_jtag_uart_irq+0x24>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
 100dd78:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
 100dd7c:	0001883a 	nop
 100dd80:	e037883a 	mov	sp,fp
 100dd84:	df000017 	ldw	fp,0(sp)
 100dd88:	dec00104 	addi	sp,sp,4
 100dd8c:	f800283a 	ret

0100dd90 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 100dd90:	defff804 	addi	sp,sp,-32
 100dd94:	df000715 	stw	fp,28(sp)
 100dd98:	df000704 	addi	fp,sp,28
 100dd9c:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 100dda0:	e0bffb17 	ldw	r2,-20(fp)
 100dda4:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 100dda8:	e0bff917 	ldw	r2,-28(fp)
 100ddac:	10800017 	ldw	r2,0(r2)
 100ddb0:	10800104 	addi	r2,r2,4
 100ddb4:	10800037 	ldwio	r2,0(r2)
 100ddb8:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 100ddbc:	e0bffa17 	ldw	r2,-24(fp)
 100ddc0:	1081000c 	andi	r2,r2,1024
 100ddc4:	10000b26 	beq	r2,zero,100ddf4 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 100ddc8:	e0bff917 	ldw	r2,-28(fp)
 100ddcc:	10800017 	ldw	r2,0(r2)
 100ddd0:	10800104 	addi	r2,r2,4
 100ddd4:	1007883a 	mov	r3,r2
 100ddd8:	e0bff917 	ldw	r2,-28(fp)
 100dddc:	10800817 	ldw	r2,32(r2)
 100dde0:	10810014 	ori	r2,r2,1024
 100dde4:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
 100dde8:	e0bff917 	ldw	r2,-28(fp)
 100ddec:	10000915 	stw	zero,36(r2)
 100ddf0:	00000a06 	br	100de1c <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 100ddf4:	e0bff917 	ldw	r2,-28(fp)
 100ddf8:	10c00917 	ldw	r3,36(r2)
 100ddfc:	00a00034 	movhi	r2,32768
 100de00:	10bfff04 	addi	r2,r2,-4
 100de04:	10c00536 	bltu	r2,r3,100de1c <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
 100de08:	e0bff917 	ldw	r2,-28(fp)
 100de0c:	10800917 	ldw	r2,36(r2)
 100de10:	10c00044 	addi	r3,r2,1
 100de14:	e0bff917 	ldw	r2,-28(fp)
 100de18:	10c00915 	stw	r3,36(r2)
 100de1c:	d0a6d817 	ldw	r2,-25760(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 100de20:	e037883a 	mov	sp,fp
 100de24:	df000017 	ldw	fp,0(sp)
 100de28:	dec00104 	addi	sp,sp,4
 100de2c:	f800283a 	ret

0100de30 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 100de30:	defffd04 	addi	sp,sp,-12
 100de34:	df000215 	stw	fp,8(sp)
 100de38:	df000204 	addi	fp,sp,8
 100de3c:	e13ffe15 	stw	r4,-8(fp)
 100de40:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 100de44:	00000506 	br	100de5c <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 100de48:	e0bfff17 	ldw	r2,-4(fp)
 100de4c:	1090000c 	andi	r2,r2,16384
 100de50:	10000226 	beq	r2,zero,100de5c <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 100de54:	00bffd44 	movi	r2,-11
 100de58:	00000b06 	br	100de88 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 100de5c:	e0bffe17 	ldw	r2,-8(fp)
 100de60:	10c00d17 	ldw	r3,52(r2)
 100de64:	e0bffe17 	ldw	r2,-8(fp)
 100de68:	10800c17 	ldw	r2,48(r2)
 100de6c:	18800526 	beq	r3,r2,100de84 <altera_avalon_jtag_uart_close+0x54>
 100de70:	e0bffe17 	ldw	r2,-8(fp)
 100de74:	10c00917 	ldw	r3,36(r2)
 100de78:	e0bffe17 	ldw	r2,-8(fp)
 100de7c:	10800117 	ldw	r2,4(r2)
 100de80:	18bff136 	bltu	r3,r2,100de48 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 100de84:	0005883a 	mov	r2,zero
}
 100de88:	e037883a 	mov	sp,fp
 100de8c:	df000017 	ldw	fp,0(sp)
 100de90:	dec00104 	addi	sp,sp,4
 100de94:	f800283a 	ret

0100de98 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 100de98:	defffa04 	addi	sp,sp,-24
 100de9c:	df000515 	stw	fp,20(sp)
 100dea0:	df000504 	addi	fp,sp,20
 100dea4:	e13ffd15 	stw	r4,-12(fp)
 100dea8:	e17ffe15 	stw	r5,-8(fp)
 100deac:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
 100deb0:	00bff9c4 	movi	r2,-25
 100deb4:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
 100deb8:	e0bffe17 	ldw	r2,-8(fp)
 100debc:	10da8060 	cmpeqi	r3,r2,27137
 100dec0:	1800031e 	bne	r3,zero,100ded0 <altera_avalon_jtag_uart_ioctl+0x38>
 100dec4:	109a80a0 	cmpeqi	r2,r2,27138
 100dec8:	1000181e 	bne	r2,zero,100df2c <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
 100decc:	00002906 	br	100df74 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 100ded0:	e0bffd17 	ldw	r2,-12(fp)
 100ded4:	10c00117 	ldw	r3,4(r2)
 100ded8:	00a00034 	movhi	r2,32768
 100dedc:	10bfffc4 	addi	r2,r2,-1
 100dee0:	18802126 	beq	r3,r2,100df68 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
 100dee4:	e0bfff17 	ldw	r2,-4(fp)
 100dee8:	10800017 	ldw	r2,0(r2)
 100deec:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 100def0:	e0bffc17 	ldw	r2,-16(fp)
 100def4:	10800090 	cmplti	r2,r2,2
 100def8:	1000061e 	bne	r2,zero,100df14 <altera_avalon_jtag_uart_ioctl+0x7c>
 100defc:	e0fffc17 	ldw	r3,-16(fp)
 100df00:	00a00034 	movhi	r2,32768
 100df04:	10bfffc4 	addi	r2,r2,-1
 100df08:	18800226 	beq	r3,r2,100df14 <altera_avalon_jtag_uart_ioctl+0x7c>
 100df0c:	e0bffc17 	ldw	r2,-16(fp)
 100df10:	00000206 	br	100df1c <altera_avalon_jtag_uart_ioctl+0x84>
 100df14:	00a00034 	movhi	r2,32768
 100df18:	10bfff84 	addi	r2,r2,-2
 100df1c:	e0fffd17 	ldw	r3,-12(fp)
 100df20:	18800115 	stw	r2,4(r3)
      rc = 0;
 100df24:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 100df28:	00000f06 	br	100df68 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 100df2c:	e0bffd17 	ldw	r2,-12(fp)
 100df30:	10c00117 	ldw	r3,4(r2)
 100df34:	00a00034 	movhi	r2,32768
 100df38:	10bfffc4 	addi	r2,r2,-1
 100df3c:	18800c26 	beq	r3,r2,100df70 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 100df40:	e0bffd17 	ldw	r2,-12(fp)
 100df44:	10c00917 	ldw	r3,36(r2)
 100df48:	e0bffd17 	ldw	r2,-12(fp)
 100df4c:	10800117 	ldw	r2,4(r2)
 100df50:	1885803a 	cmpltu	r2,r3,r2
 100df54:	10c03fcc 	andi	r3,r2,255
 100df58:	e0bfff17 	ldw	r2,-4(fp)
 100df5c:	10c00015 	stw	r3,0(r2)
      rc = 0;
 100df60:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 100df64:	00000206 	br	100df70 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
 100df68:	0001883a 	nop
 100df6c:	00000106 	br	100df74 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
 100df70:	0001883a 	nop

  default:
    break;
  }

  return rc;
 100df74:	e0bffb17 	ldw	r2,-20(fp)
}
 100df78:	e037883a 	mov	sp,fp
 100df7c:	df000017 	ldw	fp,0(sp)
 100df80:	dec00104 	addi	sp,sp,4
 100df84:	f800283a 	ret

0100df88 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 100df88:	defff304 	addi	sp,sp,-52
 100df8c:	dfc00c15 	stw	ra,48(sp)
 100df90:	df000b15 	stw	fp,44(sp)
 100df94:	df000b04 	addi	fp,sp,44
 100df98:	e13ffc15 	stw	r4,-16(fp)
 100df9c:	e17ffd15 	stw	r5,-12(fp)
 100dfa0:	e1bffe15 	stw	r6,-8(fp)
 100dfa4:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
 100dfa8:	e0bffd17 	ldw	r2,-12(fp)
 100dfac:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 100dfb0:	00004706 	br	100e0d0 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 100dfb4:	e0bffc17 	ldw	r2,-16(fp)
 100dfb8:	10800a17 	ldw	r2,40(r2)
 100dfbc:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 100dfc0:	e0bffc17 	ldw	r2,-16(fp)
 100dfc4:	10800b17 	ldw	r2,44(r2)
 100dfc8:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
 100dfcc:	e0fff717 	ldw	r3,-36(fp)
 100dfd0:	e0bff817 	ldw	r2,-32(fp)
 100dfd4:	18800536 	bltu	r3,r2,100dfec <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 100dfd8:	e0fff717 	ldw	r3,-36(fp)
 100dfdc:	e0bff817 	ldw	r2,-32(fp)
 100dfe0:	1885c83a 	sub	r2,r3,r2
 100dfe4:	e0bff615 	stw	r2,-40(fp)
 100dfe8:	00000406 	br	100dffc <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 100dfec:	00c20004 	movi	r3,2048
 100dff0:	e0bff817 	ldw	r2,-32(fp)
 100dff4:	1885c83a 	sub	r2,r3,r2
 100dff8:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 100dffc:	e0bff617 	ldw	r2,-40(fp)
 100e000:	10001e26 	beq	r2,zero,100e07c <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
 100e004:	e0fffe17 	ldw	r3,-8(fp)
 100e008:	e0bff617 	ldw	r2,-40(fp)
 100e00c:	1880022e 	bgeu	r3,r2,100e018 <altera_avalon_jtag_uart_read+0x90>
        n = space;
 100e010:	e0bffe17 	ldw	r2,-8(fp)
 100e014:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 100e018:	e0bffc17 	ldw	r2,-16(fp)
 100e01c:	10c00e04 	addi	r3,r2,56
 100e020:	e0bff817 	ldw	r2,-32(fp)
 100e024:	1885883a 	add	r2,r3,r2
 100e028:	e1bff617 	ldw	r6,-40(fp)
 100e02c:	100b883a 	mov	r5,r2
 100e030:	e13ff517 	ldw	r4,-44(fp)
 100e034:	1005e700 	call	1005e70 <memcpy>
      ptr   += n;
 100e038:	e0fff517 	ldw	r3,-44(fp)
 100e03c:	e0bff617 	ldw	r2,-40(fp)
 100e040:	1885883a 	add	r2,r3,r2
 100e044:	e0bff515 	stw	r2,-44(fp)
      space -= n;
 100e048:	e0fffe17 	ldw	r3,-8(fp)
 100e04c:	e0bff617 	ldw	r2,-40(fp)
 100e050:	1885c83a 	sub	r2,r3,r2
 100e054:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 100e058:	e0fff817 	ldw	r3,-32(fp)
 100e05c:	e0bff617 	ldw	r2,-40(fp)
 100e060:	1885883a 	add	r2,r3,r2
 100e064:	10c1ffcc 	andi	r3,r2,2047
 100e068:	e0bffc17 	ldw	r2,-16(fp)
 100e06c:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 100e070:	e0bffe17 	ldw	r2,-8(fp)
 100e074:	00bfcf16 	blt	zero,r2,100dfb4 <altera_avalon_jtag_uart_read+0x2c>
 100e078:	00000106 	br	100e080 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
 100e07c:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
 100e080:	e0fff517 	ldw	r3,-44(fp)
 100e084:	e0bffd17 	ldw	r2,-12(fp)
 100e088:	1880141e 	bne	r3,r2,100e0dc <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 100e08c:	e0bfff17 	ldw	r2,-4(fp)
 100e090:	1090000c 	andi	r2,r2,16384
 100e094:	1000131e 	bne	r2,zero,100e0e4 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 100e098:	0001883a 	nop
 100e09c:	e0bffc17 	ldw	r2,-16(fp)
 100e0a0:	10c00a17 	ldw	r3,40(r2)
 100e0a4:	e0bff717 	ldw	r2,-36(fp)
 100e0a8:	1880051e 	bne	r3,r2,100e0c0 <altera_avalon_jtag_uart_read+0x138>
 100e0ac:	e0bffc17 	ldw	r2,-16(fp)
 100e0b0:	10c00917 	ldw	r3,36(r2)
 100e0b4:	e0bffc17 	ldw	r2,-16(fp)
 100e0b8:	10800117 	ldw	r2,4(r2)
 100e0bc:	18bff736 	bltu	r3,r2,100e09c <altera_avalon_jtag_uart_read+0x114>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 100e0c0:	e0bffc17 	ldw	r2,-16(fp)
 100e0c4:	10c00a17 	ldw	r3,40(r2)
 100e0c8:	e0bff717 	ldw	r2,-36(fp)
 100e0cc:	18800726 	beq	r3,r2,100e0ec <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 100e0d0:	e0bffe17 	ldw	r2,-8(fp)
 100e0d4:	00bfb716 	blt	zero,r2,100dfb4 <altera_avalon_jtag_uart_read+0x2c>
 100e0d8:	00000506 	br	100e0f0 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
 100e0dc:	0001883a 	nop
 100e0e0:	00000306 	br	100e0f0 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
 100e0e4:	0001883a 	nop
 100e0e8:	00000106 	br	100e0f0 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
 100e0ec:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 100e0f0:	e0fff517 	ldw	r3,-44(fp)
 100e0f4:	e0bffd17 	ldw	r2,-12(fp)
 100e0f8:	18801826 	beq	r3,r2,100e15c <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100e0fc:	0005303a 	rdctl	r2,status
 100e100:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100e104:	e0fffb17 	ldw	r3,-20(fp)
 100e108:	00bfff84 	movi	r2,-2
 100e10c:	1884703a 	and	r2,r3,r2
 100e110:	1001703a 	wrctl	status,r2
  
  return context;
 100e114:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 100e118:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 100e11c:	e0bffc17 	ldw	r2,-16(fp)
 100e120:	10800817 	ldw	r2,32(r2)
 100e124:	10c00054 	ori	r3,r2,1
 100e128:	e0bffc17 	ldw	r2,-16(fp)
 100e12c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 100e130:	e0bffc17 	ldw	r2,-16(fp)
 100e134:	10800017 	ldw	r2,0(r2)
 100e138:	10800104 	addi	r2,r2,4
 100e13c:	1007883a 	mov	r3,r2
 100e140:	e0bffc17 	ldw	r2,-16(fp)
 100e144:	10800817 	ldw	r2,32(r2)
 100e148:	18800035 	stwio	r2,0(r3)
 100e14c:	e0bffa17 	ldw	r2,-24(fp)
 100e150:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100e154:	e0bff917 	ldw	r2,-28(fp)
 100e158:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 100e15c:	e0fff517 	ldw	r3,-44(fp)
 100e160:	e0bffd17 	ldw	r2,-12(fp)
 100e164:	18800426 	beq	r3,r2,100e178 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
 100e168:	e0fff517 	ldw	r3,-44(fp)
 100e16c:	e0bffd17 	ldw	r2,-12(fp)
 100e170:	1885c83a 	sub	r2,r3,r2
 100e174:	00000606 	br	100e190 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
 100e178:	e0bfff17 	ldw	r2,-4(fp)
 100e17c:	1090000c 	andi	r2,r2,16384
 100e180:	10000226 	beq	r2,zero,100e18c <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
 100e184:	00bffd44 	movi	r2,-11
 100e188:	00000106 	br	100e190 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
 100e18c:	00bffec4 	movi	r2,-5
}
 100e190:	e037883a 	mov	sp,fp
 100e194:	dfc00117 	ldw	ra,4(sp)
 100e198:	df000017 	ldw	fp,0(sp)
 100e19c:	dec00204 	addi	sp,sp,8
 100e1a0:	f800283a 	ret

0100e1a4 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 100e1a4:	defff304 	addi	sp,sp,-52
 100e1a8:	dfc00c15 	stw	ra,48(sp)
 100e1ac:	df000b15 	stw	fp,44(sp)
 100e1b0:	df000b04 	addi	fp,sp,44
 100e1b4:	e13ffc15 	stw	r4,-16(fp)
 100e1b8:	e17ffd15 	stw	r5,-12(fp)
 100e1bc:	e1bffe15 	stw	r6,-8(fp)
 100e1c0:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 100e1c4:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 100e1c8:	e0bffd17 	ldw	r2,-12(fp)
 100e1cc:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 100e1d0:	00003706 	br	100e2b0 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 100e1d4:	e0bffc17 	ldw	r2,-16(fp)
 100e1d8:	10800c17 	ldw	r2,48(r2)
 100e1dc:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
 100e1e0:	e0bffc17 	ldw	r2,-16(fp)
 100e1e4:	10800d17 	ldw	r2,52(r2)
 100e1e8:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
 100e1ec:	e0fff917 	ldw	r3,-28(fp)
 100e1f0:	e0bff517 	ldw	r2,-44(fp)
 100e1f4:	1880062e 	bgeu	r3,r2,100e210 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 100e1f8:	e0fff517 	ldw	r3,-44(fp)
 100e1fc:	e0bff917 	ldw	r2,-28(fp)
 100e200:	1885c83a 	sub	r2,r3,r2
 100e204:	10bfffc4 	addi	r2,r2,-1
 100e208:	e0bff615 	stw	r2,-40(fp)
 100e20c:	00000b06 	br	100e23c <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
 100e210:	e0bff517 	ldw	r2,-44(fp)
 100e214:	10000526 	beq	r2,zero,100e22c <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 100e218:	00c20004 	movi	r3,2048
 100e21c:	e0bff917 	ldw	r2,-28(fp)
 100e220:	1885c83a 	sub	r2,r3,r2
 100e224:	e0bff615 	stw	r2,-40(fp)
 100e228:	00000406 	br	100e23c <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 100e22c:	00c1ffc4 	movi	r3,2047
 100e230:	e0bff917 	ldw	r2,-28(fp)
 100e234:	1885c83a 	sub	r2,r3,r2
 100e238:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 100e23c:	e0bff617 	ldw	r2,-40(fp)
 100e240:	10001e26 	beq	r2,zero,100e2bc <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
 100e244:	e0fffe17 	ldw	r3,-8(fp)
 100e248:	e0bff617 	ldw	r2,-40(fp)
 100e24c:	1880022e 	bgeu	r3,r2,100e258 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
 100e250:	e0bffe17 	ldw	r2,-8(fp)
 100e254:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 100e258:	e0bffc17 	ldw	r2,-16(fp)
 100e25c:	10c20e04 	addi	r3,r2,2104
 100e260:	e0bff917 	ldw	r2,-28(fp)
 100e264:	1885883a 	add	r2,r3,r2
 100e268:	e1bff617 	ldw	r6,-40(fp)
 100e26c:	e17ffd17 	ldw	r5,-12(fp)
 100e270:	1009883a 	mov	r4,r2
 100e274:	1005e700 	call	1005e70 <memcpy>
      ptr   += n;
 100e278:	e0fffd17 	ldw	r3,-12(fp)
 100e27c:	e0bff617 	ldw	r2,-40(fp)
 100e280:	1885883a 	add	r2,r3,r2
 100e284:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
 100e288:	e0fffe17 	ldw	r3,-8(fp)
 100e28c:	e0bff617 	ldw	r2,-40(fp)
 100e290:	1885c83a 	sub	r2,r3,r2
 100e294:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 100e298:	e0fff917 	ldw	r3,-28(fp)
 100e29c:	e0bff617 	ldw	r2,-40(fp)
 100e2a0:	1885883a 	add	r2,r3,r2
 100e2a4:	10c1ffcc 	andi	r3,r2,2047
 100e2a8:	e0bffc17 	ldw	r2,-16(fp)
 100e2ac:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 100e2b0:	e0bffe17 	ldw	r2,-8(fp)
 100e2b4:	00bfc716 	blt	zero,r2,100e1d4 <altera_avalon_jtag_uart_write+0x30>
 100e2b8:	00000106 	br	100e2c0 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
 100e2bc:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100e2c0:	0005303a 	rdctl	r2,status
 100e2c4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100e2c8:	e0fffb17 	ldw	r3,-20(fp)
 100e2cc:	00bfff84 	movi	r2,-2
 100e2d0:	1884703a 	and	r2,r3,r2
 100e2d4:	1001703a 	wrctl	status,r2
  
  return context;
 100e2d8:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 100e2dc:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 100e2e0:	e0bffc17 	ldw	r2,-16(fp)
 100e2e4:	10800817 	ldw	r2,32(r2)
 100e2e8:	10c00094 	ori	r3,r2,2
 100e2ec:	e0bffc17 	ldw	r2,-16(fp)
 100e2f0:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 100e2f4:	e0bffc17 	ldw	r2,-16(fp)
 100e2f8:	10800017 	ldw	r2,0(r2)
 100e2fc:	10800104 	addi	r2,r2,4
 100e300:	1007883a 	mov	r3,r2
 100e304:	e0bffc17 	ldw	r2,-16(fp)
 100e308:	10800817 	ldw	r2,32(r2)
 100e30c:	18800035 	stwio	r2,0(r3)
 100e310:	e0bffa17 	ldw	r2,-24(fp)
 100e314:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100e318:	e0bff817 	ldw	r2,-32(fp)
 100e31c:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 100e320:	e0bffe17 	ldw	r2,-8(fp)
 100e324:	0080100e 	bge	zero,r2,100e368 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
 100e328:	e0bfff17 	ldw	r2,-4(fp)
 100e32c:	1090000c 	andi	r2,r2,16384
 100e330:	1000101e 	bne	r2,zero,100e374 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 100e334:	0001883a 	nop
 100e338:	e0bffc17 	ldw	r2,-16(fp)
 100e33c:	10c00d17 	ldw	r3,52(r2)
 100e340:	e0bff517 	ldw	r2,-44(fp)
 100e344:	1880051e 	bne	r3,r2,100e35c <altera_avalon_jtag_uart_write+0x1b8>
 100e348:	e0bffc17 	ldw	r2,-16(fp)
 100e34c:	10c00917 	ldw	r3,36(r2)
 100e350:	e0bffc17 	ldw	r2,-16(fp)
 100e354:	10800117 	ldw	r2,4(r2)
 100e358:	18bff736 	bltu	r3,r2,100e338 <altera_avalon_jtag_uart_write+0x194>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
 100e35c:	e0bffc17 	ldw	r2,-16(fp)
 100e360:	10800917 	ldw	r2,36(r2)
 100e364:	1000051e 	bne	r2,zero,100e37c <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
 100e368:	e0bffe17 	ldw	r2,-8(fp)
 100e36c:	00bfd016 	blt	zero,r2,100e2b0 <altera_avalon_jtag_uart_write+0x10c>
 100e370:	00000306 	br	100e380 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
 100e374:	0001883a 	nop
 100e378:	00000106 	br	100e380 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
 100e37c:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 100e380:	e0fffd17 	ldw	r3,-12(fp)
 100e384:	e0bff717 	ldw	r2,-36(fp)
 100e388:	18800426 	beq	r3,r2,100e39c <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
 100e38c:	e0fffd17 	ldw	r3,-12(fp)
 100e390:	e0bff717 	ldw	r2,-36(fp)
 100e394:	1885c83a 	sub	r2,r3,r2
 100e398:	00000606 	br	100e3b4 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
 100e39c:	e0bfff17 	ldw	r2,-4(fp)
 100e3a0:	1090000c 	andi	r2,r2,16384
 100e3a4:	10000226 	beq	r2,zero,100e3b0 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
 100e3a8:	00bffd44 	movi	r2,-11
 100e3ac:	00000106 	br	100e3b4 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 100e3b0:	00bffec4 	movi	r2,-5
}
 100e3b4:	e037883a 	mov	sp,fp
 100e3b8:	dfc00117 	ldw	ra,4(sp)
 100e3bc:	df000017 	ldw	fp,0(sp)
 100e3c0:	dec00204 	addi	sp,sp,8
 100e3c4:	f800283a 	ret

0100e3c8 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 100e3c8:	defff504 	addi	sp,sp,-44
 100e3cc:	df000a15 	stw	fp,40(sp)
 100e3d0:	df000a04 	addi	fp,sp,40
 100e3d4:	e13ffc15 	stw	r4,-16(fp)
 100e3d8:	e17ffd15 	stw	r5,-12(fp)
 100e3dc:	e1bffe15 	stw	r6,-8(fp)
 100e3e0:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 100e3e4:	e03ff615 	stw	zero,-40(fp)
 100e3e8:	d0a6d817 	ldw	r2,-25760(gp)
  
  if (alt_ticks_per_second ())
 100e3ec:	10003c26 	beq	r2,zero,100e4e0 <alt_alarm_start+0x118>
  {
    if (alarm)
 100e3f0:	e0bffc17 	ldw	r2,-16(fp)
 100e3f4:	10003826 	beq	r2,zero,100e4d8 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
 100e3f8:	e0bffc17 	ldw	r2,-16(fp)
 100e3fc:	e0fffe17 	ldw	r3,-8(fp)
 100e400:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 100e404:	e0bffc17 	ldw	r2,-16(fp)
 100e408:	e0ffff17 	ldw	r3,-4(fp)
 100e40c:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100e410:	0005303a 	rdctl	r2,status
 100e414:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100e418:	e0fff917 	ldw	r3,-28(fp)
 100e41c:	00bfff84 	movi	r2,-2
 100e420:	1884703a 	and	r2,r3,r2
 100e424:	1001703a 	wrctl	status,r2
  
  return context;
 100e428:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
 100e42c:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 100e430:	d0a6d917 	ldw	r2,-25756(gp)
      
      current_nticks = alt_nticks();
 100e434:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 100e438:	e0fffd17 	ldw	r3,-12(fp)
 100e43c:	e0bff617 	ldw	r2,-40(fp)
 100e440:	1885883a 	add	r2,r3,r2
 100e444:	10c00044 	addi	r3,r2,1
 100e448:	e0bffc17 	ldw	r2,-16(fp)
 100e44c:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 100e450:	e0bffc17 	ldw	r2,-16(fp)
 100e454:	10c00217 	ldw	r3,8(r2)
 100e458:	e0bff617 	ldw	r2,-40(fp)
 100e45c:	1880042e 	bgeu	r3,r2,100e470 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
 100e460:	e0bffc17 	ldw	r2,-16(fp)
 100e464:	00c00044 	movi	r3,1
 100e468:	10c00405 	stb	r3,16(r2)
 100e46c:	00000206 	br	100e478 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
 100e470:	e0bffc17 	ldw	r2,-16(fp)
 100e474:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 100e478:	e0bffc17 	ldw	r2,-16(fp)
 100e47c:	d0e00e04 	addi	r3,gp,-32712
 100e480:	e0fffa15 	stw	r3,-24(fp)
 100e484:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 100e488:	e0bffb17 	ldw	r2,-20(fp)
 100e48c:	e0fffa17 	ldw	r3,-24(fp)
 100e490:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 100e494:	e0bffa17 	ldw	r2,-24(fp)
 100e498:	10c00017 	ldw	r3,0(r2)
 100e49c:	e0bffb17 	ldw	r2,-20(fp)
 100e4a0:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 100e4a4:	e0bffa17 	ldw	r2,-24(fp)
 100e4a8:	10800017 	ldw	r2,0(r2)
 100e4ac:	e0fffb17 	ldw	r3,-20(fp)
 100e4b0:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 100e4b4:	e0bffa17 	ldw	r2,-24(fp)
 100e4b8:	e0fffb17 	ldw	r3,-20(fp)
 100e4bc:	10c00015 	stw	r3,0(r2)
 100e4c0:	e0bff817 	ldw	r2,-32(fp)
 100e4c4:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100e4c8:	e0bff717 	ldw	r2,-36(fp)
 100e4cc:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 100e4d0:	0005883a 	mov	r2,zero
 100e4d4:	00000306 	br	100e4e4 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
 100e4d8:	00bffa84 	movi	r2,-22
 100e4dc:	00000106 	br	100e4e4 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
 100e4e0:	00bfde84 	movi	r2,-134
  }
}
 100e4e4:	e037883a 	mov	sp,fp
 100e4e8:	df000017 	ldw	fp,0(sp)
 100e4ec:	dec00104 	addi	sp,sp,4
 100e4f0:	f800283a 	ret

0100e4f4 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 100e4f4:	defffe04 	addi	sp,sp,-8
 100e4f8:	df000115 	stw	fp,4(sp)
 100e4fc:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 100e500:	e03fff15 	stw	zero,-4(fp)
 100e504:	00000506 	br	100e51c <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
 100e508:	e0bfff17 	ldw	r2,-4(fp)
 100e50c:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 100e510:	e0bfff17 	ldw	r2,-4(fp)
 100e514:	10800804 	addi	r2,r2,32
 100e518:	e0bfff15 	stw	r2,-4(fp)
 100e51c:	e0bfff17 	ldw	r2,-4(fp)
 100e520:	10820030 	cmpltui	r2,r2,2048
 100e524:	103ff81e 	bne	r2,zero,100e508 <alt_dcache_flush_all+0x14>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 100e528:	0001883a 	nop
 100e52c:	e037883a 	mov	sp,fp
 100e530:	df000017 	ldw	fp,0(sp)
 100e534:	dec00104 	addi	sp,sp,4
 100e538:	f800283a 	ret

0100e53c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 100e53c:	defffe04 	addi	sp,sp,-8
 100e540:	dfc00115 	stw	ra,4(sp)
 100e544:	df000015 	stw	fp,0(sp)
 100e548:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 100e54c:	d0a00b17 	ldw	r2,-32724(gp)
 100e550:	10000326 	beq	r2,zero,100e560 <alt_get_errno+0x24>
 100e554:	d0a00b17 	ldw	r2,-32724(gp)
 100e558:	103ee83a 	callr	r2
 100e55c:	00000106 	br	100e564 <alt_get_errno+0x28>
 100e560:	d0a6d204 	addi	r2,gp,-25784
}
 100e564:	e037883a 	mov	sp,fp
 100e568:	dfc00117 	ldw	ra,4(sp)
 100e56c:	df000017 	ldw	fp,0(sp)
 100e570:	dec00204 	addi	sp,sp,8
 100e574:	f800283a 	ret

0100e578 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 100e578:	defffa04 	addi	sp,sp,-24
 100e57c:	dfc00515 	stw	ra,20(sp)
 100e580:	df000415 	stw	fp,16(sp)
 100e584:	df000404 	addi	fp,sp,16
 100e588:	e13ffe15 	stw	r4,-8(fp)
 100e58c:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 100e590:	e0bffe17 	ldw	r2,-8(fp)
 100e594:	10000326 	beq	r2,zero,100e5a4 <alt_dev_llist_insert+0x2c>
 100e598:	e0bffe17 	ldw	r2,-8(fp)
 100e59c:	10800217 	ldw	r2,8(r2)
 100e5a0:	1000061e 	bne	r2,zero,100e5bc <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
 100e5a4:	100e53c0 	call	100e53c <alt_get_errno>
 100e5a8:	1007883a 	mov	r3,r2
 100e5ac:	00800584 	movi	r2,22
 100e5b0:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 100e5b4:	00bffa84 	movi	r2,-22
 100e5b8:	00001306 	br	100e608 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 100e5bc:	e0bffe17 	ldw	r2,-8(fp)
 100e5c0:	e0ffff17 	ldw	r3,-4(fp)
 100e5c4:	e0fffc15 	stw	r3,-16(fp)
 100e5c8:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 100e5cc:	e0bffd17 	ldw	r2,-12(fp)
 100e5d0:	e0fffc17 	ldw	r3,-16(fp)
 100e5d4:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 100e5d8:	e0bffc17 	ldw	r2,-16(fp)
 100e5dc:	10c00017 	ldw	r3,0(r2)
 100e5e0:	e0bffd17 	ldw	r2,-12(fp)
 100e5e4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 100e5e8:	e0bffc17 	ldw	r2,-16(fp)
 100e5ec:	10800017 	ldw	r2,0(r2)
 100e5f0:	e0fffd17 	ldw	r3,-12(fp)
 100e5f4:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 100e5f8:	e0bffc17 	ldw	r2,-16(fp)
 100e5fc:	e0fffd17 	ldw	r3,-12(fp)
 100e600:	10c00015 	stw	r3,0(r2)

  return 0;  
 100e604:	0005883a 	mov	r2,zero
}
 100e608:	e037883a 	mov	sp,fp
 100e60c:	dfc00117 	ldw	ra,4(sp)
 100e610:	df000017 	ldw	fp,0(sp)
 100e614:	dec00204 	addi	sp,sp,8
 100e618:	f800283a 	ret

0100e61c <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 100e61c:	defffd04 	addi	sp,sp,-12
 100e620:	dfc00215 	stw	ra,8(sp)
 100e624:	df000115 	stw	fp,4(sp)
 100e628:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 100e62c:	00804074 	movhi	r2,257
 100e630:	10bcd904 	addi	r2,r2,-3228
 100e634:	e0bfff15 	stw	r2,-4(fp)
 100e638:	00000606 	br	100e654 <_do_ctors+0x38>
        (*ctor) (); 
 100e63c:	e0bfff17 	ldw	r2,-4(fp)
 100e640:	10800017 	ldw	r2,0(r2)
 100e644:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 100e648:	e0bfff17 	ldw	r2,-4(fp)
 100e64c:	10bfff04 	addi	r2,r2,-4
 100e650:	e0bfff15 	stw	r2,-4(fp)
 100e654:	e0ffff17 	ldw	r3,-4(fp)
 100e658:	00804074 	movhi	r2,257
 100e65c:	10bcda04 	addi	r2,r2,-3224
 100e660:	18bff62e 	bgeu	r3,r2,100e63c <_do_ctors+0x20>
        (*ctor) (); 
}
 100e664:	0001883a 	nop
 100e668:	e037883a 	mov	sp,fp
 100e66c:	dfc00117 	ldw	ra,4(sp)
 100e670:	df000017 	ldw	fp,0(sp)
 100e674:	dec00204 	addi	sp,sp,8
 100e678:	f800283a 	ret

0100e67c <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 100e67c:	defffd04 	addi	sp,sp,-12
 100e680:	dfc00215 	stw	ra,8(sp)
 100e684:	df000115 	stw	fp,4(sp)
 100e688:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 100e68c:	00804074 	movhi	r2,257
 100e690:	10bcd904 	addi	r2,r2,-3228
 100e694:	e0bfff15 	stw	r2,-4(fp)
 100e698:	00000606 	br	100e6b4 <_do_dtors+0x38>
        (*dtor) (); 
 100e69c:	e0bfff17 	ldw	r2,-4(fp)
 100e6a0:	10800017 	ldw	r2,0(r2)
 100e6a4:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 100e6a8:	e0bfff17 	ldw	r2,-4(fp)
 100e6ac:	10bfff04 	addi	r2,r2,-4
 100e6b0:	e0bfff15 	stw	r2,-4(fp)
 100e6b4:	e0ffff17 	ldw	r3,-4(fp)
 100e6b8:	00804074 	movhi	r2,257
 100e6bc:	10bcda04 	addi	r2,r2,-3224
 100e6c0:	18bff62e 	bgeu	r3,r2,100e69c <_do_dtors+0x20>
        (*dtor) (); 
}
 100e6c4:	0001883a 	nop
 100e6c8:	e037883a 	mov	sp,fp
 100e6cc:	dfc00117 	ldw	ra,4(sp)
 100e6d0:	df000017 	ldw	fp,0(sp)
 100e6d4:	dec00204 	addi	sp,sp,8
 100e6d8:	f800283a 	ret

0100e6dc <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 100e6dc:	defffe04 	addi	sp,sp,-8
 100e6e0:	dfc00115 	stw	ra,4(sp)
 100e6e4:	df000015 	stw	fp,0(sp)
 100e6e8:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
 100e6ec:	01440004 	movi	r5,4096
 100e6f0:	0009883a 	mov	r4,zero
 100e6f4:	100ef440 	call	100ef44 <alt_icache_flush>
#endif
}
 100e6f8:	0001883a 	nop
 100e6fc:	e037883a 	mov	sp,fp
 100e700:	dfc00117 	ldw	ra,4(sp)
 100e704:	df000017 	ldw	fp,0(sp)
 100e708:	dec00204 	addi	sp,sp,8
 100e70c:	f800283a 	ret

0100e710 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
 100e710:	defffe04 	addi	sp,sp,-8
 100e714:	df000115 	stw	fp,4(sp)
 100e718:	df000104 	addi	fp,sp,4
 100e71c:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
 100e720:	e0bfff17 	ldw	r2,-4(fp)
 100e724:	10bffe84 	addi	r2,r2,-6
 100e728:	10c00428 	cmpgeui	r3,r2,16
 100e72c:	18001a1e 	bne	r3,zero,100e798 <alt_exception_cause_generated_bad_addr+0x88>
 100e730:	100690ba 	slli	r3,r2,2
 100e734:	00804074 	movhi	r2,257
 100e738:	10b9d204 	addi	r2,r2,-6328
 100e73c:	1885883a 	add	r2,r3,r2
 100e740:	10800017 	ldw	r2,0(r2)
 100e744:	1000683a 	jmp	r2
 100e748:	0100e788 	cmpgei	r4,zero,926
 100e74c:	0100e788 	cmpgei	r4,zero,926
 100e750:	0100e798 	cmpnei	r4,zero,926
 100e754:	0100e798 	cmpnei	r4,zero,926
 100e758:	0100e798 	cmpnei	r4,zero,926
 100e75c:	0100e788 	cmpgei	r4,zero,926
 100e760:	0100e790 	cmplti	r4,zero,926
 100e764:	0100e798 	cmpnei	r4,zero,926
 100e768:	0100e788 	cmpgei	r4,zero,926
 100e76c:	0100e788 	cmpgei	r4,zero,926
 100e770:	0100e798 	cmpnei	r4,zero,926
 100e774:	0100e788 	cmpgei	r4,zero,926
 100e778:	0100e790 	cmplti	r4,zero,926
 100e77c:	0100e798 	cmpnei	r4,zero,926
 100e780:	0100e798 	cmpnei	r4,zero,926
 100e784:	0100e788 	cmpgei	r4,zero,926
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
 100e788:	00800044 	movi	r2,1
 100e78c:	00000306 	br	100e79c <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
 100e790:	0005883a 	mov	r2,zero
 100e794:	00000106 	br	100e79c <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
 100e798:	0005883a 	mov	r2,zero
  }
}
 100e79c:	e037883a 	mov	sp,fp
 100e7a0:	df000017 	ldw	fp,0(sp)
 100e7a4:	dec00104 	addi	sp,sp,4
 100e7a8:	f800283a 	ret

0100e7ac <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 100e7ac:	defff904 	addi	sp,sp,-28
 100e7b0:	dfc00615 	stw	ra,24(sp)
 100e7b4:	df000515 	stw	fp,20(sp)
 100e7b8:	df000504 	addi	fp,sp,20
 100e7bc:	e13ffc15 	stw	r4,-16(fp)
 100e7c0:	e17ffd15 	stw	r5,-12(fp)
 100e7c4:	e1bffe15 	stw	r6,-8(fp)
 100e7c8:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
 100e7cc:	e1bfff17 	ldw	r6,-4(fp)
 100e7d0:	e17ffe17 	ldw	r5,-8(fp)
 100e7d4:	e13ffd17 	ldw	r4,-12(fp)
 100e7d8:	100e9ec0 	call	100e9ec <open>
 100e7dc:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
 100e7e0:	e0bffb17 	ldw	r2,-20(fp)
 100e7e4:	10001c16 	blt	r2,zero,100e858 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
 100e7e8:	00804074 	movhi	r2,257
 100e7ec:	10bfd504 	addi	r2,r2,-172
 100e7f0:	e0fffb17 	ldw	r3,-20(fp)
 100e7f4:	18c00324 	muli	r3,r3,12
 100e7f8:	10c5883a 	add	r2,r2,r3
 100e7fc:	10c00017 	ldw	r3,0(r2)
 100e800:	e0bffc17 	ldw	r2,-16(fp)
 100e804:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 100e808:	00804074 	movhi	r2,257
 100e80c:	10bfd504 	addi	r2,r2,-172
 100e810:	e0fffb17 	ldw	r3,-20(fp)
 100e814:	18c00324 	muli	r3,r3,12
 100e818:	10c5883a 	add	r2,r2,r3
 100e81c:	10800104 	addi	r2,r2,4
 100e820:	10c00017 	ldw	r3,0(r2)
 100e824:	e0bffc17 	ldw	r2,-16(fp)
 100e828:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 100e82c:	00804074 	movhi	r2,257
 100e830:	10bfd504 	addi	r2,r2,-172
 100e834:	e0fffb17 	ldw	r3,-20(fp)
 100e838:	18c00324 	muli	r3,r3,12
 100e83c:	10c5883a 	add	r2,r2,r3
 100e840:	10800204 	addi	r2,r2,8
 100e844:	10c00017 	ldw	r3,0(r2)
 100e848:	e0bffc17 	ldw	r2,-16(fp)
 100e84c:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 100e850:	e13ffb17 	ldw	r4,-20(fp)
 100e854:	100d6600 	call	100d660 <alt_release_fd>
  }
} 
 100e858:	0001883a 	nop
 100e85c:	e037883a 	mov	sp,fp
 100e860:	dfc00117 	ldw	ra,4(sp)
 100e864:	df000017 	ldw	fp,0(sp)
 100e868:	dec00204 	addi	sp,sp,8
 100e86c:	f800283a 	ret

0100e870 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 100e870:	defffb04 	addi	sp,sp,-20
 100e874:	dfc00415 	stw	ra,16(sp)
 100e878:	df000315 	stw	fp,12(sp)
 100e87c:	df000304 	addi	fp,sp,12
 100e880:	e13ffd15 	stw	r4,-12(fp)
 100e884:	e17ffe15 	stw	r5,-8(fp)
 100e888:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 100e88c:	01c07fc4 	movi	r7,511
 100e890:	01800044 	movi	r6,1
 100e894:	e17ffd17 	ldw	r5,-12(fp)
 100e898:	01004074 	movhi	r4,257
 100e89c:	213fd804 	addi	r4,r4,-160
 100e8a0:	100e7ac0 	call	100e7ac <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 100e8a4:	01c07fc4 	movi	r7,511
 100e8a8:	000d883a 	mov	r6,zero
 100e8ac:	e17ffe17 	ldw	r5,-8(fp)
 100e8b0:	01004074 	movhi	r4,257
 100e8b4:	213fd504 	addi	r4,r4,-172
 100e8b8:	100e7ac0 	call	100e7ac <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 100e8bc:	01c07fc4 	movi	r7,511
 100e8c0:	01800044 	movi	r6,1
 100e8c4:	e17fff17 	ldw	r5,-4(fp)
 100e8c8:	01004074 	movhi	r4,257
 100e8cc:	213fdb04 	addi	r4,r4,-148
 100e8d0:	100e7ac0 	call	100e7ac <alt_open_fd>
}  
 100e8d4:	0001883a 	nop
 100e8d8:	e037883a 	mov	sp,fp
 100e8dc:	dfc00117 	ldw	ra,4(sp)
 100e8e0:	df000017 	ldw	fp,0(sp)
 100e8e4:	dec00204 	addi	sp,sp,8
 100e8e8:	f800283a 	ret

0100e8ec <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 100e8ec:	defffe04 	addi	sp,sp,-8
 100e8f0:	dfc00115 	stw	ra,4(sp)
 100e8f4:	df000015 	stw	fp,0(sp)
 100e8f8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 100e8fc:	d0a00b17 	ldw	r2,-32724(gp)
 100e900:	10000326 	beq	r2,zero,100e910 <alt_get_errno+0x24>
 100e904:	d0a00b17 	ldw	r2,-32724(gp)
 100e908:	103ee83a 	callr	r2
 100e90c:	00000106 	br	100e914 <alt_get_errno+0x28>
 100e910:	d0a6d204 	addi	r2,gp,-25784
}
 100e914:	e037883a 	mov	sp,fp
 100e918:	dfc00117 	ldw	ra,4(sp)
 100e91c:	df000017 	ldw	fp,0(sp)
 100e920:	dec00204 	addi	sp,sp,8
 100e924:	f800283a 	ret

0100e928 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 100e928:	defffd04 	addi	sp,sp,-12
 100e92c:	df000215 	stw	fp,8(sp)
 100e930:	df000204 	addi	fp,sp,8
 100e934:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 100e938:	e0bfff17 	ldw	r2,-4(fp)
 100e93c:	10800217 	ldw	r2,8(r2)
 100e940:	10d00034 	orhi	r3,r2,16384
 100e944:	e0bfff17 	ldw	r2,-4(fp)
 100e948:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 100e94c:	e03ffe15 	stw	zero,-8(fp)
 100e950:	00001d06 	br	100e9c8 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 100e954:	00804074 	movhi	r2,257
 100e958:	10bfd504 	addi	r2,r2,-172
 100e95c:	e0fffe17 	ldw	r3,-8(fp)
 100e960:	18c00324 	muli	r3,r3,12
 100e964:	10c5883a 	add	r2,r2,r3
 100e968:	10c00017 	ldw	r3,0(r2)
 100e96c:	e0bfff17 	ldw	r2,-4(fp)
 100e970:	10800017 	ldw	r2,0(r2)
 100e974:	1880111e 	bne	r3,r2,100e9bc <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 100e978:	00804074 	movhi	r2,257
 100e97c:	10bfd504 	addi	r2,r2,-172
 100e980:	e0fffe17 	ldw	r3,-8(fp)
 100e984:	18c00324 	muli	r3,r3,12
 100e988:	10c5883a 	add	r2,r2,r3
 100e98c:	10800204 	addi	r2,r2,8
 100e990:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 100e994:	1000090e 	bge	r2,zero,100e9bc <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 100e998:	e0bffe17 	ldw	r2,-8(fp)
 100e99c:	10c00324 	muli	r3,r2,12
 100e9a0:	00804074 	movhi	r2,257
 100e9a4:	10bfd504 	addi	r2,r2,-172
 100e9a8:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 100e9ac:	e0bfff17 	ldw	r2,-4(fp)
 100e9b0:	18800226 	beq	r3,r2,100e9bc <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 100e9b4:	00bffcc4 	movi	r2,-13
 100e9b8:	00000806 	br	100e9dc <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 100e9bc:	e0bffe17 	ldw	r2,-8(fp)
 100e9c0:	10800044 	addi	r2,r2,1
 100e9c4:	e0bffe15 	stw	r2,-8(fp)
 100e9c8:	d0a00a17 	ldw	r2,-32728(gp)
 100e9cc:	1007883a 	mov	r3,r2
 100e9d0:	e0bffe17 	ldw	r2,-8(fp)
 100e9d4:	18bfdf2e 	bgeu	r3,r2,100e954 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 100e9d8:	0005883a 	mov	r2,zero
}
 100e9dc:	e037883a 	mov	sp,fp
 100e9e0:	df000017 	ldw	fp,0(sp)
 100e9e4:	dec00104 	addi	sp,sp,4
 100e9e8:	f800283a 	ret

0100e9ec <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 100e9ec:	defff604 	addi	sp,sp,-40
 100e9f0:	dfc00915 	stw	ra,36(sp)
 100e9f4:	df000815 	stw	fp,32(sp)
 100e9f8:	df000804 	addi	fp,sp,32
 100e9fc:	e13ffd15 	stw	r4,-12(fp)
 100ea00:	e17ffe15 	stw	r5,-8(fp)
 100ea04:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 100ea08:	00bfffc4 	movi	r2,-1
 100ea0c:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 100ea10:	00bffb44 	movi	r2,-19
 100ea14:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 100ea18:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 100ea1c:	d1600804 	addi	r5,gp,-32736
 100ea20:	e13ffd17 	ldw	r4,-12(fp)
 100ea24:	100ed080 	call	100ed08 <alt_find_dev>
 100ea28:	e0bff815 	stw	r2,-32(fp)
 100ea2c:	e0bff817 	ldw	r2,-32(fp)
 100ea30:	1000051e 	bne	r2,zero,100ea48 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 100ea34:	e13ffd17 	ldw	r4,-12(fp)
 100ea38:	100ed980 	call	100ed98 <alt_find_file>
 100ea3c:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 100ea40:	00800044 	movi	r2,1
 100ea44:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 100ea48:	e0bff817 	ldw	r2,-32(fp)
 100ea4c:	10002926 	beq	r2,zero,100eaf4 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
 100ea50:	e13ff817 	ldw	r4,-32(fp)
 100ea54:	100eea00 	call	100eea0 <alt_get_fd>
 100ea58:	e0bff915 	stw	r2,-28(fp)
 100ea5c:	e0bff917 	ldw	r2,-28(fp)
 100ea60:	1000030e 	bge	r2,zero,100ea70 <open+0x84>
    {
      status = index;
 100ea64:	e0bff917 	ldw	r2,-28(fp)
 100ea68:	e0bffa15 	stw	r2,-24(fp)
 100ea6c:	00002306 	br	100eafc <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
 100ea70:	e0bff917 	ldw	r2,-28(fp)
 100ea74:	10c00324 	muli	r3,r2,12
 100ea78:	00804074 	movhi	r2,257
 100ea7c:	10bfd504 	addi	r2,r2,-172
 100ea80:	1885883a 	add	r2,r3,r2
 100ea84:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 100ea88:	e0fffe17 	ldw	r3,-8(fp)
 100ea8c:	00900034 	movhi	r2,16384
 100ea90:	10bfffc4 	addi	r2,r2,-1
 100ea94:	1886703a 	and	r3,r3,r2
 100ea98:	e0bffc17 	ldw	r2,-16(fp)
 100ea9c:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 100eaa0:	e0bffb17 	ldw	r2,-20(fp)
 100eaa4:	1000051e 	bne	r2,zero,100eabc <open+0xd0>
 100eaa8:	e13ffc17 	ldw	r4,-16(fp)
 100eaac:	100e9280 	call	100e928 <alt_file_locked>
 100eab0:	e0bffa15 	stw	r2,-24(fp)
 100eab4:	e0bffa17 	ldw	r2,-24(fp)
 100eab8:	10001016 	blt	r2,zero,100eafc <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 100eabc:	e0bff817 	ldw	r2,-32(fp)
 100eac0:	10800317 	ldw	r2,12(r2)
 100eac4:	10000826 	beq	r2,zero,100eae8 <open+0xfc>
 100eac8:	e0bff817 	ldw	r2,-32(fp)
 100eacc:	10800317 	ldw	r2,12(r2)
 100ead0:	e1ffff17 	ldw	r7,-4(fp)
 100ead4:	e1bffe17 	ldw	r6,-8(fp)
 100ead8:	e17ffd17 	ldw	r5,-12(fp)
 100eadc:	e13ffc17 	ldw	r4,-16(fp)
 100eae0:	103ee83a 	callr	r2
 100eae4:	00000106 	br	100eaec <open+0x100>
 100eae8:	0005883a 	mov	r2,zero
 100eaec:	e0bffa15 	stw	r2,-24(fp)
 100eaf0:	00000206 	br	100eafc <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
 100eaf4:	00bffb44 	movi	r2,-19
 100eaf8:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 100eafc:	e0bffa17 	ldw	r2,-24(fp)
 100eb00:	1000090e 	bge	r2,zero,100eb28 <open+0x13c>
  {
    alt_release_fd (index);  
 100eb04:	e13ff917 	ldw	r4,-28(fp)
 100eb08:	100d6600 	call	100d660 <alt_release_fd>
    ALT_ERRNO = -status;
 100eb0c:	100e8ec0 	call	100e8ec <alt_get_errno>
 100eb10:	1007883a 	mov	r3,r2
 100eb14:	e0bffa17 	ldw	r2,-24(fp)
 100eb18:	0085c83a 	sub	r2,zero,r2
 100eb1c:	18800015 	stw	r2,0(r3)
    return -1;
 100eb20:	00bfffc4 	movi	r2,-1
 100eb24:	00000106 	br	100eb2c <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
 100eb28:	e0bff917 	ldw	r2,-28(fp)
}
 100eb2c:	e037883a 	mov	sp,fp
 100eb30:	dfc00117 	ldw	ra,4(sp)
 100eb34:	df000017 	ldw	fp,0(sp)
 100eb38:	dec00204 	addi	sp,sp,8
 100eb3c:	f800283a 	ret

0100eb40 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 100eb40:	defffa04 	addi	sp,sp,-24
 100eb44:	df000515 	stw	fp,20(sp)
 100eb48:	df000504 	addi	fp,sp,20
 100eb4c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100eb50:	0005303a 	rdctl	r2,status
 100eb54:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100eb58:	e0fffc17 	ldw	r3,-16(fp)
 100eb5c:	00bfff84 	movi	r2,-2
 100eb60:	1884703a 	and	r2,r3,r2
 100eb64:	1001703a 	wrctl	status,r2
  
  return context;
 100eb68:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 100eb6c:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
 100eb70:	e0bfff17 	ldw	r2,-4(fp)
 100eb74:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 100eb78:	e0bffd17 	ldw	r2,-12(fp)
 100eb7c:	10800017 	ldw	r2,0(r2)
 100eb80:	e0fffd17 	ldw	r3,-12(fp)
 100eb84:	18c00117 	ldw	r3,4(r3)
 100eb88:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 100eb8c:	e0bffd17 	ldw	r2,-12(fp)
 100eb90:	10800117 	ldw	r2,4(r2)
 100eb94:	e0fffd17 	ldw	r3,-12(fp)
 100eb98:	18c00017 	ldw	r3,0(r3)
 100eb9c:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 100eba0:	e0bffd17 	ldw	r2,-12(fp)
 100eba4:	e0fffd17 	ldw	r3,-12(fp)
 100eba8:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 100ebac:	e0bffd17 	ldw	r2,-12(fp)
 100ebb0:	e0fffd17 	ldw	r3,-12(fp)
 100ebb4:	10c00015 	stw	r3,0(r2)
 100ebb8:	e0bffb17 	ldw	r2,-20(fp)
 100ebbc:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100ebc0:	e0bffe17 	ldw	r2,-8(fp)
 100ebc4:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 100ebc8:	0001883a 	nop
 100ebcc:	e037883a 	mov	sp,fp
 100ebd0:	df000017 	ldw	fp,0(sp)
 100ebd4:	dec00104 	addi	sp,sp,4
 100ebd8:	f800283a 	ret

0100ebdc <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 100ebdc:	defffb04 	addi	sp,sp,-20
 100ebe0:	dfc00415 	stw	ra,16(sp)
 100ebe4:	df000315 	stw	fp,12(sp)
 100ebe8:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 100ebec:	d0a00e17 	ldw	r2,-32712(gp)
 100ebf0:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 100ebf4:	d0a6d917 	ldw	r2,-25756(gp)
 100ebf8:	10800044 	addi	r2,r2,1
 100ebfc:	d0a6d915 	stw	r2,-25756(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 100ec00:	00002e06 	br	100ecbc <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 100ec04:	e0bffd17 	ldw	r2,-12(fp)
 100ec08:	10800017 	ldw	r2,0(r2)
 100ec0c:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 100ec10:	e0bffd17 	ldw	r2,-12(fp)
 100ec14:	10800403 	ldbu	r2,16(r2)
 100ec18:	10803fcc 	andi	r2,r2,255
 100ec1c:	10000426 	beq	r2,zero,100ec30 <alt_tick+0x54>
 100ec20:	d0a6d917 	ldw	r2,-25756(gp)
 100ec24:	1000021e 	bne	r2,zero,100ec30 <alt_tick+0x54>
    {
      alarm->rollover = 0;
 100ec28:	e0bffd17 	ldw	r2,-12(fp)
 100ec2c:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 100ec30:	e0bffd17 	ldw	r2,-12(fp)
 100ec34:	10800217 	ldw	r2,8(r2)
 100ec38:	d0e6d917 	ldw	r3,-25756(gp)
 100ec3c:	18801d36 	bltu	r3,r2,100ecb4 <alt_tick+0xd8>
 100ec40:	e0bffd17 	ldw	r2,-12(fp)
 100ec44:	10800403 	ldbu	r2,16(r2)
 100ec48:	10803fcc 	andi	r2,r2,255
 100ec4c:	1000191e 	bne	r2,zero,100ecb4 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 100ec50:	e0bffd17 	ldw	r2,-12(fp)
 100ec54:	10800317 	ldw	r2,12(r2)
 100ec58:	e0fffd17 	ldw	r3,-12(fp)
 100ec5c:	18c00517 	ldw	r3,20(r3)
 100ec60:	1809883a 	mov	r4,r3
 100ec64:	103ee83a 	callr	r2
 100ec68:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 100ec6c:	e0bfff17 	ldw	r2,-4(fp)
 100ec70:	1000031e 	bne	r2,zero,100ec80 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 100ec74:	e13ffd17 	ldw	r4,-12(fp)
 100ec78:	100eb400 	call	100eb40 <alt_alarm_stop>
 100ec7c:	00000d06 	br	100ecb4 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 100ec80:	e0bffd17 	ldw	r2,-12(fp)
 100ec84:	10c00217 	ldw	r3,8(r2)
 100ec88:	e0bfff17 	ldw	r2,-4(fp)
 100ec8c:	1887883a 	add	r3,r3,r2
 100ec90:	e0bffd17 	ldw	r2,-12(fp)
 100ec94:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 100ec98:	e0bffd17 	ldw	r2,-12(fp)
 100ec9c:	10c00217 	ldw	r3,8(r2)
 100eca0:	d0a6d917 	ldw	r2,-25756(gp)
 100eca4:	1880032e 	bgeu	r3,r2,100ecb4 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 100eca8:	e0bffd17 	ldw	r2,-12(fp)
 100ecac:	00c00044 	movi	r3,1
 100ecb0:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 100ecb4:	e0bffe17 	ldw	r2,-8(fp)
 100ecb8:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 100ecbc:	e0fffd17 	ldw	r3,-12(fp)
 100ecc0:	d0a00e04 	addi	r2,gp,-32712
 100ecc4:	18bfcf1e 	bne	r3,r2,100ec04 <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 100ecc8:	0001883a 	nop
}
 100eccc:	0001883a 	nop
 100ecd0:	e037883a 	mov	sp,fp
 100ecd4:	dfc00117 	ldw	ra,4(sp)
 100ecd8:	df000017 	ldw	fp,0(sp)
 100ecdc:	dec00204 	addi	sp,sp,8
 100ece0:	f800283a 	ret

0100ece4 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
 100ece4:	deffff04 	addi	sp,sp,-4
 100ece8:	df000015 	stw	fp,0(sp)
 100ecec:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 100ecf0:	000170fa 	wrctl	ienable,zero
}
 100ecf4:	0001883a 	nop
 100ecf8:	e037883a 	mov	sp,fp
 100ecfc:	df000017 	ldw	fp,0(sp)
 100ed00:	dec00104 	addi	sp,sp,4
 100ed04:	f800283a 	ret

0100ed08 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 100ed08:	defffa04 	addi	sp,sp,-24
 100ed0c:	dfc00515 	stw	ra,20(sp)
 100ed10:	df000415 	stw	fp,16(sp)
 100ed14:	df000404 	addi	fp,sp,16
 100ed18:	e13ffe15 	stw	r4,-8(fp)
 100ed1c:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 100ed20:	e0bfff17 	ldw	r2,-4(fp)
 100ed24:	10800017 	ldw	r2,0(r2)
 100ed28:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 100ed2c:	e13ffe17 	ldw	r4,-8(fp)
 100ed30:	10004e40 	call	10004e4 <strlen>
 100ed34:	10800044 	addi	r2,r2,1
 100ed38:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 100ed3c:	00000d06 	br	100ed74 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 100ed40:	e0bffc17 	ldw	r2,-16(fp)
 100ed44:	10800217 	ldw	r2,8(r2)
 100ed48:	e0fffd17 	ldw	r3,-12(fp)
 100ed4c:	180d883a 	mov	r6,r3
 100ed50:	e17ffe17 	ldw	r5,-8(fp)
 100ed54:	1009883a 	mov	r4,r2
 100ed58:	100f0200 	call	100f020 <memcmp>
 100ed5c:	1000021e 	bne	r2,zero,100ed68 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 100ed60:	e0bffc17 	ldw	r2,-16(fp)
 100ed64:	00000706 	br	100ed84 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 100ed68:	e0bffc17 	ldw	r2,-16(fp)
 100ed6c:	10800017 	ldw	r2,0(r2)
 100ed70:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 100ed74:	e0fffc17 	ldw	r3,-16(fp)
 100ed78:	e0bfff17 	ldw	r2,-4(fp)
 100ed7c:	18bff01e 	bne	r3,r2,100ed40 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 100ed80:	0005883a 	mov	r2,zero
}
 100ed84:	e037883a 	mov	sp,fp
 100ed88:	dfc00117 	ldw	ra,4(sp)
 100ed8c:	df000017 	ldw	fp,0(sp)
 100ed90:	dec00204 	addi	sp,sp,8
 100ed94:	f800283a 	ret

0100ed98 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 100ed98:	defffb04 	addi	sp,sp,-20
 100ed9c:	dfc00415 	stw	ra,16(sp)
 100eda0:	df000315 	stw	fp,12(sp)
 100eda4:	df000304 	addi	fp,sp,12
 100eda8:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 100edac:	d0a00617 	ldw	r2,-32744(gp)
 100edb0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 100edb4:	00003106 	br	100ee7c <alt_find_file+0xe4>
  {
    len = strlen(next->name);
 100edb8:	e0bffd17 	ldw	r2,-12(fp)
 100edbc:	10800217 	ldw	r2,8(r2)
 100edc0:	1009883a 	mov	r4,r2
 100edc4:	10004e40 	call	10004e4 <strlen>
 100edc8:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 100edcc:	e0bffd17 	ldw	r2,-12(fp)
 100edd0:	10c00217 	ldw	r3,8(r2)
 100edd4:	e0bffe17 	ldw	r2,-8(fp)
 100edd8:	10bfffc4 	addi	r2,r2,-1
 100eddc:	1885883a 	add	r2,r3,r2
 100ede0:	10800003 	ldbu	r2,0(r2)
 100ede4:	10803fcc 	andi	r2,r2,255
 100ede8:	1080201c 	xori	r2,r2,128
 100edec:	10bfe004 	addi	r2,r2,-128
 100edf0:	10800bd8 	cmpnei	r2,r2,47
 100edf4:	1000031e 	bne	r2,zero,100ee04 <alt_find_file+0x6c>
    {
      len -= 1;
 100edf8:	e0bffe17 	ldw	r2,-8(fp)
 100edfc:	10bfffc4 	addi	r2,r2,-1
 100ee00:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 100ee04:	e0bffe17 	ldw	r2,-8(fp)
 100ee08:	e0ffff17 	ldw	r3,-4(fp)
 100ee0c:	1885883a 	add	r2,r3,r2
 100ee10:	10800003 	ldbu	r2,0(r2)
 100ee14:	10803fcc 	andi	r2,r2,255
 100ee18:	1080201c 	xori	r2,r2,128
 100ee1c:	10bfe004 	addi	r2,r2,-128
 100ee20:	10800be0 	cmpeqi	r2,r2,47
 100ee24:	1000081e 	bne	r2,zero,100ee48 <alt_find_file+0xb0>
 100ee28:	e0bffe17 	ldw	r2,-8(fp)
 100ee2c:	e0ffff17 	ldw	r3,-4(fp)
 100ee30:	1885883a 	add	r2,r3,r2
 100ee34:	10800003 	ldbu	r2,0(r2)
 100ee38:	10803fcc 	andi	r2,r2,255
 100ee3c:	1080201c 	xori	r2,r2,128
 100ee40:	10bfe004 	addi	r2,r2,-128
 100ee44:	10000a1e 	bne	r2,zero,100ee70 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
 100ee48:	e0bffd17 	ldw	r2,-12(fp)
 100ee4c:	10800217 	ldw	r2,8(r2)
 100ee50:	e0fffe17 	ldw	r3,-8(fp)
 100ee54:	180d883a 	mov	r6,r3
 100ee58:	e17fff17 	ldw	r5,-4(fp)
 100ee5c:	1009883a 	mov	r4,r2
 100ee60:	100f0200 	call	100f020 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 100ee64:	1000021e 	bne	r2,zero,100ee70 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 100ee68:	e0bffd17 	ldw	r2,-12(fp)
 100ee6c:	00000706 	br	100ee8c <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
 100ee70:	e0bffd17 	ldw	r2,-12(fp)
 100ee74:	10800017 	ldw	r2,0(r2)
 100ee78:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 100ee7c:	e0fffd17 	ldw	r3,-12(fp)
 100ee80:	d0a00604 	addi	r2,gp,-32744
 100ee84:	18bfcc1e 	bne	r3,r2,100edb8 <alt_find_file+0x20>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 100ee88:	0005883a 	mov	r2,zero
}
 100ee8c:	e037883a 	mov	sp,fp
 100ee90:	dfc00117 	ldw	ra,4(sp)
 100ee94:	df000017 	ldw	fp,0(sp)
 100ee98:	dec00204 	addi	sp,sp,8
 100ee9c:	f800283a 	ret

0100eea0 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 100eea0:	defffc04 	addi	sp,sp,-16
 100eea4:	df000315 	stw	fp,12(sp)
 100eea8:	df000304 	addi	fp,sp,12
 100eeac:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
 100eeb0:	00bffa04 	movi	r2,-24
 100eeb4:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 100eeb8:	e03ffd15 	stw	zero,-12(fp)
 100eebc:	00001906 	br	100ef24 <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
 100eec0:	00804074 	movhi	r2,257
 100eec4:	10bfd504 	addi	r2,r2,-172
 100eec8:	e0fffd17 	ldw	r3,-12(fp)
 100eecc:	18c00324 	muli	r3,r3,12
 100eed0:	10c5883a 	add	r2,r2,r3
 100eed4:	10800017 	ldw	r2,0(r2)
 100eed8:	10000f1e 	bne	r2,zero,100ef18 <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
 100eedc:	00804074 	movhi	r2,257
 100eee0:	10bfd504 	addi	r2,r2,-172
 100eee4:	e0fffd17 	ldw	r3,-12(fp)
 100eee8:	18c00324 	muli	r3,r3,12
 100eeec:	10c5883a 	add	r2,r2,r3
 100eef0:	e0ffff17 	ldw	r3,-4(fp)
 100eef4:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 100eef8:	d0e00a17 	ldw	r3,-32728(gp)
 100eefc:	e0bffd17 	ldw	r2,-12(fp)
 100ef00:	1880020e 	bge	r3,r2,100ef0c <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
 100ef04:	e0bffd17 	ldw	r2,-12(fp)
 100ef08:	d0a00a15 	stw	r2,-32728(gp)
      }
      rc = i;
 100ef0c:	e0bffd17 	ldw	r2,-12(fp)
 100ef10:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
 100ef14:	00000606 	br	100ef30 <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 100ef18:	e0bffd17 	ldw	r2,-12(fp)
 100ef1c:	10800044 	addi	r2,r2,1
 100ef20:	e0bffd15 	stw	r2,-12(fp)
 100ef24:	e0bffd17 	ldw	r2,-12(fp)
 100ef28:	10800810 	cmplti	r2,r2,32
 100ef2c:	103fe41e 	bne	r2,zero,100eec0 <alt_get_fd+0x20>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 100ef30:	e0bffe17 	ldw	r2,-8(fp)
}
 100ef34:	e037883a 	mov	sp,fp
 100ef38:	df000017 	ldw	fp,0(sp)
 100ef3c:	dec00104 	addi	sp,sp,4
 100ef40:	f800283a 	ret

0100ef44 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
 100ef44:	defffb04 	addi	sp,sp,-20
 100ef48:	df000415 	stw	fp,16(sp)
 100ef4c:	df000404 	addi	fp,sp,16
 100ef50:	e13ffe15 	stw	r4,-8(fp)
 100ef54:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
 100ef58:	e0bfff17 	ldw	r2,-4(fp)
 100ef5c:	10840070 	cmpltui	r2,r2,4097
 100ef60:	1000021e 	bne	r2,zero,100ef6c <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
 100ef64:	00840004 	movi	r2,4096
 100ef68:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
 100ef6c:	e0fffe17 	ldw	r3,-8(fp)
 100ef70:	e0bfff17 	ldw	r2,-4(fp)
 100ef74:	1885883a 	add	r2,r3,r2
 100ef78:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 100ef7c:	e0bffe17 	ldw	r2,-8(fp)
 100ef80:	e0bffc15 	stw	r2,-16(fp)
 100ef84:	00000506 	br	100ef9c <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
 100ef88:	e0bffc17 	ldw	r2,-16(fp)
 100ef8c:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 100ef90:	e0bffc17 	ldw	r2,-16(fp)
 100ef94:	10800804 	addi	r2,r2,32
 100ef98:	e0bffc15 	stw	r2,-16(fp)
 100ef9c:	e0fffc17 	ldw	r3,-16(fp)
 100efa0:	e0bffd17 	ldw	r2,-12(fp)
 100efa4:	18bff836 	bltu	r3,r2,100ef88 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
 100efa8:	e0bffe17 	ldw	r2,-8(fp)
 100efac:	108007cc 	andi	r2,r2,31
 100efb0:	10000226 	beq	r2,zero,100efbc <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
 100efb4:	e0bffc17 	ldw	r2,-16(fp)
 100efb8:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
 100efbc:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
 100efc0:	0001883a 	nop
 100efc4:	e037883a 	mov	sp,fp
 100efc8:	df000017 	ldw	fp,0(sp)
 100efcc:	dec00104 	addi	sp,sp,4
 100efd0:	f800283a 	ret

0100efd4 <atexit>:
 100efd4:	200b883a 	mov	r5,r4
 100efd8:	000f883a 	mov	r7,zero
 100efdc:	000d883a 	mov	r6,zero
 100efe0:	0009883a 	mov	r4,zero
 100efe4:	100f09c1 	jmpi	100f09c <__register_exitproc>

0100efe8 <exit>:
 100efe8:	defffe04 	addi	sp,sp,-8
 100efec:	000b883a 	mov	r5,zero
 100eff0:	dc000015 	stw	r16,0(sp)
 100eff4:	dfc00115 	stw	ra,4(sp)
 100eff8:	2021883a 	mov	r16,r4
 100effc:	100f1b40 	call	100f1b4 <__call_exitprocs>
 100f000:	00804074 	movhi	r2,257
 100f004:	10844d04 	addi	r2,r2,4404
 100f008:	11000017 	ldw	r4,0(r2)
 100f00c:	20800f17 	ldw	r2,60(r4)
 100f010:	10000126 	beq	r2,zero,100f018 <exit+0x30>
 100f014:	103ee83a 	callr	r2
 100f018:	8009883a 	mov	r4,r16
 100f01c:	100f3340 	call	100f334 <_exit>

0100f020 <memcmp>:
 100f020:	01c000c4 	movi	r7,3
 100f024:	3980192e 	bgeu	r7,r6,100f08c <memcmp+0x6c>
 100f028:	2144b03a 	or	r2,r4,r5
 100f02c:	11c4703a 	and	r2,r2,r7
 100f030:	10000f26 	beq	r2,zero,100f070 <memcmp+0x50>
 100f034:	20800003 	ldbu	r2,0(r4)
 100f038:	28c00003 	ldbu	r3,0(r5)
 100f03c:	10c0151e 	bne	r2,r3,100f094 <memcmp+0x74>
 100f040:	31bfff84 	addi	r6,r6,-2
 100f044:	01ffffc4 	movi	r7,-1
 100f048:	00000406 	br	100f05c <memcmp+0x3c>
 100f04c:	20800003 	ldbu	r2,0(r4)
 100f050:	28c00003 	ldbu	r3,0(r5)
 100f054:	31bfffc4 	addi	r6,r6,-1
 100f058:	10c00e1e 	bne	r2,r3,100f094 <memcmp+0x74>
 100f05c:	21000044 	addi	r4,r4,1
 100f060:	29400044 	addi	r5,r5,1
 100f064:	31fff91e 	bne	r6,r7,100f04c <memcmp+0x2c>
 100f068:	0005883a 	mov	r2,zero
 100f06c:	f800283a 	ret
 100f070:	20c00017 	ldw	r3,0(r4)
 100f074:	28800017 	ldw	r2,0(r5)
 100f078:	18bfee1e 	bne	r3,r2,100f034 <memcmp+0x14>
 100f07c:	31bfff04 	addi	r6,r6,-4
 100f080:	21000104 	addi	r4,r4,4
 100f084:	29400104 	addi	r5,r5,4
 100f088:	39bff936 	bltu	r7,r6,100f070 <memcmp+0x50>
 100f08c:	303fe91e 	bne	r6,zero,100f034 <memcmp+0x14>
 100f090:	003ff506 	br	100f068 <memcmp+0x48>
 100f094:	10c5c83a 	sub	r2,r2,r3
 100f098:	f800283a 	ret

0100f09c <__register_exitproc>:
 100f09c:	defffa04 	addi	sp,sp,-24
 100f0a0:	dc000315 	stw	r16,12(sp)
 100f0a4:	04004074 	movhi	r16,257
 100f0a8:	84044d04 	addi	r16,r16,4404
 100f0ac:	80c00017 	ldw	r3,0(r16)
 100f0b0:	dc400415 	stw	r17,16(sp)
 100f0b4:	dfc00515 	stw	ra,20(sp)
 100f0b8:	18805217 	ldw	r2,328(r3)
 100f0bc:	2023883a 	mov	r17,r4
 100f0c0:	10003726 	beq	r2,zero,100f1a0 <__register_exitproc+0x104>
 100f0c4:	10c00117 	ldw	r3,4(r2)
 100f0c8:	010007c4 	movi	r4,31
 100f0cc:	20c00e16 	blt	r4,r3,100f108 <__register_exitproc+0x6c>
 100f0d0:	1a000044 	addi	r8,r3,1
 100f0d4:	8800221e 	bne	r17,zero,100f160 <__register_exitproc+0xc4>
 100f0d8:	18c00084 	addi	r3,r3,2
 100f0dc:	18c7883a 	add	r3,r3,r3
 100f0e0:	18c7883a 	add	r3,r3,r3
 100f0e4:	12000115 	stw	r8,4(r2)
 100f0e8:	10c7883a 	add	r3,r2,r3
 100f0ec:	19400015 	stw	r5,0(r3)
 100f0f0:	0005883a 	mov	r2,zero
 100f0f4:	dfc00517 	ldw	ra,20(sp)
 100f0f8:	dc400417 	ldw	r17,16(sp)
 100f0fc:	dc000317 	ldw	r16,12(sp)
 100f100:	dec00604 	addi	sp,sp,24
 100f104:	f800283a 	ret
 100f108:	00800034 	movhi	r2,0
 100f10c:	10800004 	addi	r2,r2,0
 100f110:	10002626 	beq	r2,zero,100f1ac <__register_exitproc+0x110>
 100f114:	01006404 	movi	r4,400
 100f118:	d9400015 	stw	r5,0(sp)
 100f11c:	d9800115 	stw	r6,4(sp)
 100f120:	d9c00215 	stw	r7,8(sp)
 100f124:	00000000 	call	0 <__alt_mem_SDRAM_controller-0x1000000>
 100f128:	d9400017 	ldw	r5,0(sp)
 100f12c:	d9800117 	ldw	r6,4(sp)
 100f130:	d9c00217 	ldw	r7,8(sp)
 100f134:	10001d26 	beq	r2,zero,100f1ac <__register_exitproc+0x110>
 100f138:	81000017 	ldw	r4,0(r16)
 100f13c:	10000115 	stw	zero,4(r2)
 100f140:	02000044 	movi	r8,1
 100f144:	22405217 	ldw	r9,328(r4)
 100f148:	0007883a 	mov	r3,zero
 100f14c:	12400015 	stw	r9,0(r2)
 100f150:	20805215 	stw	r2,328(r4)
 100f154:	10006215 	stw	zero,392(r2)
 100f158:	10006315 	stw	zero,396(r2)
 100f15c:	883fde26 	beq	r17,zero,100f0d8 <__register_exitproc+0x3c>
 100f160:	18c9883a 	add	r4,r3,r3
 100f164:	2109883a 	add	r4,r4,r4
 100f168:	1109883a 	add	r4,r2,r4
 100f16c:	21802215 	stw	r6,136(r4)
 100f170:	01800044 	movi	r6,1
 100f174:	12406217 	ldw	r9,392(r2)
 100f178:	30cc983a 	sll	r6,r6,r3
 100f17c:	4992b03a 	or	r9,r9,r6
 100f180:	12406215 	stw	r9,392(r2)
 100f184:	21c04215 	stw	r7,264(r4)
 100f188:	01000084 	movi	r4,2
 100f18c:	893fd21e 	bne	r17,r4,100f0d8 <__register_exitproc+0x3c>
 100f190:	11006317 	ldw	r4,396(r2)
 100f194:	218cb03a 	or	r6,r4,r6
 100f198:	11806315 	stw	r6,396(r2)
 100f19c:	003fce06 	br	100f0d8 <__register_exitproc+0x3c>
 100f1a0:	18805304 	addi	r2,r3,332
 100f1a4:	18805215 	stw	r2,328(r3)
 100f1a8:	003fc606 	br	100f0c4 <__register_exitproc+0x28>
 100f1ac:	00bfffc4 	movi	r2,-1
 100f1b0:	003fd006 	br	100f0f4 <__register_exitproc+0x58>

0100f1b4 <__call_exitprocs>:
 100f1b4:	defff504 	addi	sp,sp,-44
 100f1b8:	df000915 	stw	fp,36(sp)
 100f1bc:	dd400615 	stw	r21,24(sp)
 100f1c0:	dc800315 	stw	r18,12(sp)
 100f1c4:	dfc00a15 	stw	ra,40(sp)
 100f1c8:	ddc00815 	stw	r23,32(sp)
 100f1cc:	dd800715 	stw	r22,28(sp)
 100f1d0:	dd000515 	stw	r20,20(sp)
 100f1d4:	dcc00415 	stw	r19,16(sp)
 100f1d8:	dc400215 	stw	r17,8(sp)
 100f1dc:	dc000115 	stw	r16,4(sp)
 100f1e0:	d9000015 	stw	r4,0(sp)
 100f1e4:	2839883a 	mov	fp,r5
 100f1e8:	04800044 	movi	r18,1
 100f1ec:	057fffc4 	movi	r21,-1
 100f1f0:	00804074 	movhi	r2,257
 100f1f4:	10844d04 	addi	r2,r2,4404
 100f1f8:	12000017 	ldw	r8,0(r2)
 100f1fc:	45005217 	ldw	r20,328(r8)
 100f200:	44c05204 	addi	r19,r8,328
 100f204:	a0001c26 	beq	r20,zero,100f278 <__call_exitprocs+0xc4>
 100f208:	a0800117 	ldw	r2,4(r20)
 100f20c:	15ffffc4 	addi	r23,r2,-1
 100f210:	b8000d16 	blt	r23,zero,100f248 <__call_exitprocs+0x94>
 100f214:	14000044 	addi	r16,r2,1
 100f218:	8421883a 	add	r16,r16,r16
 100f21c:	8421883a 	add	r16,r16,r16
 100f220:	84402004 	addi	r17,r16,128
 100f224:	a463883a 	add	r17,r20,r17
 100f228:	a421883a 	add	r16,r20,r16
 100f22c:	e0001e26 	beq	fp,zero,100f2a8 <__call_exitprocs+0xf4>
 100f230:	80804017 	ldw	r2,256(r16)
 100f234:	e0801c26 	beq	fp,r2,100f2a8 <__call_exitprocs+0xf4>
 100f238:	bdffffc4 	addi	r23,r23,-1
 100f23c:	843fff04 	addi	r16,r16,-4
 100f240:	8c7fff04 	addi	r17,r17,-4
 100f244:	bd7ff91e 	bne	r23,r21,100f22c <__call_exitprocs+0x78>
 100f248:	00800034 	movhi	r2,0
 100f24c:	10800004 	addi	r2,r2,0
 100f250:	10000926 	beq	r2,zero,100f278 <__call_exitprocs+0xc4>
 100f254:	a0800117 	ldw	r2,4(r20)
 100f258:	1000301e 	bne	r2,zero,100f31c <__call_exitprocs+0x168>
 100f25c:	a0800017 	ldw	r2,0(r20)
 100f260:	10003226 	beq	r2,zero,100f32c <__call_exitprocs+0x178>
 100f264:	a009883a 	mov	r4,r20
 100f268:	98800015 	stw	r2,0(r19)
 100f26c:	00000000 	call	0 <__alt_mem_SDRAM_controller-0x1000000>
 100f270:	9d000017 	ldw	r20,0(r19)
 100f274:	a03fe41e 	bne	r20,zero,100f208 <__call_exitprocs+0x54>
 100f278:	dfc00a17 	ldw	ra,40(sp)
 100f27c:	df000917 	ldw	fp,36(sp)
 100f280:	ddc00817 	ldw	r23,32(sp)
 100f284:	dd800717 	ldw	r22,28(sp)
 100f288:	dd400617 	ldw	r21,24(sp)
 100f28c:	dd000517 	ldw	r20,20(sp)
 100f290:	dcc00417 	ldw	r19,16(sp)
 100f294:	dc800317 	ldw	r18,12(sp)
 100f298:	dc400217 	ldw	r17,8(sp)
 100f29c:	dc000117 	ldw	r16,4(sp)
 100f2a0:	dec00b04 	addi	sp,sp,44
 100f2a4:	f800283a 	ret
 100f2a8:	a0800117 	ldw	r2,4(r20)
 100f2ac:	80c00017 	ldw	r3,0(r16)
 100f2b0:	10bfffc4 	addi	r2,r2,-1
 100f2b4:	15c01426 	beq	r2,r23,100f308 <__call_exitprocs+0x154>
 100f2b8:	80000015 	stw	zero,0(r16)
 100f2bc:	183fde26 	beq	r3,zero,100f238 <__call_exitprocs+0x84>
 100f2c0:	95c8983a 	sll	r4,r18,r23
 100f2c4:	a0806217 	ldw	r2,392(r20)
 100f2c8:	a5800117 	ldw	r22,4(r20)
 100f2cc:	2084703a 	and	r2,r4,r2
 100f2d0:	10000b26 	beq	r2,zero,100f300 <__call_exitprocs+0x14c>
 100f2d4:	a0806317 	ldw	r2,396(r20)
 100f2d8:	2088703a 	and	r4,r4,r2
 100f2dc:	20000c1e 	bne	r4,zero,100f310 <__call_exitprocs+0x15c>
 100f2e0:	89400017 	ldw	r5,0(r17)
 100f2e4:	d9000017 	ldw	r4,0(sp)
 100f2e8:	183ee83a 	callr	r3
 100f2ec:	a0800117 	ldw	r2,4(r20)
 100f2f0:	15bfbf1e 	bne	r2,r22,100f1f0 <__call_exitprocs+0x3c>
 100f2f4:	98800017 	ldw	r2,0(r19)
 100f2f8:	153fcf26 	beq	r2,r20,100f238 <__call_exitprocs+0x84>
 100f2fc:	003fbc06 	br	100f1f0 <__call_exitprocs+0x3c>
 100f300:	183ee83a 	callr	r3
 100f304:	003ff906 	br	100f2ec <__call_exitprocs+0x138>
 100f308:	a5c00115 	stw	r23,4(r20)
 100f30c:	003feb06 	br	100f2bc <__call_exitprocs+0x108>
 100f310:	89000017 	ldw	r4,0(r17)
 100f314:	183ee83a 	callr	r3
 100f318:	003ff406 	br	100f2ec <__call_exitprocs+0x138>
 100f31c:	a0800017 	ldw	r2,0(r20)
 100f320:	a027883a 	mov	r19,r20
 100f324:	1029883a 	mov	r20,r2
 100f328:	003fb606 	br	100f204 <__call_exitprocs+0x50>
 100f32c:	0005883a 	mov	r2,zero
 100f330:	003ffb06 	br	100f320 <__call_exitprocs+0x16c>

0100f334 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 100f334:	defffd04 	addi	sp,sp,-12
 100f338:	df000215 	stw	fp,8(sp)
 100f33c:	df000204 	addi	fp,sp,8
 100f340:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 100f344:	0001883a 	nop
 100f348:	e0bfff17 	ldw	r2,-4(fp)
 100f34c:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 100f350:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 100f354:	10000226 	beq	r2,zero,100f360 <_exit+0x2c>
    ALT_SIM_FAIL();
 100f358:	002af070 	cmpltui	zero,zero,43969
 100f35c:	00000106 	br	100f364 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
 100f360:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 100f364:	003fff06 	br	100f364 <_exit+0x30>
