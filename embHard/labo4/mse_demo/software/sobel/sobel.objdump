
sobel.elf:     file format elf32-littlenios2
sobel.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000244

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x000118d8 memsz 0x000118d8 flags r-x
    LOAD off    0x000128f8 vaddr 0x000118f8 paddr 0x000134e4 align 2**12
         filesz 0x00001bec memsz 0x00001bec flags rw-
    LOAD off    0x000150d0 vaddr 0x000150d0 paddr 0x000150d0 align 2**12
         filesz 0x00000000 memsz 0x000001c0 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00010f10  00000244  00000244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000007a4  00011154  00011154  00012154  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001bec  000118f8  000134e4  000128f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000001c0  000150d0  000150d0  000150d0  2**2
                  ALLOC, SMALL_DATA
  6 .sdram_ctrl   00000000  00015290  00015290  000144e4  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  000144e4  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00001050  00000000  00000000  00014508  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00026a1d  00000000  00000000  00015558  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00009c35  00000000  00000000  0003bf75  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000c605  00000000  00000000  00045baa  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  0000263c  00000000  00000000  000521b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00003e8e  00000000  00000000  000547ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000190fd  00000000  00000000  0005867a  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000050  00000000  00000000  00071778  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001980  00000000  00000000  000717c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00076d12  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  00076d15  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00076d21  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00076d22  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  00076d23  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  00076d27  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  00076d2b  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  00076d2f  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  00076d38  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  00076d41  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 0000000b  00000000  00000000  00076d4a  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 0000004d  00000000  00000000  00076d55  2**0
                  CONTENTS, READONLY
 29 .jdi          00005a3e  00000000  00000000  00076da2  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     000723e4  00000000  00000000  0007c7e0  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000244 l    d  .text	00000000 .text
00011154 l    d  .rodata	00000000 .rodata
000118f8 l    d  .rwdata	00000000 .rwdata
000150d0 l    d  .bss	00000000 .bss
00015290 l    d  .sdram_ctrl	00000000 .sdram_ctrl
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 /home/deremos/Documents/Master/EmbHard/embHard/labo4/mse_demo/software/sobel_bsp//obj/HAL/src/crt0.o
0000027c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 camera.c
00000000 l    df *ABS*	00000000 dipswitch.c
00000000 l    df *ABS*	00000000 grayscale.c
00000000 l    df *ABS*	00000000 i2c.c
00000000 l    df *ABS*	00000000 lcd_simple.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 sobel.c
00000000 l    df *ABS*	00000000 vga.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-divtable.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00011646 l     O .rodata	00000010 zeroes.4404
00004bf4 l     F .text	000000bc __sbprintf
00011656 l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
00004e04 l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00006934 l     F .text	00000008 __fp_unlock
00006948 l     F .text	0000019c __sinit.part.1
00006ae4 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
00011e00 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 locale.c
00012244 l     O .rwdata	00000020 lc_ctype_charset
00012224 l     O .rwdata	00000020 lc_message_charset
00012264 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
00011688 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
00009680 l     F .text	000000fc __sprint_r.part.0
000117bc l     O .rodata	00000010 blanks.4348
000117ac l     O .rodata	00000010 zeroes.4349
0000ac0c l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
0000e714 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0000e820 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0000e84c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0000e938 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0000ea18 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0000eb04 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0000ecd8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
000134d4 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
0000ef54 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0000f088 l     F .text	00000034 alt_dev_reg
00012444 l     O .rwdata	00001060 jtag_uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0000f394 l     F .text	0000020c altera_avalon_jtag_uart_irq
0000f5a0 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0000fbd8 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_timer_ts.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_vars.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00010088 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
000104fc l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0001063c l     F .text	0000003c alt_get_errno
00010678 l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00015164 g     O .bss	00000004 alt_instruction_exception_handler
00008d18 g     F .text	00000074 _mprec_log10
00008e04 g     F .text	0000008c __any_on
0000b1a8 g     F .text	00000054 _isatty_r
00011694 g     O .rodata	00000028 __mprec_tinytens
0000ec14 g     F .text	0000007c alt_main
00002820 g     F .text	000000c0 _puts_r
00015190 g     O .bss	00000100 alt_irq
0000b1fc g     F .text	00000060 _lseek_r
000115ec g     O .rodata	00000009 gy_array
000134e4 g       *ABS*	00000000 __flash_rwdata_start
000150e0 g     O .bss	00000004 sobel_y_start
0000d240 g     F .text	00000088 .hidden __eqdf2
00015290 g       *ABS*	00000000 __alt_heap_start
000027e4 g     F .text	0000003c printf
0000b414 g     F .text	0000009c _wcrtomb_r
00009540 g     F .text	0000005c __sseek
00006c84 g     F .text	00000010 __sinit
0000b2bc g     F .text	00000140 __swbuf_r
0000774c g     F .text	0000007c _setlocale_r
00006aec g     F .text	00000068 __sfmoreglue
0000ecb4 g     F .text	00000024 __malloc_unlock
00000a7c g     F .text	00000014 LCD_Write_Command
00015110 g     O .bss	00000004 sobel_width
000150e4 g     O .bss	00000004 sobel_x_end
00015154 g     O .bss	00000004 altera_avalon_timer_ts_freq
00007c10 g     F .text	0000015c memmove
00000a90 g     F .text	00000014 LCD_Write_Data
00006c6c g     F .text	00000018 _cleanup
00007e94 g     F .text	000000a8 _Balloc
0000d2c8 g     F .text	000000dc .hidden __gtdf2
00010a34 g     F .text	00000024 altera_nios2_gen2_irq_init
00000000 g     F .entry	0000001c __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
00000598 g     F .text	00000024 cam_get_xsize
0000b14c g     F .text	0000005c _fstat_r
00015134 g     O .bss	00000004 errno
000094bc g     F .text	00000008 __seofread
000150e8 g     O .bss	00000004 sobel_x_diff
00015148 g     O .bss	00000004 alt_argv
0001b4a4 g       *ABS*	00000000 _gp
0000ef24 g     F .text	00000030 usleep
00000658 g     F .text	00000074 cam_set_image_pointer
000122c4 g     O .rwdata	00000180 alt_fd_list
00001dac g     F .text	00000010 vga_set_pointer
00010a58 g     F .text	00000090 alt_find_dev
00007ac8 g     F .text	00000148 memcpy
0000693c g     F .text	0000000c _cleanup_r
0000e52c g     F .text	000000dc .hidden __floatsidf
000105c0 g     F .text	0000007c alt_io_redirect
0000d3a4 g     F .text	000000f4 .hidden __ltdf2
00011154 g       *ABS*	00000000 __DTOR_END__
000028e0 g     F .text	00000014 puts
00010d24 g     F .text	0000009c alt_exception_cause_generated_bad_addr
000093f4 g     F .text	00000074 __fpclassifyd
00008c74 g     F .text	000000a4 __ratio
0000abf0 g     F .text	0000001c __vfiprintf_internal
0000f798 g     F .text	0000021c altera_avalon_jtag_uart_read
00001f80 g     F .text	00000014 malloc
000027b4 g     F .text	00000030 _printf_r
000008d0 g     F .text	00000008 get_grayscale_picture
00001ec4 g     F .text	00000064 .hidden __udivsi3
000111b4 g     O .rodata	00000128 lens_roll_off_tbl
00000280 g     F .text	00000318 init_camera
0000e974 g     F .text	000000a4 isatty
000116e4 g     O .rodata	000000c8 __mprec_tens
000077c8 g     F .text	0000000c __locale_charset
00010c94 g     F .text	00000090 alt_icache_flush
00015130 g     O .bss	00000004 __malloc_top_pad
000134b4 g     O .rwdata	00000004 __mb_cur_max
000077f8 g     F .text	0000000c _localeconv_r
000017a4 g     F .text	00000140 sobel_x
000082a0 g     F .text	0000003c __i2b
00007108 g     F .text	000004bc __sfvwrite_r
00000aa4 g     F .text	00000414 init_LCD
000028f4 g     F .text	00000054 _sbrk_r
000150ec g     O .bss	00000004 sobel_y_end
000005e0 g     F .text	00000078 cam_get_profiling
0000b25c g     F .text	00000060 _read_r
00015114 g     O .bss	00000004 sobel_result
000134cc g     O .rwdata	00000004 alt_max_fd
0000ae40 g     F .text	000000f0 _fclose_r
00006904 g     F .text	00000030 fflush
0001512c g     O .bss	00000004 __malloc_max_sbrked_mem
000150d8 g     O .bss	00000004 grayscale_array
0000c0ac g     F .text	000008ac .hidden __adddf3
000005bc g     F .text	00000024 cam_get_ysize
00008a1c g     F .text	0000010c __b2d
0000bb74 g     F .text	00000538 .hidden __umoddi3
0000eb40 g     F .text	000000d4 lseek
00000998 g     F .text	0000008c i2c_short_read
000134ac g     O .rwdata	00000004 _global_impure_ptr
00008e90 g     F .text	00000564 _realloc_r
00015290 g       *ABS*	00000000 __bss_end
0001040c g     F .text	000000f0 alt_iic_isr_register
0001092c g     F .text	00000108 alt_tick
0000b5fc g     F .text	00000578 .hidden __udivdi3
0000b0a8 g     F .text	00000024 _fputwc_r
000116bc g     O .rodata	00000028 __mprec_bigtens
00008084 g     F .text	00000104 __s2b
0000e608 g     F .text	000000a8 .hidden __floatunsidf
0000875c g     F .text	00000060 __mcmp
00006ca4 g     F .text	00000018 __fp_lock_all
000103c0 g     F .text	0000004c alt_ic_irq_enabled
000150d0 g     O .bss	00000004 grayscape_height
00010890 g     F .text	0000009c alt_alarm_stop
000150f0 g     O .bss	00000004 sobel_threshold_start
00015158 g     O .bss	00000004 alt_irq_active
000000fc g     F .exceptions	000000d4 alt_irq_handler
0001229c g     O .rwdata	00000028 alt_dev_null
00000f44 g     F .text	00000078 transfer_LCD_with_dma
0000139c g     F .text	000001fc sobel_complete
00010068 g     F .text	00000020 alt_dcache_flush_all
00008188 g     F .text	00000068 __hi0bits
0000e4ac g     F .text	00000080 .hidden __fixdfsi
000134e4 g       *ABS*	00000000 __ram_rwdata_end
000134c4 g     O .rwdata	00000008 alt_dev_list
0000ef90 g     F .text	000000f8 write
0000fdc4 g     F .text	00000020 alt_timestamp_freq
000118f8 g       *ABS*	00000000 __ram_rodata_end
0000e888 g     F .text	000000b0 fstat
0000d3a4 g     F .text	000000f4 .hidden __ledf2
000084d4 g     F .text	00000140 __pow5mult
00009794 g     F .text	0000145c ___vfiprintf_internal_r
00015140 g     O .bss	00000004 __nlocale_changed
00001f28 g     F .text	00000058 .hidden __umodsi3
00001d9c g     F .text	00000008 GetSobel_rgb
00015290 g       *ABS*	00000000 end
00001da4 g     F .text	00000008 GetSobelResult
000006f0 g     F .text	00000020 take_picture_blocking
00000750 g     F .text	00000014 DIPSW_get_value
00001b64 g     F .text	00000184 sobel_y_with_rgb
0000f2d4 g     F .text	000000c0 altera_avalon_jtag_uart_init
000001d0 g     F .exceptions	00000074 alt_instruction_exception_entry
000006e0 g     F .text	00000010 current_image_pointer
00011154 g       *ABS*	00000000 __CTOR_LIST__
01000000 g       *ABS*	00000000 __alt_stack_pointer
0000fc50 g     F .text	0000007c alt_avalon_timer_sc_init
0000e6b0 g     F .text	00000064 .hidden __clzsi2
0000f9b4 g     F .text	00000224 altera_avalon_jtag_uart_write
00006c94 g     F .text	00000004 __sfp_lock_acquire
000079e4 g     F .text	000000e4 memchr
000029e0 g     F .text	000021f8 ___vfprintf_internal_r
00006df8 g     F .text	00000310 _free_r
000077d4 g     F .text	00000010 __locale_mb_cur_max
00001a4c g     F .text	00000118 sobel_y
000112dc g     O .rodata	00000140 noise_reduction_reg_settings_array
00010fa0 g     F .text	00000180 __call_exitprocs
0001513c g     O .bss	00000004 __mlocale_changed
000134a4 g     O .rwdata	00000004 __malloc_sbrk_base
00000244 g     F .text	0000003c _start
0001515c g     O .bss	00000004 _alt_tick_rate
00008614 g     F .text	00000148 __lshift
00015160 g     O .bss	00000004 _alt_nticks
0000ed14 g     F .text	000000fc read
0000f0f4 g     F .text	0000007c alt_sys_init
000018e4 g     F .text	00000168 sobel_x_with_rgb
00010e88 g     F .text	00000118 __register_exitproc
000082dc g     F .text	000001f8 __multiply
0000f640 g     F .text	00000068 altera_avalon_jtag_uart_close
000118f8 g       *ABS*	00000000 __ram_rwdata_start
00011154 g       *ABS*	00000000 __ram_rodata_start
00015168 g     O .bss	00000028 __malloc_current_mallinfo
00008b28 g     F .text	0000014c __d2b
00015118 g     O .bss	00000004 sobel_height
00000710 g     F .text	00000014 enable_continues_mode
0000f170 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00001598 g     F .text	000000e4 init_sobel_arrays
00010bf0 g     F .text	000000a4 alt_get_fd
0000ff10 g     F .text	00000158 alt_busy_sleep
00000000 g       *ABS*	00000000 __alt_mem_sdram_ctrl
0000ad28 g     F .text	00000054 _close_r
00010e0c g     F .text	0000007c memcmp
0000f230 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00015290 g       *ABS*	00000000 __alt_stack_base
0000f280 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00004cb0 g     F .text	00000154 __swsetup_r
0000c958 g     F .text	000008e8 .hidden __divdf3
00006b54 g     F .text	00000118 __sfp
00008d8c g     F .text	00000078 __copybits
000119f8 g     O .rwdata	00000408 __malloc_av_
00006ca0 g     F .text	00000004 __sinit_lock_release
0000d498 g     F .text	00000718 .hidden __muldf3
00009468 g     F .text	00000054 __sread
00010ae8 g     F .text	00000108 alt_find_file
000100c4 g     F .text	000000a4 alt_dev_llist_insert
0000ec90 g     F .text	00000024 __malloc_lock
0000ee74 g     F .text	000000b0 sbrk
000068a8 g     F .text	0000005c _fflush_r
0000ad7c g     F .text	000000c4 _calloc_r
000118f8 g     O .rwdata	00000100 .hidden __divsi3_table
000150d0 g       *ABS*	00000000 __bss_start
00007d6c g     F .text	00000128 memset
00000fbc g     F .text	000003e0 main
0001514c g     O .bss	00000004 alt_envp
00015128 g     O .bss	00000004 __malloc_max_total_mem
000008c0 g     F .text	00000008 get_grayscale_width
0000f1d0 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0000b3fc g     F .text	00000018 __swbuf
0001511c g     O .bss	00000004 sobel_x_result
0000959c g     F .text	00000008 __sclose
01000000 g       *ABS*	00000000 __alt_heap_limit
0000af30 g     F .text	00000014 fclose
0000fccc g     F .text	00000078 alt_timestamp_start
00005004 g     F .text	00001688 _dtoa_r
00001fa8 g     F .text	0000080c _malloc_r
0000b570 g     F .text	00000030 __ascii_wctomb
000134d0 g     O .rwdata	00000004 alt_errno
000075c4 g     F .text	000000c4 _fwalk
00001dcc g     F .text	00000084 .hidden __divsi3
000150f4 g     O .bss	00000004 sobel_threshold_end
00006cd4 g     F .text	00000124 _malloc_trim_r
00011154 g       *ABS*	00000000 __CTOR_END__
000150d4 g     O .bss	00000004 grayscale_width
000095a4 g     F .text	000000dc strcmp
000150f8 g     O .bss	00000004 conv_grayscale_start
00000eb8 g     F .text	0000008c transfer_LCD_no_dma
00011154 g       *ABS*	00000000 __flash_rodata_start
00011154 g       *ABS*	00000000 __DTOR_LIST__
000150fc g     O .bss	00000004 sobel_y_diff
0000d240 g     F .text	00000088 .hidden __nedf2
0001141c g     O .rodata	00000118 preview_snapshot_mode_reg_settings_array
0000f0bc g     F .text	00000038 alt_irq_init
0000ee10 g     F .text	00000064 alt_release_fd
000008f0 g     F .text	000000a8 i2c_auto_detect
000117cc g     O .rodata	00000100 .hidden __clz_tab
000006cc g     F .text	00000014 current_image_valid
00015138 g     O .bss	00000004 _PathLocale
000008d8 g     F .text	00000018 i2c_busy_wait
00010dc0 g     F .text	00000014 atexit
0000acc8 g     F .text	00000060 _write_r
00007804 g     F .text	00000018 setlocale
000134b0 g     O .rwdata	00000004 _impure_ptr
00015144 g     O .bss	00000004 alt_argc
0000668c g     F .text	0000021c __sflush_r
00015150 g     O .bss	00000004 altera_avalon_timer_ts_base
000101c8 g     F .text	00000060 _do_dtors
000077f0 g     F .text	00000008 __locale_cjk_lang
00015100 g     O .bss	00000004 conv_grayscale_diff
00000020 g       .exceptions	00000000 alt_irq_entry
000089b8 g     F .text	00000064 __ulp
00006cbc g     F .text	00000018 __fp_unlock_all
00015104 g     O .bss	00000004 sobel_threshold_diff
000134bc g     O .rwdata	00000008 alt_fs_list
00015120 g     O .bss	00000004 sobel_y_result
00000a24 g     F .text	00000058 i2c_short_write
00000020 g       *ABS*	00000000 __ram_exceptions_start
000150dc g     O .bss	00000002 LCD_height
0000781c g     F .text	0000000c localeconv
0000fd44 g     F .text	00000080 alt_timestamp
00001dbc g     F .text	00000010 vga_set_swap
0001025c g     F .text	00000050 alt_ic_isr_register
00001ce8 g     F .text	000000b4 sobel_threshold
000134e4 g       *ABS*	00000000 _edata
00015290 g       *ABS*	00000000 _end
0000af44 g     F .text	00000164 __fputwc
00000244 g       *ABS*	00000000 __ram_exceptions_end
0000f6a8 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
000115f5 g     O .rodata	00000009 gx_array
00010334 g     F .text	0000008c alt_ic_irq_disable
000094c4 g     F .text	0000007c __swrite
000134a8 g     O .rwdata	00000004 __malloc_trim_threshold
000150de g     O .bss	00000002 LCD_width
00000764 g     F .text	0000015c conv_grayscale
000077e4 g     F .text	0000000c __locale_msgcharset
00010dd4 g     F .text	00000038 exit
00007688 g     F .text	000000c4 _fwalk_reent
000087bc g     F .text	000001fc __mdiff
00001e50 g     F .text	00000074 .hidden __modsi3
01000000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
00006c98 g     F .text	00000004 __sfp_lock_release
000008c8 g     F .text	00000008 get_grayscale_height
00011120 g     F .text	00000034 _exit
0000167c g     F .text	00000128 sobel_mac
0000fde4 g     F .text	0000012c alt_alarm_start
00015108 g     O .bss	00000004 conv_grayscale_end
00007828 g     F .text	000001bc __smakebuf_r
00015124 g     O .bss	00000004 sobel_rgb565
00002948 g     F .text	00000098 strlen
0001073c g     F .text	00000154 open
0000d2c8 g     F .text	000000dc .hidden __gedf2
000134b8 g     O .rwdata	00000004 __wctomb
0000977c g     F .text	00000018 __sprint_r
00010228 g     F .text	00000034 alt_icache_flush_all
000134d8 g     O .rwdata	00000004 alt_priority_mask
000102ac g     F .text	00000088 alt_ic_irq_enable
00004bd8 g     F .text	0000001c __vfprintf_internal
0000b5a0 g     F .text	0000005c _wctomb_r
0000dbb0 g     F .text	000008fc .hidden __subdf3
000081f0 g     F .text	000000b0 __lo0bits
000134dc g     O .rwdata	00000008 alt_alarm_list
00010168 g     F .text	00000060 _do_ctors
0000b4b0 g     F .text	000000c0 wcrtomb
0000e750 g     F .text	000000d0 close
0000ea80 g     F .text	00000084 alt_load
0001510c g     O .bss	00000004 sobel_x_start
0000b0cc g     F .text	00000080 fputwc
00001f94 g     F .text	00000014 free
00006c9c g     F .text	00000004 __sinit_lock_acquire
00007f64 g     F .text	00000120 __multadd
00007f3c g     F .text	00000028 _Bfree
00000724 g     F .text	0000002c new_image_available



Disassembly of section .entry:

00000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   0:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   4:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   8:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   c:	00bffd16 	blt	zero,r2,4 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  10:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
  14:	08409114 	ori	at,at,580
    jmp r1
  18:	0800683a 	jmp	at
  1c:	00000000 	call	0 <__reset>

Disassembly of section .exceptions:

00000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  44:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000fc0 	call	fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000706 	br	a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  8c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  94:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  98:	00001d00 	call	1d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  9c:	1000021e 	bne	r2,zero,a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  f8:	ef80083a 	eret

000000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  fc:	defff904 	addi	sp,sp,-28
 100:	dfc00615 	stw	ra,24(sp)
 104:	df000515 	stw	fp,20(sp)
 108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 10c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 110:	0005313a 	rdctl	r2,ipending
 114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 11c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 124:	00800044 	movi	r2,1
 128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 12c:	e0fffb17 	ldw	r3,-20(fp)
 130:	e0bffc17 	ldw	r2,-16(fp)
 134:	1884703a 	and	r2,r3,r2
 138:	10001426 	beq	r2,zero,18c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 13c:	00800074 	movhi	r2,1
 140:	10946404 	addi	r2,r2,20880
 144:	e0fffd17 	ldw	r3,-12(fp)
 148:	180690fa 	slli	r3,r3,3
 14c:	10c5883a 	add	r2,r2,r3
 150:	10c00017 	ldw	r3,0(r2)
 154:	00800074 	movhi	r2,1
 158:	10946404 	addi	r2,r2,20880
 15c:	e13ffd17 	ldw	r4,-12(fp)
 160:	200890fa 	slli	r4,r4,3
 164:	1105883a 	add	r2,r2,r4
 168:	10800104 	addi	r2,r2,4
 16c:	10800017 	ldw	r2,0(r2)
 170:	1009883a 	mov	r4,r2
 174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 17c:	0005313a 	rdctl	r2,ipending
 180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 184:	e0bfff17 	ldw	r2,-4(fp)
 188:	00000706 	br	1a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 18c:	e0bffc17 	ldw	r2,-16(fp)
 190:	1085883a 	add	r2,r2,r2
 194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 198:	e0bffd17 	ldw	r2,-12(fp)
 19c:	10800044 	addi	r2,r2,1
 1a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 1a4:	003fe106 	br	12c <alt_irq_handler+0x30>

    active = alt_irq_pending ();
 1a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 1ac:	e0bffb17 	ldw	r2,-20(fp)
 1b0:	103fdb1e 	bne	r2,zero,120 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 1b4:	0001883a 	nop
}
 1b8:	0001883a 	nop
 1bc:	e037883a 	mov	sp,fp
 1c0:	dfc00117 	ldw	ra,4(sp)
 1c4:	df000017 	ldw	fp,0(sp)
 1c8:	dec00204 	addi	sp,sp,8
 1cc:	f800283a 	ret

000001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 1d0:	defffb04 	addi	sp,sp,-20
 1d4:	dfc00415 	stw	ra,16(sp)
 1d8:	df000315 	stw	fp,12(sp)
 1dc:	df000304 	addi	fp,sp,12
 1e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
 1e4:	000531fa 	rdctl	r2,exception
 1e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
 1ec:	e0bffd17 	ldw	r2,-12(fp)
 1f0:	10801f0c 	andi	r2,r2,124
 1f4:	1004d0ba 	srli	r2,r2,2
 1f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
 1fc:	0005333a 	rdctl	r2,badaddr
 200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 204:	d0a73017 	ldw	r2,-25408(gp)
 208:	10000726 	beq	r2,zero,228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 20c:	d0a73017 	ldw	r2,-25408(gp)
 210:	e0fffd17 	ldw	r3,-12(fp)
 214:	e1bffe17 	ldw	r6,-8(fp)
 218:	e17fff17 	ldw	r5,-4(fp)
 21c:	1809883a 	mov	r4,r3
 220:	103ee83a 	callr	r2
 224:	00000206 	br	230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 22c:	0005883a 	mov	r2,zero
}
 230:	e037883a 	mov	sp,fp
 234:	dfc00117 	ldw	ra,4(sp)
 238:	df000017 	ldw	fp,0(sp)
 23c:	dec00204 	addi	sp,sp,8
 240:	f800283a 	ret

Disassembly of section .text:

00000244 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     244:	06c04034 	movhi	sp,256
    ori sp, sp, %lo(__alt_stack_pointer)
     248:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
     24c:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
     250:	d6ad2914 	ori	gp,gp,46244
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     254:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
     258:	10943414 	ori	r2,r2,20688

    movhi r3, %hi(__bss_end)
     25c:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
     260:	18d4a414 	ori	r3,r3,21136

    beq r2, r3, 1f
     264:	10c00326 	beq	r2,r3,274 <_start+0x30>

0:
    stw zero, (r2)
     268:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     26c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     270:	10fffd36 	bltu	r2,r3,268 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     274:	000ea800 	call	ea80 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     278:	000ec140 	call	ec14 <alt_main>

0000027c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     27c:	003fff06 	br	27c <alt_after_alt_main>

00000280 <init_camera>:
#include "camera.h"
#include "mt9d112.h"

void init_camera() {
	int i;
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_PRESCALE_REG,2); // Set prescaler
     280:	00804034 	movhi	r2,256
     284:	10842744 	addi	r2,r2,4253
     288:	00c00084 	movi	r3,2
     28c:	10c00025 	stbio	r3,0(r2)
	IOWR_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,CAM_Reset);
     290:	00804034 	movhi	r2,256
     294:	10841304 	addi	r2,r2,4172
     298:	00c00044 	movi	r3,1
     29c:	10c00025 	stbio	r3,0(r2)
     2a0:	008003f4 	movhi	r2,15
     2a4:	10909004 	addi	r2,r2,16960
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
     2a8:	0001883a 	nop
     2ac:	10bfffc4 	addi	r2,r2,-1

void init_camera() {
	int i;
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_PRESCALE_REG,2); // Set prescaler
	IOWR_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,CAM_Reset);
	for (i=0; i < 1000000 ; i++)
     2b0:	103ffd1e 	bne	r2,zero,2a8 <init_camera+0x28>
		asm volatile ("nop");
	IOWR_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,0);
     2b4:	00804034 	movhi	r2,256
     2b8:	10841304 	addi	r2,r2,4172
     2bc:	10000025 	stbio	zero,0(r2)
     2c0:	008003f4 	movhi	r2,15
     2c4:	10909004 	addi	r2,r2,16960
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
     2c8:	0001883a 	nop
     2cc:	10bfffc4 	addi	r2,r2,-1
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_PRESCALE_REG,2); // Set prescaler
	IOWR_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,CAM_Reset);
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	IOWR_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,0);
	for (i=0; i < 1000000 ; i++)
     2d0:	103ffd1e 	bne	r2,zero,2c8 <init_camera+0x48>
#include <stdio.h>
#include "i2c.h"
#include "camera.h"
#include "mt9d112.h"

void init_camera() {
     2d4:	defffc04 	addi	sp,sp,-16
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	IOWR_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,0);
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_MCU_BOOT,0x0001);
     2d8:	01800044 	movi	r6,1
     2dc:	014ce184 	movi	r5,13190
     2e0:	01001e04 	movi	r4,120
#include <stdio.h>
#include "i2c.h"
#include "camera.h"
#include "mt9d112.h"

void init_camera() {
     2e4:	dfc00315 	stw	ra,12(sp)
     2e8:	dc800215 	stw	r18,8(sp)
     2ec:	dc400115 	stw	r17,4(sp)
     2f0:	dc000015 	stw	r16,0(sp)
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	IOWR_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,0);
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_MCU_BOOT,0x0001);
     2f4:	0000a240 	call	a24 <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_MCU_BOOT,0x0000);
     2f8:	000d883a 	mov	r6,zero
     2fc:	014ce184 	movi	r5,13190
     300:	01001e04 	movi	r4,120
     304:	0000a240 	call	a24 <i2c_short_write>
     308:	008003f4 	movhi	r2,15
     30c:	10909004 	addi	r2,r2,16960
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
     310:	0001883a 	nop
     314:	10bfffc4 	addi	r2,r2,-1
	IOWR_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,0);
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_MCU_BOOT,0x0001);
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_MCU_BOOT,0x0000);
	for (i=0; i < 1000000 ; i++)
     318:	103ffd1e 	bne	r2,zero,310 <init_camera+0x90>
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_SENSOR_RESET,0x00C4);
     31c:	01803104 	movi	r6,196
     320:	014c0684 	movi	r5,12314
     324:	01001e04 	movi	r4,120
     328:	0000a240 	call	a24 <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_STANDBY_CONTROL,0x0008);
     32c:	01800204 	movi	r6,8
     330:	014c8084 	movi	r5,12802
     334:	01001e04 	movi	r4,120
     338:	0000a240 	call	a24 <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,0x33F4,0x031D);
     33c:	0180c744 	movi	r6,797
     340:	014cfd04 	movi	r5,13300
     344:	01001e04 	movi	r4,120
     348:	0000a240 	call	a24 <i2c_short_write>
     34c:	008000b4 	movhi	r2,2
     350:	10a1a804 	addi	r2,r2,-31072
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
     354:	0001883a 	nop
     358:	10bfffc4 	addi	r2,r2,-1
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_SENSOR_RESET,0x00C4);
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_STANDBY_CONTROL,0x0008);
	i2c_short_write(CAM_I2C_ID,0x33F4,0x031D);
	for (i=0; i < 100000 ; i++)
     35c:	103ffd1e 	bne	r2,zero,354 <init_camera+0xd4>
		asm volatile ("nop");
	/* enable PLL */
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_CLK_IN_CONTROL,0x8F09);
     360:	01a3c254 	movui	r6,36617
     364:	014d0784 	movi	r5,13342
     368:	01001e04 	movi	r4,120
     36c:	0000a240 	call	a24 <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_DIVIDERS_1,0x0150);
     370:	01805404 	movi	r6,336
     374:	014d0704 	movi	r5,13340
     378:	01001e04 	movi	r4,120
     37c:	0000a240 	call	a24 <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_CLK_IN_CONTROL,0x8F09);
     380:	01a3c254 	movui	r6,36617
     384:	014d0784 	movi	r5,13342
     388:	01001e04 	movi	r4,120
     38c:	0000a240 	call	a24 <i2c_short_write>
     390:	008000b4 	movhi	r2,2
     394:	10a1a804 	addi	r2,r2,-31072
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
     398:	0001883a 	nop
     39c:	10bfffc4 	addi	r2,r2,-1
		asm volatile ("nop");
	/* enable PLL */
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_CLK_IN_CONTROL,0x8F09);
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_DIVIDERS_1,0x0150);
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_CLK_IN_CONTROL,0x8F09);
	for (i=0; i < 100000 ; i++)
     3a0:	103ffd1e 	bne	r2,zero,398 <init_camera+0x118>
     3a4:	04000074 	movhi	r16,1
     3a8:	84050704 	addi	r16,r16,5148
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_CLK_IN_CONTROL,0x8F08);
     3ac:	01a3c214 	movui	r6,36616
     3b0:	014d0784 	movi	r5,13342
     3b4:	01001e04 	movi	r4,120
     3b8:	0000a240 	call	a24 <i2c_short_write>
     3bc:	84400084 	addi	r17,r16,2
     3c0:	84804604 	addi	r18,r16,280
	/* Set regs */
	for (i = 0 ; i < (sizeof(preview_snapshot_mode_reg_settings_array)/4); i++) {
		i2c_short_write(CAM_I2C_ID,
     3c4:	8980000b 	ldhu	r6,0(r17)
     3c8:	8140000b 	ldhu	r5,0(r16)
     3cc:	01001e04 	movi	r4,120
     3d0:	84000104 	addi	r16,r16,4
     3d4:	0000a240 	call	a24 <i2c_short_write>
     3d8:	8c400104 	addi	r17,r17,4
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_CLK_IN_CONTROL,0x8F09);
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_CLK_IN_CONTROL,0x8F08);
	/* Set regs */
	for (i = 0 ; i < (sizeof(preview_snapshot_mode_reg_settings_array)/4); i++) {
     3dc:	84bff91e 	bne	r16,r18,3c4 <init_camera+0x144>
     3e0:	04000074 	movhi	r16,1
     3e4:	8404b704 	addi	r16,r16,4828
     3e8:	84400084 	addi	r17,r16,2
     3ec:	84805004 	addi	r18,r16,320
		i2c_short_write(CAM_I2C_ID,
				preview_snapshot_mode_reg_settings_array[i][0],
				preview_snapshot_mode_reg_settings_array[i][1]);
	}
	for (i = 0 ; i < (sizeof(noise_reduction_reg_settings_array)/4); i++) {
		i2c_short_write(CAM_I2C_ID,
     3f0:	8980000b 	ldhu	r6,0(r17)
     3f4:	8140000b 	ldhu	r5,0(r16)
     3f8:	01001e04 	movi	r4,120
     3fc:	84000104 	addi	r16,r16,4
     400:	0000a240 	call	a24 <i2c_short_write>
     404:	8c400104 	addi	r17,r17,4
	for (i = 0 ; i < (sizeof(preview_snapshot_mode_reg_settings_array)/4); i++) {
		i2c_short_write(CAM_I2C_ID,
				preview_snapshot_mode_reg_settings_array[i][0],
				preview_snapshot_mode_reg_settings_array[i][1]);
	}
	for (i = 0 ; i < (sizeof(noise_reduction_reg_settings_array)/4); i++) {
     408:	943ff91e 	bne	r18,r16,3f0 <init_camera+0x170>
		i2c_short_write(CAM_I2C_ID,
				noise_reduction_reg_settings_array[i][0],
				noise_reduction_reg_settings_array[i][1]);
	}
	i2c_short_write(CAM_I2C_ID,0x35A4,0x0593);
     40c:	018164c4 	movi	r6,1427
     410:	014d6904 	movi	r5,13732
     414:	01001e04 	movi	r4,120
     418:	0000a240 	call	a24 <i2c_short_write>
// sequencer table
	i2c_short_write(CAM_I2C_ID,0x338C,0x2799);
     41c:	0189e644 	movi	r6,10137
     420:	014ce304 	movi	r5,13196
     424:	01001e04 	movi	r4,120
     428:	0000a240 	call	a24 <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,0x3390,0x6440);
     42c:	01991004 	movi	r6,25664
     430:	014ce404 	movi	r5,13200
     434:	01001e04 	movi	r4,120
     438:	0000a240 	call	a24 <i2c_short_write>
     43c:	008000b4 	movhi	r2,2
     440:	10a1a804 	addi	r2,r2,-31072
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
     444:	0001883a 	nop
     448:	10bfffc4 	addi	r2,r2,-1
	}
	i2c_short_write(CAM_I2C_ID,0x35A4,0x0593);
// sequencer table
	i2c_short_write(CAM_I2C_ID,0x338C,0x2799);
	i2c_short_write(CAM_I2C_ID,0x3390,0x6440);
	for (i=0; i < 100000 ; i++)
     44c:	103ffd1e 	bne	r2,zero,444 <init_camera+0x1c4>
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x338C,0x279B);
     450:	0189e6c4 	movi	r6,10139
     454:	014ce304 	movi	r5,13196
     458:	01001e04 	movi	r4,120
     45c:	0000a240 	call	a24 <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,0x3390,0x6440);
     460:	01991004 	movi	r6,25664
     464:	014ce404 	movi	r5,13200
     468:	01001e04 	movi	r4,120
     46c:	0000a240 	call	a24 <i2c_short_write>
     470:	008000b4 	movhi	r2,2
     474:	10a1a804 	addi	r2,r2,-31072
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
     478:	0001883a 	nop
     47c:	10bfffc4 	addi	r2,r2,-1
	i2c_short_write(CAM_I2C_ID,0x3390,0x6440);
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x338C,0x279B);
	i2c_short_write(CAM_I2C_ID,0x3390,0x6440);
	for (i=0; i < 100000 ; i++)
     480:	103ffd1e 	bne	r2,zero,478 <init_camera+0x1f8>
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x338C,0xA103);
     484:	01a840d4 	movui	r6,41219
     488:	014ce304 	movi	r5,13196
     48c:	01001e04 	movi	r4,120
     490:	0000a240 	call	a24 <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,0x3390,0x0005);
     494:	01800144 	movi	r6,5
     498:	014ce404 	movi	r5,13200
     49c:	01001e04 	movi	r4,120
     4a0:	0000a240 	call	a24 <i2c_short_write>
     4a4:	008000b4 	movhi	r2,2
     4a8:	10a1a804 	addi	r2,r2,-31072
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
     4ac:	0001883a 	nop
     4b0:	10bfffc4 	addi	r2,r2,-1
	i2c_short_write(CAM_I2C_ID,0x3390,0x6440);
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x338C,0xA103);
	i2c_short_write(CAM_I2C_ID,0x3390,0x0005);
	for (i=0; i < 100000 ; i++)
     4b4:	103ffd1e 	bne	r2,zero,4ac <init_camera+0x22c>
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x338C,0xA103);
     4b8:	01a840d4 	movui	r6,41219
     4bc:	014ce304 	movi	r5,13196
     4c0:	01001e04 	movi	r4,120
     4c4:	0000a240 	call	a24 <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,0x3390,0x0006);
     4c8:	01800184 	movi	r6,6
     4cc:	014ce404 	movi	r5,13200
     4d0:	01001e04 	movi	r4,120
     4d4:	0000a240 	call	a24 <i2c_short_write>
     4d8:	008000b4 	movhi	r2,2
     4dc:	10a1a804 	addi	r2,r2,-31072
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
     4e0:	0001883a 	nop
     4e4:	10bfffc4 	addi	r2,r2,-1
	i2c_short_write(CAM_I2C_ID,0x3390,0x0005);
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x338C,0xA103);
	i2c_short_write(CAM_I2C_ID,0x3390,0x0006);
	for (i=0; i < 100000 ; i++)
     4e8:	103ffd1e 	bne	r2,zero,4e0 <init_camera+0x260>
     4ec:	04000074 	movhi	r16,1
     4f0:	84046d04 	addi	r16,r16,4532
     4f4:	84400084 	addi	r17,r16,2
     4f8:	84804a04 	addi	r18,r16,296
		asm volatile ("nop");
	for (i = 0 ; i < (sizeof(lens_roll_off_tbl)/4); i++) {
		i2c_short_write(CAM_I2C_ID,
     4fc:	8980000b 	ldhu	r6,0(r17)
     500:	8140000b 	ldhu	r5,0(r16)
     504:	01001e04 	movi	r4,120
     508:	84000104 	addi	r16,r16,4
     50c:	0000a240 	call	a24 <i2c_short_write>
     510:	8c400104 	addi	r17,r17,4
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x338C,0xA103);
	i2c_short_write(CAM_I2C_ID,0x3390,0x0006);
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
	for (i = 0 ; i < (sizeof(lens_roll_off_tbl)/4); i++) {
     514:	943ff91e 	bne	r18,r16,4fc <init_camera+0x27c>
     518:	008003f4 	movhi	r2,15
     51c:	10909004 	addi	r2,r2,16960
		i2c_short_write(CAM_I2C_ID,
				lens_roll_off_tbl[i][0],
				lens_roll_off_tbl[i][1]);
	}
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
     520:	0001883a 	nop
     524:	10bfffc4 	addi	r2,r2,-1
	for (i = 0 ; i < (sizeof(lens_roll_off_tbl)/4); i++) {
		i2c_short_write(CAM_I2C_ID,
				lens_roll_off_tbl[i][0],
				lens_roll_off_tbl[i][1]);
	}
	for (i=0; i < 1000000 ; i++)
     528:	103ffd1e 	bne	r2,zero,520 <init_camera+0x2a0>
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x332E,0x0020);
     52c:	01800804 	movi	r6,32
     530:	014ccb84 	movi	r5,13102
     534:	01001e04 	movi	r4,120
     538:	0000a240 	call	a24 <i2c_short_write>
     53c:	008003f4 	movhi	r2,15
     540:	10909004 	addi	r2,r2,16960
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
     544:	0001883a 	nop
     548:	10bfffc4 	addi	r2,r2,-1
				lens_roll_off_tbl[i][1]);
	}
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x332E,0x0020);
	for (i=0; i < 1000000 ; i++)
     54c:	103ffd1e 	bne	r2,zero,544 <init_camera+0x2c4>
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x3404,0x0022); /* set RGB565 mode */
     550:	01800884 	movi	r6,34
     554:	014d0104 	movi	r5,13316
     558:	01001e04 	movi	r4,120
     55c:	0000a240 	call	a24 <i2c_short_write>
     560:	008003f4 	movhi	r2,15
     564:	10909004 	addi	r2,r2,16960
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
     568:	0001883a 	nop
     56c:	10bfffc4 	addi	r2,r2,-1
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x332E,0x0020);
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x3404,0x0022); /* set RGB565 mode */
	for (i=0; i < 1000000 ; i++)
     570:	103ffd1e 	bne	r2,zero,568 <init_camera+0x2e8>
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x3040,0x0027); /* mirror */
     574:	018009c4 	movi	r6,39
     578:	014c1004 	movi	r5,12352
     57c:	01001e04 	movi	r4,120
}
     580:	dfc00317 	ldw	ra,12(sp)
     584:	dc800217 	ldw	r18,8(sp)
     588:	dc400117 	ldw	r17,4(sp)
     58c:	dc000017 	ldw	r16,0(sp)
     590:	dec00404 	addi	sp,sp,16
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x3404,0x0022); /* set RGB565 mode */
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x3040,0x0027); /* mirror */
     594:	0000a241 	jmpi	a24 <i2c_short_write>

00000598 <cam_get_xsize>:
}

unsigned short cam_get_xsize(){
	unsigned char control_reg;
	do {
		control_reg = IORD_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
     598:	00c04034 	movhi	r3,256
     59c:	18c41304 	addi	r3,r3,4172
     5a0:	18800023 	ldbuio	r2,0(r3)
	} while ((control_reg&CAM_Profile_valid)==0);
     5a4:	1080010c 	andi	r2,r2,4
     5a8:	103ffd26 	beq	r2,zero,5a0 <cam_get_xsize+0x8>
	return IORD_16DIRECT(CAM_CTRL_BASE,CAM_BYTES_EACH_LINE_REG);
     5ac:	00804034 	movhi	r2,256
     5b0:	10841004 	addi	r2,r2,4160
}
     5b4:	1080002b 	ldhuio	r2,0(r2)
     5b8:	f800283a 	ret

000005bc <cam_get_ysize>:

unsigned short cam_get_ysize() {
	unsigned char control_reg;
	do {
		control_reg = IORD_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
     5bc:	00c04034 	movhi	r3,256
     5c0:	18c41304 	addi	r3,r3,4172
     5c4:	18800023 	ldbuio	r2,0(r3)
	} while ((control_reg&CAM_Profile_valid)==0);
     5c8:	1080010c 	andi	r2,r2,4
     5cc:	103ffd26 	beq	r2,zero,5c4 <cam_get_ysize+0x8>
	return IORD_16DIRECT(CAM_CTRL_BASE,CAM_LINES_EACH_FRAME_REG);
     5d0:	00804034 	movhi	r2,256
     5d4:	10841104 	addi	r2,r2,4164
}
     5d8:	1080002b 	ldhuio	r2,0(r2)
     5dc:	f800283a 	ret

000005e0 <cam_get_profiling>:

void cam_get_profiling() {
	unsigned char control_reg;
	do {
		control_reg = IORD_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
     5e0:	00c04034 	movhi	r3,256
     5e4:	18c41304 	addi	r3,r3,4172
     5e8:	18800023 	ldbuio	r2,0(r3)
	} while ((control_reg&CAM_Profile_valid)==0);
     5ec:	1080010c 	andi	r2,r2,4
     5f0:	103ffd26 	beq	r2,zero,5e8 <cam_get_profiling+0x8>
	printf("Nr. of bytes each line    : %d\n",
     5f4:	00804034 	movhi	r2,256
		control_reg = IORD_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
	} while ((control_reg&CAM_Profile_valid)==0);
	return IORD_16DIRECT(CAM_CTRL_BASE,CAM_LINES_EACH_FRAME_REG);
}

void cam_get_profiling() {
     5f8:	deffff04 	addi	sp,sp,-4
	unsigned char control_reg;
	do {
		control_reg = IORD_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
	} while ((control_reg&CAM_Profile_valid)==0);
	printf("Nr. of bytes each line    : %d\n",
     5fc:	10841004 	addi	r2,r2,4160
		control_reg = IORD_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
	} while ((control_reg&CAM_Profile_valid)==0);
	return IORD_16DIRECT(CAM_CTRL_BASE,CAM_LINES_EACH_FRAME_REG);
}

void cam_get_profiling() {
     600:	dfc00015 	stw	ra,0(sp)
	unsigned char control_reg;
	do {
		control_reg = IORD_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
	} while ((control_reg&CAM_Profile_valid)==0);
	printf("Nr. of bytes each line    : %d\n",
     604:	1140002b 	ldhuio	r5,0(r2)
     608:	01000074 	movhi	r4,1
     60c:	21045504 	addi	r4,r4,4436
     610:	297fffcc 	andi	r5,r5,65535
     614:	00027e40 	call	27e4 <printf>
			IORD_16DIRECT(CAM_CTRL_BASE,CAM_BYTES_EACH_LINE_REG));
	printf("Nr. of lines each frame   : %d\n",
     618:	00804034 	movhi	r2,256
     61c:	10841104 	addi	r2,r2,4164
     620:	1140002b 	ldhuio	r5,0(r2)
     624:	01000074 	movhi	r4,1
     628:	21045d04 	addi	r4,r4,4468
     62c:	297fffcc 	andi	r5,r5,65535
     630:	00027e40 	call	27e4 <printf>
			IORD_16DIRECT(CAM_CTRL_BASE,CAM_LINES_EACH_FRAME_REG));
	printf("Nr. of frames each second : %d\n",
     634:	00804034 	movhi	r2,256
     638:	10841204 	addi	r2,r2,4168
     63c:	1140002b 	ldhuio	r5,0(r2)
     640:	01000074 	movhi	r4,1
     644:	21046504 	addi	r4,r4,4500
     648:	297fffcc 	andi	r5,r5,65535
			IORD_16DIRECT(CAM_CTRL_BASE,CAM_FRAME_RATE_REG));
}
     64c:	dfc00017 	ldw	ra,0(sp)
     650:	dec00104 	addi	sp,sp,4
	} while ((control_reg&CAM_Profile_valid)==0);
	printf("Nr. of bytes each line    : %d\n",
			IORD_16DIRECT(CAM_CTRL_BASE,CAM_BYTES_EACH_LINE_REG));
	printf("Nr. of lines each frame   : %d\n",
			IORD_16DIRECT(CAM_CTRL_BASE,CAM_LINES_EACH_FRAME_REG));
	printf("Nr. of frames each second : %d\n",
     654:	00027e41 	jmpi	27e4 <printf>

00000658 <cam_set_image_pointer>:
			IORD_16DIRECT(CAM_CTRL_BASE,CAM_FRAME_RATE_REG));
}

void cam_set_image_pointer(char pointer_id,
		                   void *memory_pointer) {
	switch (pointer_id) {
     658:	21003fcc 	andi	r4,r4,255
     65c:	2100201c 	xori	r4,r4,128
     660:	213fe004 	addi	r4,r4,-128
     664:	00800044 	movi	r2,1
     668:	20801226 	beq	r4,r2,6b4 <cam_set_image_pointer+0x5c>
     66c:	11000c0e 	bge	r2,r4,6a0 <cam_set_image_pointer+0x48>
     670:	00800084 	movi	r2,2
     674:	20800626 	beq	r4,r2,690 <cam_set_image_pointer+0x38>
     678:	008000c4 	movi	r2,3
     67c:	2080111e 	bne	r4,r2,6c4 <cam_set_image_pointer+0x6c>
	            break;
	   case 1 : IOWR_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_2,(int)memory_pointer);
                break;
	   case 2 : IOWR_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_3,(int)memory_pointer);
                break;
	   case 3 : IOWR_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_4,(int)memory_pointer);
     680:	00804034 	movhi	r2,256
     684:	10841704 	addi	r2,r2,4188
     688:	11400035 	stwio	r5,0(r2)
     68c:	f800283a 	ret
	switch (pointer_id) {
	   case 0 : IOWR_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_1,(int)memory_pointer);
	            break;
	   case 1 : IOWR_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_2,(int)memory_pointer);
                break;
	   case 2 : IOWR_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_3,(int)memory_pointer);
     690:	00804034 	movhi	r2,256
     694:	10841604 	addi	r2,r2,4184
     698:	11400035 	stwio	r5,0(r2)
                break;
     69c:	f800283a 	ret
			IORD_16DIRECT(CAM_CTRL_BASE,CAM_FRAME_RATE_REG));
}

void cam_set_image_pointer(char pointer_id,
		                   void *memory_pointer) {
	switch (pointer_id) {
     6a0:	2000091e 	bne	r4,zero,6c8 <cam_set_image_pointer+0x70>
	   case 0 : IOWR_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_1,(int)memory_pointer);
     6a4:	00804034 	movhi	r2,256
     6a8:	10841404 	addi	r2,r2,4176
     6ac:	11400035 	stwio	r5,0(r2)
	            break;
     6b0:	f800283a 	ret
	   case 1 : IOWR_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_2,(int)memory_pointer);
     6b4:	00804034 	movhi	r2,256
     6b8:	10841504 	addi	r2,r2,4180
     6bc:	11400035 	stwio	r5,0(r2)
                break;
     6c0:	f800283a 	ret
     6c4:	f800283a 	ret
     6c8:	f800283a 	ret

000006cc <current_image_valid>:
	}
}

short current_image_valid() {
	unsigned short value;
	value = IORD_16DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
     6cc:	00804034 	movhi	r2,256
     6d0:	10841304 	addi	r2,r2,4172
     6d4:	1080002b 	ldhuio	r2,0(r2)
	return (value&CAM_Current_Image_Valid);
}
     6d8:	1080800c 	andi	r2,r2,512
     6dc:	f800283a 	ret

000006e0 <current_image_pointer>:

void *current_image_pointer() {
	return (void *)IORD_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_1);
     6e0:	00804034 	movhi	r2,256
     6e4:	10841404 	addi	r2,r2,4176
}
     6e8:	10800037 	ldwio	r2,0(r2)
     6ec:	f800283a 	ret

000006f0 <take_picture_blocking>:

void take_picture_blocking() {
	unsigned short value;
	IOWR_16DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,CAM_Take_Picture);
     6f0:	00c04034 	movhi	r3,256
     6f4:	18c41304 	addi	r3,r3,4172
     6f8:	00800204 	movi	r2,8
     6fc:	1880002d 	sthio	r2,0(r3)
	do {
		value = IORD_16DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
     700:	1880002b 	ldhuio	r2,0(r3)
	} while ((value&CAM_Busy)!= 0);
     704:	1080020c 	andi	r2,r2,8
     708:	103ffd1e 	bne	r2,zero,700 <take_picture_blocking+0x10>
}
     70c:	f800283a 	ret

00000710 <enable_continues_mode>:

void enable_continues_mode() {
	IOWR_16DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,CAM_Start_Continues);
     710:	00804034 	movhi	r2,256
     714:	10841304 	addi	r2,r2,4172
     718:	00c00404 	movi	r3,16
     71c:	10c0002d 	sthio	r3,0(r2)
     720:	f800283a 	ret

00000724 <new_image_available>:
}

char new_image_available() {
	unsigned short value;
	value = IORD_16DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
     724:	00c04034 	movhi	r3,256
     728:	18c41304 	addi	r3,r3,4172
     72c:	1880002b 	ldhuio	r2,0(r3)
	if ((value&CAM_IRQ_Generated)!=0) {
     730:	1080200c 	andi	r2,r2,128
     734:	1000021e 	bne	r2,zero,740 <new_image_available+0x1c>
		IOWR_16DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,CAM_Clear_IRQ);
		return 1;
	} else return 0;
     738:	0005883a 	mov	r2,zero
}
     73c:	f800283a 	ret

char new_image_available() {
	unsigned short value;
	value = IORD_16DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
	if ((value&CAM_IRQ_Generated)!=0) {
		IOWR_16DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,CAM_Clear_IRQ);
     740:	00804004 	movi	r2,256
     744:	1880002d 	sthio	r2,0(r3)
		return 1;
     748:	00800044 	movi	r2,1
     74c:	f800283a 	ret

00000750 <DIPSW_get_value>:

#include <system.h>
#include <io.h>

unsigned char DIPSW_get_value() {
	return IORD_8DIRECT(PIO_0_BASE,0)^0xFF;
     750:	00804034 	movhi	r2,256
     754:	10842804 	addi	r2,r2,4256
     758:	10800023 	ldbuio	r2,0(r2)
}
     75c:	0084303a 	nor	r2,zero,r2
     760:	f800283a 	ret

00000764 <conv_grayscale>:
		            int height) {
	int x,y,gray;
	unsigned short *pixels = (unsigned short *)picture , rgb;
	grayscale_width = width;
	grayscape_height = height;
	if (grayscale_array != NULL)
     764:	d0a70d17 	ldw	r2,-25548(gp)
int grayscale_width = 0;
int grayscape_height = 0;

void conv_grayscale(void *picture,
		            int width,
		            int height) {
     768:	defff404 	addi	sp,sp,-48
     76c:	dc400315 	stw	r17,12(sp)
     770:	dc000215 	stw	r16,8(sp)
     774:	dfc00b15 	stw	ra,44(sp)
     778:	df000a15 	stw	fp,40(sp)
     77c:	ddc00915 	stw	r23,36(sp)
     780:	dd800815 	stw	r22,32(sp)
     784:	dd400715 	stw	r21,28(sp)
     788:	dd000615 	stw	r20,24(sp)
     78c:	dcc00515 	stw	r19,20(sp)
     790:	dc800415 	stw	r18,16(sp)
     794:	d9800015 	stw	r6,0(sp)
	int x,y,gray;
	unsigned short *pixels = (unsigned short *)picture , rgb;
	grayscale_width = width;
     798:	d1670c15 	stw	r5,-25552(gp)
	grayscape_height = height;
     79c:	d1a70b15 	stw	r6,-25556(gp)
int grayscale_width = 0;
int grayscape_height = 0;

void conv_grayscale(void *picture,
		            int width,
		            int height) {
     7a0:	2821883a 	mov	r16,r5
     7a4:	2023883a 	mov	r17,r4
	int x,y,gray;
	unsigned short *pixels = (unsigned short *)picture , rgb;
	grayscale_width = width;
	grayscape_height = height;
	if (grayscale_array != NULL)
     7a8:	10000226 	beq	r2,zero,7b4 <conv_grayscale+0x50>
		free(grayscale_array);
     7ac:	1009883a 	mov	r4,r2
     7b0:	0001f940 	call	1f94 <free>
	grayscale_array = (unsigned char *) malloc(width*height);
     7b4:	d8c00017 	ldw	r3,0(sp)
     7b8:	80c9383a 	mul	r4,r16,r3
     7bc:	0001f800 	call	1f80 <malloc>
	for (y = 0 ; y < height ; y++) {
     7c0:	d8c00017 	ldw	r3,0(sp)
	unsigned short *pixels = (unsigned short *)picture , rgb;
	grayscale_width = width;
	grayscape_height = height;
	if (grayscale_array != NULL)
		free(grayscale_array);
	grayscale_array = (unsigned char *) malloc(width*height);
     7c4:	d0a70d15 	stw	r2,-25548(gp)
	for (y = 0 ; y < height ; y++) {
     7c8:	00c0310e 	bge	zero,r3,890 <conv_grayscale+0x12c>
			rgb = pixels[y*width+x];
			gray = (((rgb>>11)&0x1F)<<3)*21; // red part
			gray += (((rgb>>5)&0x3F)<<2)*72; // green part
			gray += (((rgb>>0)&0x1F)<<3)*7; // blue part
			gray /= 100;
			IOWR_8DIRECT(grayscale_array,y*width+x,gray);
     7cc:	05000074 	movhi	r20,1
     7d0:	8407883a 	add	r3,r16,r16
     7d4:	a5063e04 	addi	r20,r20,6392
     7d8:	d8c00115 	stw	r3,4(sp)
	grayscale_width = width;
	grayscape_height = height;
	if (grayscale_array != NULL)
		free(grayscale_array);
	grayscale_array = (unsigned char *) malloc(width*height);
	for (y = 0 ; y < height ; y++) {
     7dc:	802f883a 	mov	r23,r16
     7e0:	0025883a 	mov	r18,zero
			rgb = pixels[y*width+x];
			gray = (((rgb>>11)&0x1F)<<3)*21; // red part
			gray += (((rgb>>5)&0x3F)<<2)*72; // green part
			gray += (((rgb>>0)&0x1F)<<3)*7; // blue part
			gray /= 100;
			IOWR_8DIRECT(grayscale_array,y*width+x,gray);
     7e4:	070003c4 	movi	fp,15
	grayscape_height = height;
	if (grayscale_array != NULL)
		free(grayscale_array);
	grayscale_array = (unsigned char *) malloc(width*height);
	for (y = 0 ; y < height ; y++) {
		for (x = 0 ; x < width ; x++) {
     7e8:	0400230e 	bge	zero,r16,878 <conv_grayscale+0x114>
     7ec:	bc2bc83a 	sub	r21,r23,r16
     7f0:	882d883a 	mov	r22,r17
     7f4:	00000506 	br	80c <conv_grayscale+0xa8>
			rgb = pixels[y*width+x];
			gray = (((rgb>>11)&0x1F)<<3)*21; // red part
			gray += (((rgb>>5)&0x3F)<<2)*72; // green part
			gray += (((rgb>>0)&0x1F)<<3)*7; // blue part
			gray /= 100;
			IOWR_8DIRECT(grayscale_array,y*width+x,gray);
     7f8:	10800003 	ldbu	r2,0(r2)
     7fc:	98800025 	stbio	r2,0(r19)
     800:	ad400044 	addi	r21,r21,1
     804:	b5800084 	addi	r22,r22,2
	grayscape_height = height;
	if (grayscale_array != NULL)
		free(grayscale_array);
	grayscale_array = (unsigned char *) malloc(width*height);
	for (y = 0 ; y < height ; y++) {
		for (x = 0 ; x < width ; x++) {
     808:	bd401b26 	beq	r23,r21,878 <conv_grayscale+0x114>
			rgb = pixels[y*width+x];
			gray = (((rgb>>11)&0x1F)<<3)*21; // red part
     80c:	b100000b 	ldhu	r4,0(r22)
			gray += (((rgb>>5)&0x3F)<<2)*72; // green part
			gray += (((rgb>>0)&0x1F)<<3)*7; // blue part
			gray /= 100;
			IOWR_8DIRECT(grayscale_array,y*width+x,gray);
     810:	01401904 	movi	r5,100
		free(grayscale_array);
	grayscale_array = (unsigned char *) malloc(width*height);
	for (y = 0 ; y < height ; y++) {
		for (x = 0 ; x < width ; x++) {
			rgb = pixels[y*width+x];
			gray = (((rgb>>11)&0x1F)<<3)*21; // red part
     814:	2006d2fa 	srli	r3,r4,11
			gray += (((rgb>>5)&0x3F)<<2)*72; // green part
     818:	2004d17a 	srli	r2,r4,5
			gray += (((rgb>>0)&0x1F)<<3)*7; // blue part
     81c:	200890fa 	slli	r4,r4,3
		free(grayscale_array);
	grayscale_array = (unsigned char *) malloc(width*height);
	for (y = 0 ; y < height ; y++) {
		for (x = 0 ; x < width ; x++) {
			rgb = pixels[y*width+x];
			gray = (((rgb>>11)&0x1F)<<3)*21; // red part
     820:	180690fa 	slli	r3,r3,3
			gray += (((rgb>>5)&0x3F)<<2)*72; // green part
     824:	1085883a 	add	r2,r2,r2
     828:	1085883a 	add	r2,r2,r2
     82c:	10803fcc 	andi	r2,r2,255
		free(grayscale_array);
	grayscale_array = (unsigned char *) malloc(width*height);
	for (y = 0 ; y < height ; y++) {
		for (x = 0 ; x < width ; x++) {
			rgb = pixels[y*width+x];
			gray = (((rgb>>11)&0x1F)<<3)*21; // red part
     830:	18c00564 	muli	r3,r3,21
			gray += (((rgb>>5)&0x3F)<<2)*72; // green part
     834:	10801224 	muli	r2,r2,72
			gray += (((rgb>>0)&0x1F)<<3)*7; // blue part
     838:	21003fcc 	andi	r4,r4,255
     83c:	210001e4 	muli	r4,r4,7
	grayscale_array = (unsigned char *) malloc(width*height);
	for (y = 0 ; y < height ; y++) {
		for (x = 0 ; x < width ; x++) {
			rgb = pixels[y*width+x];
			gray = (((rgb>>11)&0x1F)<<3)*21; // red part
			gray += (((rgb>>5)&0x3F)<<2)*72; // green part
     840:	10c5883a 	add	r2,r2,r3
			gray += (((rgb>>0)&0x1F)<<3)*7; // blue part
			gray /= 100;
			IOWR_8DIRECT(grayscale_array,y*width+x,gray);
     844:	d0e70d17 	ldw	r3,-25548(gp)
	for (y = 0 ; y < height ; y++) {
		for (x = 0 ; x < width ; x++) {
			rgb = pixels[y*width+x];
			gray = (((rgb>>11)&0x1F)<<3)*21; // red part
			gray += (((rgb>>5)&0x3F)<<2)*72; // green part
			gray += (((rgb>>0)&0x1F)<<3)*7; // blue part
     848:	2089883a 	add	r4,r4,r2
			gray /= 100;
			IOWR_8DIRECT(grayscale_array,y*width+x,gray);
     84c:	2004913a 	slli	r2,r4,4
     850:	214eb03a 	or	r7,r4,r5
     854:	1d67883a 	add	r19,r3,r21
     858:	1144b03a 	or	r2,r2,r5
     85c:	1505883a 	add	r2,r2,r20
     860:	e1ffe52e 	bgeu	fp,r7,7f8 <conv_grayscale+0x94>
     864:	0001dcc0 	call	1dcc <__divsi3>
     868:	98800025 	stbio	r2,0(r19)
     86c:	ad400044 	addi	r21,r21,1
     870:	b5800084 	addi	r22,r22,2
	grayscape_height = height;
	if (grayscale_array != NULL)
		free(grayscale_array);
	grayscale_array = (unsigned char *) malloc(width*height);
	for (y = 0 ; y < height ; y++) {
		for (x = 0 ; x < width ; x++) {
     874:	bd7fe51e 	bne	r23,r21,80c <conv_grayscale+0xa8>
     878:	d8c00117 	ldw	r3,4(sp)
	grayscale_width = width;
	grayscape_height = height;
	if (grayscale_array != NULL)
		free(grayscale_array);
	grayscale_array = (unsigned char *) malloc(width*height);
	for (y = 0 ; y < height ; y++) {
     87c:	94800044 	addi	r18,r18,1
     880:	bc2f883a 	add	r23,r23,r16
     884:	88e3883a 	add	r17,r17,r3
     888:	d8c00017 	ldw	r3,0(sp)
     88c:	1cbfd61e 	bne	r3,r18,7e8 <conv_grayscale+0x84>
			gray += (((rgb>>0)&0x1F)<<3)*7; // blue part
			gray /= 100;
			IOWR_8DIRECT(grayscale_array,y*width+x,gray);
		}
	}
}
     890:	dfc00b17 	ldw	ra,44(sp)
     894:	df000a17 	ldw	fp,40(sp)
     898:	ddc00917 	ldw	r23,36(sp)
     89c:	dd800817 	ldw	r22,32(sp)
     8a0:	dd400717 	ldw	r21,28(sp)
     8a4:	dd000617 	ldw	r20,24(sp)
     8a8:	dcc00517 	ldw	r19,20(sp)
     8ac:	dc800417 	ldw	r18,16(sp)
     8b0:	dc400317 	ldw	r17,12(sp)
     8b4:	dc000217 	ldw	r16,8(sp)
     8b8:	dec00c04 	addi	sp,sp,48
     8bc:	f800283a 	ret

000008c0 <get_grayscale_width>:


int get_grayscale_width() {
	return grayscale_width;
}
     8c0:	d0a70c17 	ldw	r2,-25552(gp)
     8c4:	f800283a 	ret

000008c8 <get_grayscale_height>:

int get_grayscale_height() {
	return grayscape_height;
}
     8c8:	d0a70b17 	ldw	r2,-25556(gp)
     8cc:	f800283a 	ret

000008d0 <get_grayscale_picture>:

unsigned char *get_grayscale_picture() {
	return grayscale_array;
}
     8d0:	d0a70d17 	ldw	r2,-25548(gp)
     8d4:	f800283a 	ret

000008d8 <i2c_busy_wait>:
#include "i2c.h"

void i2c_busy_wait() {
	int busy;
	do {
		busy = IORD_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG);
     8d8:	00c04034 	movhi	r3,256
     8dc:	18c42704 	addi	r3,r3,4252
     8e0:	18800037 	ldwio	r2,0(r3)
	} while ((busy&(I2C_Busy_Flag|I2C_Autodetect_Busy_Flag))!=0);
     8e4:	108000cc 	andi	r2,r2,3
     8e8:	103ffd1e 	bne	r2,zero,8e0 <i2c_busy_wait+0x8>
}
     8ec:	f800283a 	ret

000008f0 <i2c_auto_detect>:
#include "i2c.h"

void i2c_busy_wait() {
	int busy;
	do {
		busy = IORD_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG);
     8f0:	01004034 	movhi	r4,256
     8f4:	21042704 	addi	r4,r4,4252
     8f8:	00c04034 	movhi	r3,256
     8fc:	18c42704 	addi	r3,r3,4252
     900:	20800037 	ldwio	r2,0(r4)
	} while ((busy&(I2C_Busy_Flag|I2C_Autodetect_Busy_Flag))!=0);
     904:	108000cc 	andi	r2,r2,3
     908:	103ffb1e 	bne	r2,zero,8f8 <i2c_auto_detect+0x8>
}

void i2c_auto_detect() {
	int nrdef,loop,value;
    i2c_busy_wait();
    IOWR_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,I2C_Autodetect);
     90c:	00800104 	movi	r2,4
     910:	18800035 	stwio	r2,0(r3)
#include "i2c.h"

void i2c_busy_wait() {
	int busy;
	do {
		busy = IORD_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG);
     914:	18800037 	ldwio	r2,0(r3)
	} while ((busy&(I2C_Busy_Flag|I2C_Autodetect_Busy_Flag))!=0);
     918:	108000cc 	andi	r2,r2,3
     91c:	103ffd1e 	bne	r2,zero,914 <i2c_auto_detect+0x24>
void i2c_auto_detect() {
	int nrdef,loop,value;
    i2c_busy_wait();
    IOWR_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,I2C_Autodetect);
    i2c_busy_wait();
    nrdef = IORD_32DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG);
     920:	00804034 	movhi	r2,256
	do {
		busy = IORD_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG);
	} while ((busy&(I2C_Busy_Flag|I2C_Autodetect_Busy_Flag))!=0);
}

void i2c_auto_detect() {
     924:	defffc04 	addi	sp,sp,-16
	int nrdef,loop,value;
    i2c_busy_wait();
    IOWR_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,I2C_Autodetect);
    i2c_busy_wait();
    nrdef = IORD_32DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG);
     928:	10842504 	addi	r2,r2,4244
	do {
		busy = IORD_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG);
	} while ((busy&(I2C_Busy_Flag|I2C_Autodetect_Busy_Flag))!=0);
}

void i2c_auto_detect() {
     92c:	dfc00315 	stw	ra,12(sp)
     930:	dc800215 	stw	r18,8(sp)
     934:	dc400115 	stw	r17,4(sp)
     938:	dc000015 	stw	r16,0(sp)
	int nrdef,loop,value;
    i2c_busy_wait();
    IOWR_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,I2C_Autodetect);
    i2c_busy_wait();
    nrdef = IORD_32DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG);
     93c:	14800037 	ldwio	r18,0(r2)
    printf("Number of I2C devices detected: %d\n",nrdef);
     940:	01000074 	movhi	r4,1
     944:	21054d04 	addi	r4,r4,5428
     948:	900b883a 	mov	r5,r18
    for (loop = 0 ; loop < nrdef ; loop++) {
     94c:	0021883a 	mov	r16,zero
	int nrdef,loop,value;
    i2c_busy_wait();
    IOWR_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,I2C_Autodetect);
    i2c_busy_wait();
    nrdef = IORD_32DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG);
    printf("Number of I2C devices detected: %d\n",nrdef);
     950:	00027e40 	call	27e4 <printf>
    for (loop = 0 ; loop < nrdef ; loop++) {
     954:	04800a0e 	bge	zero,r18,980 <i2c_auto_detect+0x90>
    	IOWR_32DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG,loop);
     958:	04404034 	movhi	r17,256
     95c:	8c442404 	addi	r17,r17,4240
     960:	8c000035 	stwio	r16,0(r17)
    	value = IORD_32DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG);
    	printf("Device nr. %d has Address: 0x%02X\n",loop,value);
     964:	89800037 	ldwio	r6,0(r17)
     968:	01000074 	movhi	r4,1
     96c:	800b883a 	mov	r5,r16
     970:	21055604 	addi	r4,r4,5464
    i2c_busy_wait();
    IOWR_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,I2C_Autodetect);
    i2c_busy_wait();
    nrdef = IORD_32DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG);
    printf("Number of I2C devices detected: %d\n",nrdef);
    for (loop = 0 ; loop < nrdef ; loop++) {
     974:	84000044 	addi	r16,r16,1
    	IOWR_32DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG,loop);
    	value = IORD_32DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG);
    	printf("Device nr. %d has Address: 0x%02X\n",loop,value);
     978:	00027e40 	call	27e4 <printf>
    i2c_busy_wait();
    IOWR_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,I2C_Autodetect);
    i2c_busy_wait();
    nrdef = IORD_32DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG);
    printf("Number of I2C devices detected: %d\n",nrdef);
    for (loop = 0 ; loop < nrdef ; loop++) {
     97c:	943ff81e 	bne	r18,r16,960 <i2c_auto_detect+0x70>
    	IOWR_32DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG,loop);
    	value = IORD_32DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG);
    	printf("Device nr. %d has Address: 0x%02X\n",loop,value);
    }
}
     980:	dfc00317 	ldw	ra,12(sp)
     984:	dc800217 	ldw	r18,8(sp)
     988:	dc400117 	ldw	r17,4(sp)
     98c:	dc000017 	ldw	r16,0(sp)
     990:	dec00404 	addi	sp,sp,16
     994:	f800283a 	ret

00000998 <i2c_short_read>:
#include "i2c.h"

void i2c_busy_wait() {
	int busy;
	do {
		busy = IORD_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG);
     998:	01804034 	movhi	r6,256
     99c:	31842704 	addi	r6,r6,4252
     9a0:	00c04034 	movhi	r3,256
     9a4:	18c42704 	addi	r3,r3,4252
     9a8:	30800037 	ldwio	r2,0(r6)
	} while ((busy&(I2C_Busy_Flag|I2C_Autodetect_Busy_Flag))!=0);
     9ac:	108000cc 	andi	r2,r2,3
     9b0:	103ffb1e 	bne	r2,zero,9a0 <i2c_short_read+0x8>
}

unsigned int i2c_short_read(unsigned char device_id,
		                    unsigned short address) {
	i2c_busy_wait();
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG,device_id);
     9b4:	00804034 	movhi	r2,256
     9b8:	21003fcc 	andi	r4,r4,255
     9bc:	10842404 	addi	r2,r2,4240
     9c0:	11000025 	stbio	r4,0(r2)
	IOWR_16DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG,address);
     9c4:	00804034 	movhi	r2,256
     9c8:	10842504 	addi	r2,r2,4244
     9cc:	1140002d 	sthio	r5,0(r2)
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,
     9d0:	008010c4 	movi	r2,67
     9d4:	18800025 	stbio	r2,0(r3)
#include "i2c.h"

void i2c_busy_wait() {
	int busy;
	do {
		busy = IORD_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG);
     9d8:	180b883a 	mov	r5,r3
     9dc:	00c04034 	movhi	r3,256
     9e0:	18c42704 	addi	r3,r3,4252
     9e4:	28800037 	ldwio	r2,0(r5)
	} while ((busy&(I2C_Busy_Flag|I2C_Autodetect_Busy_Flag))!=0);
     9e8:	108000cc 	andi	r2,r2,3
     9ec:	103ffb1e 	bne	r2,zero,9dc <i2c_short_read+0x44>
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG,device_id);
	IOWR_16DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG,address);
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,
			     I2C_2Byte_Transfer|I2C_Start|I2C_Short_Transfer);
	i2c_busy_wait();
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG,device_id+1);
     9f0:	00804034 	movhi	r2,256
     9f4:	21000044 	addi	r4,r4,1
     9f8:	10842404 	addi	r2,r2,4240
     9fc:	11000025 	stbio	r4,0(r2)
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,
     a00:	00800884 	movi	r2,34
     a04:	18800025 	stbio	r2,0(r3)
#include "i2c.h"

void i2c_busy_wait() {
	int busy;
	do {
		busy = IORD_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG);
     a08:	18800037 	ldwio	r2,0(r3)
	} while ((busy&(I2C_Busy_Flag|I2C_Autodetect_Busy_Flag))!=0);
     a0c:	108000cc 	andi	r2,r2,3
     a10:	103ffd1e 	bne	r2,zero,a08 <i2c_short_read+0x70>
	i2c_busy_wait();
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG,device_id+1);
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,
			     I2C_Start|I2C_4Byte_Read);
	i2c_busy_wait();
	return IORD_32DIRECT(I2C_CTRL_BASE,I2C_DATA_REG);
     a14:	00804034 	movhi	r2,256
     a18:	10842604 	addi	r2,r2,4248
}
     a1c:	10800037 	ldwio	r2,0(r2)
     a20:	f800283a 	ret

00000a24 <i2c_short_write>:
#include "i2c.h"

void i2c_busy_wait() {
	int busy;
	do {
		busy = IORD_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG);
     a24:	01c04034 	movhi	r7,256
     a28:	39c42704 	addi	r7,r7,4252
     a2c:	00c04034 	movhi	r3,256
     a30:	18c42704 	addi	r3,r3,4252
     a34:	38800037 	ldwio	r2,0(r7)
	} while ((busy&(I2C_Busy_Flag|I2C_Autodetect_Busy_Flag))!=0);
     a38:	108000cc 	andi	r2,r2,3
     a3c:	103ffb1e 	bne	r2,zero,a2c <i2c_short_write+0x8>

void i2c_short_write(unsigned char device_id,
		             unsigned short address,
		             unsigned short data) {
	i2c_busy_wait();
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG,device_id);
     a40:	00804034 	movhi	r2,256
     a44:	10842404 	addi	r2,r2,4240
     a48:	11000025 	stbio	r4,0(r2)
	IOWR_16DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG,address);
     a4c:	00804034 	movhi	r2,256
     a50:	10842504 	addi	r2,r2,4244
     a54:	1140002d 	sthio	r5,0(r2)
	IOWR_16DIRECT(I2C_CTRL_BASE,I2C_DATA_REG,data);
     a58:	00804034 	movhi	r2,256
     a5c:	10842604 	addi	r2,r2,4248
     a60:	1180002d 	sthio	r6,0(r2)
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,
     a64:	00801084 	movi	r2,66
     a68:	18800025 	stbio	r2,0(r3)
#include "i2c.h"

void i2c_busy_wait() {
	int busy;
	do {
		busy = IORD_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG);
     a6c:	18800037 	ldwio	r2,0(r3)
	} while ((busy&(I2C_Busy_Flag|I2C_Autodetect_Busy_Flag))!=0);
     a70:	108000cc 	andi	r2,r2,3
     a74:	103ffd1e 	bne	r2,zero,a6c <i2c_short_write+0x48>
	IOWR_16DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG,address);
	IOWR_16DIRECT(I2C_CTRL_BASE,I2C_DATA_REG,data);
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,
			     I2C_Start|I2C_Short_Transfer);
	i2c_busy_wait();
}
     a78:	f800283a 	ret

00000a7c <LCD_Write_Command>:

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     a7c:	00804034 	movhi	r2,256
     a80:	10841804 	addi	r2,r2,4192
     a84:	1100002d 	sthio	r4,0(r2)
	usleep(10);
     a88:	01000284 	movi	r4,10
     a8c:	000ef241 	jmpi	ef24 <usleep>

00000a90 <LCD_Write_Data>:
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     a90:	00804034 	movhi	r2,256
     a94:	10841904 	addi	r2,r2,4196
     a98:	1100002d 	sthio	r4,0(r2)
	usleep(10);
     a9c:	01000284 	movi	r4,10
     aa0:	000ef241 	jmpi	ef24 <usleep>

00000aa4 <init_LCD>:
}


void init_LCD() {
     aa4:	defff704 	addi	sp,sp,-36
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_CONTROL_REG,
     aa8:	00804034 	movhi	r2,256
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
	usleep(10);
}


void init_LCD() {
     aac:	dd400515 	stw	r21,20(sp)
     ab0:	dfc00815 	stw	ra,32(sp)
     ab4:	ddc00715 	stw	r23,28(sp)
     ab8:	dd800615 	stw	r22,24(sp)
     abc:	dd000415 	stw	r20,16(sp)
     ac0:	dcc00315 	stw	r19,12(sp)
     ac4:	dc800215 	stw	r18,8(sp)
     ac8:	dc400115 	stw	r17,4(sp)
     acc:	dc000015 	stw	r16,0(sp)
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_CONTROL_REG,
     ad0:	05400084 	movi	r21,2
     ad4:	10841a04 	addi	r2,r2,4200
     ad8:	1540002d 	sthio	r21,0(r2)

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     adc:	04804034 	movhi	r18,256
     ae0:	94841804 	addi	r18,r18,4192
     ae4:	00800a04 	movi	r2,40
     ae8:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     aec:	04000284 	movi	r16,10
     af0:	8009883a 	mov	r4,r16
     af4:	000ef240 	call	ef24 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     af8:	05c00444 	movi	r23,17
     afc:	95c0002d 	sthio	r23,0(r18)
	usleep(10);
     b00:	8009883a 	mov	r4,r16
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     b04:	04404034 	movhi	r17,256
     b08:	8c441904 	addi	r17,r17,4196
unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
     b0c:	000ef240 	call	ef24 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     b10:	0027883a 	mov	r19,zero
     b14:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
     b18:	8009883a 	mov	r4,r16
     b1c:	000ef240 	call	ef24 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     b20:	008032c4 	movi	r2,203
     b24:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     b28:	8009883a 	mov	r4,r16
     b2c:	000ef240 	call	ef24 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     b30:	00800e44 	movi	r2,57
     b34:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     b38:	8009883a 	mov	r4,r16
     b3c:	000ef240 	call	ef24 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     b40:	00800b04 	movi	r2,44
     b44:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     b48:	8009883a 	mov	r4,r16
     b4c:	000ef240 	call	ef24 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     b50:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
     b54:	8009883a 	mov	r4,r16
     b58:	000ef240 	call	ef24 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     b5c:	00800d04 	movi	r2,52
     b60:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     b64:	8009883a 	mov	r4,r16
     b68:	000ef240 	call	ef24 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     b6c:	8d40002d 	sthio	r21,0(r17)
	usleep(10);
     b70:	8009883a 	mov	r4,r16
     b74:	000ef240 	call	ef24 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     b78:	008033c4 	movi	r2,207
     b7c:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     b80:	8009883a 	mov	r4,r16
     b84:	000ef240 	call	ef24 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     b88:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
     b8c:	8009883a 	mov	r4,r16
     b90:	000ef240 	call	ef24 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     b94:	05802044 	movi	r22,129
     b98:	8d80002d 	sthio	r22,0(r17)
	usleep(10);
     b9c:	8009883a 	mov	r4,r16
     ba0:	000ef240 	call	ef24 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     ba4:	00800c04 	movi	r2,48
     ba8:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     bac:	8009883a 	mov	r4,r16
     bb0:	000ef240 	call	ef24 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     bb4:	00803a04 	movi	r2,232
     bb8:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     bbc:	8009883a 	mov	r4,r16
     bc0:	000ef240 	call	ef24 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     bc4:	00802144 	movi	r2,133
     bc8:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     bcc:	8009883a 	mov	r4,r16
     bd0:	000ef240 	call	ef24 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     bd4:	05000044 	movi	r20,1
     bd8:	8d00002d 	sthio	r20,0(r17)
	usleep(10);
     bdc:	8009883a 	mov	r4,r16
     be0:	000ef240 	call	ef24 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     be4:	00801e44 	movi	r2,121
     be8:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     bec:	8009883a 	mov	r4,r16
     bf0:	000ef240 	call	ef24 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     bf4:	00803a84 	movi	r2,234
     bf8:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     bfc:	8009883a 	mov	r4,r16
     c00:	000ef240 	call	ef24 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     c04:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
     c08:	8009883a 	mov	r4,r16
     c0c:	000ef240 	call	ef24 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     c10:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
     c14:	8009883a 	mov	r4,r16
     c18:	000ef240 	call	ef24 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     c1c:	00801904 	movi	r2,100
     c20:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     c24:	8009883a 	mov	r4,r16
     c28:	000ef240 	call	ef24 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     c2c:	008000c4 	movi	r2,3
     c30:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     c34:	8009883a 	mov	r4,r16
     c38:	000ef240 	call	ef24 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     c3c:	00800484 	movi	r2,18
     c40:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     c44:	8009883a 	mov	r4,r16
     c48:	000ef240 	call	ef24 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     c4c:	8d80002d 	sthio	r22,0(r17)
	usleep(10);
     c50:	8009883a 	mov	r4,r16
     c54:	000ef240 	call	ef24 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     c58:	00803dc4 	movi	r2,247
     c5c:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     c60:	8009883a 	mov	r4,r16
     c64:	000ef240 	call	ef24 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     c68:	00800804 	movi	r2,32
     c6c:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     c70:	8009883a 	mov	r4,r16
     c74:	000ef240 	call	ef24 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     c78:	00803004 	movi	r2,192
     c7c:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     c80:	8009883a 	mov	r4,r16
     c84:	000ef240 	call	ef24 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     c88:	05800984 	movi	r22,38
     c8c:	8d80002d 	sthio	r22,0(r17)
	usleep(10);
     c90:	8009883a 	mov	r4,r16
     c94:	000ef240 	call	ef24 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     c98:	00800104 	movi	r2,4
     c9c:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     ca0:	8009883a 	mov	r4,r16
     ca4:	000ef240 	call	ef24 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     ca8:	00803044 	movi	r2,193
     cac:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     cb0:	8009883a 	mov	r4,r16
     cb4:	000ef240 	call	ef24 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     cb8:	8dc0002d 	sthio	r23,0(r17)
	usleep(10);
     cbc:	8009883a 	mov	r4,r16
     cc0:	000ef240 	call	ef24 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     cc4:	00803144 	movi	r2,197
     cc8:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     ccc:	8009883a 	mov	r4,r16
     cd0:	000ef240 	call	ef24 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     cd4:	00800d44 	movi	r2,53
     cd8:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     cdc:	8009883a 	mov	r4,r16
     ce0:	000ef240 	call	ef24 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     ce4:	00800f84 	movi	r2,62
     ce8:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     cec:	8009883a 	mov	r4,r16
     cf0:	000ef240 	call	ef24 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     cf4:	008031c4 	movi	r2,199
     cf8:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     cfc:	8009883a 	mov	r4,r16
     d00:	000ef240 	call	ef24 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     d04:	00802f84 	movi	r2,190
     d08:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     d0c:	8009883a 	mov	r4,r16
     d10:	000ef240 	call	ef24 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     d14:	00802c44 	movi	r2,177
     d18:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     d1c:	8009883a 	mov	r4,r16
     d20:	000ef240 	call	ef24 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     d24:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
     d28:	8009883a 	mov	r4,r16
     d2c:	000ef240 	call	ef24 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     d30:	00800404 	movi	r2,16
     d34:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     d38:	8009883a 	mov	r4,r16
     d3c:	000ef240 	call	ef24 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     d40:	00800e84 	movi	r2,58
     d44:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     d48:	8009883a 	mov	r4,r16
     d4c:	000ef240 	call	ef24 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     d50:	00801544 	movi	r2,85
     d54:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     d58:	8009883a 	mov	r4,r16
     d5c:	000ef240 	call	ef24 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     d60:	00802d84 	movi	r2,182
     d64:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     d68:	8009883a 	mov	r4,r16
     d6c:	000ef240 	call	ef24 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     d70:	8c00002d 	sthio	r16,0(r17)
	usleep(10);
     d74:	8009883a 	mov	r4,r16
     d78:	000ef240 	call	ef24 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     d7c:	00802884 	movi	r2,162
     d80:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     d84:	8009883a 	mov	r4,r16
     d88:	000ef240 	call	ef24 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     d8c:	00803c84 	movi	r2,242
     d90:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     d94:	8009883a 	mov	r4,r16
     d98:	000ef240 	call	ef24 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     d9c:	8d40002d 	sthio	r21,0(r17)
	usleep(10);
     da0:	8009883a 	mov	r4,r16
     da4:	000ef240 	call	ef24 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     da8:	9580002d 	sthio	r22,0(r18)
	usleep(10);
     dac:	8009883a 	mov	r4,r16
     db0:	000ef240 	call	ef24 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     db4:	8d00002d 	sthio	r20,0(r17)
	usleep(10);
     db8:	8009883a 	mov	r4,r16
     dbc:	000ef240 	call	ef24 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     dc0:	00800d84 	movi	r2,54
     dc4:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     dc8:	8009883a 	mov	r4,r16
     dcc:	000ef240 	call	ef24 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     dd0:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
     dd4:	8009883a 	mov	r4,r16
     dd8:	000ef240 	call	ef24 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     ddc:	00800a84 	movi	r2,42
     de0:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     de4:	8009883a 	mov	r4,r16
     de8:	000ef240 	call	ef24 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     dec:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
     df0:	8009883a 	mov	r4,r16
     df4:	000ef240 	call	ef24 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     df8:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
     dfc:	8009883a 	mov	r4,r16
     e00:	000ef240 	call	ef24 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     e04:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
     e08:	8009883a 	mov	r4,r16
     e0c:	000ef240 	call	ef24 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     e10:	00803bc4 	movi	r2,239
     e14:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     e18:	8009883a 	mov	r4,r16
     e1c:	000ef240 	call	ef24 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     e20:	00800ac4 	movi	r2,43
     e24:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     e28:	8009883a 	mov	r4,r16
     e2c:	000ef240 	call	ef24 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     e30:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
     e34:	8009883a 	mov	r4,r16
     e38:	000ef240 	call	ef24 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     e3c:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
     e40:	8009883a 	mov	r4,r16
     e44:	000ef240 	call	ef24 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     e48:	8d00002d 	sthio	r20,0(r17)
	usleep(10);
     e4c:	8009883a 	mov	r4,r16
     e50:	000ef240 	call	ef24 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     e54:	00800fc4 	movi	r2,63
     e58:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     e5c:	8009883a 	mov	r4,r16
     e60:	000ef240 	call	ef24 <usleep>
	LCD_Write_Command(0x002B);	//page address set 
	LCD_Write_Data(0x0000);
	LCD_Write_Data(0x0000);		//start 0x0000 
	LCD_Write_Data(0x0001);
	LCD_Write_Data(0x003F);		//end 0x013F 
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_NR_PIX_LINE_REG,240);
     e64:	00c04034 	movhi	r3,256
     e68:	00803c04 	movi	r2,240
     e6c:	18c41d04 	addi	r3,r3,4212
     e70:	18800035 	stwio	r2,0(r3)
	LCD_width = 240;
     e74:	d0a70e8d 	sth	r2,-25542(gp)
	LCD_height = 320;
     e78:	00805004 	movi	r2,320
     e7c:	d0a70e0d 	sth	r2,-25544(gp)

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     e80:	00800a44 	movi	r2,41
     e84:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     e88:	8009883a 	mov	r4,r16
	LCD_height = 320;


	LCD_Write_Command(0x0029);

}
     e8c:	dfc00817 	ldw	ra,32(sp)
     e90:	ddc00717 	ldw	r23,28(sp)
     e94:	dd800617 	ldw	r22,24(sp)
     e98:	dd400517 	ldw	r21,20(sp)
     e9c:	dd000417 	ldw	r20,16(sp)
     ea0:	dcc00317 	ldw	r19,12(sp)
     ea4:	dc800217 	ldw	r18,8(sp)
     ea8:	dc400117 	ldw	r17,4(sp)
     eac:	dc000017 	ldw	r16,0(sp)
     eb0:	dec00904 	addi	sp,sp,36
unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
     eb4:	000ef241 	jmpi	ef24 <usleep>

00000eb8 <transfer_LCD_no_dma>:

}

void transfer_LCD_no_dma( void* array,
		                  int width,
		                  int height) {
     eb8:	defffb04 	addi	sp,sp,-20
	unsigned short *data_array = (unsigned short *)array;
	unsigned int pixels;
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
     ebc:	00804034 	movhi	r2,256

}

void transfer_LCD_no_dma( void* array,
		                  int width,
		                  int height) {
     ec0:	dc000015 	stw	r16,0(sp)
     ec4:	dfc00415 	stw	ra,16(sp)
     ec8:	dcc00315 	stw	r19,12(sp)
     ecc:	dc800215 	stw	r18,8(sp)
     ed0:	dc400115 	stw	r17,4(sp)
     ed4:	2021883a 	mov	r16,r4
	unsigned short *data_array = (unsigned short *)array;
	unsigned int pixels;
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
     ed8:	10841e04 	addi	r2,r2,4216
     edc:	11400035 	stwio	r5,0(r2)

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     ee0:	00804034 	movhi	r2,256
     ee4:	10841804 	addi	r2,r2,4192
     ee8:	00c00b04 	movi	r3,44
     eec:	10c0002d 	sthio	r3,0(r2)
		                  int height) {
	unsigned short *data_array = (unsigned short *)array;
	unsigned int pixels;
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
	LCD_Write_Command(0x002C); 	//command to begin writing to frame memory
	for (pixels = 0 ; pixels < width*height ; pixels++)
     ef0:	29a5383a 	mul	r18,r5,r6
unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
     ef4:	01000284 	movi	r4,10
     ef8:	000ef240 	call	ef24 <usleep>
		                  int height) {
	unsigned short *data_array = (unsigned short *)array;
	unsigned int pixels;
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
	LCD_Write_Command(0x002C); 	//command to begin writing to frame memory
	for (pixels = 0 ; pixels < width*height ; pixels++)
     efc:	90000a26 	beq	r18,zero,f28 <transfer_LCD_no_dma+0x70>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     f00:	04c04034 	movhi	r19,256
     f04:	9cc41904 	addi	r19,r19,4196
		                  int height) {
	unsigned short *data_array = (unsigned short *)array;
	unsigned int pixels;
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
	LCD_Write_Command(0x002C); 	//command to begin writing to frame memory
	for (pixels = 0 ; pixels < width*height ; pixels++)
     f08:	0023883a 	mov	r17,zero
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     f0c:	8080000b 	ldhu	r2,0(r16)
     f10:	9880002d 	sthio	r2,0(r19)
	usleep(10);
     f14:	01000284 	movi	r4,10
		                  int height) {
	unsigned short *data_array = (unsigned short *)array;
	unsigned int pixels;
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
	LCD_Write_Command(0x002C); 	//command to begin writing to frame memory
	for (pixels = 0 ; pixels < width*height ; pixels++)
     f18:	8c400044 	addi	r17,r17,1
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
	usleep(10);
     f1c:	000ef240 	call	ef24 <usleep>
     f20:	84000084 	addi	r16,r16,2
		                  int height) {
	unsigned short *data_array = (unsigned short *)array;
	unsigned int pixels;
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
	LCD_Write_Command(0x002C); 	//command to begin writing to frame memory
	for (pixels = 0 ; pixels < width*height ; pixels++)
     f24:	8cbff91e 	bne	r17,r18,f0c <transfer_LCD_no_dma+0x54>
		LCD_Write_Data(data_array[pixels]);
}
     f28:	dfc00417 	ldw	ra,16(sp)
     f2c:	dcc00317 	ldw	r19,12(sp)
     f30:	dc800217 	ldw	r18,8(sp)
     f34:	dc400117 	ldw	r17,4(sp)
     f38:	dc000017 	ldw	r16,0(sp)
     f3c:	dec00504 	addi	sp,sp,20
     f40:	f800283a 	ret

00000f44 <transfer_LCD_with_dma>:

void transfer_LCD_with_dma(void *array,
		                   int width,
		                   int height,
		                   char grayscale) {
	unsigned short real_height = (height > LCD_height) ? LCD_height : height;
     f44:	d0a70e0b 	ldhu	r2,-25544(gp)
     f48:	3080010e 	bge	r6,r2,f50 <transfer_LCD_with_dma+0xc>
     f4c:	3005883a 	mov	r2,r6
	unsigned short real_width = (width > LCD_width) ? LCD_width : width;
     f50:	d0e70e8b 	ldhu	r3,-25542(gp)
     f54:	28c0010e 	bge	r5,r3,f5c <transfer_LCD_with_dma+0x18>
     f58:	2807883a 	mov	r3,r5
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
     f5c:	01804034 	movhi	r6,256
     f60:	31841e04 	addi	r6,r6,4216
     f64:	31400035 	stwio	r5,0(r6)
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_IMAGE_POINTER_REG,(int)array);
     f68:	01404034 	movhi	r5,256
     f6c:	29441b04 	addi	r5,r5,4204
     f70:	29000035 	stwio	r4,0(r5)
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_IMAGE_SIZE_REG,real_width*real_height);
     f74:	18ffffcc 	andi	r3,r3,65535
     f78:	10bfffcc 	andi	r2,r2,65535
     f7c:	1885383a 	mul	r2,r3,r2
     f80:	00c04034 	movhi	r3,256
     f84:	18c41c04 	addi	r3,r3,4208
     f88:	18800035 	stwio	r2,0(r3)
	if (grayscale==0)
     f8c:	39c03fcc 	andi	r7,r7,255
     f90:	39c0201c 	xori	r7,r7,128
		IOWR_16DIRECT(LCD_CTRL_BASE,LCD_CONTROL_REG,
     f94:	00804034 	movhi	r2,256
	unsigned short real_height = (height > LCD_height) ? LCD_height : height;
	unsigned short real_width = (width > LCD_width) ? LCD_width : width;
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_IMAGE_POINTER_REG,(int)array);
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_IMAGE_SIZE_REG,real_width*real_height);
	if (grayscale==0)
     f98:	39ffe004 	addi	r7,r7,-128
		IOWR_16DIRECT(LCD_CTRL_BASE,LCD_CONTROL_REG,
     f9c:	10841a04 	addi	r2,r2,4200
	unsigned short real_height = (height > LCD_height) ? LCD_height : height;
	unsigned short real_width = (width > LCD_width) ? LCD_width : width;
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_IMAGE_POINTER_REG,(int)array);
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_IMAGE_SIZE_REG,real_width*real_height);
	if (grayscale==0)
     fa0:	38000326 	beq	r7,zero,fb0 <transfer_LCD_with_dma+0x6c>
		IOWR_16DIRECT(LCD_CTRL_BASE,LCD_CONTROL_REG,
				         LCD_Sixteen_Bit|LCD_Start_DMA|
				         LCD_RGB565_Mode|LCD_Color_Image);
	else
		IOWR_16DIRECT(LCD_CTRL_BASE,LCD_CONTROL_REG,
     fa4:	00c04404 	movi	r3,272
     fa8:	10c0002d 	sthio	r3,0(r2)
     fac:	f800283a 	ret
	unsigned short real_width = (width > LCD_width) ? LCD_width : width;
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_IMAGE_POINTER_REG,(int)array);
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_IMAGE_SIZE_REG,real_width*real_height);
	if (grayscale==0)
		IOWR_16DIRECT(LCD_CTRL_BASE,LCD_CONTROL_REG,
     fb0:	00c04004 	movi	r3,256
     fb4:	10c0002d 	sthio	r3,0(r2)
     fb8:	f800283a 	ret

00000fbc <main>:
alt_u32 conv_grayscale_diff;
alt_u32 sobel_threshold_start;
alt_u32 sobel_threshold_end;
alt_u32 sobel_threshold_diff;
int main()
{
     fbc:	defff804 	addi	sp,sp,-32
     fc0:	dfc00715 	stw	ra,28(sp)
     fc4:	dd800615 	stw	r22,24(sp)
     fc8:	dd400515 	stw	r21,20(sp)
     fcc:	dd000415 	stw	r20,16(sp)
     fd0:	dcc00315 	stw	r19,12(sp)
     fd4:	dc800215 	stw	r18,8(sp)
     fd8:	dc400115 	stw	r17,4(sp)
     fdc:	dc000015 	stw	r16,0(sp)
  void *buffer1,*buffer2,*buffer3,*buffer4;
  unsigned short *image;
  unsigned char *grayscale;
  unsigned char current_mode;
  unsigned char mode;
  init_LCD();
     fe0:	0000aa40 	call	aa4 <init_LCD>
  init_camera();
     fe4:	00002800 	call	280 <init_camera>
  alt_timestamp_start();
     fe8:	000fccc0 	call	fccc <alt_timestamp_start>
  vga_set_swap(VGA_QuarterScreen|VGA_Grayscale);
     fec:	01000604 	movi	r4,24
     ff0:	0001dbc0 	call	1dbc <vga_set_swap>
  printf("Hello from Nios II!\n");
     ff4:	01000074 	movhi	r4,1
     ff8:	21055f04 	addi	r4,r4,5500
     ffc:	00028e00 	call	28e0 <puts>
  cam_get_profiling();
    1000:	00005e00 	call	5e0 <cam_get_profiling>
  buffer1 = (void *) malloc(cam_get_xsize()*cam_get_ysize());
    1004:	00005980 	call	598 <cam_get_xsize>
    1008:	1023883a 	mov	r17,r2
    100c:	00005bc0 	call	5bc <cam_get_ysize>
    1010:	10bfffcc 	andi	r2,r2,65535
    1014:	893fffcc 	andi	r4,r17,65535
    1018:	2089383a 	mul	r4,r4,r2
	  if (new_image_available() != 0) {
		  if (current_image_valid()!=0) {
			  current_mode = DIPSW_get_value();
			  mode = current_mode&(DIPSW_SW1_MASK|DIPSW_SW3_MASK|DIPSW_SW2_MASK);
			  image = (unsigned short*)current_image_pointer();
		      switch (mode) {
    101c:	04000044 	movi	r16,1
    1020:	04400084 	movi	r17,2
  init_camera();
  alt_timestamp_start();
  vga_set_swap(VGA_QuarterScreen|VGA_Grayscale);
  printf("Hello from Nios II!\n");
  cam_get_profiling();
  buffer1 = (void *) malloc(cam_get_xsize()*cam_get_ysize());
    1024:	0001f800 	call	1f80 <malloc>
    1028:	102d883a 	mov	r22,r2
  buffer2 = (void *) malloc(cam_get_xsize()*cam_get_ysize());
    102c:	00005980 	call	598 <cam_get_xsize>
    1030:	1027883a 	mov	r19,r2
    1034:	00005bc0 	call	5bc <cam_get_ysize>
    1038:	10bfffcc 	andi	r2,r2,65535
    103c:	993fffcc 	andi	r4,r19,65535
    1040:	2089383a 	mul	r4,r4,r2
		  if (current_image_valid()!=0) {
			  current_mode = DIPSW_get_value();
			  mode = current_mode&(DIPSW_SW1_MASK|DIPSW_SW3_MASK|DIPSW_SW2_MASK);
			  image = (unsigned short*)current_image_pointer();
		      switch (mode) {
		      case 0 : transfer_LCD_with_dma(&image[16520],
    1044:	04a04414 	movui	r18,33040
  alt_timestamp_start();
  vga_set_swap(VGA_QuarterScreen|VGA_Grayscale);
  printf("Hello from Nios II!\n");
  cam_get_profiling();
  buffer1 = (void *) malloc(cam_get_xsize()*cam_get_ysize());
  buffer2 = (void *) malloc(cam_get_xsize()*cam_get_ysize());
    1048:	0001f800 	call	1f80 <malloc>
    104c:	102b883a 	mov	r21,r2
  buffer3 = (void *) malloc(cam_get_xsize()*cam_get_ysize());
    1050:	00005980 	call	598 <cam_get_xsize>
    1054:	1027883a 	mov	r19,r2
    1058:	00005bc0 	call	5bc <cam_get_ysize>
    105c:	10bfffcc 	andi	r2,r2,65535
    1060:	993fffcc 	andi	r4,r19,65535
    1064:	2089383a 	mul	r4,r4,r2
    1068:	0001f800 	call	1f80 <malloc>
    106c:	1029883a 	mov	r20,r2
  buffer4 = (void *) malloc(cam_get_xsize()*cam_get_ysize());
    1070:	00005980 	call	598 <cam_get_xsize>
    1074:	1027883a 	mov	r19,r2
    1078:	00005bc0 	call	5bc <cam_get_ysize>
    107c:	10bfffcc 	andi	r2,r2,65535
    1080:	993fffcc 	andi	r4,r19,65535
    1084:	2089383a 	mul	r4,r4,r2
    1088:	0001f800 	call	1f80 <malloc>
  cam_set_image_pointer(0,buffer1);
    108c:	b00b883a 	mov	r5,r22
    1090:	0009883a 	mov	r4,zero
  printf("Hello from Nios II!\n");
  cam_get_profiling();
  buffer1 = (void *) malloc(cam_get_xsize()*cam_get_ysize());
  buffer2 = (void *) malloc(cam_get_xsize()*cam_get_ysize());
  buffer3 = (void *) malloc(cam_get_xsize()*cam_get_ysize());
  buffer4 = (void *) malloc(cam_get_xsize()*cam_get_ysize());
    1094:	1027883a 	mov	r19,r2
  cam_set_image_pointer(0,buffer1);
    1098:	00006580 	call	658 <cam_set_image_pointer>
  cam_set_image_pointer(1,buffer2);
    109c:	a80b883a 	mov	r5,r21
    10a0:	8009883a 	mov	r4,r16
    10a4:	00006580 	call	658 <cam_set_image_pointer>
  cam_set_image_pointer(2,buffer3);
    10a8:	a00b883a 	mov	r5,r20
    10ac:	8809883a 	mov	r4,r17
    10b0:	00006580 	call	658 <cam_set_image_pointer>
  cam_set_image_pointer(3,buffer4);
    10b4:	980b883a 	mov	r5,r19
    10b8:	010000c4 	movi	r4,3
    10bc:	00006580 	call	658 <cam_set_image_pointer>
  enable_continues_mode();
    10c0:	00007100 	call	710 <enable_continues_mode>
  init_sobel_arrays(cam_get_xsize()>>1,cam_get_ysize());
    10c4:	00005980 	call	598 <cam_get_xsize>
    10c8:	1027883a 	mov	r19,r2
    10cc:	00005bc0 	call	5bc <cam_get_ysize>
    10d0:	993fffcc 	andi	r4,r19,65535
    10d4:	2408d83a 	srl	r4,r4,r16
    10d8:	117fffcc 	andi	r5,r2,65535
    10dc:	00015980 	call	1598 <init_sobel_arrays>
    10e0:	00001b06 	br	1150 <main+0x194>
		      	  	   }
		      	  	   break;
		      }
		  }
	  }
	  printf("hallo");
    10e4:	01000074 	movhi	r4,1
    10e8:	21056404 	addi	r4,r4,5520
    10ec:	00027e40 	call	27e4 <printf>
	  conv_grayscale_diff = conv_grayscale_end - conv_grayscale_start;
    10f0:	d0e71517 	ldw	r3,-25516(gp)
    10f4:	d0a71917 	ldw	r2,-25500(gp)
	  printf("time convolution grayscale: %d \n",(int)conv_grayscale_diff);
    10f8:	01000074 	movhi	r4,1
    10fc:	21056604 	addi	r4,r4,5528
		      	  	   break;
		      }
		  }
	  }
	  printf("hallo");
	  conv_grayscale_diff = conv_grayscale_end - conv_grayscale_start;
    1100:	10c5c83a 	sub	r2,r2,r3
	  printf("time convolution grayscale: %d \n",(int)conv_grayscale_diff);
    1104:	100b883a 	mov	r5,r2
		      	  	   break;
		      }
		  }
	  }
	  printf("hallo");
	  conv_grayscale_diff = conv_grayscale_end - conv_grayscale_start;
    1108:	d0a71715 	stw	r2,-25508(gp)
	  printf("time convolution grayscale: %d \n",(int)conv_grayscale_diff);
    110c:	00027e40 	call	27e4 <printf>
	  //sobel_x_diff = sobel_x_end - sobel_x_start;
	  //printf("time sobel x: %d \n",(int)sobel_x_diff);
	  sobel_y_diff = sobel_y_end - sobel_y_start;
    1110:	d0e70f17 	ldw	r3,-25540(gp)
    1114:	d0a71217 	ldw	r2,-25528(gp)
	  printf("time sobel: %d \n",(int)sobel_y_diff);
    1118:	01000074 	movhi	r4,1
    111c:	21056f04 	addi	r4,r4,5564
	  printf("hallo");
	  conv_grayscale_diff = conv_grayscale_end - conv_grayscale_start;
	  printf("time convolution grayscale: %d \n",(int)conv_grayscale_diff);
	  //sobel_x_diff = sobel_x_end - sobel_x_start;
	  //printf("time sobel x: %d \n",(int)sobel_x_diff);
	  sobel_y_diff = sobel_y_end - sobel_y_start;
    1120:	10c5c83a 	sub	r2,r2,r3
	  printf("time sobel: %d \n",(int)sobel_y_diff);
    1124:	100b883a 	mov	r5,r2
	  printf("hallo");
	  conv_grayscale_diff = conv_grayscale_end - conv_grayscale_start;
	  printf("time convolution grayscale: %d \n",(int)conv_grayscale_diff);
	  //sobel_x_diff = sobel_x_end - sobel_x_start;
	  //printf("time sobel x: %d \n",(int)sobel_x_diff);
	  sobel_y_diff = sobel_y_end - sobel_y_start;
    1128:	d0a71615 	stw	r2,-25512(gp)
	  printf("time sobel: %d \n",(int)sobel_y_diff);
    112c:	00027e40 	call	27e4 <printf>
	  sobel_threshold_diff = sobel_threshold_end - sobel_threshold_start;
    1130:	d0e71317 	ldw	r3,-25524(gp)
    1134:	d0a71417 	ldw	r2,-25520(gp)
	  printf("time sobel threshold : %d \n",(int)sobel_threshold_diff);
    1138:	01000074 	movhi	r4,1
    113c:	21057404 	addi	r4,r4,5584
	  printf("time convolution grayscale: %d \n",(int)conv_grayscale_diff);
	  //sobel_x_diff = sobel_x_end - sobel_x_start;
	  //printf("time sobel x: %d \n",(int)sobel_x_diff);
	  sobel_y_diff = sobel_y_end - sobel_y_start;
	  printf("time sobel: %d \n",(int)sobel_y_diff);
	  sobel_threshold_diff = sobel_threshold_end - sobel_threshold_start;
    1140:	10c5c83a 	sub	r2,r2,r3
	  printf("time sobel threshold : %d \n",(int)sobel_threshold_diff);
    1144:	100b883a 	mov	r5,r2
	  printf("time convolution grayscale: %d \n",(int)conv_grayscale_diff);
	  //sobel_x_diff = sobel_x_end - sobel_x_start;
	  //printf("time sobel x: %d \n",(int)sobel_x_diff);
	  sobel_y_diff = sobel_y_end - sobel_y_start;
	  printf("time sobel: %d \n",(int)sobel_y_diff);
	  sobel_threshold_diff = sobel_threshold_end - sobel_threshold_start;
    1148:	d0a71815 	stw	r2,-25504(gp)
	  printf("time sobel threshold : %d \n",(int)sobel_threshold_diff);
    114c:	00027e40 	call	27e4 <printf>
  cam_set_image_pointer(2,buffer3);
  cam_set_image_pointer(3,buffer4);
  enable_continues_mode();
  init_sobel_arrays(cam_get_xsize()>>1,cam_get_ysize());
  do {
	  if (new_image_available() != 0) {
    1150:	00007240 	call	724 <new_image_available>
    1154:	10803fcc 	andi	r2,r2,255
    1158:	1080201c 	xori	r2,r2,128
    115c:	10bfe004 	addi	r2,r2,-128
    1160:	103fe026 	beq	r2,zero,10e4 <main+0x128>
		  if (current_image_valid()!=0) {
    1164:	00006cc0 	call	6cc <current_image_valid>
    1168:	10bfffcc 	andi	r2,r2,65535
    116c:	10a0001c 	xori	r2,r2,32768
    1170:	10a00004 	addi	r2,r2,-32768
    1174:	103fdb26 	beq	r2,zero,10e4 <main+0x128>
			  current_mode = DIPSW_get_value();
    1178:	00007500 	call	750 <DIPSW_get_value>
    117c:	1027883a 	mov	r19,r2
			  mode = current_mode&(DIPSW_SW1_MASK|DIPSW_SW3_MASK|DIPSW_SW2_MASK);
			  image = (unsigned short*)current_image_pointer();
    1180:	00006e00 	call	6e0 <current_image_pointer>
    1184:	1029883a 	mov	r20,r2
		      switch (mode) {
    1188:	988001cc 	andi	r2,r19,7
    118c:	14007226 	beq	r2,r16,1358 <main+0x39c>
    1190:	10005f26 	beq	r2,zero,1310 <main+0x354>
    1194:	14405226 	beq	r2,r17,12e0 <main+0x324>
    1198:	00c000c4 	movi	r3,3
    119c:	10c0221e 	bne	r2,r3,1228 <main+0x26c>
		      	  		  vga_set_swap(VGA_QuarterScreen);
		      	  		  vga_set_pointer(image);
		      	  	   }
		      	  	   break;
		      case 3 : conv_grayscale((void *)image,
		    		                  cam_get_xsize()>>1,
    11a0:	00005980 	call	598 <cam_get_xsize>
    11a4:	102b883a 	mov	r21,r2
		    		                  cam_get_ysize());
    11a8:	00005bc0 	call	5bc <cam_get_ysize>
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
		      	  		  vga_set_swap(VGA_QuarterScreen);
		      	  		  vga_set_pointer(image);
		      	  	   }
		      	  	   break;
		      case 3 : conv_grayscale((void *)image,
    11ac:	a97fffcc 	andi	r5,r21,65535
    11b0:	280ad07a 	srli	r5,r5,1
    11b4:	a009883a 	mov	r4,r20
    11b8:	11bfffcc 	andi	r6,r2,65535
    11bc:	00007640 	call	764 <conv_grayscale>
		    		                  cam_get_xsize()>>1,
		    		                  cam_get_ysize());
		               grayscale = get_grayscale_picture();
    11c0:	00008d00 	call	8d0 <get_grayscale_picture>
		               sobel_x(grayscale);
    11c4:	1009883a 	mov	r4,r2
		      	  	   }
		      	  	   break;
		      case 3 : conv_grayscale((void *)image,
		    		                  cam_get_xsize()>>1,
		    		                  cam_get_ysize());
		               grayscale = get_grayscale_picture();
    11c8:	1029883a 	mov	r20,r2
		               sobel_x(grayscale);
    11cc:	00017a40 	call	17a4 <sobel_x>
		               sobel_y_with_rgb(grayscale);
    11d0:	a009883a 	mov	r4,r20
    11d4:	0001b640 	call	1b64 <sobel_y_with_rgb>
		               image = GetSobel_rgb();
    11d8:	0001d9c0 	call	1d9c <GetSobel_rgb>
    11dc:	102b883a 	mov	r21,r2
		               transfer_LCD_with_dma(&image[16520],
		      		                	cam_get_xsize()>>1,
    11e0:	00005980 	call	598 <cam_get_xsize>
    11e4:	1029883a 	mov	r20,r2
		      		                	cam_get_ysize(),0);
    11e8:	00005bc0 	call	5bc <cam_get_ysize>
		    		                  cam_get_ysize());
		               grayscale = get_grayscale_picture();
		               sobel_x(grayscale);
		               sobel_y_with_rgb(grayscale);
		               image = GetSobel_rgb();
		               transfer_LCD_with_dma(&image[16520],
    11ec:	a17fffcc 	andi	r5,r20,65535
    11f0:	280ad07a 	srli	r5,r5,1
		      		                	cam_get_xsize()>>1,
		      		                	cam_get_ysize(),0);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
    11f4:	9cc03fcc 	andi	r19,r19,255
    11f8:	9cc0201c 	xori	r19,r19,128
		    		                  cam_get_ysize());
		               grayscale = get_grayscale_picture();
		               sobel_x(grayscale);
		               sobel_y_with_rgb(grayscale);
		               image = GetSobel_rgb();
		               transfer_LCD_with_dma(&image[16520],
    11fc:	000f883a 	mov	r7,zero
    1200:	11bfffcc 	andi	r6,r2,65535
    1204:	ac89883a 	add	r4,r21,r18
		      		                	cam_get_xsize()>>1,
		      		                	cam_get_ysize(),0);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
    1208:	9cffe004 	addi	r19,r19,-128
		    		                  cam_get_ysize());
		               grayscale = get_grayscale_picture();
		               sobel_x(grayscale);
		               sobel_y_with_rgb(grayscale);
		               image = GetSobel_rgb();
		               transfer_LCD_with_dma(&image[16520],
    120c:	0000f440 	call	f44 <transfer_LCD_with_dma>
		      		                	cam_get_xsize()>>1,
		      		                	cam_get_ysize(),0);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
    1210:	983fb40e 	bge	r19,zero,10e4 <main+0x128>
		      	  		  vga_set_swap(VGA_QuarterScreen);
    1214:	01000204 	movi	r4,8
    1218:	0001dbc0 	call	1dbc <vga_set_swap>
		      	  		  vga_set_pointer(image);
    121c:	a809883a 	mov	r4,r21
    1220:	0001dac0 	call	1dac <vga_set_pointer>
    1224:	003faf06 	br	10e4 <main+0x128>
		      	  	   }
		      	  	   break;
		      default: conv_grayscale((void *)image,
	                                  cam_get_xsize()>>1,
    1228:	00005980 	call	598 <cam_get_xsize>
    122c:	102b883a 	mov	r21,r2
	                                  cam_get_ysize());
    1230:	00005bc0 	call	5bc <cam_get_ysize>
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
		      	  		  vga_set_swap(VGA_QuarterScreen);
		      	  		  vga_set_pointer(image);
		      	  	   }
		      	  	   break;
		      default: conv_grayscale((void *)image,
    1234:	a97fffcc 	andi	r5,r21,65535
    1238:	280ad07a 	srli	r5,r5,1
    123c:	11bfffcc 	andi	r6,r2,65535
    1240:	a009883a 	mov	r4,r20
    1244:	00007640 	call	764 <conv_grayscale>
	                                  cam_get_xsize()>>1,
	                                  cam_get_ysize());
		      	  	   conv_grayscale_start = alt_timestamp();
    1248:	000fd440 	call	fd44 <alt_timestamp>
    124c:	d0a71515 	stw	r2,-25516(gp)
                       grayscale = get_grayscale_picture();
    1250:	00008d00 	call	8d0 <get_grayscale_picture>
    1254:	1029883a 	mov	r20,r2
                       conv_grayscale_end = alt_timestamp();
    1258:	000fd440 	call	fd44 <alt_timestamp>
    125c:	d0a71915 	stw	r2,-25500(gp)
                       //sobel_x_start = alt_timestamp();
                       //sobel_x(grayscale);
                       //sobel_x_end = alt_timestamp();
                       sobel_y_start = alt_timestamp();
    1260:	000fd440 	call	fd44 <alt_timestamp>
                       sobel_complete(grayscale);
    1264:	a009883a 	mov	r4,r20
                       grayscale = get_grayscale_picture();
                       conv_grayscale_end = alt_timestamp();
                       //sobel_x_start = alt_timestamp();
                       //sobel_x(grayscale);
                       //sobel_x_end = alt_timestamp();
                       sobel_y_start = alt_timestamp();
    1268:	d0a70f15 	stw	r2,-25540(gp)
                       sobel_complete(grayscale);
    126c:	000139c0 	call	139c <sobel_complete>
                       //sobel_y(grayscale);
                       sobel_y_end = alt_timestamp();
    1270:	000fd440 	call	fd44 <alt_timestamp>
    1274:	d0a71215 	stw	r2,-25528(gp)
                       sobel_threshold_start = alt_timestamp();
    1278:	000fd440 	call	fd44 <alt_timestamp>
                       sobel_threshold(128);
    127c:	01002004 	movi	r4,128
                       //sobel_x_end = alt_timestamp();
                       sobel_y_start = alt_timestamp();
                       sobel_complete(grayscale);
                       //sobel_y(grayscale);
                       sobel_y_end = alt_timestamp();
                       sobel_threshold_start = alt_timestamp();
    1280:	d0a71315 	stw	r2,-25524(gp)
                       sobel_threshold(128);
    1284:	0001ce80 	call	1ce8 <sobel_threshold>
                       sobel_threshold_end = alt_timestamp();
    1288:	000fd440 	call	fd44 <alt_timestamp>
    128c:	d0a71415 	stw	r2,-25520(gp)
                       grayscale=GetSobelResult();
    1290:	0001da40 	call	1da4 <GetSobelResult>
    1294:	102b883a 	mov	r21,r2
		               transfer_LCD_with_dma(&grayscale[16520],
		      		                	cam_get_xsize()>>1,
    1298:	00005980 	call	598 <cam_get_xsize>
    129c:	1029883a 	mov	r20,r2
		      		                	cam_get_ysize(),1);
    12a0:	00005bc0 	call	5bc <cam_get_ysize>
                       sobel_y_end = alt_timestamp();
                       sobel_threshold_start = alt_timestamp();
                       sobel_threshold(128);
                       sobel_threshold_end = alt_timestamp();
                       grayscale=GetSobelResult();
		               transfer_LCD_with_dma(&grayscale[16520],
    12a4:	a17fffcc 	andi	r5,r20,65535
    12a8:	280ad07a 	srli	r5,r5,1
    12ac:	01c00044 	movi	r7,1
		      		                	cam_get_xsize()>>1,
		      		                	cam_get_ysize(),1);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
    12b0:	9cc03fcc 	andi	r19,r19,255
    12b4:	9cc0201c 	xori	r19,r19,128
                       sobel_y_end = alt_timestamp();
                       sobel_threshold_start = alt_timestamp();
                       sobel_threshold(128);
                       sobel_threshold_end = alt_timestamp();
                       grayscale=GetSobelResult();
		               transfer_LCD_with_dma(&grayscale[16520],
    12b8:	11bfffcc 	andi	r6,r2,65535
    12bc:	a9102204 	addi	r4,r21,16520
		      		                	cam_get_xsize()>>1,
		      		                	cam_get_ysize(),1);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
    12c0:	9cffe004 	addi	r19,r19,-128
                       sobel_y_end = alt_timestamp();
                       sobel_threshold_start = alt_timestamp();
                       sobel_threshold(128);
                       sobel_threshold_end = alt_timestamp();
                       grayscale=GetSobelResult();
		               transfer_LCD_with_dma(&grayscale[16520],
    12c4:	0000f440 	call	f44 <transfer_LCD_with_dma>
		      		                	cam_get_xsize()>>1,
		      		                	cam_get_ysize(),1);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
    12c8:	983f860e 	bge	r19,zero,10e4 <main+0x128>
		      	  		  vga_set_swap(VGA_QuarterScreen|VGA_Grayscale);
    12cc:	01000604 	movi	r4,24
    12d0:	0001dbc0 	call	1dbc <vga_set_swap>
		      	  		  vga_set_pointer(grayscale);
    12d4:	a809883a 	mov	r4,r21
    12d8:	0001dac0 	call	1dac <vga_set_pointer>
    12dc:	003f8106 	br	10e4 <main+0x128>
		      	  		  vga_set_swap(VGA_QuarterScreen|VGA_Grayscale);
		      	  		  vga_set_pointer(grayscale);
		      	  	   }
		      	  	   break;
		      case 2 : conv_grayscale((void *)image,
		    		                  cam_get_xsize()>>1,
    12e0:	00005980 	call	598 <cam_get_xsize>
    12e4:	102b883a 	mov	r21,r2
		    		                  cam_get_ysize());
    12e8:	00005bc0 	call	5bc <cam_get_ysize>
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
		      	  		  vga_set_swap(VGA_QuarterScreen|VGA_Grayscale);
		      	  		  vga_set_pointer(grayscale);
		      	  	   }
		      	  	   break;
		      case 2 : conv_grayscale((void *)image,
    12ec:	a97fffcc 	andi	r5,r21,65535
    12f0:	280ad07a 	srli	r5,r5,1
    12f4:	a009883a 	mov	r4,r20
    12f8:	11bfffcc 	andi	r6,r2,65535
    12fc:	00007640 	call	764 <conv_grayscale>
		    		                  cam_get_xsize()>>1,
		    		                  cam_get_ysize());
		               grayscale = get_grayscale_picture();
    1300:	00008d00 	call	8d0 <get_grayscale_picture>
		               sobel_x_with_rgb(grayscale);
    1304:	1009883a 	mov	r4,r2
    1308:	00018e40 	call	18e4 <sobel_x_with_rgb>
    130c:	003fb206 	br	11d8 <main+0x21c>
			  current_mode = DIPSW_get_value();
			  mode = current_mode&(DIPSW_SW1_MASK|DIPSW_SW3_MASK|DIPSW_SW2_MASK);
			  image = (unsigned short*)current_image_pointer();
		      switch (mode) {
		      case 0 : transfer_LCD_with_dma(&image[16520],
		                	cam_get_xsize()>>1,
    1310:	00005980 	call	598 <cam_get_xsize>
    1314:	102b883a 	mov	r21,r2
		                	cam_get_ysize(),0);
    1318:	00005bc0 	call	5bc <cam_get_ysize>
		  if (current_image_valid()!=0) {
			  current_mode = DIPSW_get_value();
			  mode = current_mode&(DIPSW_SW1_MASK|DIPSW_SW3_MASK|DIPSW_SW2_MASK);
			  image = (unsigned short*)current_image_pointer();
		      switch (mode) {
		      case 0 : transfer_LCD_with_dma(&image[16520],
    131c:	a97fffcc 	andi	r5,r21,65535
    1320:	280ad07a 	srli	r5,r5,1
		                	cam_get_xsize()>>1,
		                	cam_get_ysize(),0);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
    1324:	9cc03fcc 	andi	r19,r19,255
    1328:	9cc0201c 	xori	r19,r19,128
		  if (current_image_valid()!=0) {
			  current_mode = DIPSW_get_value();
			  mode = current_mode&(DIPSW_SW1_MASK|DIPSW_SW3_MASK|DIPSW_SW2_MASK);
			  image = (unsigned short*)current_image_pointer();
		      switch (mode) {
		      case 0 : transfer_LCD_with_dma(&image[16520],
    132c:	000f883a 	mov	r7,zero
    1330:	11bfffcc 	andi	r6,r2,65535
    1334:	a489883a 	add	r4,r20,r18
		                	cam_get_xsize()>>1,
		                	cam_get_ysize(),0);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
    1338:	9cffe004 	addi	r19,r19,-128
		  if (current_image_valid()!=0) {
			  current_mode = DIPSW_get_value();
			  mode = current_mode&(DIPSW_SW1_MASK|DIPSW_SW3_MASK|DIPSW_SW2_MASK);
			  image = (unsigned short*)current_image_pointer();
		      switch (mode) {
		      case 0 : transfer_LCD_with_dma(&image[16520],
    133c:	0000f440 	call	f44 <transfer_LCD_with_dma>
		                	cam_get_xsize()>>1,
		                	cam_get_ysize(),0);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
    1340:	983f680e 	bge	r19,zero,10e4 <main+0x128>
		      	  		  vga_set_swap(VGA_QuarterScreen);
    1344:	01000204 	movi	r4,8
    1348:	0001dbc0 	call	1dbc <vga_set_swap>
		      	  		  vga_set_pointer(image);
    134c:	a009883a 	mov	r4,r20
    1350:	0001dac0 	call	1dac <vga_set_pointer>
    1354:	003f6306 	br	10e4 <main+0x128>
		      	  	   }
		      	  	   break;
		      case 1 : conv_grayscale((void *)image,
		    		                  cam_get_xsize()>>1,
    1358:	00005980 	call	598 <cam_get_xsize>
    135c:	102b883a 	mov	r21,r2
		    		                  cam_get_ysize());
    1360:	00005bc0 	call	5bc <cam_get_ysize>
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
		      	  		  vga_set_swap(VGA_QuarterScreen);
		      	  		  vga_set_pointer(image);
		      	  	   }
		      	  	   break;
		      case 1 : conv_grayscale((void *)image,
    1364:	a97fffcc 	andi	r5,r21,65535
    1368:	280ad07a 	srli	r5,r5,1
    136c:	a009883a 	mov	r4,r20
    1370:	11bfffcc 	andi	r6,r2,65535
    1374:	00007640 	call	764 <conv_grayscale>
		    		                  cam_get_xsize()>>1,
		    		                  cam_get_ysize());
		               grayscale = get_grayscale_picture();
    1378:	00008d00 	call	8d0 <get_grayscale_picture>
    137c:	102b883a 	mov	r21,r2
		               transfer_LCD_with_dma(&grayscale[16520],
		      		                	cam_get_xsize()>>1,
    1380:	00005980 	call	598 <cam_get_xsize>
    1384:	1029883a 	mov	r20,r2
		      		                	cam_get_ysize(),1);
    1388:	00005bc0 	call	5bc <cam_get_ysize>
		      	  	   break;
		      case 1 : conv_grayscale((void *)image,
		    		                  cam_get_xsize()>>1,
		    		                  cam_get_ysize());
		               grayscale = get_grayscale_picture();
		               transfer_LCD_with_dma(&grayscale[16520],
    138c:	a17fffcc 	andi	r5,r20,65535
    1390:	280ad07a 	srli	r5,r5,1
    1394:	800f883a 	mov	r7,r16
    1398:	003fc506 	br	12b0 <main+0x2f4>

0000139c <sobel_complete>:
unsigned short *sobel_rgb565;
unsigned char *sobel_result;
int sobel_width;
int sobel_height;
void sobel_complete( unsigned char * source )
{
    139c:	defff404 	addi	sp,sp,-48
    13a0:	dcc00515 	stw	r19,20(sp)
	int x,y;
	short result = 0;
	   for (y = 1 ; y < (sobel_height-1) ; y++) { // TODO calcule des indices une fois additionner sur la ligne
    13a4:	d4e71d17 	ldw	r19,-25484(gp)
unsigned short *sobel_rgb565;
unsigned char *sobel_result;
int sobel_width;
int sobel_height;
void sobel_complete( unsigned char * source )
{
    13a8:	dd800815 	stw	r22,32(sp)
    13ac:	dfc00b15 	stw	ra,44(sp)
    13b0:	df000a15 	stw	fp,40(sp)
    13b4:	ddc00915 	stw	r23,36(sp)
    13b8:	dd400715 	stw	r21,28(sp)
    13bc:	dd000615 	stw	r20,24(sp)
    13c0:	dc800415 	stw	r18,16(sp)
    13c4:	dc400315 	stw	r17,12(sp)
    13c8:	dc000215 	stw	r16,8(sp)
	int x,y;
	short result = 0;
	   for (y = 1 ; y < (sobel_height-1) ; y++) { // TODO calcule des indices une fois additionner sur la ligne
    13cc:	05800044 	movi	r22,1
unsigned short *sobel_rgb565;
unsigned char *sobel_result;
int sobel_width;
int sobel_height;
void sobel_complete( unsigned char * source )
{
    13d0:	d9000015 	stw	r4,0(sp)
	int x,y;
	short result = 0;
	   for (y = 1 ; y < (sobel_height-1) ; y++) { // TODO calcule des indices une fois additionner sur la ligne
    13d4:	9cffffc4 	addi	r19,r19,-1
    13d8:	b4c05c0e 	bge	r22,r19,154c <sobel_complete+0x1b0>
    13dc:	d3e71b17 	ldw	r15,-25492(gp)
    13e0:	d4671e17 	ldw	r17,-25480(gp)
    13e4:	04000084 	movi	r16,2
    13e8:	7bff883a 	add	ra,r15,r15
    13ec:	fc2f883a 	add	r23,ra,r16
    13f0:	7c05883a 	add	r2,r15,r16
    13f4:	8de3883a 	add	r17,r17,r23
    13f8:	ddc00115 	stw	r23,4(sp)
    13fc:	7d3fffc4 	addi	r20,r15,-1
    1400:	23dd883a 	add	r14,r4,r15
    1404:	83f9c83a 	sub	fp,r16,r15
    1408:	102f883a 	mov	r23,r2
	      for (x = 1 ; x < (sobel_width-1) ; x++) {
    140c:	b5005b0e 	bge	r22,r20,157c <sobel_complete+0x1e0>
    1410:	73e5883a 	add	r18,r14,r15
    1414:	802b883a 	mov	r21,r16
    1418:	73dbc83a 	sub	r13,r14,r15
    141c:	e38f883a 	add	r7,fp,r14
    1420:	73000084 	addi	r12,r14,2
    1424:	9017883a 	mov	r11,r18
    1428:	bb95883a 	add	r10,r23,r14
    142c:	8813883a 	mov	r9,r17
    1430:	7011883a 	mov	r8,r14
				result += gx_array[1][1]*source[(y-1)*sobel_width+(x)];
				result += gx_array[1][2]*source[(y)*sobel_width+(x+1)];
				result += gx_array[2][0]*source[(y+1)*sobel_width+(x-1)];
				result += gx_array[2][1]*source[(y-1)*sobel_width+(x)];
				result += gx_array[2][2]*source[(y+1)*sobel_width+(x+1)];
				sobel_x_result[y*sobel_width+x] = result;
    1434:	39000003 	ldbu	r4,0(r7)
    1438:	50c00003 	ldbu	r3,0(r10)
    143c:	41800003 	ldbu	r6,0(r8)
    1440:	60800003 	ldbu	r2,0(r12)
    1444:	20c7883a 	add	r3,r4,r3
    1448:	69400003 	ldbu	r5,0(r13)
    144c:	1987c83a 	sub	r3,r3,r6
    1450:	59000003 	ldbu	r4,0(r11)
    1454:	198dc83a 	sub	r6,r3,r6
    1458:	1087883a 	add	r3,r2,r2
    145c:	30c7883a 	add	r3,r6,r3
    1460:	1945c83a 	sub	r2,r3,r5
    1464:	1105c83a 	sub	r2,r2,r4
    1468:	4880000d 	sth	r2,0(r9)
    146c:	39c00044 	addi	r7,r7,1
    1470:	6b400044 	addi	r13,r13,1
    1474:	42000044 	addi	r8,r8,1
    1478:	63000044 	addi	r12,r12,1
    147c:	5ac00044 	addi	r11,r11,1
    1480:	52800044 	addi	r10,r10,1
    1484:	4a400084 	addi	r9,r9,2
void sobel_complete( unsigned char * source )
{
	int x,y;
	short result = 0;
	   for (y = 1 ; y < (sobel_height-1) ; y++) { // TODO calcule des indices une fois additionner sur la ligne
	      for (x = 1 ; x < (sobel_width-1) ; x++) {
    1488:	71ffea1e 	bne	r14,r7,1434 <sobel_complete+0x98>
    148c:	84000044 	addi	r16,r16,1
    1490:	901d883a 	mov	r14,r18
    1494:	8fe3883a 	add	r17,r17,ra
int sobel_height;
void sobel_complete( unsigned char * source )
{
	int x,y;
	short result = 0;
	   for (y = 1 ; y < (sobel_height-1) ; y++) { // TODO calcule des indices une fois additionner sur la ligne
    1498:	acffdc16 	blt	r21,r19,140c <sobel_complete+0x70>
    149c:	ddc00117 	ldw	r23,4(sp)
    14a0:	d3a71f17 	ldw	r14,-25476(gp)
    14a4:	d9000017 	ldw	r4,0(sp)
				result = 0;
	      }
	   }

	   for (y = 1 ; y < (sobel_height-1) ; y++) {
	         for (x = 1 ; x < (sobel_width-1) ; x++) {
    14a8:	04800044 	movi	r18,1
int sobel_height;
void sobel_complete( unsigned char * source )
{
	int x,y;
	short result = 0;
	   for (y = 1 ; y < (sobel_height-1) ; y++) { // TODO calcule des indices une fois additionner sur la ligne
    14ac:	04000084 	movi	r16,2
    14b0:	75dd883a 	add	r14,r14,r23
    14b4:	fcab883a 	add	r21,ra,r18
    14b8:	801b883a 	mov	r13,r16
				result = 0;
	      }
	   }

	   for (y = 1 ; y < (sobel_height-1) ; y++) {
	         for (x = 1 ; x < (sobel_width-1) ; x++) {
    14bc:	95001f0e 	bge	r18,r20,153c <sobel_complete+0x1a0>
    14c0:	f90d883a 	add	r6,ra,r4
    14c4:	801b883a 	mov	r13,r16
    14c8:	22c00044 	addi	r11,r4,1
    14cc:	21400084 	addi	r5,r4,2
    14d0:	a915883a 	add	r10,r21,r4
    14d4:	b913883a 	add	r9,r23,r4
    14d8:	33d9c83a 	sub	r12,r6,r15
    14dc:	7011883a 	mov	r8,r14
    14e0:	200f883a 	mov	r7,r4
	       	    result += gy_array[0][1]*source[(y-1)*sobel_width+(x)];
	       	    result += gy_array[0][2]*source[(y-1)*sobel_width+(x+1)];
	       	    result += gy_array[2][0]*source[(y+1)*sobel_width+(x-1)];
	   			result += gy_array[2][1]*source[(y+1)*sobel_width+(x)];
	   			result += gy_array[2][2]*source[(y+1)*sobel_width+(x+1)];
	   			sobel_y_result[y*sobel_width+x] = result ;// sobel_mac(source,x,y,gy_array,sobel_width);
    14e4:	3d800003 	ldbu	r22,0(r7)
    14e8:	28c00003 	ldbu	r3,0(r5)
    14ec:	58800003 	ldbu	r2,0(r11)
    14f0:	54400003 	ldbu	r17,0(r10)
    14f4:	b0c7883a 	add	r3,r22,r3
    14f8:	1085883a 	add	r2,r2,r2
    14fc:	37000003 	ldbu	fp,0(r6)
    1500:	1887883a 	add	r3,r3,r2
    1504:	4d800003 	ldbu	r22,0(r9)
    1508:	1c47c83a 	sub	r3,r3,r17
    150c:	1c47c83a 	sub	r3,r3,r17
    1510:	1f05c83a 	sub	r2,r3,fp
    1514:	1585c83a 	sub	r2,r2,r22
    1518:	4080000d 	sth	r2,0(r8)
    151c:	29400044 	addi	r5,r5,1
    1520:	39c00044 	addi	r7,r7,1
    1524:	5ac00044 	addi	r11,r11,1
    1528:	31800044 	addi	r6,r6,1
    152c:	52800044 	addi	r10,r10,1
    1530:	4a400044 	addi	r9,r9,1
    1534:	42000084 	addi	r8,r8,2
				result = 0;
	      }
	   }

	   for (y = 1 ; y < (sobel_height-1) ; y++) {
	         for (x = 1 ; x < (sobel_width-1) ; x++) {
    1538:	617fea1e 	bne	r12,r5,14e4 <sobel_complete+0x148>
    153c:	84000044 	addi	r16,r16,1
    1540:	23c9883a 	add	r4,r4,r15
    1544:	77dd883a 	add	r14,r14,ra
				sobel_x_result[y*sobel_width+x] = result;
				result = 0;
	      }
	   }

	   for (y = 1 ; y < (sobel_height-1) ; y++) {
    1548:	6cffdb16 	blt	r13,r19,14b8 <sobel_complete+0x11c>
	   			result += gy_array[2][2]*source[(y+1)*sobel_width+(x+1)];
	   			sobel_y_result[y*sobel_width+x] = result ;// sobel_mac(source,x,y,gy_array,sobel_width);
	   			result = 0;
		 }
	  }
}
    154c:	dfc00b17 	ldw	ra,44(sp)
    1550:	df000a17 	ldw	fp,40(sp)
    1554:	ddc00917 	ldw	r23,36(sp)
    1558:	dd800817 	ldw	r22,32(sp)
    155c:	dd400717 	ldw	r21,28(sp)
    1560:	dd000617 	ldw	r20,24(sp)
    1564:	dcc00517 	ldw	r19,20(sp)
    1568:	dc800417 	ldw	r18,16(sp)
    156c:	dc400317 	ldw	r17,12(sp)
    1570:	dc000217 	ldw	r16,8(sp)
    1574:	dec00c04 	addi	sp,sp,48
    1578:	f800283a 	ret
    157c:	802b883a 	mov	r21,r16
    1580:	73e5883a 	add	r18,r14,r15
    1584:	84000044 	addi	r16,r16,1
    1588:	901d883a 	mov	r14,r18
    158c:	8fe3883a 	add	r17,r17,ra
int sobel_height;
void sobel_complete( unsigned char * source )
{
	int x,y;
	short result = 0;
	   for (y = 1 ; y < (sobel_height-1) ; y++) { // TODO calcule des indices une fois additionner sur la ligne
    1590:	acff9e16 	blt	r21,r19,140c <sobel_complete+0x70>
    1594:	003fc106 	br	149c <sobel_complete+0x100>

00001598 <init_sobel_arrays>:
}
void init_sobel_arrays(int width , int height) {
	int loop;
	sobel_width = width;
	sobel_height = height;
	if (sobel_x_result != NULL)
    1598:	d0a71e17 	ldw	r2,-25480(gp)
	   			sobel_y_result[y*sobel_width+x] = result ;// sobel_mac(source,x,y,gy_array,sobel_width);
	   			result = 0;
		 }
	  }
}
void init_sobel_arrays(int width , int height) {
    159c:	defffd04 	addi	sp,sp,-12
    15a0:	dc400115 	stw	r17,4(sp)
    15a4:	dc000015 	stw	r16,0(sp)
    15a8:	dfc00215 	stw	ra,8(sp)
	int loop;
	sobel_width = width;
    15ac:	d1271b15 	stw	r4,-25492(gp)
	sobel_height = height;
    15b0:	d1671d15 	stw	r5,-25484(gp)
	   			sobel_y_result[y*sobel_width+x] = result ;// sobel_mac(source,x,y,gy_array,sobel_width);
	   			result = 0;
		 }
	  }
}
void init_sobel_arrays(int width , int height) {
    15b4:	2023883a 	mov	r17,r4
    15b8:	2821883a 	mov	r16,r5
	int loop;
	sobel_width = width;
	sobel_height = height;
	if (sobel_x_result != NULL)
    15bc:	10000226 	beq	r2,zero,15c8 <init_sobel_arrays+0x30>
		free(sobel_x_result);
    15c0:	1009883a 	mov	r4,r2
    15c4:	0001f940 	call	1f94 <free>
	sobel_x_result = (short *)malloc(width*height*sizeof(short));
    15c8:	8c21383a 	mul	r16,r17,r16
    15cc:	8423883a 	add	r17,r16,r16
    15d0:	8809883a 	mov	r4,r17
    15d4:	0001f800 	call	1f80 <malloc>
	if (sobel_y_result != NULL)
    15d8:	d1271f17 	ldw	r4,-25476(gp)
	int loop;
	sobel_width = width;
	sobel_height = height;
	if (sobel_x_result != NULL)
		free(sobel_x_result);
	sobel_x_result = (short *)malloc(width*height*sizeof(short));
    15dc:	d0a71e15 	stw	r2,-25480(gp)
	if (sobel_y_result != NULL)
    15e0:	20000126 	beq	r4,zero,15e8 <init_sobel_arrays+0x50>
		free(sobel_y_result);
    15e4:	0001f940 	call	1f94 <free>
	sobel_y_result = (short *)malloc(width*height*sizeof(short));
    15e8:	8809883a 	mov	r4,r17
    15ec:	0001f800 	call	1f80 <malloc>
	if (sobel_result != NULL)
    15f0:	d1271c17 	ldw	r4,-25488(gp)
	if (sobel_x_result != NULL)
		free(sobel_x_result);
	sobel_x_result = (short *)malloc(width*height*sizeof(short));
	if (sobel_y_result != NULL)
		free(sobel_y_result);
	sobel_y_result = (short *)malloc(width*height*sizeof(short));
    15f4:	d0a71f15 	stw	r2,-25476(gp)
	if (sobel_result != NULL)
    15f8:	20000126 	beq	r4,zero,1600 <init_sobel_arrays+0x68>
		free(sobel_result);
    15fc:	0001f940 	call	1f94 <free>
	sobel_result = (unsigned char *)malloc(width*height*sizeof(unsigned char));
    1600:	8009883a 	mov	r4,r16
    1604:	0001f800 	call	1f80 <malloc>
	if (sobel_rgb565 != NULL)
    1608:	d1272017 	ldw	r4,-25472(gp)
	if (sobel_y_result != NULL)
		free(sobel_y_result);
	sobel_y_result = (short *)malloc(width*height*sizeof(short));
	if (sobel_result != NULL)
		free(sobel_result);
	sobel_result = (unsigned char *)malloc(width*height*sizeof(unsigned char));
    160c:	d0a71c15 	stw	r2,-25488(gp)
	if (sobel_rgb565 != NULL)
    1610:	20000126 	beq	r4,zero,1618 <init_sobel_arrays+0x80>
		free(sobel_rgb565);
    1614:	0001f940 	call	1f94 <free>
	sobel_rgb565 = (unsigned short *)malloc(width*height*sizeof(unsigned short));
    1618:	8809883a 	mov	r4,r17
    161c:	0001f800 	call	1f80 <malloc>
    1620:	d0a72015 	stw	r2,-25472(gp)
	for (loop = 0 ; loop < width*height ; loop++) {
    1624:	0005883a 	mov	r2,zero
    1628:	04000f0e 	bge	zero,r16,1668 <init_sobel_arrays+0xd0>
		sobel_x_result[loop] = 0;
    162c:	d2271e17 	ldw	r8,-25480(gp)
		sobel_y_result[loop] = 0;
    1630:	d1e71f17 	ldw	r7,-25476(gp)
		sobel_result[loop] = 0;
    1634:	d1a71c17 	ldw	r6,-25488(gp)
    1638:	1087883a 	add	r3,r2,r2
	sobel_result = (unsigned char *)malloc(width*height*sizeof(unsigned char));
	if (sobel_rgb565 != NULL)
		free(sobel_rgb565);
	sobel_rgb565 = (unsigned short *)malloc(width*height*sizeof(unsigned short));
	for (loop = 0 ; loop < width*height ; loop++) {
		sobel_x_result[loop] = 0;
    163c:	40d1883a 	add	r8,r8,r3
    1640:	4000000d 	sth	zero,0(r8)
		sobel_y_result[loop] = 0;
    1644:	38cf883a 	add	r7,r7,r3
		sobel_result[loop] = 0;
    1648:	308d883a 	add	r6,r6,r2
	if (sobel_rgb565 != NULL)
		free(sobel_rgb565);
	sobel_rgb565 = (unsigned short *)malloc(width*height*sizeof(unsigned short));
	for (loop = 0 ; loop < width*height ; loop++) {
		sobel_x_result[loop] = 0;
		sobel_y_result[loop] = 0;
    164c:	3800000d 	sth	zero,0(r7)
		sobel_result[loop] = 0;
    1650:	30000005 	stb	zero,0(r6)
		sobel_rgb565[loop] = 0;
    1654:	d1a72017 	ldw	r6,-25472(gp)
		free(sobel_result);
	sobel_result = (unsigned char *)malloc(width*height*sizeof(unsigned char));
	if (sobel_rgb565 != NULL)
		free(sobel_rgb565);
	sobel_rgb565 = (unsigned short *)malloc(width*height*sizeof(unsigned short));
	for (loop = 0 ; loop < width*height ; loop++) {
    1658:	10800044 	addi	r2,r2,1
		sobel_x_result[loop] = 0;
		sobel_y_result[loop] = 0;
		sobel_result[loop] = 0;
		sobel_rgb565[loop] = 0;
    165c:	30c7883a 	add	r3,r6,r3
    1660:	1800000d 	sth	zero,0(r3)
		free(sobel_result);
	sobel_result = (unsigned char *)malloc(width*height*sizeof(unsigned char));
	if (sobel_rgb565 != NULL)
		free(sobel_rgb565);
	sobel_rgb565 = (unsigned short *)malloc(width*height*sizeof(unsigned short));
	for (loop = 0 ; loop < width*height ; loop++) {
    1664:	80bff11e 	bne	r16,r2,162c <init_sobel_arrays+0x94>
		sobel_x_result[loop] = 0;
		sobel_y_result[loop] = 0;
		sobel_result[loop] = 0;
		sobel_rgb565[loop] = 0;
	}
}
    1668:	dfc00217 	ldw	ra,8(sp)
    166c:	dc400117 	ldw	r17,4(sp)
    1670:	dc000017 	ldw	r16,0(sp)
    1674:	dec00304 	addi	sp,sp,12
    1678:	f800283a 	ret

0000167c <sobel_mac>:

short sobel_mac( unsigned char *pixels,
                 int x,
                 int y,
                 const char *filter,
                 unsigned int width ) {
    167c:	defff904 	addi	sp,sp,-28
    1680:	da400717 	ldw	r9,28(sp)
   short result = 0;

   for (dy = -1 ; dy < 2 ; dy++) {
      for (dx = -1 ; dx < 2 ; dx++) {
         result += filter[(dy+1)*3+(dx+1)]*
                   pixels[(y+dy)*width+(x+dx)];
    1684:	30ffffc4 	addi	r3,r6,-1
    1688:	30800044 	addi	r2,r6,1
    168c:	3251383a 	mul	r8,r6,r9
    1690:	1a47383a 	mul	r3,r3,r9
    1694:	1245383a 	mul	r2,r2,r9
    1698:	29bfffc4 	addi	r6,r5,-1
    169c:	2b000044 	addi	r12,r5,1
    16a0:	2211883a 	add	r8,r4,r8
    16a4:	2155883a 	add	r10,r4,r5
    16a8:	2193883a 	add	r9,r4,r6

short sobel_mac( unsigned char *pixels,
                 int x,
                 int y,
                 const char *filter,
                 unsigned int width ) {
    16ac:	dfc00615 	stw	ra,24(sp)
    16b0:	dd400515 	stw	r21,20(sp)
    16b4:	dd000415 	stw	r20,16(sp)
    16b8:	dcc00315 	stw	r19,12(sp)
    16bc:	dc800215 	stw	r18,8(sp)
    16c0:	dc400115 	stw	r17,4(sp)
    16c4:	dc000015 	stw	r16,0(sp)
   short result = 0;

   for (dy = -1 ; dy < 2 ; dy++) {
      for (dx = -1 ; dx < 2 ; dx++) {
         result += filter[(dy+1)*3+(dx+1)]*
                   pixels[(y+dy)*width+(x+dx)];
    16c8:	2085883a 	add	r2,r4,r2
    16cc:	415b883a 	add	r13,r8,r5
    16d0:	4197883a 	add	r11,r8,r6
    16d4:	50d5883a 	add	r10,r10,r3
    16d8:	48d3883a 	add	r9,r9,r3
    16dc:	2309883a 	add	r4,r4,r12
   short dy,dx;
   short result = 0;

   for (dy = -1 ; dy < 2 ; dy++) {
      for (dx = -1 ; dx < 2 ; dx++) {
         result += filter[(dy+1)*3+(dx+1)]*
    16e0:	54400003 	ldbu	r17,0(r10)
    16e4:	4c000003 	ldbu	r16,0(r9)
    16e8:	3a800007 	ldb	r10,0(r7)
                   pixels[(y+dy)*width+(x+dx)];
    16ec:	20c9883a 	add	r4,r4,r3
   short dy,dx;
   short result = 0;

   for (dy = -1 ; dy < 2 ; dy++) {
      for (dx = -1 ; dx < 2 ; dx++) {
         result += filter[(dy+1)*3+(dx+1)]*
    16f0:	6c800003 	ldbu	r18,0(r13)
    16f4:	5fc00003 	ldbu	ra,0(r11)
    16f8:	3b400107 	ldb	r13,4(r7)
                   pixels[(y+dy)*width+(x+dx)];
    16fc:	4317883a 	add	r11,r8,r12
   short dy,dx;
   short result = 0;

   for (dy = -1 ; dy < 2 ; dy++) {
      for (dx = -1 ; dx < 2 ; dx++) {
         result += filter[(dy+1)*3+(dx+1)]*
    1700:	3a4000c7 	ldb	r9,3(r7)
                   pixels[(y+dy)*width+(x+dx)];
    1704:	118d883a 	add	r6,r2,r6
    1708:	114b883a 	add	r5,r2,r5
   short dy,dx;
   short result = 0;

   for (dy = -1 ; dy < 2 ; dy++) {
      for (dx = -1 ; dx < 2 ; dx++) {
         result += filter[(dy+1)*3+(dx+1)]*
    170c:	3b800047 	ldb	r14,1(r7)
    1710:	25000003 	ldbu	r20,0(r4)
    1714:	3a000087 	ldb	r8,2(r7)
    1718:	5cc00003 	ldbu	r19,0(r11)
    171c:	39000147 	ldb	r4,5(r7)
                   pixels[(y+dy)*width+(x+dx)];
      }
   }

   return result;
    1720:	33c00003 	ldbu	r15,0(r6)
    1724:	3ac00187 	ldb	r11,6(r7)
    1728:	2d400003 	ldbu	r21,0(r5)
    172c:	398001c7 	ldb	r6,7(r7)
   short result = 0;

   for (dy = -1 ; dy < 2 ; dy++) {
      for (dx = -1 ; dx < 2 ; dx++) {
         result += filter[(dy+1)*3+(dx+1)]*
                   pixels[(y+dy)*width+(x+dx)];
    1730:	130b883a 	add	r5,r2,r12
      }
   }

   return result;
    1734:	2b000003 	ldbu	r12,0(r5)
    1738:	39400207 	ldb	r5,8(r7)
   short dy,dx;
   short result = 0;

   for (dy = -1 ; dy < 2 ; dy++) {
      for (dx = -1 ; dx < 2 ; dx++) {
         result += filter[(dy+1)*3+(dx+1)]*
    173c:	8295383a 	mul	r10,r16,r10
    1740:	8b8f383a 	mul	r7,r17,r14
    1744:	9347383a 	mul	r3,r18,r13
    1748:	fa53383a 	mul	r9,ra,r9
    174c:	a211383a 	mul	r8,r20,r8
    1750:	9909383a 	mul	r4,r19,r4
                   pixels[(y+dy)*width+(x+dx)];
      }
   }

   return result;
    1754:	7ac5383a 	mul	r2,r15,r11
    1758:	a98d383a 	mul	r6,r21,r6
    175c:	614b383a 	mul	r5,r12,r5
   short dy,dx;
   short result = 0;

   for (dy = -1 ; dy < 2 ; dy++) {
      for (dx = -1 ; dx < 2 ; dx++) {
         result += filter[(dy+1)*3+(dx+1)]*
    1760:	3a8f883a 	add	r7,r7,r10
    1764:	1a47883a 	add	r3,r3,r9
    1768:	3a0f883a 	add	r7,r7,r8
    176c:	1907883a 	add	r3,r3,r4
                   pixels[(y+dy)*width+(x+dx)];
      }
   }

   return result;
    1770:	1185883a 	add	r2,r2,r6
   short dy,dx;
   short result = 0;

   for (dy = -1 ; dy < 2 ; dy++) {
      for (dx = -1 ; dx < 2 ; dx++) {
         result += filter[(dy+1)*3+(dx+1)]*
    1774:	38c7883a 	add	r3,r7,r3
                   pixels[(y+dy)*width+(x+dx)];
      }
   }

   return result;
    1778:	1145883a 	add	r2,r2,r5
}
    177c:	1885883a 	add	r2,r3,r2
    1780:	dfc00617 	ldw	ra,24(sp)
    1784:	dd400517 	ldw	r21,20(sp)
    1788:	dd000417 	ldw	r20,16(sp)
    178c:	dcc00317 	ldw	r19,12(sp)
    1790:	dc800217 	ldw	r18,8(sp)
    1794:	dc400117 	ldw	r17,4(sp)
    1798:	dc000017 	ldw	r16,0(sp)
    179c:	dec00704 	addi	sp,sp,28
    17a0:	f800283a 	ret

000017a4 <sobel_x>:

void sobel_x( unsigned char *source ) {
    17a4:	defff604 	addi	sp,sp,-40
    17a8:	dc400115 	stw	r17,4(sp)
   int x,y;
   short result = 0;
   for (y = 1 ; y < (sobel_height-1) ; y++) {
    17ac:	d4671d17 	ldw	r17,-25484(gp)
   }

   return result;
}

void sobel_x( unsigned char *source ) {
    17b0:	dfc00915 	stw	ra,36(sp)
    17b4:	df000815 	stw	fp,32(sp)
    17b8:	ddc00715 	stw	r23,28(sp)
    17bc:	dd800615 	stw	r22,24(sp)
    17c0:	dd400515 	stw	r21,20(sp)
    17c4:	dd000415 	stw	r20,16(sp)
    17c8:	dcc00315 	stw	r19,12(sp)
    17cc:	dc800215 	stw	r18,8(sp)
    17d0:	dc000015 	stw	r16,0(sp)
   int x,y;
   short result = 0;
   for (y = 1 ; y < (sobel_height-1) ; y++) {
    17d4:	8c7fffc4 	addi	r17,r17,-1
    17d8:	00800044 	movi	r2,1
    17dc:	14402e0e 	bge	r2,r17,1898 <sobel_x+0xf4>
    17e0:	d3671b17 	ldw	r13,-25492(gp)
    17e4:	d3e71e17 	ldw	r15,-25480(gp)
    17e8:	03800084 	movi	r14,2
    17ec:	6b65883a 	add	r18,r13,r13
    17f0:	9385883a 	add	r2,r18,r14
    17f4:	2359883a 	add	r12,r4,r13
    17f8:	789f883a 	add	r15,r15,r2
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    17fc:	7027883a 	mov	r19,r14
    1800:	736bc83a 	sub	r21,r14,r13
    1804:	6ba9883a 	add	r20,r13,r14
    1808:	9b402f0e 	bge	r19,r13,18c8 <sobel_x+0x124>
    180c:	637f883a 	add	ra,r12,r13
    1810:	7021883a 	mov	r16,r14
    1814:	6357c83a 	sub	r11,r12,r13
    1818:	ab0b883a 	add	r5,r21,r12
    181c:	62800084 	addi	r10,r12,2
    1820:	f813883a 	mov	r9,ra
    1824:	a311883a 	add	r8,r20,r12
    1828:	780f883a 	mov	r7,r15
    182c:	600d883a 	mov	r6,r12
			result += gx_array[1][2]*source[(y)*sobel_width+(x+1)];
			result += gx_array[2][0]*source[(y+1)*sobel_width+(x-1)];
			result += gx_array[2][1]*source[(y+1)*sobel_width+(x)];
			result += gx_array[2][2]*source[(y+1)*sobel_width+(x+1)];

			sobel_x_result[y*sobel_width+x] = result;//sobel_mac(source,x,y,gx_array,sobel_width);
    1830:	29000003 	ldbu	r4,0(r5)
    1834:	40c00003 	ldbu	r3,0(r8)
    1838:	37000003 	ldbu	fp,0(r6)
    183c:	50800003 	ldbu	r2,0(r10)
    1840:	20c7883a 	add	r3,r4,r3
    1844:	5dc00003 	ldbu	r23,0(r11)
    1848:	1f07c83a 	sub	r3,r3,fp
    184c:	4d800003 	ldbu	r22,0(r9)
    1850:	1f09c83a 	sub	r4,r3,fp
    1854:	1087883a 	add	r3,r2,r2
    1858:	20c7883a 	add	r3,r4,r3
    185c:	1dc5c83a 	sub	r2,r3,r23
    1860:	1585c83a 	sub	r2,r2,r22
    1864:	3880000d 	sth	r2,0(r7)
    1868:	29400044 	addi	r5,r5,1
    186c:	5ac00044 	addi	r11,r11,1
    1870:	31800044 	addi	r6,r6,1
    1874:	52800044 	addi	r10,r10,1
    1878:	4a400044 	addi	r9,r9,1
    187c:	42000044 	addi	r8,r8,1
    1880:	39c00084 	addi	r7,r7,2

void sobel_x( unsigned char *source ) {
   int x,y;
   short result = 0;
   for (y = 1 ; y < (sobel_height-1) ; y++) {
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    1884:	617fea1e 	bne	r12,r5,1830 <sobel_x+0x8c>
    1888:	73800044 	addi	r14,r14,1
    188c:	f819883a 	mov	r12,ra
    1890:	7c9f883a 	add	r15,r15,r18
}

void sobel_x( unsigned char *source ) {
   int x,y;
   short result = 0;
   for (y = 1 ; y < (sobel_height-1) ; y++) {
    1894:	847fdc16 	blt	r16,r17,1808 <sobel_x+0x64>
			result += gx_array[2][2]*source[(y+1)*sobel_width+(x+1)];

			sobel_x_result[y*sobel_width+x] = result;//sobel_mac(source,x,y,gx_array,sobel_width);
      }
   }
}
    1898:	dfc00917 	ldw	ra,36(sp)
    189c:	df000817 	ldw	fp,32(sp)
    18a0:	ddc00717 	ldw	r23,28(sp)
    18a4:	dd800617 	ldw	r22,24(sp)
    18a8:	dd400517 	ldw	r21,20(sp)
    18ac:	dd000417 	ldw	r20,16(sp)
    18b0:	dcc00317 	ldw	r19,12(sp)
    18b4:	dc800217 	ldw	r18,8(sp)
    18b8:	dc400117 	ldw	r17,4(sp)
    18bc:	dc000017 	ldw	r16,0(sp)
    18c0:	dec00a04 	addi	sp,sp,40
    18c4:	f800283a 	ret
    18c8:	7021883a 	mov	r16,r14
    18cc:	637f883a 	add	ra,r12,r13
    18d0:	73800044 	addi	r14,r14,1
    18d4:	f819883a 	mov	r12,ra
    18d8:	7c9f883a 	add	r15,r15,r18
}

void sobel_x( unsigned char *source ) {
   int x,y;
   short result = 0;
   for (y = 1 ; y < (sobel_height-1) ; y++) {
    18dc:	847fca16 	blt	r16,r17,1808 <sobel_x+0x64>
    18e0:	003fed06 	br	1898 <sobel_x+0xf4>

000018e4 <sobel_x_with_rgb>:
			sobel_x_result[y*sobel_width+x] = result;//sobel_mac(source,x,y,gx_array,sobel_width);
      }
   }
}

void sobel_x_with_rgb( unsigned char *source ) {
    18e4:	defff604 	addi	sp,sp,-40
    18e8:	dcc00315 	stw	r19,12(sp)
   int x,y;
   short result;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    18ec:	d4e71d17 	ldw	r19,-25484(gp)
			sobel_x_result[y*sobel_width+x] = result;//sobel_mac(source,x,y,gx_array,sobel_width);
      }
   }
}

void sobel_x_with_rgb( unsigned char *source ) {
    18f0:	dfc00915 	stw	ra,36(sp)
    18f4:	df000815 	stw	fp,32(sp)
    18f8:	ddc00715 	stw	r23,28(sp)
    18fc:	dd800615 	stw	r22,24(sp)
    1900:	dd400515 	stw	r21,20(sp)
    1904:	dd000415 	stw	r20,16(sp)
    1908:	dc800215 	stw	r18,8(sp)
    190c:	dc400115 	stw	r17,4(sp)
    1910:	dc000015 	stw	r16,0(sp)
   int x,y;
   short result;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    1914:	00800084 	movi	r2,2
    1918:	14c03b0e 	bge	r2,r19,1a08 <sobel_x_with_rgb+0x124>
    191c:	2025883a 	mov	r18,r4
    1920:	d1271b17 	ldw	r4,-25492(gp)
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    	  result = sobel_mac(source,x,y,gx_array,sobel_width);
          sobel_x_result[y*sobel_width+x] = result;
    1924:	d5671e17 	ldw	r21,-25480(gp)
          if (result < 0) {
        	  sobel_rgb565[y*sobel_width+x] = ((-result)>>2)<<5;
    1928:	d5272017 	ldw	r20,-25472(gp)
    192c:	23ffffc4 	addi	r15,r4,-1
    1930:	908f883a 	add	r7,r18,r2
    1934:	9cffffc4 	addi	r19,r19,-1
    1938:	200d883a 	mov	r6,r4
    193c:	04000044 	movi	r16,1
    1940:	31400044 	addi	r5,r6,1
    1944:	294b883a 	add	r5,r5,r5
    1948:	393f883a 	add	ra,r7,r4
    194c:	a15b883a 	add	r13,r20,r5
    1950:	3123883a 	add	r17,r6,r4
			sobel_x_result[y*sobel_width+x] = result;//sobel_mac(source,x,y,gx_array,sobel_width);
      }
   }
}

void sobel_x_with_rgb( unsigned char *source ) {
    1954:	02000044 	movi	r8,1
    1958:	84000044 	addi	r16,r16,1
    195c:	3b3fff84 	addi	r12,r7,-2
    1960:	918d883a 	add	r6,r18,r6
    1964:	9457883a 	add	r11,r18,r17
    1968:	27d5883a 	add	r10,r4,ra
    196c:	a94b883a 	add	r5,r21,r5
    1970:	f813883a 	mov	r9,ra
    1974:	681d883a 	mov	r14,r13
   int x,y;
   short result;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    1978:	43c0200e 	bge	r8,r15,19fc <sobel_x_with_rgb+0x118>
   short dy,dx;
   short result = 0;

   for (dy = -1 ; dy < 2 ; dy++) {
      for (dx = -1 ; dx < 2 ; dx++) {
         result += filter[(dy+1)*3+(dx+1)]*
    197c:	50800003 	ldbu	r2,0(r10)
    1980:	3dc00003 	ldbu	r23,0(r7)
    1984:	37000003 	ldbu	fp,0(r6)
    1988:	48c00003 	ldbu	r3,0(r9)
    198c:	b8af883a 	add	r23,r23,r2
    1990:	65800003 	ldbu	r22,0(r12)
    1994:	bf2fc83a 	sub	r23,r23,fp
    1998:	58800003 	ldbu	r2,0(r11)
    199c:	bf2fc83a 	sub	r23,r23,fp
    19a0:	18c7883a 	add	r3,r3,r3
    19a4:	b8c7883a 	add	r3,r23,r3
    19a8:	1d87c83a 	sub	r3,r3,r22
    19ac:	1885c83a 	sub	r2,r3,r2
   short result;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    	  result = sobel_mac(source,x,y,gx_array,sobel_width);
          sobel_x_result[y*sobel_width+x] = result;
    19b0:	2880000d 	sth	r2,0(r5)
          if (result < 0) {
    19b4:	10bfffcc 	andi	r2,r2,65535
    19b8:	10a0001c 	xori	r2,r2,32768
    19bc:	10a00004 	addi	r2,r2,-32768
        	  sobel_rgb565[y*sobel_width+x] = ((-result)>>2)<<5;
          } else {
        	  sobel_rgb565[y*sobel_width+x] = ((result>>3)&0x1F)<<11;
    19c0:	1007d0fa 	srai	r3,r2,3
   short result = 0;

   for (dy = -1 ; dy < 2 ; dy++) {
      for (dx = -1 ; dx < 2 ; dx++) {
         result += filter[(dy+1)*3+(dx+1)]*
                   pixels[(y+dy)*width+(x+dx)];
    19c4:	42000044 	addi	r8,r8,1

   for (y = 1 ; y < (sobel_height-1) ; y++) {
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    	  result = sobel_mac(source,x,y,gx_array,sobel_width);
          sobel_x_result[y*sobel_width+x] = result;
          if (result < 0) {
    19c8:	10001b16 	blt	r2,zero,1a38 <sobel_x_with_rgb+0x154>
        	  sobel_rgb565[y*sobel_width+x] = ((-result)>>2)<<5;
          } else {
        	  sobel_rgb565[y*sobel_width+x] = ((result>>3)&0x1F)<<11;
    19cc:	180692fa 	slli	r3,r3,11
    19d0:	68c0000d 	sth	r3,0(r13)
    19d4:	73800084 	addi	r14,r14,2
    19d8:	6b400084 	addi	r13,r13,2
    19dc:	63000044 	addi	r12,r12,1
    19e0:	39c00044 	addi	r7,r7,1
    19e4:	31800044 	addi	r6,r6,1
    19e8:	4a400044 	addi	r9,r9,1
    19ec:	5ac00044 	addi	r11,r11,1
    19f0:	52800044 	addi	r10,r10,1
    19f4:	29400084 	addi	r5,r5,2
void sobel_x_with_rgb( unsigned char *source ) {
   int x,y;
   short result;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    19f8:	43ffe016 	blt	r8,r15,197c <sobel_x_with_rgb+0x98>
    19fc:	880d883a 	mov	r6,r17
    1a00:	f80f883a 	mov	r7,ra

void sobel_x_with_rgb( unsigned char *source ) {
   int x,y;
   short result;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    1a04:	9c3fce1e 	bne	r19,r16,1940 <sobel_x_with_rgb+0x5c>
          } else {
        	  sobel_rgb565[y*sobel_width+x] = ((result>>3)&0x1F)<<11;
          }
      }
   }
}
    1a08:	dfc00917 	ldw	ra,36(sp)
    1a0c:	df000817 	ldw	fp,32(sp)
    1a10:	ddc00717 	ldw	r23,28(sp)
    1a14:	dd800617 	ldw	r22,24(sp)
    1a18:	dd400517 	ldw	r21,20(sp)
    1a1c:	dd000417 	ldw	r20,16(sp)
    1a20:	dcc00317 	ldw	r19,12(sp)
    1a24:	dc800217 	ldw	r18,8(sp)
    1a28:	dc400117 	ldw	r17,4(sp)
    1a2c:	dc000017 	ldw	r16,0(sp)
    1a30:	dec00a04 	addi	sp,sp,40
    1a34:	f800283a 	ret
   for (y = 1 ; y < (sobel_height-1) ; y++) {
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    	  result = sobel_mac(source,x,y,gx_array,sobel_width);
          sobel_x_result[y*sobel_width+x] = result;
          if (result < 0) {
        	  sobel_rgb565[y*sobel_width+x] = ((-result)>>2)<<5;
    1a38:	0085c83a 	sub	r2,zero,r2
    1a3c:	1005d0ba 	srai	r2,r2,2
    1a40:	1004917a 	slli	r2,r2,5
    1a44:	7080000d 	sth	r2,0(r14)
    1a48:	003fe206 	br	19d4 <sobel_x_with_rgb+0xf0>

00001a4c <sobel_y>:
          }
      }
   }
}

void sobel_y( unsigned char *source ) {
    1a4c:	defff704 	addi	sp,sp,-36
    1a50:	dc400115 	stw	r17,4(sp)
   int x,y;
   short result = 0;
   for (y = 1 ; y < (sobel_height-1) ; y++) {
    1a54:	d4671d17 	ldw	r17,-25484(gp)
          }
      }
   }
}

void sobel_y( unsigned char *source ) {
    1a58:	dfc00815 	stw	ra,32(sp)
    1a5c:	ddc00715 	stw	r23,28(sp)
    1a60:	dd800615 	stw	r22,24(sp)
    1a64:	dd400515 	stw	r21,20(sp)
    1a68:	dd000415 	stw	r20,16(sp)
    1a6c:	dcc00315 	stw	r19,12(sp)
    1a70:	dc800215 	stw	r18,8(sp)
    1a74:	dc000015 	stw	r16,0(sp)
   int x,y;
   short result = 0;
   for (y = 1 ; y < (sobel_height-1) ; y++) {
    1a78:	8c7fffc4 	addi	r17,r17,-1
    1a7c:	00800044 	movi	r2,1
    1a80:	14402d0e 	bge	r2,r17,1b38 <sobel_y+0xec>
    1a84:	d3e71b17 	ldw	r15,-25492(gp)
    1a88:	d3a71f17 	ldw	r14,-25476(gp)
    1a8c:	03400084 	movi	r13,2
    1a90:	7bff883a 	add	ra,r15,r15
    1a94:	fb67883a 	add	r19,ra,r13
    1a98:	74dd883a 	add	r14,r14,r19
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    1a9c:	6825883a 	mov	r18,r13
    1aa0:	f8a9883a 	add	r20,ra,r2
    1aa4:	6821883a 	mov	r16,r13
    1aa8:	93c01f0e 	bge	r18,r15,1b28 <sobel_y+0xdc>
    1aac:	f90d883a 	add	r6,ra,r4
    1ab0:	6821883a 	mov	r16,r13
    1ab4:	22c00044 	addi	r11,r4,1
    1ab8:	21400084 	addi	r5,r4,2
    1abc:	a115883a 	add	r10,r20,r4
    1ac0:	9913883a 	add	r9,r19,r4
    1ac4:	33d9c83a 	sub	r12,r6,r15
    1ac8:	7011883a 	mov	r8,r14
    1acc:	200f883a 	mov	r7,r4
    	    result += gy_array[1][2]*source[(y)*sobel_width+(x+1)];
    	    result += gy_array[2][0]*source[(y+1)*sobel_width+(x-1)];
			result += gy_array[2][1]*source[(y+1)*sobel_width+(x)];
			result += gy_array[2][2]*source[(y+1)*sobel_width+(x+1)];

			sobel_y_result[y*sobel_width+x] = result ;// sobel_mac(source,x,y,gy_array,sobel_width);
    1ad0:	3d800003 	ldbu	r22,0(r7)
    1ad4:	28c00003 	ldbu	r3,0(r5)
    1ad8:	58800003 	ldbu	r2,0(r11)
    1adc:	55400003 	ldbu	r21,0(r10)
    1ae0:	b0c7883a 	add	r3,r22,r3
    1ae4:	1085883a 	add	r2,r2,r2
    1ae8:	35c00003 	ldbu	r23,0(r6)
    1aec:	1887883a 	add	r3,r3,r2
    1af0:	4d800003 	ldbu	r22,0(r9)
    1af4:	1d47c83a 	sub	r3,r3,r21
    1af8:	1d47c83a 	sub	r3,r3,r21
    1afc:	1dc5c83a 	sub	r2,r3,r23
    1b00:	1585c83a 	sub	r2,r2,r22
    1b04:	4080000d 	sth	r2,0(r8)
    1b08:	29400044 	addi	r5,r5,1
    1b0c:	39c00044 	addi	r7,r7,1
    1b10:	5ac00044 	addi	r11,r11,1
    1b14:	31800044 	addi	r6,r6,1
    1b18:	52800044 	addi	r10,r10,1
    1b1c:	4a400044 	addi	r9,r9,1
    1b20:	42000084 	addi	r8,r8,2

void sobel_y( unsigned char *source ) {
   int x,y;
   short result = 0;
   for (y = 1 ; y < (sobel_height-1) ; y++) {
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    1b24:	617fea1e 	bne	r12,r5,1ad0 <sobel_y+0x84>
    1b28:	6b400044 	addi	r13,r13,1
    1b2c:	23c9883a 	add	r4,r4,r15
    1b30:	77dd883a 	add	r14,r14,ra
}

void sobel_y( unsigned char *source ) {
   int x,y;
   short result = 0;
   for (y = 1 ; y < (sobel_height-1) ; y++) {
    1b34:	847fdb16 	blt	r16,r17,1aa4 <sobel_y+0x58>
			result += gy_array[2][2]*source[(y+1)*sobel_width+(x+1)];

			sobel_y_result[y*sobel_width+x] = result ;// sobel_mac(source,x,y,gy_array,sobel_width);
      }
   }
}
    1b38:	dfc00817 	ldw	ra,32(sp)
    1b3c:	ddc00717 	ldw	r23,28(sp)
    1b40:	dd800617 	ldw	r22,24(sp)
    1b44:	dd400517 	ldw	r21,20(sp)
    1b48:	dd000417 	ldw	r20,16(sp)
    1b4c:	dcc00317 	ldw	r19,12(sp)
    1b50:	dc800217 	ldw	r18,8(sp)
    1b54:	dc400117 	ldw	r17,4(sp)
    1b58:	dc000017 	ldw	r16,0(sp)
    1b5c:	dec00904 	addi	sp,sp,36
    1b60:	f800283a 	ret

00001b64 <sobel_y_with_rgb>:

void sobel_y_with_rgb( unsigned char *source ) {
    1b64:	defff504 	addi	sp,sp,-44
    1b68:	dd400615 	stw	r21,24(sp)
   int x,y;
   short result;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    1b6c:	d5671d17 	ldw	r21,-25484(gp)
			sobel_y_result[y*sobel_width+x] = result ;// sobel_mac(source,x,y,gy_array,sobel_width);
      }
   }
}

void sobel_y_with_rgb( unsigned char *source ) {
    1b70:	dfc00a15 	stw	ra,40(sp)
    1b74:	df000915 	stw	fp,36(sp)
    1b78:	ddc00815 	stw	r23,32(sp)
    1b7c:	dd800715 	stw	r22,28(sp)
    1b80:	dd000515 	stw	r20,20(sp)
    1b84:	dcc00415 	stw	r19,16(sp)
    1b88:	dc800315 	stw	r18,12(sp)
    1b8c:	dc400215 	stw	r17,8(sp)
    1b90:	dc000115 	stw	r16,4(sp)
   int x,y;
   short result;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    1b94:	00800084 	movi	r2,2
    1b98:	1540470e 	bge	r2,r21,1cb8 <sobel_y_with_rgb+0x154>
    1b9c:	d4271b17 	ldw	r16,-25492(gp)
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    	  result = sobel_mac(source,x,y,gy_array,sobel_width);
         sobel_y_result[y*sobel_width+x] = result;
    1ba0:	d7271f17 	ldw	fp,-25476(gp)
         if (result < 0) {
       	  sobel_rgb565[y*sobel_width+x] = ((-result)>>2)<<5;
    1ba4:	d5e72017 	ldw	r23,-25472(gp)
    1ba8:	842d883a 	add	r22,r16,r16
    1bac:	2029883a 	mov	r20,r4
    1bb0:	25bf883a 	add	ra,r4,r22
    1bb4:	80c00084 	addi	r3,r16,2
    1bb8:	813fffc4 	addi	r4,r16,-1
    1bbc:	a2800044 	addi	r10,r20,1
    1bc0:	07ffc83a 	sub	ra,zero,ra
    1bc4:	ad7fffc4 	addi	r21,r21,-1
    1bc8:	8005883a 	mov	r2,r16
    1bcc:	04400044 	movi	r17,1
    1bd0:	d8c00015 	stw	r3,0(sp)
    1bd4:	d8c00017 	ldw	r3,0(sp)
    1bd8:	12000044 	addi	r8,r2,1
    1bdc:	4211883a 	add	r8,r8,r8
    1be0:	ba1d883a 	add	r14,r23,r8
    1be4:	1427883a 	add	r19,r2,r16
    1be8:	55a5883a 	add	r18,r10,r22
    1bec:	1885883a 	add	r2,r3,r2
    1bf0:	8c400044 	addi	r17,r17,1
    1bf4:	537fffc4 	addi	r13,r10,-1
    1bf8:	53000044 	addi	r12,r10,1
    1bfc:	a4d7883a 	add	r11,r20,r19
    1c00:	a093883a 	add	r9,r20,r2
    1c04:	e211883a 	add	r8,fp,r8
			sobel_y_result[y*sobel_width+x] = result ;// sobel_mac(source,x,y,gy_array,sobel_width);
      }
   }
}

void sobel_y_with_rgb( unsigned char *source ) {
    1c08:	900f883a 	mov	r7,r18
    1c0c:	701f883a 	mov	r15,r14
    1c10:	00000b06 	br	1c40 <sobel_y_with_rgb+0xdc>
    	  result = sobel_mac(source,x,y,gy_array,sobel_width);
         sobel_y_result[y*sobel_width+x] = result;
         if (result < 0) {
       	  sobel_rgb565[y*sobel_width+x] = ((-result)>>2)<<5;
         } else {
       	  sobel_rgb565[y*sobel_width+x] = ((result>>3)&0x1F)<<11;
    1c14:	180692fa 	slli	r3,r3,11
    1c18:	70c0000d 	sth	r3,0(r14)
    1c1c:	7bc00084 	addi	r15,r15,2
    1c20:	73800084 	addi	r14,r14,2
    1c24:	6b400044 	addi	r13,r13,1
    1c28:	52800044 	addi	r10,r10,1
    1c2c:	63000044 	addi	r12,r12,1
    1c30:	5ac00044 	addi	r11,r11,1
    1c34:	39c00044 	addi	r7,r7,1
    1c38:	4a400044 	addi	r9,r9,1
    1c3c:	42000084 	addi	r8,r8,2
void sobel_y_with_rgb( unsigned char *source ) {
   int x,y;
   short result;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    1c40:	3fc5883a 	add	r2,r7,ra
    1c44:	1100180e 	bge	r2,r4,1ca8 <sobel_y_with_rgb+0x144>
   short dy,dx;
   short result = 0;

   for (dy = -1 ; dy < 2 ; dy++) {
      for (dx = -1 ; dx < 2 ; dx++) {
         result += filter[(dy+1)*3+(dx+1)]*
    1c48:	60800003 	ldbu	r2,0(r12)
    1c4c:	69800003 	ldbu	r6,0(r13)
    1c50:	50c00003 	ldbu	r3,0(r10)
    1c54:	39400003 	ldbu	r5,0(r7)
    1c58:	308d883a 	add	r6,r6,r2
    1c5c:	18c7883a 	add	r3,r3,r3
    1c60:	58800003 	ldbu	r2,0(r11)
    1c64:	30c7883a 	add	r3,r6,r3
    1c68:	1947c83a 	sub	r3,r3,r5
    1c6c:	49800003 	ldbu	r6,0(r9)
    1c70:	1947c83a 	sub	r3,r3,r5
    1c74:	1885c83a 	sub	r2,r3,r2
    1c78:	1185c83a 	sub	r2,r2,r6
   short result;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    	  result = sobel_mac(source,x,y,gy_array,sobel_width);
         sobel_y_result[y*sobel_width+x] = result;
    1c7c:	4080000d 	sth	r2,0(r8)
         if (result < 0) {
    1c80:	10bfffcc 	andi	r2,r2,65535
    1c84:	10a0001c 	xori	r2,r2,32768
    1c88:	10a00004 	addi	r2,r2,-32768
       	  sobel_rgb565[y*sobel_width+x] = ((-result)>>2)<<5;
         } else {
       	  sobel_rgb565[y*sobel_width+x] = ((result>>3)&0x1F)<<11;
    1c8c:	1007d0fa 	srai	r3,r2,3

   for (y = 1 ; y < (sobel_height-1) ; y++) {
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    	  result = sobel_mac(source,x,y,gy_array,sobel_width);
         sobel_y_result[y*sobel_width+x] = result;
         if (result < 0) {
    1c90:	103fe00e 	bge	r2,zero,1c14 <sobel_y_with_rgb+0xb0>
       	  sobel_rgb565[y*sobel_width+x] = ((-result)>>2)<<5;
    1c94:	0085c83a 	sub	r2,zero,r2
    1c98:	1005d0ba 	srai	r2,r2,2
    1c9c:	1004917a 	slli	r2,r2,5
    1ca0:	7880000d 	sth	r2,0(r15)
    1ca4:	003fdd06 	br	1c1c <sobel_y_with_rgb+0xb8>
    1ca8:	9415c83a 	sub	r10,r18,r16
    1cac:	fc3fc83a 	sub	ra,ra,r16
    1cb0:	9805883a 	mov	r2,r19

void sobel_y_with_rgb( unsigned char *source ) {
   int x,y;
   short result;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    1cb4:	ac7fc71e 	bne	r21,r17,1bd4 <sobel_y_with_rgb+0x70>
         } else {
       	  sobel_rgb565[y*sobel_width+x] = ((result>>3)&0x1F)<<11;
         }
      }
   }
}
    1cb8:	dfc00a17 	ldw	ra,40(sp)
    1cbc:	df000917 	ldw	fp,36(sp)
    1cc0:	ddc00817 	ldw	r23,32(sp)
    1cc4:	dd800717 	ldw	r22,28(sp)
    1cc8:	dd400617 	ldw	r21,24(sp)
    1ccc:	dd000517 	ldw	r20,20(sp)
    1cd0:	dcc00417 	ldw	r19,16(sp)
    1cd4:	dc800317 	ldw	r18,12(sp)
    1cd8:	dc400217 	ldw	r17,8(sp)
    1cdc:	dc000117 	ldw	r16,4(sp)
    1ce0:	dec00b04 	addi	sp,sp,44
    1ce4:	f800283a 	ret

00001ce8 <sobel_threshold>:

void sobel_threshold(short threshold) {
	int x,y,arrayindex;
	short sum,value;
	for (y = 1 ; y < (sobel_height-1) ; y++) {
    1ce8:	d0a71d17 	ldw	r2,-25484(gp)
    1cec:	02400084 	movi	r9,2
    1cf0:	4880290e 	bge	r9,r2,1d98 <sobel_threshold+0xb0>
    1cf4:	223fffcc 	andi	r8,r4,65535
    1cf8:	d0e71b17 	ldw	r3,-25492(gp)
    1cfc:	4220001c 	xori	r8,r8,32768
    1d00:	01c00044 	movi	r7,1
    1d04:	42200004 	addi	r8,r8,-32768
		for (x = 1 ; x < (sobel_width-1) ; x++) {
    1d08:	48c0200e 	bge	r9,r3,1d8c <sobel_threshold+0xa4>
    1d0c:	01400044 	movi	r5,1
    1d10:	00000c06 	br	1d44 <sobel_threshold+0x5c>
			arrayindex = (y*sobel_width)+x;
			value = sobel_x_result[arrayindex];
			sum = (value < 0) ? -value : value;
			value = sobel_y_result[arrayindex];
			sum += (value < 0) ? -value : value;
			sobel_result[arrayindex] = (sum > threshold) ? 0xFF : 0;
    1d14:	2080000f 	ldh	r2,0(r4)
    1d18:	10001916 	blt	r2,zero,1d80 <sobel_threshold+0x98>
    1d1c:	3085883a 	add	r2,r6,r2
    1d20:	10bfffcc 	andi	r2,r2,65535
    1d24:	10a0001c 	xori	r2,r2,32768
    1d28:	10a00004 	addi	r2,r2,-32768
    1d2c:	4084803a 	cmplt	r2,r8,r2
    1d30:	0085c83a 	sub	r2,zero,r2
    1d34:	18800005 	stb	r2,0(r3)

void sobel_threshold(short threshold) {
	int x,y,arrayindex;
	short sum,value;
	for (y = 1 ; y < (sobel_height-1) ; y++) {
		for (x = 1 ; x < (sobel_width-1) ; x++) {
    1d38:	d0e71b17 	ldw	r3,-25492(gp)
    1d3c:	18bfffc4 	addi	r2,r3,-1
    1d40:	2880110e 	bge	r5,r2,1d88 <sobel_threshold+0xa0>
			arrayindex = (y*sobel_width)+x;
			value = sobel_x_result[arrayindex];
    1d44:	38c7383a 	mul	r3,r7,r3
			sum = (value < 0) ? -value : value;
			value = sobel_y_result[arrayindex];
    1d48:	d1a71f17 	ldw	r6,-25476(gp)
	int x,y,arrayindex;
	short sum,value;
	for (y = 1 ; y < (sobel_height-1) ; y++) {
		for (x = 1 ; x < (sobel_width-1) ; x++) {
			arrayindex = (y*sobel_width)+x;
			value = sobel_x_result[arrayindex];
    1d4c:	d1271e17 	ldw	r4,-25480(gp)
    1d50:	1947883a 	add	r3,r3,r5
    1d54:	18c5883a 	add	r2,r3,r3
			sum = (value < 0) ? -value : value;
			value = sobel_y_result[arrayindex];
    1d58:	308d883a 	add	r6,r6,r2
	int x,y,arrayindex;
	short sum,value;
	for (y = 1 ; y < (sobel_height-1) ; y++) {
		for (x = 1 ; x < (sobel_width-1) ; x++) {
			arrayindex = (y*sobel_width)+x;
			value = sobel_x_result[arrayindex];
    1d5c:	2089883a 	add	r4,r4,r2
			sum = (value < 0) ? -value : value;
			value = sobel_y_result[arrayindex];
			sum += (value < 0) ? -value : value;
			sobel_result[arrayindex] = (sum > threshold) ? 0xFF : 0;
    1d60:	3180000f 	ldh	r6,0(r6)
    1d64:	d0a71c17 	ldw	r2,-25488(gp)

void sobel_threshold(short threshold) {
	int x,y,arrayindex;
	short sum,value;
	for (y = 1 ; y < (sobel_height-1) ; y++) {
		for (x = 1 ; x < (sobel_width-1) ; x++) {
    1d68:	29400044 	addi	r5,r5,1
			arrayindex = (y*sobel_width)+x;
			value = sobel_x_result[arrayindex];
			sum = (value < 0) ? -value : value;
			value = sobel_y_result[arrayindex];
			sum += (value < 0) ? -value : value;
			sobel_result[arrayindex] = (sum > threshold) ? 0xFF : 0;
    1d6c:	10c7883a 	add	r3,r2,r3
    1d70:	303fe80e 	bge	r6,zero,1d14 <sobel_threshold+0x2c>
    1d74:	2080000f 	ldh	r2,0(r4)
    1d78:	018dc83a 	sub	r6,zero,r6
    1d7c:	103fe70e 	bge	r2,zero,1d1c <sobel_threshold+0x34>
    1d80:	0085c83a 	sub	r2,zero,r2
    1d84:	003fe506 	br	1d1c <sobel_threshold+0x34>
    1d88:	d0a71d17 	ldw	r2,-25484(gp)
}

void sobel_threshold(short threshold) {
	int x,y,arrayindex;
	short sum,value;
	for (y = 1 ; y < (sobel_height-1) ; y++) {
    1d8c:	39c00044 	addi	r7,r7,1
    1d90:	113fffc4 	addi	r4,r2,-1
    1d94:	393fdc16 	blt	r7,r4,1d08 <sobel_threshold+0x20>
    1d98:	f800283a 	ret

00001d9c <GetSobel_rgb>:
	}
}

unsigned short *GetSobel_rgb() {
	return sobel_rgb565;
}
    1d9c:	d0a72017 	ldw	r2,-25472(gp)
    1da0:	f800283a 	ret

00001da4 <GetSobelResult>:

unsigned char *GetSobelResult() {
	return sobel_result;
}
    1da4:	d0a71c17 	ldw	r2,-25488(gp)
    1da8:	f800283a 	ret

00001dac <vga_set_pointer>:

#include <system.h>
#include <io.h>

void vga_set_pointer( void* image ) {
	IOWR_32DIRECT(VGA_DMA_0_BASE,0,(int)image);
    1dac:	00804034 	movhi	r2,256
    1db0:	10843404 	addi	r2,r2,4304
    1db4:	11000035 	stwio	r4,0(r2)
    1db8:	f800283a 	ret

00001dbc <vga_set_swap>:
}

void vga_set_swap(char swap) {
	IOWR_8DIRECT(VGA_DMA_0_BASE,4,swap);
    1dbc:	00804034 	movhi	r2,256
    1dc0:	10843504 	addi	r2,r2,4308
    1dc4:	11000025 	stbio	r4,0(r2)
    1dc8:	f800283a 	ret

00001dcc <__divsi3>:
    1dcc:	20001b16 	blt	r4,zero,1e3c <__divsi3+0x70>
    1dd0:	000f883a 	mov	r7,zero
    1dd4:	28001616 	blt	r5,zero,1e30 <__divsi3+0x64>
    1dd8:	200d883a 	mov	r6,r4
    1ddc:	29001a2e 	bgeu	r5,r4,1e48 <__divsi3+0x7c>
    1de0:	00800804 	movi	r2,32
    1de4:	00c00044 	movi	r3,1
    1de8:	00000106 	br	1df0 <__divsi3+0x24>
    1dec:	10000d26 	beq	r2,zero,1e24 <__divsi3+0x58>
    1df0:	294b883a 	add	r5,r5,r5
    1df4:	10bfffc4 	addi	r2,r2,-1
    1df8:	18c7883a 	add	r3,r3,r3
    1dfc:	293ffb36 	bltu	r5,r4,1dec <__divsi3+0x20>
    1e00:	0005883a 	mov	r2,zero
    1e04:	18000726 	beq	r3,zero,1e24 <__divsi3+0x58>
    1e08:	0005883a 	mov	r2,zero
    1e0c:	31400236 	bltu	r6,r5,1e18 <__divsi3+0x4c>
    1e10:	314dc83a 	sub	r6,r6,r5
    1e14:	10c4b03a 	or	r2,r2,r3
    1e18:	1806d07a 	srli	r3,r3,1
    1e1c:	280ad07a 	srli	r5,r5,1
    1e20:	183ffa1e 	bne	r3,zero,1e0c <__divsi3+0x40>
    1e24:	38000126 	beq	r7,zero,1e2c <__divsi3+0x60>
    1e28:	0085c83a 	sub	r2,zero,r2
    1e2c:	f800283a 	ret
    1e30:	014bc83a 	sub	r5,zero,r5
    1e34:	39c0005c 	xori	r7,r7,1
    1e38:	003fe706 	br	1dd8 <__divsi3+0xc>
    1e3c:	0109c83a 	sub	r4,zero,r4
    1e40:	01c00044 	movi	r7,1
    1e44:	003fe306 	br	1dd4 <__divsi3+0x8>
    1e48:	00c00044 	movi	r3,1
    1e4c:	003fee06 	br	1e08 <__divsi3+0x3c>

00001e50 <__modsi3>:
    1e50:	20001716 	blt	r4,zero,1eb0 <__modsi3+0x60>
    1e54:	000f883a 	mov	r7,zero
    1e58:	2005883a 	mov	r2,r4
    1e5c:	28001216 	blt	r5,zero,1ea8 <__modsi3+0x58>
    1e60:	2900162e 	bgeu	r5,r4,1ebc <__modsi3+0x6c>
    1e64:	01800804 	movi	r6,32
    1e68:	00c00044 	movi	r3,1
    1e6c:	00000106 	br	1e74 <__modsi3+0x24>
    1e70:	30000a26 	beq	r6,zero,1e9c <__modsi3+0x4c>
    1e74:	294b883a 	add	r5,r5,r5
    1e78:	31bfffc4 	addi	r6,r6,-1
    1e7c:	18c7883a 	add	r3,r3,r3
    1e80:	293ffb36 	bltu	r5,r4,1e70 <__modsi3+0x20>
    1e84:	18000526 	beq	r3,zero,1e9c <__modsi3+0x4c>
    1e88:	1806d07a 	srli	r3,r3,1
    1e8c:	11400136 	bltu	r2,r5,1e94 <__modsi3+0x44>
    1e90:	1145c83a 	sub	r2,r2,r5
    1e94:	280ad07a 	srli	r5,r5,1
    1e98:	183ffb1e 	bne	r3,zero,1e88 <__modsi3+0x38>
    1e9c:	38000126 	beq	r7,zero,1ea4 <__modsi3+0x54>
    1ea0:	0085c83a 	sub	r2,zero,r2
    1ea4:	f800283a 	ret
    1ea8:	014bc83a 	sub	r5,zero,r5
    1eac:	003fec06 	br	1e60 <__modsi3+0x10>
    1eb0:	0109c83a 	sub	r4,zero,r4
    1eb4:	01c00044 	movi	r7,1
    1eb8:	003fe706 	br	1e58 <__modsi3+0x8>
    1ebc:	00c00044 	movi	r3,1
    1ec0:	003ff106 	br	1e88 <__modsi3+0x38>

00001ec4 <__udivsi3>:
    1ec4:	200d883a 	mov	r6,r4
    1ec8:	2900152e 	bgeu	r5,r4,1f20 <__udivsi3+0x5c>
    1ecc:	28001416 	blt	r5,zero,1f20 <__udivsi3+0x5c>
    1ed0:	00800804 	movi	r2,32
    1ed4:	00c00044 	movi	r3,1
    1ed8:	00000206 	br	1ee4 <__udivsi3+0x20>
    1edc:	10000e26 	beq	r2,zero,1f18 <__udivsi3+0x54>
    1ee0:	28000516 	blt	r5,zero,1ef8 <__udivsi3+0x34>
    1ee4:	294b883a 	add	r5,r5,r5
    1ee8:	10bfffc4 	addi	r2,r2,-1
    1eec:	18c7883a 	add	r3,r3,r3
    1ef0:	293ffa36 	bltu	r5,r4,1edc <__udivsi3+0x18>
    1ef4:	18000826 	beq	r3,zero,1f18 <__udivsi3+0x54>
    1ef8:	0005883a 	mov	r2,zero
    1efc:	31400236 	bltu	r6,r5,1f08 <__udivsi3+0x44>
    1f00:	314dc83a 	sub	r6,r6,r5
    1f04:	10c4b03a 	or	r2,r2,r3
    1f08:	1806d07a 	srli	r3,r3,1
    1f0c:	280ad07a 	srli	r5,r5,1
    1f10:	183ffa1e 	bne	r3,zero,1efc <__udivsi3+0x38>
    1f14:	f800283a 	ret
    1f18:	0005883a 	mov	r2,zero
    1f1c:	f800283a 	ret
    1f20:	00c00044 	movi	r3,1
    1f24:	003ff406 	br	1ef8 <__udivsi3+0x34>

00001f28 <__umodsi3>:
    1f28:	2005883a 	mov	r2,r4
    1f2c:	2900122e 	bgeu	r5,r4,1f78 <__umodsi3+0x50>
    1f30:	28001116 	blt	r5,zero,1f78 <__umodsi3+0x50>
    1f34:	01800804 	movi	r6,32
    1f38:	00c00044 	movi	r3,1
    1f3c:	00000206 	br	1f48 <__umodsi3+0x20>
    1f40:	30000c26 	beq	r6,zero,1f74 <__umodsi3+0x4c>
    1f44:	28000516 	blt	r5,zero,1f5c <__umodsi3+0x34>
    1f48:	294b883a 	add	r5,r5,r5
    1f4c:	31bfffc4 	addi	r6,r6,-1
    1f50:	18c7883a 	add	r3,r3,r3
    1f54:	293ffa36 	bltu	r5,r4,1f40 <__umodsi3+0x18>
    1f58:	18000626 	beq	r3,zero,1f74 <__umodsi3+0x4c>
    1f5c:	1806d07a 	srli	r3,r3,1
    1f60:	11400136 	bltu	r2,r5,1f68 <__umodsi3+0x40>
    1f64:	1145c83a 	sub	r2,r2,r5
    1f68:	280ad07a 	srli	r5,r5,1
    1f6c:	183ffb1e 	bne	r3,zero,1f5c <__umodsi3+0x34>
    1f70:	f800283a 	ret
    1f74:	f800283a 	ret
    1f78:	00c00044 	movi	r3,1
    1f7c:	003ff706 	br	1f5c <__umodsi3+0x34>

00001f80 <malloc>:
    1f80:	00800074 	movhi	r2,1
    1f84:	108d2c04 	addi	r2,r2,13488
    1f88:	200b883a 	mov	r5,r4
    1f8c:	11000017 	ldw	r4,0(r2)
    1f90:	0001fa81 	jmpi	1fa8 <_malloc_r>

00001f94 <free>:
    1f94:	00800074 	movhi	r2,1
    1f98:	108d2c04 	addi	r2,r2,13488
    1f9c:	200b883a 	mov	r5,r4
    1fa0:	11000017 	ldw	r4,0(r2)
    1fa4:	0006df81 	jmpi	6df8 <_free_r>

00001fa8 <_malloc_r>:
    1fa8:	defff504 	addi	sp,sp,-44
    1fac:	dc800315 	stw	r18,12(sp)
    1fb0:	dfc00a15 	stw	ra,40(sp)
    1fb4:	df000915 	stw	fp,36(sp)
    1fb8:	ddc00815 	stw	r23,32(sp)
    1fbc:	dd800715 	stw	r22,28(sp)
    1fc0:	dd400615 	stw	r21,24(sp)
    1fc4:	dd000515 	stw	r20,20(sp)
    1fc8:	dcc00415 	stw	r19,16(sp)
    1fcc:	dc400215 	stw	r17,8(sp)
    1fd0:	dc000115 	stw	r16,4(sp)
    1fd4:	288002c4 	addi	r2,r5,11
    1fd8:	00c00584 	movi	r3,22
    1fdc:	2025883a 	mov	r18,r4
    1fe0:	18807f2e 	bgeu	r3,r2,21e0 <_malloc_r+0x238>
    1fe4:	047ffe04 	movi	r17,-8
    1fe8:	1462703a 	and	r17,r2,r17
    1fec:	8800a316 	blt	r17,zero,227c <_malloc_r+0x2d4>
    1ff0:	8940a236 	bltu	r17,r5,227c <_malloc_r+0x2d4>
    1ff4:	000ec900 	call	ec90 <__malloc_lock>
    1ff8:	00807dc4 	movi	r2,503
    1ffc:	1441e92e 	bgeu	r2,r17,27a4 <_malloc_r+0x7fc>
    2000:	8804d27a 	srli	r2,r17,9
    2004:	1000a126 	beq	r2,zero,228c <_malloc_r+0x2e4>
    2008:	00c00104 	movi	r3,4
    200c:	18811e36 	bltu	r3,r2,2488 <_malloc_r+0x4e0>
    2010:	8804d1ba 	srli	r2,r17,6
    2014:	12000e44 	addi	r8,r2,57
    2018:	11c00e04 	addi	r7,r2,56
    201c:	4209883a 	add	r4,r8,r8
    2020:	04c00074 	movhi	r19,1
    2024:	2109883a 	add	r4,r4,r4
    2028:	9cc67e04 	addi	r19,r19,6648
    202c:	2109883a 	add	r4,r4,r4
    2030:	9909883a 	add	r4,r19,r4
    2034:	24000117 	ldw	r16,4(r4)
    2038:	213ffe04 	addi	r4,r4,-8
    203c:	24009726 	beq	r4,r16,229c <_malloc_r+0x2f4>
    2040:	80800117 	ldw	r2,4(r16)
    2044:	01bfff04 	movi	r6,-4
    2048:	014003c4 	movi	r5,15
    204c:	1184703a 	and	r2,r2,r6
    2050:	1447c83a 	sub	r3,r2,r17
    2054:	28c00716 	blt	r5,r3,2074 <_malloc_r+0xcc>
    2058:	1800920e 	bge	r3,zero,22a4 <_malloc_r+0x2fc>
    205c:	84000317 	ldw	r16,12(r16)
    2060:	24008e26 	beq	r4,r16,229c <_malloc_r+0x2f4>
    2064:	80800117 	ldw	r2,4(r16)
    2068:	1184703a 	and	r2,r2,r6
    206c:	1447c83a 	sub	r3,r2,r17
    2070:	28fff90e 	bge	r5,r3,2058 <_malloc_r+0xb0>
    2074:	3809883a 	mov	r4,r7
    2078:	01800074 	movhi	r6,1
    207c:	9c000417 	ldw	r16,16(r19)
    2080:	31867e04 	addi	r6,r6,6648
    2084:	32000204 	addi	r8,r6,8
    2088:	82013426 	beq	r16,r8,255c <_malloc_r+0x5b4>
    208c:	80c00117 	ldw	r3,4(r16)
    2090:	00bfff04 	movi	r2,-4
    2094:	188e703a 	and	r7,r3,r2
    2098:	3c45c83a 	sub	r2,r7,r17
    209c:	00c003c4 	movi	r3,15
    20a0:	18811f16 	blt	r3,r2,2520 <_malloc_r+0x578>
    20a4:	32000515 	stw	r8,20(r6)
    20a8:	32000415 	stw	r8,16(r6)
    20ac:	10007f0e 	bge	r2,zero,22ac <_malloc_r+0x304>
    20b0:	00807fc4 	movi	r2,511
    20b4:	11c0fd36 	bltu	r2,r7,24ac <_malloc_r+0x504>
    20b8:	3806d0fa 	srli	r3,r7,3
    20bc:	01c00044 	movi	r7,1
    20c0:	30800117 	ldw	r2,4(r6)
    20c4:	19400044 	addi	r5,r3,1
    20c8:	294b883a 	add	r5,r5,r5
    20cc:	1807d0ba 	srai	r3,r3,2
    20d0:	294b883a 	add	r5,r5,r5
    20d4:	294b883a 	add	r5,r5,r5
    20d8:	298b883a 	add	r5,r5,r6
    20dc:	38c6983a 	sll	r3,r7,r3
    20e0:	29c00017 	ldw	r7,0(r5)
    20e4:	2a7ffe04 	addi	r9,r5,-8
    20e8:	1886b03a 	or	r3,r3,r2
    20ec:	82400315 	stw	r9,12(r16)
    20f0:	81c00215 	stw	r7,8(r16)
    20f4:	30c00115 	stw	r3,4(r6)
    20f8:	2c000015 	stw	r16,0(r5)
    20fc:	3c000315 	stw	r16,12(r7)
    2100:	2005d0ba 	srai	r2,r4,2
    2104:	01400044 	movi	r5,1
    2108:	288a983a 	sll	r5,r5,r2
    210c:	19406f36 	bltu	r3,r5,22cc <_malloc_r+0x324>
    2110:	28c4703a 	and	r2,r5,r3
    2114:	10000a1e 	bne	r2,zero,2140 <_malloc_r+0x198>
    2118:	00bfff04 	movi	r2,-4
    211c:	294b883a 	add	r5,r5,r5
    2120:	2088703a 	and	r4,r4,r2
    2124:	28c4703a 	and	r2,r5,r3
    2128:	21000104 	addi	r4,r4,4
    212c:	1000041e 	bne	r2,zero,2140 <_malloc_r+0x198>
    2130:	294b883a 	add	r5,r5,r5
    2134:	28c4703a 	and	r2,r5,r3
    2138:	21000104 	addi	r4,r4,4
    213c:	103ffc26 	beq	r2,zero,2130 <_malloc_r+0x188>
    2140:	02bfff04 	movi	r10,-4
    2144:	024003c4 	movi	r9,15
    2148:	21800044 	addi	r6,r4,1
    214c:	318d883a 	add	r6,r6,r6
    2150:	318d883a 	add	r6,r6,r6
    2154:	318d883a 	add	r6,r6,r6
    2158:	998d883a 	add	r6,r19,r6
    215c:	333ffe04 	addi	r12,r6,-8
    2160:	2017883a 	mov	r11,r4
    2164:	31800104 	addi	r6,r6,4
    2168:	34000017 	ldw	r16,0(r6)
    216c:	31fffd04 	addi	r7,r6,-12
    2170:	81c0041e 	bne	r16,r7,2184 <_malloc_r+0x1dc>
    2174:	0000fb06 	br	2564 <_malloc_r+0x5bc>
    2178:	1801030e 	bge	r3,zero,2588 <_malloc_r+0x5e0>
    217c:	84000317 	ldw	r16,12(r16)
    2180:	81c0f826 	beq	r16,r7,2564 <_malloc_r+0x5bc>
    2184:	80800117 	ldw	r2,4(r16)
    2188:	1284703a 	and	r2,r2,r10
    218c:	1447c83a 	sub	r3,r2,r17
    2190:	48fff90e 	bge	r9,r3,2178 <_malloc_r+0x1d0>
    2194:	80800317 	ldw	r2,12(r16)
    2198:	81000217 	ldw	r4,8(r16)
    219c:	89400054 	ori	r5,r17,1
    21a0:	81400115 	stw	r5,4(r16)
    21a4:	20800315 	stw	r2,12(r4)
    21a8:	11000215 	stw	r4,8(r2)
    21ac:	8463883a 	add	r17,r16,r17
    21b0:	9c400515 	stw	r17,20(r19)
    21b4:	9c400415 	stw	r17,16(r19)
    21b8:	18800054 	ori	r2,r3,1
    21bc:	88800115 	stw	r2,4(r17)
    21c0:	8a000315 	stw	r8,12(r17)
    21c4:	8a000215 	stw	r8,8(r17)
    21c8:	88e3883a 	add	r17,r17,r3
    21cc:	88c00015 	stw	r3,0(r17)
    21d0:	9009883a 	mov	r4,r18
    21d4:	000ecb40 	call	ecb4 <__malloc_unlock>
    21d8:	80800204 	addi	r2,r16,8
    21dc:	00001b06 	br	224c <_malloc_r+0x2a4>
    21e0:	04400404 	movi	r17,16
    21e4:	89402536 	bltu	r17,r5,227c <_malloc_r+0x2d4>
    21e8:	000ec900 	call	ec90 <__malloc_lock>
    21ec:	00800184 	movi	r2,6
    21f0:	01000084 	movi	r4,2
    21f4:	04c00074 	movhi	r19,1
    21f8:	1085883a 	add	r2,r2,r2
    21fc:	9cc67e04 	addi	r19,r19,6648
    2200:	1085883a 	add	r2,r2,r2
    2204:	9885883a 	add	r2,r19,r2
    2208:	14000117 	ldw	r16,4(r2)
    220c:	10fffe04 	addi	r3,r2,-8
    2210:	80c0d926 	beq	r16,r3,2578 <_malloc_r+0x5d0>
    2214:	80c00117 	ldw	r3,4(r16)
    2218:	81000317 	ldw	r4,12(r16)
    221c:	00bfff04 	movi	r2,-4
    2220:	1884703a 	and	r2,r3,r2
    2224:	81400217 	ldw	r5,8(r16)
    2228:	8085883a 	add	r2,r16,r2
    222c:	10c00117 	ldw	r3,4(r2)
    2230:	29000315 	stw	r4,12(r5)
    2234:	21400215 	stw	r5,8(r4)
    2238:	18c00054 	ori	r3,r3,1
    223c:	10c00115 	stw	r3,4(r2)
    2240:	9009883a 	mov	r4,r18
    2244:	000ecb40 	call	ecb4 <__malloc_unlock>
    2248:	80800204 	addi	r2,r16,8
    224c:	dfc00a17 	ldw	ra,40(sp)
    2250:	df000917 	ldw	fp,36(sp)
    2254:	ddc00817 	ldw	r23,32(sp)
    2258:	dd800717 	ldw	r22,28(sp)
    225c:	dd400617 	ldw	r21,24(sp)
    2260:	dd000517 	ldw	r20,20(sp)
    2264:	dcc00417 	ldw	r19,16(sp)
    2268:	dc800317 	ldw	r18,12(sp)
    226c:	dc400217 	ldw	r17,8(sp)
    2270:	dc000117 	ldw	r16,4(sp)
    2274:	dec00b04 	addi	sp,sp,44
    2278:	f800283a 	ret
    227c:	00800304 	movi	r2,12
    2280:	90800015 	stw	r2,0(r18)
    2284:	0005883a 	mov	r2,zero
    2288:	003ff006 	br	224c <_malloc_r+0x2a4>
    228c:	01002004 	movi	r4,128
    2290:	02001004 	movi	r8,64
    2294:	01c00fc4 	movi	r7,63
    2298:	003f6106 	br	2020 <_malloc_r+0x78>
    229c:	4009883a 	mov	r4,r8
    22a0:	003f7506 	br	2078 <_malloc_r+0xd0>
    22a4:	81000317 	ldw	r4,12(r16)
    22a8:	003fde06 	br	2224 <_malloc_r+0x27c>
    22ac:	81c5883a 	add	r2,r16,r7
    22b0:	11400117 	ldw	r5,4(r2)
    22b4:	9009883a 	mov	r4,r18
    22b8:	29400054 	ori	r5,r5,1
    22bc:	11400115 	stw	r5,4(r2)
    22c0:	000ecb40 	call	ecb4 <__malloc_unlock>
    22c4:	80800204 	addi	r2,r16,8
    22c8:	003fe006 	br	224c <_malloc_r+0x2a4>
    22cc:	9c000217 	ldw	r16,8(r19)
    22d0:	00bfff04 	movi	r2,-4
    22d4:	85800117 	ldw	r22,4(r16)
    22d8:	b0ac703a 	and	r22,r22,r2
    22dc:	b4400336 	bltu	r22,r17,22ec <_malloc_r+0x344>
    22e0:	b445c83a 	sub	r2,r22,r17
    22e4:	00c003c4 	movi	r3,15
    22e8:	18805d16 	blt	r3,r2,2460 <_malloc_r+0x4b8>
    22ec:	05c00074 	movhi	r23,1
    22f0:	00800074 	movhi	r2,1
    22f4:	10944c04 	addi	r2,r2,20784
    22f8:	bdcd2904 	addi	r23,r23,13476
    22fc:	15400017 	ldw	r21,0(r2)
    2300:	b8c00017 	ldw	r3,0(r23)
    2304:	00bfffc4 	movi	r2,-1
    2308:	858d883a 	add	r6,r16,r22
    230c:	8d6b883a 	add	r21,r17,r21
    2310:	1880ea26 	beq	r3,r2,26bc <_malloc_r+0x714>
    2314:	ad4403c4 	addi	r21,r21,4111
    2318:	00bc0004 	movi	r2,-4096
    231c:	a8aa703a 	and	r21,r21,r2
    2320:	a80b883a 	mov	r5,r21
    2324:	9009883a 	mov	r4,r18
    2328:	d9800015 	stw	r6,0(sp)
    232c:	00028f40 	call	28f4 <_sbrk_r>
    2330:	1029883a 	mov	r20,r2
    2334:	00bfffc4 	movi	r2,-1
    2338:	d9800017 	ldw	r6,0(sp)
    233c:	a080e826 	beq	r20,r2,26e0 <_malloc_r+0x738>
    2340:	a180a636 	bltu	r20,r6,25dc <_malloc_r+0x634>
    2344:	07000074 	movhi	fp,1
    2348:	e7145a04 	addi	fp,fp,20840
    234c:	e0800017 	ldw	r2,0(fp)
    2350:	a887883a 	add	r3,r21,r2
    2354:	e0c00015 	stw	r3,0(fp)
    2358:	3500e626 	beq	r6,r20,26f4 <_malloc_r+0x74c>
    235c:	b9000017 	ldw	r4,0(r23)
    2360:	00bfffc4 	movi	r2,-1
    2364:	2080ee26 	beq	r4,r2,2720 <_malloc_r+0x778>
    2368:	a185c83a 	sub	r2,r20,r6
    236c:	10c5883a 	add	r2,r2,r3
    2370:	e0800015 	stw	r2,0(fp)
    2374:	a0c001cc 	andi	r3,r20,7
    2378:	1800bc26 	beq	r3,zero,266c <_malloc_r+0x6c4>
    237c:	a0e9c83a 	sub	r20,r20,r3
    2380:	00840204 	movi	r2,4104
    2384:	a5000204 	addi	r20,r20,8
    2388:	10c7c83a 	sub	r3,r2,r3
    238c:	a545883a 	add	r2,r20,r21
    2390:	1083ffcc 	andi	r2,r2,4095
    2394:	18abc83a 	sub	r21,r3,r2
    2398:	a80b883a 	mov	r5,r21
    239c:	9009883a 	mov	r4,r18
    23a0:	00028f40 	call	28f4 <_sbrk_r>
    23a4:	00ffffc4 	movi	r3,-1
    23a8:	10c0e126 	beq	r2,r3,2730 <_malloc_r+0x788>
    23ac:	1505c83a 	sub	r2,r2,r20
    23b0:	1545883a 	add	r2,r2,r21
    23b4:	10800054 	ori	r2,r2,1
    23b8:	e0c00017 	ldw	r3,0(fp)
    23bc:	9d000215 	stw	r20,8(r19)
    23c0:	a0800115 	stw	r2,4(r20)
    23c4:	a8c7883a 	add	r3,r21,r3
    23c8:	e0c00015 	stw	r3,0(fp)
    23cc:	84c00e26 	beq	r16,r19,2408 <_malloc_r+0x460>
    23d0:	018003c4 	movi	r6,15
    23d4:	3580a72e 	bgeu	r6,r22,2674 <_malloc_r+0x6cc>
    23d8:	81400117 	ldw	r5,4(r16)
    23dc:	013ffe04 	movi	r4,-8
    23e0:	b0bffd04 	addi	r2,r22,-12
    23e4:	1104703a 	and	r2,r2,r4
    23e8:	2900004c 	andi	r4,r5,1
    23ec:	2088b03a 	or	r4,r4,r2
    23f0:	81000115 	stw	r4,4(r16)
    23f4:	01400144 	movi	r5,5
    23f8:	8089883a 	add	r4,r16,r2
    23fc:	21400115 	stw	r5,4(r4)
    2400:	21400215 	stw	r5,8(r4)
    2404:	3080cd36 	bltu	r6,r2,273c <_malloc_r+0x794>
    2408:	00800074 	movhi	r2,1
    240c:	10944b04 	addi	r2,r2,20780
    2410:	11000017 	ldw	r4,0(r2)
    2414:	20c0012e 	bgeu	r4,r3,241c <_malloc_r+0x474>
    2418:	10c00015 	stw	r3,0(r2)
    241c:	00800074 	movhi	r2,1
    2420:	10944a04 	addi	r2,r2,20776
    2424:	11000017 	ldw	r4,0(r2)
    2428:	9c000217 	ldw	r16,8(r19)
    242c:	20c0012e 	bgeu	r4,r3,2434 <_malloc_r+0x48c>
    2430:	10c00015 	stw	r3,0(r2)
    2434:	80c00117 	ldw	r3,4(r16)
    2438:	00bfff04 	movi	r2,-4
    243c:	1886703a 	and	r3,r3,r2
    2440:	1c45c83a 	sub	r2,r3,r17
    2444:	1c400236 	bltu	r3,r17,2450 <_malloc_r+0x4a8>
    2448:	00c003c4 	movi	r3,15
    244c:	18800416 	blt	r3,r2,2460 <_malloc_r+0x4b8>
    2450:	9009883a 	mov	r4,r18
    2454:	000ecb40 	call	ecb4 <__malloc_unlock>
    2458:	0005883a 	mov	r2,zero
    245c:	003f7b06 	br	224c <_malloc_r+0x2a4>
    2460:	88c00054 	ori	r3,r17,1
    2464:	80c00115 	stw	r3,4(r16)
    2468:	8463883a 	add	r17,r16,r17
    246c:	10800054 	ori	r2,r2,1
    2470:	9c400215 	stw	r17,8(r19)
    2474:	88800115 	stw	r2,4(r17)
    2478:	9009883a 	mov	r4,r18
    247c:	000ecb40 	call	ecb4 <__malloc_unlock>
    2480:	80800204 	addi	r2,r16,8
    2484:	003f7106 	br	224c <_malloc_r+0x2a4>
    2488:	00c00504 	movi	r3,20
    248c:	18804a2e 	bgeu	r3,r2,25b8 <_malloc_r+0x610>
    2490:	00c01504 	movi	r3,84
    2494:	18806e36 	bltu	r3,r2,2650 <_malloc_r+0x6a8>
    2498:	8804d33a 	srli	r2,r17,12
    249c:	12001bc4 	addi	r8,r2,111
    24a0:	11c01b84 	addi	r7,r2,110
    24a4:	4209883a 	add	r4,r8,r8
    24a8:	003edd06 	br	2020 <_malloc_r+0x78>
    24ac:	3804d27a 	srli	r2,r7,9
    24b0:	00c00104 	movi	r3,4
    24b4:	1880442e 	bgeu	r3,r2,25c8 <_malloc_r+0x620>
    24b8:	00c00504 	movi	r3,20
    24bc:	18808136 	bltu	r3,r2,26c4 <_malloc_r+0x71c>
    24c0:	11401704 	addi	r5,r2,92
    24c4:	10c016c4 	addi	r3,r2,91
    24c8:	294b883a 	add	r5,r5,r5
    24cc:	294b883a 	add	r5,r5,r5
    24d0:	294b883a 	add	r5,r5,r5
    24d4:	994b883a 	add	r5,r19,r5
    24d8:	28800017 	ldw	r2,0(r5)
    24dc:	01800074 	movhi	r6,1
    24e0:	297ffe04 	addi	r5,r5,-8
    24e4:	31867e04 	addi	r6,r6,6648
    24e8:	28806526 	beq	r5,r2,2680 <_malloc_r+0x6d8>
    24ec:	01bfff04 	movi	r6,-4
    24f0:	10c00117 	ldw	r3,4(r2)
    24f4:	1986703a 	and	r3,r3,r6
    24f8:	38c0022e 	bgeu	r7,r3,2504 <_malloc_r+0x55c>
    24fc:	10800217 	ldw	r2,8(r2)
    2500:	28bffb1e 	bne	r5,r2,24f0 <_malloc_r+0x548>
    2504:	11400317 	ldw	r5,12(r2)
    2508:	98c00117 	ldw	r3,4(r19)
    250c:	81400315 	stw	r5,12(r16)
    2510:	80800215 	stw	r2,8(r16)
    2514:	2c000215 	stw	r16,8(r5)
    2518:	14000315 	stw	r16,12(r2)
    251c:	003ef806 	br	2100 <_malloc_r+0x158>
    2520:	88c00054 	ori	r3,r17,1
    2524:	80c00115 	stw	r3,4(r16)
    2528:	8463883a 	add	r17,r16,r17
    252c:	34400515 	stw	r17,20(r6)
    2530:	34400415 	stw	r17,16(r6)
    2534:	10c00054 	ori	r3,r2,1
    2538:	8a000315 	stw	r8,12(r17)
    253c:	8a000215 	stw	r8,8(r17)
    2540:	88c00115 	stw	r3,4(r17)
    2544:	88a3883a 	add	r17,r17,r2
    2548:	88800015 	stw	r2,0(r17)
    254c:	9009883a 	mov	r4,r18
    2550:	000ecb40 	call	ecb4 <__malloc_unlock>
    2554:	80800204 	addi	r2,r16,8
    2558:	003f3c06 	br	224c <_malloc_r+0x2a4>
    255c:	30c00117 	ldw	r3,4(r6)
    2560:	003ee706 	br	2100 <_malloc_r+0x158>
    2564:	5ac00044 	addi	r11,r11,1
    2568:	588000cc 	andi	r2,r11,3
    256c:	31800204 	addi	r6,r6,8
    2570:	103efd1e 	bne	r2,zero,2168 <_malloc_r+0x1c0>
    2574:	00002406 	br	2608 <_malloc_r+0x660>
    2578:	14000317 	ldw	r16,12(r2)
    257c:	143f251e 	bne	r2,r16,2214 <_malloc_r+0x26c>
    2580:	21000084 	addi	r4,r4,2
    2584:	003ebc06 	br	2078 <_malloc_r+0xd0>
    2588:	8085883a 	add	r2,r16,r2
    258c:	10c00117 	ldw	r3,4(r2)
    2590:	81000317 	ldw	r4,12(r16)
    2594:	81400217 	ldw	r5,8(r16)
    2598:	18c00054 	ori	r3,r3,1
    259c:	10c00115 	stw	r3,4(r2)
    25a0:	29000315 	stw	r4,12(r5)
    25a4:	21400215 	stw	r5,8(r4)
    25a8:	9009883a 	mov	r4,r18
    25ac:	000ecb40 	call	ecb4 <__malloc_unlock>
    25b0:	80800204 	addi	r2,r16,8
    25b4:	003f2506 	br	224c <_malloc_r+0x2a4>
    25b8:	12001704 	addi	r8,r2,92
    25bc:	11c016c4 	addi	r7,r2,91
    25c0:	4209883a 	add	r4,r8,r8
    25c4:	003e9606 	br	2020 <_malloc_r+0x78>
    25c8:	3804d1ba 	srli	r2,r7,6
    25cc:	11400e44 	addi	r5,r2,57
    25d0:	10c00e04 	addi	r3,r2,56
    25d4:	294b883a 	add	r5,r5,r5
    25d8:	003fbc06 	br	24cc <_malloc_r+0x524>
    25dc:	84ff5926 	beq	r16,r19,2344 <_malloc_r+0x39c>
    25e0:	00800074 	movhi	r2,1
    25e4:	10867e04 	addi	r2,r2,6648
    25e8:	14000217 	ldw	r16,8(r2)
    25ec:	00bfff04 	movi	r2,-4
    25f0:	80c00117 	ldw	r3,4(r16)
    25f4:	1886703a 	and	r3,r3,r2
    25f8:	003f9106 	br	2440 <_malloc_r+0x498>
    25fc:	60800217 	ldw	r2,8(r12)
    2600:	213fffc4 	addi	r4,r4,-1
    2604:	1300651e 	bne	r2,r12,279c <_malloc_r+0x7f4>
    2608:	208000cc 	andi	r2,r4,3
    260c:	633ffe04 	addi	r12,r12,-8
    2610:	103ffa1e 	bne	r2,zero,25fc <_malloc_r+0x654>
    2614:	98800117 	ldw	r2,4(r19)
    2618:	0146303a 	nor	r3,zero,r5
    261c:	1884703a 	and	r2,r3,r2
    2620:	98800115 	stw	r2,4(r19)
    2624:	294b883a 	add	r5,r5,r5
    2628:	117f2836 	bltu	r2,r5,22cc <_malloc_r+0x324>
    262c:	283f2726 	beq	r5,zero,22cc <_malloc_r+0x324>
    2630:	2886703a 	and	r3,r5,r2
    2634:	5809883a 	mov	r4,r11
    2638:	183ec31e 	bne	r3,zero,2148 <_malloc_r+0x1a0>
    263c:	294b883a 	add	r5,r5,r5
    2640:	2886703a 	and	r3,r5,r2
    2644:	21000104 	addi	r4,r4,4
    2648:	183ffc26 	beq	r3,zero,263c <_malloc_r+0x694>
    264c:	003ebe06 	br	2148 <_malloc_r+0x1a0>
    2650:	00c05504 	movi	r3,340
    2654:	18801236 	bltu	r3,r2,26a0 <_malloc_r+0x6f8>
    2658:	8804d3fa 	srli	r2,r17,15
    265c:	12001e04 	addi	r8,r2,120
    2660:	11c01dc4 	addi	r7,r2,119
    2664:	4209883a 	add	r4,r8,r8
    2668:	003e6d06 	br	2020 <_malloc_r+0x78>
    266c:	00c40004 	movi	r3,4096
    2670:	003f4606 	br	238c <_malloc_r+0x3e4>
    2674:	00800044 	movi	r2,1
    2678:	a0800115 	stw	r2,4(r20)
    267c:	003f7406 	br	2450 <_malloc_r+0x4a8>
    2680:	1805d0ba 	srai	r2,r3,2
    2684:	01c00044 	movi	r7,1
    2688:	30c00117 	ldw	r3,4(r6)
    268c:	388e983a 	sll	r7,r7,r2
    2690:	2805883a 	mov	r2,r5
    2694:	38c6b03a 	or	r3,r7,r3
    2698:	30c00115 	stw	r3,4(r6)
    269c:	003f9b06 	br	250c <_malloc_r+0x564>
    26a0:	00c15504 	movi	r3,1364
    26a4:	18801a36 	bltu	r3,r2,2710 <_malloc_r+0x768>
    26a8:	8804d4ba 	srli	r2,r17,18
    26ac:	12001f44 	addi	r8,r2,125
    26b0:	11c01f04 	addi	r7,r2,124
    26b4:	4209883a 	add	r4,r8,r8
    26b8:	003e5906 	br	2020 <_malloc_r+0x78>
    26bc:	ad400404 	addi	r21,r21,16
    26c0:	003f1706 	br	2320 <_malloc_r+0x378>
    26c4:	00c01504 	movi	r3,84
    26c8:	18802336 	bltu	r3,r2,2758 <_malloc_r+0x7b0>
    26cc:	3804d33a 	srli	r2,r7,12
    26d0:	11401bc4 	addi	r5,r2,111
    26d4:	10c01b84 	addi	r3,r2,110
    26d8:	294b883a 	add	r5,r5,r5
    26dc:	003f7b06 	br	24cc <_malloc_r+0x524>
    26e0:	9c000217 	ldw	r16,8(r19)
    26e4:	00bfff04 	movi	r2,-4
    26e8:	80c00117 	ldw	r3,4(r16)
    26ec:	1886703a 	and	r3,r3,r2
    26f0:	003f5306 	br	2440 <_malloc_r+0x498>
    26f4:	3083ffcc 	andi	r2,r6,4095
    26f8:	103f181e 	bne	r2,zero,235c <_malloc_r+0x3b4>
    26fc:	99000217 	ldw	r4,8(r19)
    2700:	b545883a 	add	r2,r22,r21
    2704:	10800054 	ori	r2,r2,1
    2708:	20800115 	stw	r2,4(r4)
    270c:	003f3e06 	br	2408 <_malloc_r+0x460>
    2710:	01003f84 	movi	r4,254
    2714:	02001fc4 	movi	r8,127
    2718:	01c01f84 	movi	r7,126
    271c:	003e4006 	br	2020 <_malloc_r+0x78>
    2720:	00800074 	movhi	r2,1
    2724:	108d2904 	addi	r2,r2,13476
    2728:	15000015 	stw	r20,0(r2)
    272c:	003f1106 	br	2374 <_malloc_r+0x3cc>
    2730:	00800044 	movi	r2,1
    2734:	002b883a 	mov	r21,zero
    2738:	003f1f06 	br	23b8 <_malloc_r+0x410>
    273c:	81400204 	addi	r5,r16,8
    2740:	9009883a 	mov	r4,r18
    2744:	0006df80 	call	6df8 <_free_r>
    2748:	00800074 	movhi	r2,1
    274c:	10945a04 	addi	r2,r2,20840
    2750:	10c00017 	ldw	r3,0(r2)
    2754:	003f2c06 	br	2408 <_malloc_r+0x460>
    2758:	00c05504 	movi	r3,340
    275c:	18800536 	bltu	r3,r2,2774 <_malloc_r+0x7cc>
    2760:	3804d3fa 	srli	r2,r7,15
    2764:	11401e04 	addi	r5,r2,120
    2768:	10c01dc4 	addi	r3,r2,119
    276c:	294b883a 	add	r5,r5,r5
    2770:	003f5606 	br	24cc <_malloc_r+0x524>
    2774:	00c15504 	movi	r3,1364
    2778:	18800536 	bltu	r3,r2,2790 <_malloc_r+0x7e8>
    277c:	3804d4ba 	srli	r2,r7,18
    2780:	11401f44 	addi	r5,r2,125
    2784:	10c01f04 	addi	r3,r2,124
    2788:	294b883a 	add	r5,r5,r5
    278c:	003f4f06 	br	24cc <_malloc_r+0x524>
    2790:	01403f84 	movi	r5,254
    2794:	00c01f84 	movi	r3,126
    2798:	003f4c06 	br	24cc <_malloc_r+0x524>
    279c:	98800117 	ldw	r2,4(r19)
    27a0:	003fa006 	br	2624 <_malloc_r+0x67c>
    27a4:	8808d0fa 	srli	r4,r17,3
    27a8:	20800044 	addi	r2,r4,1
    27ac:	1085883a 	add	r2,r2,r2
    27b0:	003e9006 	br	21f4 <_malloc_r+0x24c>

000027b4 <_printf_r>:
    27b4:	defffd04 	addi	sp,sp,-12
    27b8:	2805883a 	mov	r2,r5
    27bc:	dfc00015 	stw	ra,0(sp)
    27c0:	d9800115 	stw	r6,4(sp)
    27c4:	d9c00215 	stw	r7,8(sp)
    27c8:	21400217 	ldw	r5,8(r4)
    27cc:	d9c00104 	addi	r7,sp,4
    27d0:	100d883a 	mov	r6,r2
    27d4:	00029e00 	call	29e0 <___vfprintf_internal_r>
    27d8:	dfc00017 	ldw	ra,0(sp)
    27dc:	dec00304 	addi	sp,sp,12
    27e0:	f800283a 	ret

000027e4 <printf>:
    27e4:	defffc04 	addi	sp,sp,-16
    27e8:	dfc00015 	stw	ra,0(sp)
    27ec:	d9400115 	stw	r5,4(sp)
    27f0:	d9800215 	stw	r6,8(sp)
    27f4:	d9c00315 	stw	r7,12(sp)
    27f8:	00800074 	movhi	r2,1
    27fc:	108d2c04 	addi	r2,r2,13488
    2800:	10800017 	ldw	r2,0(r2)
    2804:	200b883a 	mov	r5,r4
    2808:	d9800104 	addi	r6,sp,4
    280c:	11000217 	ldw	r4,8(r2)
    2810:	0004bd80 	call	4bd8 <__vfprintf_internal>
    2814:	dfc00017 	ldw	ra,0(sp)
    2818:	dec00404 	addi	sp,sp,16
    281c:	f800283a 	ret

00002820 <_puts_r>:
    2820:	defff604 	addi	sp,sp,-40
    2824:	dc000715 	stw	r16,28(sp)
    2828:	2021883a 	mov	r16,r4
    282c:	2809883a 	mov	r4,r5
    2830:	dc400815 	stw	r17,32(sp)
    2834:	dfc00915 	stw	ra,36(sp)
    2838:	2823883a 	mov	r17,r5
    283c:	00029480 	call	2948 <strlen>
    2840:	10c00044 	addi	r3,r2,1
    2844:	d8800115 	stw	r2,4(sp)
    2848:	00800074 	movhi	r2,1
    284c:	10858004 	addi	r2,r2,5632
    2850:	d8800215 	stw	r2,8(sp)
    2854:	00800044 	movi	r2,1
    2858:	d8800315 	stw	r2,12(sp)
    285c:	00800084 	movi	r2,2
    2860:	dc400015 	stw	r17,0(sp)
    2864:	d8c00615 	stw	r3,24(sp)
    2868:	dec00415 	stw	sp,16(sp)
    286c:	d8800515 	stw	r2,20(sp)
    2870:	80000226 	beq	r16,zero,287c <_puts_r+0x5c>
    2874:	80800e17 	ldw	r2,56(r16)
    2878:	10001426 	beq	r2,zero,28cc <_puts_r+0xac>
    287c:	81400217 	ldw	r5,8(r16)
    2880:	2880030b 	ldhu	r2,12(r5)
    2884:	10c8000c 	andi	r3,r2,8192
    2888:	1800061e 	bne	r3,zero,28a4 <_puts_r+0x84>
    288c:	29001917 	ldw	r4,100(r5)
    2890:	00f7ffc4 	movi	r3,-8193
    2894:	10880014 	ori	r2,r2,8192
    2898:	20c6703a 	and	r3,r4,r3
    289c:	2880030d 	sth	r2,12(r5)
    28a0:	28c01915 	stw	r3,100(r5)
    28a4:	d9800404 	addi	r6,sp,16
    28a8:	8009883a 	mov	r4,r16
    28ac:	00071080 	call	7108 <__sfvwrite_r>
    28b0:	1000091e 	bne	r2,zero,28d8 <_puts_r+0xb8>
    28b4:	00800284 	movi	r2,10
    28b8:	dfc00917 	ldw	ra,36(sp)
    28bc:	dc400817 	ldw	r17,32(sp)
    28c0:	dc000717 	ldw	r16,28(sp)
    28c4:	dec00a04 	addi	sp,sp,40
    28c8:	f800283a 	ret
    28cc:	8009883a 	mov	r4,r16
    28d0:	0006c840 	call	6c84 <__sinit>
    28d4:	003fe906 	br	287c <_puts_r+0x5c>
    28d8:	00bfffc4 	movi	r2,-1
    28dc:	003ff606 	br	28b8 <_puts_r+0x98>

000028e0 <puts>:
    28e0:	00800074 	movhi	r2,1
    28e4:	108d2c04 	addi	r2,r2,13488
    28e8:	200b883a 	mov	r5,r4
    28ec:	11000017 	ldw	r4,0(r2)
    28f0:	00028201 	jmpi	2820 <_puts_r>

000028f4 <_sbrk_r>:
    28f4:	defffd04 	addi	sp,sp,-12
    28f8:	dc000015 	stw	r16,0(sp)
    28fc:	04000074 	movhi	r16,1
    2900:	dc400115 	stw	r17,4(sp)
    2904:	84144d04 	addi	r16,r16,20788
    2908:	2023883a 	mov	r17,r4
    290c:	2809883a 	mov	r4,r5
    2910:	dfc00215 	stw	ra,8(sp)
    2914:	80000015 	stw	zero,0(r16)
    2918:	000ee740 	call	ee74 <sbrk>
    291c:	00ffffc4 	movi	r3,-1
    2920:	10c00526 	beq	r2,r3,2938 <_sbrk_r+0x44>
    2924:	dfc00217 	ldw	ra,8(sp)
    2928:	dc400117 	ldw	r17,4(sp)
    292c:	dc000017 	ldw	r16,0(sp)
    2930:	dec00304 	addi	sp,sp,12
    2934:	f800283a 	ret
    2938:	80c00017 	ldw	r3,0(r16)
    293c:	183ff926 	beq	r3,zero,2924 <_sbrk_r+0x30>
    2940:	88c00015 	stw	r3,0(r17)
    2944:	003ff706 	br	2924 <_sbrk_r+0x30>

00002948 <strlen>:
    2948:	208000cc 	andi	r2,r4,3
    294c:	10002026 	beq	r2,zero,29d0 <strlen+0x88>
    2950:	20800007 	ldb	r2,0(r4)
    2954:	10002026 	beq	r2,zero,29d8 <strlen+0x90>
    2958:	2005883a 	mov	r2,r4
    295c:	00000206 	br	2968 <strlen+0x20>
    2960:	10c00007 	ldb	r3,0(r2)
    2964:	18001826 	beq	r3,zero,29c8 <strlen+0x80>
    2968:	10800044 	addi	r2,r2,1
    296c:	10c000cc 	andi	r3,r2,3
    2970:	183ffb1e 	bne	r3,zero,2960 <strlen+0x18>
    2974:	10c00017 	ldw	r3,0(r2)
    2978:	01ffbff4 	movhi	r7,65279
    297c:	39ffbfc4 	addi	r7,r7,-257
    2980:	00ca303a 	nor	r5,zero,r3
    2984:	01a02074 	movhi	r6,32897
    2988:	19c7883a 	add	r3,r3,r7
    298c:	31a02004 	addi	r6,r6,-32640
    2990:	1946703a 	and	r3,r3,r5
    2994:	1986703a 	and	r3,r3,r6
    2998:	1800091e 	bne	r3,zero,29c0 <strlen+0x78>
    299c:	10800104 	addi	r2,r2,4
    29a0:	10c00017 	ldw	r3,0(r2)
    29a4:	19cb883a 	add	r5,r3,r7
    29a8:	00c6303a 	nor	r3,zero,r3
    29ac:	28c6703a 	and	r3,r5,r3
    29b0:	1986703a 	and	r3,r3,r6
    29b4:	183ff926 	beq	r3,zero,299c <strlen+0x54>
    29b8:	00000106 	br	29c0 <strlen+0x78>
    29bc:	10800044 	addi	r2,r2,1
    29c0:	10c00007 	ldb	r3,0(r2)
    29c4:	183ffd1e 	bne	r3,zero,29bc <strlen+0x74>
    29c8:	1105c83a 	sub	r2,r2,r4
    29cc:	f800283a 	ret
    29d0:	2005883a 	mov	r2,r4
    29d4:	003fe706 	br	2974 <strlen+0x2c>
    29d8:	0005883a 	mov	r2,zero
    29dc:	f800283a 	ret

000029e0 <___vfprintf_internal_r>:
    29e0:	deffb804 	addi	sp,sp,-288
    29e4:	dfc04715 	stw	ra,284(sp)
    29e8:	ddc04515 	stw	r23,276(sp)
    29ec:	dd404315 	stw	r21,268(sp)
    29f0:	d9002c15 	stw	r4,176(sp)
    29f4:	282f883a 	mov	r23,r5
    29f8:	302b883a 	mov	r21,r6
    29fc:	d9c02d15 	stw	r7,180(sp)
    2a00:	df004615 	stw	fp,280(sp)
    2a04:	dd804415 	stw	r22,272(sp)
    2a08:	dd004215 	stw	r20,264(sp)
    2a0c:	dcc04115 	stw	r19,260(sp)
    2a10:	dc804015 	stw	r18,256(sp)
    2a14:	dc403f15 	stw	r17,252(sp)
    2a18:	dc003e15 	stw	r16,248(sp)
    2a1c:	00077f80 	call	77f8 <_localeconv_r>
    2a20:	10800017 	ldw	r2,0(r2)
    2a24:	1009883a 	mov	r4,r2
    2a28:	d8803415 	stw	r2,208(sp)
    2a2c:	00029480 	call	2948 <strlen>
    2a30:	d8803715 	stw	r2,220(sp)
    2a34:	d8802c17 	ldw	r2,176(sp)
    2a38:	10000226 	beq	r2,zero,2a44 <___vfprintf_internal_r+0x64>
    2a3c:	10800e17 	ldw	r2,56(r2)
    2a40:	1000f926 	beq	r2,zero,2e28 <___vfprintf_internal_r+0x448>
    2a44:	b880030b 	ldhu	r2,12(r23)
    2a48:	10c8000c 	andi	r3,r2,8192
    2a4c:	1800061e 	bne	r3,zero,2a68 <___vfprintf_internal_r+0x88>
    2a50:	b9001917 	ldw	r4,100(r23)
    2a54:	00f7ffc4 	movi	r3,-8193
    2a58:	10880014 	ori	r2,r2,8192
    2a5c:	20c6703a 	and	r3,r4,r3
    2a60:	b880030d 	sth	r2,12(r23)
    2a64:	b8c01915 	stw	r3,100(r23)
    2a68:	10c0020c 	andi	r3,r2,8
    2a6c:	1800c126 	beq	r3,zero,2d74 <___vfprintf_internal_r+0x394>
    2a70:	b8c00417 	ldw	r3,16(r23)
    2a74:	1800bf26 	beq	r3,zero,2d74 <___vfprintf_internal_r+0x394>
    2a78:	1080068c 	andi	r2,r2,26
    2a7c:	00c00284 	movi	r3,10
    2a80:	10c0c426 	beq	r2,r3,2d94 <___vfprintf_internal_r+0x3b4>
    2a84:	d8c00404 	addi	r3,sp,16
    2a88:	05000074 	movhi	r20,1
    2a8c:	d9001e04 	addi	r4,sp,120
    2a90:	a5059184 	addi	r20,r20,5702
    2a94:	d8c01e15 	stw	r3,120(sp)
    2a98:	d8002015 	stw	zero,128(sp)
    2a9c:	d8001f15 	stw	zero,124(sp)
    2aa0:	d8003315 	stw	zero,204(sp)
    2aa4:	d8003615 	stw	zero,216(sp)
    2aa8:	d8003815 	stw	zero,224(sp)
    2aac:	1811883a 	mov	r8,r3
    2ab0:	d8003915 	stw	zero,228(sp)
    2ab4:	d8003a15 	stw	zero,232(sp)
    2ab8:	d8002f15 	stw	zero,188(sp)
    2abc:	d9002815 	stw	r4,160(sp)
    2ac0:	a8800007 	ldb	r2,0(r21)
    2ac4:	10027b26 	beq	r2,zero,34b4 <___vfprintf_internal_r+0xad4>
    2ac8:	00c00944 	movi	r3,37
    2acc:	a821883a 	mov	r16,r21
    2ad0:	10c0021e 	bne	r2,r3,2adc <___vfprintf_internal_r+0xfc>
    2ad4:	00001406 	br	2b28 <___vfprintf_internal_r+0x148>
    2ad8:	10c00326 	beq	r2,r3,2ae8 <___vfprintf_internal_r+0x108>
    2adc:	84000044 	addi	r16,r16,1
    2ae0:	80800007 	ldb	r2,0(r16)
    2ae4:	103ffc1e 	bne	r2,zero,2ad8 <___vfprintf_internal_r+0xf8>
    2ae8:	8563c83a 	sub	r17,r16,r21
    2aec:	88000e26 	beq	r17,zero,2b28 <___vfprintf_internal_r+0x148>
    2af0:	d8c02017 	ldw	r3,128(sp)
    2af4:	d8801f17 	ldw	r2,124(sp)
    2af8:	45400015 	stw	r21,0(r8)
    2afc:	1c47883a 	add	r3,r3,r17
    2b00:	10800044 	addi	r2,r2,1
    2b04:	d8c02015 	stw	r3,128(sp)
    2b08:	44400115 	stw	r17,4(r8)
    2b0c:	d8801f15 	stw	r2,124(sp)
    2b10:	00c001c4 	movi	r3,7
    2b14:	1880a716 	blt	r3,r2,2db4 <___vfprintf_internal_r+0x3d4>
    2b18:	42000204 	addi	r8,r8,8
    2b1c:	d9402f17 	ldw	r5,188(sp)
    2b20:	2c4b883a 	add	r5,r5,r17
    2b24:	d9402f15 	stw	r5,188(sp)
    2b28:	80800007 	ldb	r2,0(r16)
    2b2c:	1000a826 	beq	r2,zero,2dd0 <___vfprintf_internal_r+0x3f0>
    2b30:	84400047 	ldb	r17,1(r16)
    2b34:	00bfffc4 	movi	r2,-1
    2b38:	85400044 	addi	r21,r16,1
    2b3c:	d8002785 	stb	zero,158(sp)
    2b40:	0007883a 	mov	r3,zero
    2b44:	000f883a 	mov	r7,zero
    2b48:	d8802915 	stw	r2,164(sp)
    2b4c:	d8003115 	stw	zero,196(sp)
    2b50:	0025883a 	mov	r18,zero
    2b54:	01401604 	movi	r5,88
    2b58:	01800244 	movi	r6,9
    2b5c:	02800a84 	movi	r10,42
    2b60:	02401b04 	movi	r9,108
    2b64:	ad400044 	addi	r21,r21,1
    2b68:	88bff804 	addi	r2,r17,-32
    2b6c:	28830436 	bltu	r5,r2,3780 <___vfprintf_internal_r+0xda0>
    2b70:	100490ba 	slli	r2,r2,2
    2b74:	01000034 	movhi	r4,0
    2b78:	210ae204 	addi	r4,r4,11144
    2b7c:	1105883a 	add	r2,r2,r4
    2b80:	10800017 	ldw	r2,0(r2)
    2b84:	1000683a 	jmp	r2
    2b88:	000036a0 	cmpeqi	zero,zero,218
    2b8c:	00003780 	call	378 <init_camera+0xf8>
    2b90:	00003780 	call	378 <init_camera+0xf8>
    2b94:	000036c0 	call	36c <init_camera+0xec>
    2b98:	00003780 	call	378 <init_camera+0xf8>
    2b9c:	00003780 	call	378 <init_camera+0xf8>
    2ba0:	00003780 	call	378 <init_camera+0xf8>
    2ba4:	00003780 	call	378 <init_camera+0xf8>
    2ba8:	00003780 	call	378 <init_camera+0xf8>
    2bac:	00003780 	call	378 <init_camera+0xf8>
    2bb0:	00002e34 	movhi	zero,184
    2bb4:	000035dc 	xori	zero,zero,215
    2bb8:	00003780 	call	378 <init_camera+0xf8>
    2bbc:	00002cfc 	xorhi	zero,zero,179
    2bc0:	00002e5c 	xori	zero,zero,185
    2bc4:	00003780 	call	378 <init_camera+0xf8>
    2bc8:	00002e9c 	xori	zero,zero,186
    2bcc:	00002ea8 	cmpgeui	zero,zero,186
    2bd0:	00002ea8 	cmpgeui	zero,zero,186
    2bd4:	00002ea8 	cmpgeui	zero,zero,186
    2bd8:	00002ea8 	cmpgeui	zero,zero,186
    2bdc:	00002ea8 	cmpgeui	zero,zero,186
    2be0:	00002ea8 	cmpgeui	zero,zero,186
    2be4:	00002ea8 	cmpgeui	zero,zero,186
    2be8:	00002ea8 	cmpgeui	zero,zero,186
    2bec:	00002ea8 	cmpgeui	zero,zero,186
    2bf0:	00003780 	call	378 <init_camera+0xf8>
    2bf4:	00003780 	call	378 <init_camera+0xf8>
    2bf8:	00003780 	call	378 <init_camera+0xf8>
    2bfc:	00003780 	call	378 <init_camera+0xf8>
    2c00:	00003780 	call	378 <init_camera+0xf8>
    2c04:	00003780 	call	378 <init_camera+0xf8>
    2c08:	00003780 	call	378 <init_camera+0xf8>
    2c0c:	00003780 	call	378 <init_camera+0xf8>
    2c10:	00003780 	call	378 <init_camera+0xf8>
    2c14:	00003780 	call	378 <init_camera+0xf8>
    2c18:	00002edc 	xori	zero,zero,187
    2c1c:	00002f98 	cmpnei	zero,zero,190
    2c20:	00003780 	call	378 <init_camera+0xf8>
    2c24:	00002f98 	cmpnei	zero,zero,190
    2c28:	00003780 	call	378 <init_camera+0xf8>
    2c2c:	00003780 	call	378 <init_camera+0xf8>
    2c30:	00003780 	call	378 <init_camera+0xf8>
    2c34:	00003780 	call	378 <init_camera+0xf8>
    2c38:	00003038 	rdprs	zero,zero,192
    2c3c:	00003780 	call	378 <init_camera+0xf8>
    2c40:	00003780 	call	378 <init_camera+0xf8>
    2c44:	00003044 	movi	zero,193
    2c48:	00003780 	call	378 <init_camera+0xf8>
    2c4c:	00003780 	call	378 <init_camera+0xf8>
    2c50:	00003780 	call	378 <init_camera+0xf8>
    2c54:	00003780 	call	378 <init_camera+0xf8>
    2c58:	00003780 	call	378 <init_camera+0xf8>
    2c5c:	000034bc 	xorhi	zero,zero,210
    2c60:	00003780 	call	378 <init_camera+0xf8>
    2c64:	00003780 	call	378 <init_camera+0xf8>
    2c68:	0000351c 	xori	zero,zero,212
    2c6c:	00003780 	call	378 <init_camera+0xf8>
    2c70:	00003780 	call	378 <init_camera+0xf8>
    2c74:	00003780 	call	378 <init_camera+0xf8>
    2c78:	00003780 	call	378 <init_camera+0xf8>
    2c7c:	00003780 	call	378 <init_camera+0xf8>
    2c80:	00003780 	call	378 <init_camera+0xf8>
    2c84:	00003780 	call	378 <init_camera+0xf8>
    2c88:	00003780 	call	378 <init_camera+0xf8>
    2c8c:	00003780 	call	378 <init_camera+0xf8>
    2c90:	00003780 	call	378 <init_camera+0xf8>
    2c94:	0000372c 	andhi	zero,zero,220
    2c98:	000036cc 	andi	zero,zero,219
    2c9c:	00002f98 	cmpnei	zero,zero,190
    2ca0:	00002f98 	cmpnei	zero,zero,190
    2ca4:	00002f98 	cmpnei	zero,zero,190
    2ca8:	000036dc 	xori	zero,zero,219
    2cac:	000036cc 	andi	zero,zero,219
    2cb0:	00003780 	call	378 <init_camera+0xf8>
    2cb4:	00003780 	call	378 <init_camera+0xf8>
    2cb8:	000036e8 	cmpgeui	zero,zero,219
    2cbc:	00003780 	call	378 <init_camera+0xf8>
    2cc0:	000036f8 	rdprs	zero,zero,219
    2cc4:	000035cc 	andi	zero,zero,215
    2cc8:	00002d08 	cmpgei	zero,zero,180
    2ccc:	000035ec 	andhi	zero,zero,215
    2cd0:	00003780 	call	378 <init_camera+0xf8>
    2cd4:	000035f8 	rdprs	zero,zero,215
    2cd8:	00003780 	call	378 <init_camera+0xf8>
    2cdc:	00003654 	movui	zero,217
    2ce0:	00003780 	call	378 <init_camera+0xf8>
    2ce4:	00003780 	call	378 <init_camera+0xf8>
    2ce8:	00003664 	muli	zero,zero,217
    2cec:	d9003117 	ldw	r4,196(sp)
    2cf0:	d8802d15 	stw	r2,180(sp)
    2cf4:	0109c83a 	sub	r4,zero,r4
    2cf8:	d9003115 	stw	r4,196(sp)
    2cfc:	94800114 	ori	r18,r18,4
    2d00:	ac400007 	ldb	r17,0(r21)
    2d04:	003f9706 	br	2b64 <___vfprintf_internal_r+0x184>
    2d08:	00800c04 	movi	r2,48
    2d0c:	d9002d17 	ldw	r4,180(sp)
    2d10:	d9402917 	ldw	r5,164(sp)
    2d14:	d8802705 	stb	r2,156(sp)
    2d18:	00801e04 	movi	r2,120
    2d1c:	d8802745 	stb	r2,157(sp)
    2d20:	d8002785 	stb	zero,158(sp)
    2d24:	20c00104 	addi	r3,r4,4
    2d28:	24c00017 	ldw	r19,0(r4)
    2d2c:	002d883a 	mov	r22,zero
    2d30:	90800094 	ori	r2,r18,2
    2d34:	28029a16 	blt	r5,zero,37a0 <___vfprintf_internal_r+0xdc0>
    2d38:	00bfdfc4 	movi	r2,-129
    2d3c:	90a4703a 	and	r18,r18,r2
    2d40:	d8c02d15 	stw	r3,180(sp)
    2d44:	94800094 	ori	r18,r18,2
    2d48:	9802871e 	bne	r19,zero,3768 <___vfprintf_internal_r+0xd88>
    2d4c:	00800074 	movhi	r2,1
    2d50:	10858a04 	addi	r2,r2,5672
    2d54:	d8803915 	stw	r2,228(sp)
    2d58:	04401e04 	movi	r17,120
    2d5c:	d8802917 	ldw	r2,164(sp)
    2d60:	0039883a 	mov	fp,zero
    2d64:	1001e926 	beq	r2,zero,350c <___vfprintf_internal_r+0xb2c>
    2d68:	0027883a 	mov	r19,zero
    2d6c:	002d883a 	mov	r22,zero
    2d70:	00020506 	br	3588 <___vfprintf_internal_r+0xba8>
    2d74:	d9002c17 	ldw	r4,176(sp)
    2d78:	b80b883a 	mov	r5,r23
    2d7c:	0004cb00 	call	4cb0 <__swsetup_r>
    2d80:	1005ac1e 	bne	r2,zero,4434 <___vfprintf_internal_r+0x1a54>
    2d84:	b880030b 	ldhu	r2,12(r23)
    2d88:	00c00284 	movi	r3,10
    2d8c:	1080068c 	andi	r2,r2,26
    2d90:	10ff3c1e 	bne	r2,r3,2a84 <___vfprintf_internal_r+0xa4>
    2d94:	b880038f 	ldh	r2,14(r23)
    2d98:	103f3a16 	blt	r2,zero,2a84 <___vfprintf_internal_r+0xa4>
    2d9c:	d9c02d17 	ldw	r7,180(sp)
    2da0:	d9002c17 	ldw	r4,176(sp)
    2da4:	a80d883a 	mov	r6,r21
    2da8:	b80b883a 	mov	r5,r23
    2dac:	0004bf40 	call	4bf4 <__sbprintf>
    2db0:	00001106 	br	2df8 <___vfprintf_internal_r+0x418>
    2db4:	d9002c17 	ldw	r4,176(sp)
    2db8:	d9801e04 	addi	r6,sp,120
    2dbc:	b80b883a 	mov	r5,r23
    2dc0:	000977c0 	call	977c <__sprint_r>
    2dc4:	1000081e 	bne	r2,zero,2de8 <___vfprintf_internal_r+0x408>
    2dc8:	da000404 	addi	r8,sp,16
    2dcc:	003f5306 	br	2b1c <___vfprintf_internal_r+0x13c>
    2dd0:	d8802017 	ldw	r2,128(sp)
    2dd4:	10000426 	beq	r2,zero,2de8 <___vfprintf_internal_r+0x408>
    2dd8:	d9002c17 	ldw	r4,176(sp)
    2ddc:	d9801e04 	addi	r6,sp,120
    2de0:	b80b883a 	mov	r5,r23
    2de4:	000977c0 	call	977c <__sprint_r>
    2de8:	b880030b 	ldhu	r2,12(r23)
    2dec:	1080100c 	andi	r2,r2,64
    2df0:	1005901e 	bne	r2,zero,4434 <___vfprintf_internal_r+0x1a54>
    2df4:	d8802f17 	ldw	r2,188(sp)
    2df8:	dfc04717 	ldw	ra,284(sp)
    2dfc:	df004617 	ldw	fp,280(sp)
    2e00:	ddc04517 	ldw	r23,276(sp)
    2e04:	dd804417 	ldw	r22,272(sp)
    2e08:	dd404317 	ldw	r21,268(sp)
    2e0c:	dd004217 	ldw	r20,264(sp)
    2e10:	dcc04117 	ldw	r19,260(sp)
    2e14:	dc804017 	ldw	r18,256(sp)
    2e18:	dc403f17 	ldw	r17,252(sp)
    2e1c:	dc003e17 	ldw	r16,248(sp)
    2e20:	dec04804 	addi	sp,sp,288
    2e24:	f800283a 	ret
    2e28:	d9002c17 	ldw	r4,176(sp)
    2e2c:	0006c840 	call	6c84 <__sinit>
    2e30:	003f0406 	br	2a44 <___vfprintf_internal_r+0x64>
    2e34:	d8802d17 	ldw	r2,180(sp)
    2e38:	d9002d17 	ldw	r4,180(sp)
    2e3c:	10800017 	ldw	r2,0(r2)
    2e40:	d8803115 	stw	r2,196(sp)
    2e44:	20800104 	addi	r2,r4,4
    2e48:	d9003117 	ldw	r4,196(sp)
    2e4c:	203fa716 	blt	r4,zero,2cec <___vfprintf_internal_r+0x30c>
    2e50:	d8802d15 	stw	r2,180(sp)
    2e54:	ac400007 	ldb	r17,0(r21)
    2e58:	003f4206 	br	2b64 <___vfprintf_internal_r+0x184>
    2e5c:	ac400007 	ldb	r17,0(r21)
    2e60:	aac00044 	addi	r11,r21,1
    2e64:	8a872826 	beq	r17,r10,4b08 <___vfprintf_internal_r+0x2128>
    2e68:	88bff404 	addi	r2,r17,-48
    2e6c:	0009883a 	mov	r4,zero
    2e70:	30867d36 	bltu	r6,r2,4868 <___vfprintf_internal_r+0x1e88>
    2e74:	5c400007 	ldb	r17,0(r11)
    2e78:	210002a4 	muli	r4,r4,10
    2e7c:	5d400044 	addi	r21,r11,1
    2e80:	a817883a 	mov	r11,r21
    2e84:	2089883a 	add	r4,r4,r2
    2e88:	88bff404 	addi	r2,r17,-48
    2e8c:	30bff92e 	bgeu	r6,r2,2e74 <___vfprintf_internal_r+0x494>
    2e90:	2005c916 	blt	r4,zero,45b8 <___vfprintf_internal_r+0x1bd8>
    2e94:	d9002915 	stw	r4,164(sp)
    2e98:	003f3306 	br	2b68 <___vfprintf_internal_r+0x188>
    2e9c:	94802014 	ori	r18,r18,128
    2ea0:	ac400007 	ldb	r17,0(r21)
    2ea4:	003f2f06 	br	2b64 <___vfprintf_internal_r+0x184>
    2ea8:	a809883a 	mov	r4,r21
    2eac:	d8003115 	stw	zero,196(sp)
    2eb0:	88bff404 	addi	r2,r17,-48
    2eb4:	0017883a 	mov	r11,zero
    2eb8:	24400007 	ldb	r17,0(r4)
    2ebc:	5ac002a4 	muli	r11,r11,10
    2ec0:	ad400044 	addi	r21,r21,1
    2ec4:	a809883a 	mov	r4,r21
    2ec8:	12d7883a 	add	r11,r2,r11
    2ecc:	88bff404 	addi	r2,r17,-48
    2ed0:	30bff92e 	bgeu	r6,r2,2eb8 <___vfprintf_internal_r+0x4d8>
    2ed4:	dac03115 	stw	r11,196(sp)
    2ed8:	003f2306 	br	2b68 <___vfprintf_internal_r+0x188>
    2edc:	18c03fcc 	andi	r3,r3,255
    2ee0:	18072b1e 	bne	r3,zero,4b90 <___vfprintf_internal_r+0x21b0>
    2ee4:	94800414 	ori	r18,r18,16
    2ee8:	9080080c 	andi	r2,r18,32
    2eec:	10037b26 	beq	r2,zero,3cdc <___vfprintf_internal_r+0x12fc>
    2ef0:	d9402d17 	ldw	r5,180(sp)
    2ef4:	28800117 	ldw	r2,4(r5)
    2ef8:	2cc00017 	ldw	r19,0(r5)
    2efc:	29400204 	addi	r5,r5,8
    2f00:	d9402d15 	stw	r5,180(sp)
    2f04:	102d883a 	mov	r22,r2
    2f08:	10044b16 	blt	r2,zero,4038 <___vfprintf_internal_r+0x1658>
    2f0c:	d9402917 	ldw	r5,164(sp)
    2f10:	df002783 	ldbu	fp,158(sp)
    2f14:	2803bc16 	blt	r5,zero,3e08 <___vfprintf_internal_r+0x1428>
    2f18:	00ffdfc4 	movi	r3,-129
    2f1c:	9d84b03a 	or	r2,r19,r22
    2f20:	90e4703a 	and	r18,r18,r3
    2f24:	10017726 	beq	r2,zero,3504 <___vfprintf_internal_r+0xb24>
    2f28:	b0038326 	beq	r22,zero,3d38 <___vfprintf_internal_r+0x1358>
    2f2c:	dc402a15 	stw	r17,168(sp)
    2f30:	dc001e04 	addi	r16,sp,120
    2f34:	b023883a 	mov	r17,r22
    2f38:	402d883a 	mov	r22,r8
    2f3c:	9809883a 	mov	r4,r19
    2f40:	880b883a 	mov	r5,r17
    2f44:	01800284 	movi	r6,10
    2f48:	000f883a 	mov	r7,zero
    2f4c:	000bb740 	call	bb74 <__umoddi3>
    2f50:	10800c04 	addi	r2,r2,48
    2f54:	843fffc4 	addi	r16,r16,-1
    2f58:	9809883a 	mov	r4,r19
    2f5c:	880b883a 	mov	r5,r17
    2f60:	80800005 	stb	r2,0(r16)
    2f64:	01800284 	movi	r6,10
    2f68:	000f883a 	mov	r7,zero
    2f6c:	000b5fc0 	call	b5fc <__udivdi3>
    2f70:	1027883a 	mov	r19,r2
    2f74:	10c4b03a 	or	r2,r2,r3
    2f78:	1823883a 	mov	r17,r3
    2f7c:	103fef1e 	bne	r2,zero,2f3c <___vfprintf_internal_r+0x55c>
    2f80:	d8c02817 	ldw	r3,160(sp)
    2f84:	dc402a17 	ldw	r17,168(sp)
    2f88:	b011883a 	mov	r8,r22
    2f8c:	1c07c83a 	sub	r3,r3,r16
    2f90:	d8c02e15 	stw	r3,184(sp)
    2f94:	00005906 	br	30fc <___vfprintf_internal_r+0x71c>
    2f98:	18c03fcc 	andi	r3,r3,255
    2f9c:	1806fa1e 	bne	r3,zero,4b88 <___vfprintf_internal_r+0x21a8>
    2fa0:	9080020c 	andi	r2,r18,8
    2fa4:	10048a26 	beq	r2,zero,41d0 <___vfprintf_internal_r+0x17f0>
    2fa8:	d8c02d17 	ldw	r3,180(sp)
    2fac:	d9002d17 	ldw	r4,180(sp)
    2fb0:	d9402d17 	ldw	r5,180(sp)
    2fb4:	18c00017 	ldw	r3,0(r3)
    2fb8:	21000117 	ldw	r4,4(r4)
    2fbc:	29400204 	addi	r5,r5,8
    2fc0:	d8c03615 	stw	r3,216(sp)
    2fc4:	d9003815 	stw	r4,224(sp)
    2fc8:	d9402d15 	stw	r5,180(sp)
    2fcc:	d9003617 	ldw	r4,216(sp)
    2fd0:	d9403817 	ldw	r5,224(sp)
    2fd4:	da003d15 	stw	r8,244(sp)
    2fd8:	04000044 	movi	r16,1
    2fdc:	00093f40 	call	93f4 <__fpclassifyd>
    2fe0:	da003d17 	ldw	r8,244(sp)
    2fe4:	14041f1e 	bne	r2,r16,4064 <___vfprintf_internal_r+0x1684>
    2fe8:	d9003617 	ldw	r4,216(sp)
    2fec:	d9403817 	ldw	r5,224(sp)
    2ff0:	000d883a 	mov	r6,zero
    2ff4:	000f883a 	mov	r7,zero
    2ff8:	000d3a40 	call	d3a4 <__ledf2>
    2ffc:	da003d17 	ldw	r8,244(sp)
    3000:	1005be16 	blt	r2,zero,46fc <___vfprintf_internal_r+0x1d1c>
    3004:	df002783 	ldbu	fp,158(sp)
    3008:	008011c4 	movi	r2,71
    300c:	1445330e 	bge	r2,r17,44dc <___vfprintf_internal_r+0x1afc>
    3010:	04000074 	movhi	r16,1
    3014:	84058204 	addi	r16,r16,5640
    3018:	00c000c4 	movi	r3,3
    301c:	00bfdfc4 	movi	r2,-129
    3020:	d8c02a15 	stw	r3,168(sp)
    3024:	90a4703a 	and	r18,r18,r2
    3028:	d8c02e15 	stw	r3,184(sp)
    302c:	d8002915 	stw	zero,164(sp)
    3030:	d8003215 	stw	zero,200(sp)
    3034:	00003706 	br	3114 <___vfprintf_internal_r+0x734>
    3038:	94800214 	ori	r18,r18,8
    303c:	ac400007 	ldb	r17,0(r21)
    3040:	003ec806 	br	2b64 <___vfprintf_internal_r+0x184>
    3044:	18c03fcc 	andi	r3,r3,255
    3048:	1806db1e 	bne	r3,zero,4bb8 <___vfprintf_internal_r+0x21d8>
    304c:	94800414 	ori	r18,r18,16
    3050:	9080080c 	andi	r2,r18,32
    3054:	1002d826 	beq	r2,zero,3bb8 <___vfprintf_internal_r+0x11d8>
    3058:	d9402d17 	ldw	r5,180(sp)
    305c:	d8c02917 	ldw	r3,164(sp)
    3060:	d8002785 	stb	zero,158(sp)
    3064:	28800204 	addi	r2,r5,8
    3068:	2cc00017 	ldw	r19,0(r5)
    306c:	2d800117 	ldw	r22,4(r5)
    3070:	18048f16 	blt	r3,zero,42b0 <___vfprintf_internal_r+0x18d0>
    3074:	013fdfc4 	movi	r4,-129
    3078:	9d86b03a 	or	r3,r19,r22
    307c:	d8802d15 	stw	r2,180(sp)
    3080:	9124703a 	and	r18,r18,r4
    3084:	1802d91e 	bne	r3,zero,3bec <___vfprintf_internal_r+0x120c>
    3088:	d8c02917 	ldw	r3,164(sp)
    308c:	0039883a 	mov	fp,zero
    3090:	1805c326 	beq	r3,zero,47a0 <___vfprintf_internal_r+0x1dc0>
    3094:	0027883a 	mov	r19,zero
    3098:	002d883a 	mov	r22,zero
    309c:	dc001e04 	addi	r16,sp,120
    30a0:	9806d0fa 	srli	r3,r19,3
    30a4:	b008977a 	slli	r4,r22,29
    30a8:	b02cd0fa 	srli	r22,r22,3
    30ac:	9cc001cc 	andi	r19,r19,7
    30b0:	98800c04 	addi	r2,r19,48
    30b4:	843fffc4 	addi	r16,r16,-1
    30b8:	20e6b03a 	or	r19,r4,r3
    30bc:	80800005 	stb	r2,0(r16)
    30c0:	9d86b03a 	or	r3,r19,r22
    30c4:	183ff61e 	bne	r3,zero,30a0 <___vfprintf_internal_r+0x6c0>
    30c8:	90c0004c 	andi	r3,r18,1
    30cc:	18013b26 	beq	r3,zero,35bc <___vfprintf_internal_r+0xbdc>
    30d0:	10803fcc 	andi	r2,r2,255
    30d4:	1080201c 	xori	r2,r2,128
    30d8:	10bfe004 	addi	r2,r2,-128
    30dc:	00c00c04 	movi	r3,48
    30e0:	10c13626 	beq	r2,r3,35bc <___vfprintf_internal_r+0xbdc>
    30e4:	80ffffc5 	stb	r3,-1(r16)
    30e8:	d8c02817 	ldw	r3,160(sp)
    30ec:	80bfffc4 	addi	r2,r16,-1
    30f0:	1021883a 	mov	r16,r2
    30f4:	1887c83a 	sub	r3,r3,r2
    30f8:	d8c02e15 	stw	r3,184(sp)
    30fc:	d8802e17 	ldw	r2,184(sp)
    3100:	d9002917 	ldw	r4,164(sp)
    3104:	1100010e 	bge	r2,r4,310c <___vfprintf_internal_r+0x72c>
    3108:	2005883a 	mov	r2,r4
    310c:	d8802a15 	stw	r2,168(sp)
    3110:	d8003215 	stw	zero,200(sp)
    3114:	e7003fcc 	andi	fp,fp,255
    3118:	e700201c 	xori	fp,fp,128
    311c:	e73fe004 	addi	fp,fp,-128
    3120:	e0000326 	beq	fp,zero,3130 <___vfprintf_internal_r+0x750>
    3124:	d8c02a17 	ldw	r3,168(sp)
    3128:	18c00044 	addi	r3,r3,1
    312c:	d8c02a15 	stw	r3,168(sp)
    3130:	90c0008c 	andi	r3,r18,2
    3134:	d8c02b15 	stw	r3,172(sp)
    3138:	18000326 	beq	r3,zero,3148 <___vfprintf_internal_r+0x768>
    313c:	d8c02a17 	ldw	r3,168(sp)
    3140:	18c00084 	addi	r3,r3,2
    3144:	d8c02a15 	stw	r3,168(sp)
    3148:	90c0210c 	andi	r3,r18,132
    314c:	d8c03015 	stw	r3,192(sp)
    3150:	1801a31e 	bne	r3,zero,37e0 <___vfprintf_internal_r+0xe00>
    3154:	d9003117 	ldw	r4,196(sp)
    3158:	d8c02a17 	ldw	r3,168(sp)
    315c:	20e7c83a 	sub	r19,r4,r3
    3160:	04c19f0e 	bge	zero,r19,37e0 <___vfprintf_internal_r+0xe00>
    3164:	02400404 	movi	r9,16
    3168:	d8c02017 	ldw	r3,128(sp)
    316c:	d8801f17 	ldw	r2,124(sp)
    3170:	4cc50d0e 	bge	r9,r19,45a8 <___vfprintf_internal_r+0x1bc8>
    3174:	01400074 	movhi	r5,1
    3178:	29459584 	addi	r5,r5,5718
    317c:	dc403b15 	stw	r17,236(sp)
    3180:	d9403515 	stw	r5,212(sp)
    3184:	9823883a 	mov	r17,r19
    3188:	482d883a 	mov	r22,r9
    318c:	9027883a 	mov	r19,r18
    3190:	070001c4 	movi	fp,7
    3194:	8025883a 	mov	r18,r16
    3198:	dc002c17 	ldw	r16,176(sp)
    319c:	00000306 	br	31ac <___vfprintf_internal_r+0x7cc>
    31a0:	8c7ffc04 	addi	r17,r17,-16
    31a4:	42000204 	addi	r8,r8,8
    31a8:	b440130e 	bge	r22,r17,31f8 <___vfprintf_internal_r+0x818>
    31ac:	01000074 	movhi	r4,1
    31b0:	18c00404 	addi	r3,r3,16
    31b4:	10800044 	addi	r2,r2,1
    31b8:	21059584 	addi	r4,r4,5718
    31bc:	41000015 	stw	r4,0(r8)
    31c0:	45800115 	stw	r22,4(r8)
    31c4:	d8c02015 	stw	r3,128(sp)
    31c8:	d8801f15 	stw	r2,124(sp)
    31cc:	e0bff40e 	bge	fp,r2,31a0 <___vfprintf_internal_r+0x7c0>
    31d0:	d9801e04 	addi	r6,sp,120
    31d4:	b80b883a 	mov	r5,r23
    31d8:	8009883a 	mov	r4,r16
    31dc:	000977c0 	call	977c <__sprint_r>
    31e0:	103f011e 	bne	r2,zero,2de8 <___vfprintf_internal_r+0x408>
    31e4:	8c7ffc04 	addi	r17,r17,-16
    31e8:	d8c02017 	ldw	r3,128(sp)
    31ec:	d8801f17 	ldw	r2,124(sp)
    31f0:	da000404 	addi	r8,sp,16
    31f4:	b47fed16 	blt	r22,r17,31ac <___vfprintf_internal_r+0x7cc>
    31f8:	9021883a 	mov	r16,r18
    31fc:	9825883a 	mov	r18,r19
    3200:	8827883a 	mov	r19,r17
    3204:	dc403b17 	ldw	r17,236(sp)
    3208:	d9403517 	ldw	r5,212(sp)
    320c:	98c7883a 	add	r3,r19,r3
    3210:	10800044 	addi	r2,r2,1
    3214:	41400015 	stw	r5,0(r8)
    3218:	44c00115 	stw	r19,4(r8)
    321c:	d8c02015 	stw	r3,128(sp)
    3220:	d8801f15 	stw	r2,124(sp)
    3224:	010001c4 	movi	r4,7
    3228:	2082a316 	blt	r4,r2,3cb8 <___vfprintf_internal_r+0x12d8>
    322c:	df002787 	ldb	fp,158(sp)
    3230:	42000204 	addi	r8,r8,8
    3234:	e0000c26 	beq	fp,zero,3268 <___vfprintf_internal_r+0x888>
    3238:	d8801f17 	ldw	r2,124(sp)
    323c:	d9002784 	addi	r4,sp,158
    3240:	18c00044 	addi	r3,r3,1
    3244:	10800044 	addi	r2,r2,1
    3248:	41000015 	stw	r4,0(r8)
    324c:	01000044 	movi	r4,1
    3250:	41000115 	stw	r4,4(r8)
    3254:	d8c02015 	stw	r3,128(sp)
    3258:	d8801f15 	stw	r2,124(sp)
    325c:	010001c4 	movi	r4,7
    3260:	20823c16 	blt	r4,r2,3b54 <___vfprintf_internal_r+0x1174>
    3264:	42000204 	addi	r8,r8,8
    3268:	d8802b17 	ldw	r2,172(sp)
    326c:	10000c26 	beq	r2,zero,32a0 <___vfprintf_internal_r+0x8c0>
    3270:	d8801f17 	ldw	r2,124(sp)
    3274:	d9002704 	addi	r4,sp,156
    3278:	18c00084 	addi	r3,r3,2
    327c:	10800044 	addi	r2,r2,1
    3280:	41000015 	stw	r4,0(r8)
    3284:	01000084 	movi	r4,2
    3288:	41000115 	stw	r4,4(r8)
    328c:	d8c02015 	stw	r3,128(sp)
    3290:	d8801f15 	stw	r2,124(sp)
    3294:	010001c4 	movi	r4,7
    3298:	20823616 	blt	r4,r2,3b74 <___vfprintf_internal_r+0x1194>
    329c:	42000204 	addi	r8,r8,8
    32a0:	d9003017 	ldw	r4,192(sp)
    32a4:	00802004 	movi	r2,128
    32a8:	20819926 	beq	r4,r2,3910 <___vfprintf_internal_r+0xf30>
    32ac:	d9402917 	ldw	r5,164(sp)
    32b0:	d8802e17 	ldw	r2,184(sp)
    32b4:	28adc83a 	sub	r22,r5,r2
    32b8:	0580310e 	bge	zero,r22,3380 <___vfprintf_internal_r+0x9a0>
    32bc:	07000404 	movi	fp,16
    32c0:	d8801f17 	ldw	r2,124(sp)
    32c4:	e584140e 	bge	fp,r22,4318 <___vfprintf_internal_r+0x1938>
    32c8:	01400074 	movhi	r5,1
    32cc:	29459184 	addi	r5,r5,5702
    32d0:	dc402915 	stw	r17,164(sp)
    32d4:	d9402b15 	stw	r5,172(sp)
    32d8:	b023883a 	mov	r17,r22
    32dc:	04c001c4 	movi	r19,7
    32e0:	a82d883a 	mov	r22,r21
    32e4:	902b883a 	mov	r21,r18
    32e8:	8025883a 	mov	r18,r16
    32ec:	dc002c17 	ldw	r16,176(sp)
    32f0:	00000306 	br	3300 <___vfprintf_internal_r+0x920>
    32f4:	8c7ffc04 	addi	r17,r17,-16
    32f8:	42000204 	addi	r8,r8,8
    32fc:	e440110e 	bge	fp,r17,3344 <___vfprintf_internal_r+0x964>
    3300:	18c00404 	addi	r3,r3,16
    3304:	10800044 	addi	r2,r2,1
    3308:	45000015 	stw	r20,0(r8)
    330c:	47000115 	stw	fp,4(r8)
    3310:	d8c02015 	stw	r3,128(sp)
    3314:	d8801f15 	stw	r2,124(sp)
    3318:	98bff60e 	bge	r19,r2,32f4 <___vfprintf_internal_r+0x914>
    331c:	d9801e04 	addi	r6,sp,120
    3320:	b80b883a 	mov	r5,r23
    3324:	8009883a 	mov	r4,r16
    3328:	000977c0 	call	977c <__sprint_r>
    332c:	103eae1e 	bne	r2,zero,2de8 <___vfprintf_internal_r+0x408>
    3330:	8c7ffc04 	addi	r17,r17,-16
    3334:	d8c02017 	ldw	r3,128(sp)
    3338:	d8801f17 	ldw	r2,124(sp)
    333c:	da000404 	addi	r8,sp,16
    3340:	e47fef16 	blt	fp,r17,3300 <___vfprintf_internal_r+0x920>
    3344:	9021883a 	mov	r16,r18
    3348:	a825883a 	mov	r18,r21
    334c:	b02b883a 	mov	r21,r22
    3350:	882d883a 	mov	r22,r17
    3354:	dc402917 	ldw	r17,164(sp)
    3358:	d9002b17 	ldw	r4,172(sp)
    335c:	1d87883a 	add	r3,r3,r22
    3360:	10800044 	addi	r2,r2,1
    3364:	41000015 	stw	r4,0(r8)
    3368:	45800115 	stw	r22,4(r8)
    336c:	d8c02015 	stw	r3,128(sp)
    3370:	d8801f15 	stw	r2,124(sp)
    3374:	010001c4 	movi	r4,7
    3378:	2081ee16 	blt	r4,r2,3b34 <___vfprintf_internal_r+0x1154>
    337c:	42000204 	addi	r8,r8,8
    3380:	9080400c 	andi	r2,r18,256
    3384:	1001181e 	bne	r2,zero,37e8 <___vfprintf_internal_r+0xe08>
    3388:	d9402e17 	ldw	r5,184(sp)
    338c:	d8801f17 	ldw	r2,124(sp)
    3390:	44000015 	stw	r16,0(r8)
    3394:	1947883a 	add	r3,r3,r5
    3398:	10800044 	addi	r2,r2,1
    339c:	41400115 	stw	r5,4(r8)
    33a0:	d8c02015 	stw	r3,128(sp)
    33a4:	d8801f15 	stw	r2,124(sp)
    33a8:	010001c4 	movi	r4,7
    33ac:	2081d316 	blt	r4,r2,3afc <___vfprintf_internal_r+0x111c>
    33b0:	42000204 	addi	r8,r8,8
    33b4:	9480010c 	andi	r18,r18,4
    33b8:	90003226 	beq	r18,zero,3484 <___vfprintf_internal_r+0xaa4>
    33bc:	d9403117 	ldw	r5,196(sp)
    33c0:	d8802a17 	ldw	r2,168(sp)
    33c4:	28a1c83a 	sub	r16,r5,r2
    33c8:	04002e0e 	bge	zero,r16,3484 <___vfprintf_internal_r+0xaa4>
    33cc:	04400404 	movi	r17,16
    33d0:	d8801f17 	ldw	r2,124(sp)
    33d4:	8c04a20e 	bge	r17,r16,4660 <___vfprintf_internal_r+0x1c80>
    33d8:	01400074 	movhi	r5,1
    33dc:	29459584 	addi	r5,r5,5718
    33e0:	d9403515 	stw	r5,212(sp)
    33e4:	048001c4 	movi	r18,7
    33e8:	dcc02c17 	ldw	r19,176(sp)
    33ec:	00000306 	br	33fc <___vfprintf_internal_r+0xa1c>
    33f0:	843ffc04 	addi	r16,r16,-16
    33f4:	42000204 	addi	r8,r8,8
    33f8:	8c00130e 	bge	r17,r16,3448 <___vfprintf_internal_r+0xa68>
    33fc:	01000074 	movhi	r4,1
    3400:	18c00404 	addi	r3,r3,16
    3404:	10800044 	addi	r2,r2,1
    3408:	21059584 	addi	r4,r4,5718
    340c:	41000015 	stw	r4,0(r8)
    3410:	44400115 	stw	r17,4(r8)
    3414:	d8c02015 	stw	r3,128(sp)
    3418:	d8801f15 	stw	r2,124(sp)
    341c:	90bff40e 	bge	r18,r2,33f0 <___vfprintf_internal_r+0xa10>
    3420:	d9801e04 	addi	r6,sp,120
    3424:	b80b883a 	mov	r5,r23
    3428:	9809883a 	mov	r4,r19
    342c:	000977c0 	call	977c <__sprint_r>
    3430:	103e6d1e 	bne	r2,zero,2de8 <___vfprintf_internal_r+0x408>
    3434:	843ffc04 	addi	r16,r16,-16
    3438:	d8c02017 	ldw	r3,128(sp)
    343c:	d8801f17 	ldw	r2,124(sp)
    3440:	da000404 	addi	r8,sp,16
    3444:	8c3fed16 	blt	r17,r16,33fc <___vfprintf_internal_r+0xa1c>
    3448:	d9403517 	ldw	r5,212(sp)
    344c:	1c07883a 	add	r3,r3,r16
    3450:	10800044 	addi	r2,r2,1
    3454:	41400015 	stw	r5,0(r8)
    3458:	44000115 	stw	r16,4(r8)
    345c:	d8c02015 	stw	r3,128(sp)
    3460:	d8801f15 	stw	r2,124(sp)
    3464:	010001c4 	movi	r4,7
    3468:	2080060e 	bge	r4,r2,3484 <___vfprintf_internal_r+0xaa4>
    346c:	d9002c17 	ldw	r4,176(sp)
    3470:	d9801e04 	addi	r6,sp,120
    3474:	b80b883a 	mov	r5,r23
    3478:	000977c0 	call	977c <__sprint_r>
    347c:	103e5a1e 	bne	r2,zero,2de8 <___vfprintf_internal_r+0x408>
    3480:	d8c02017 	ldw	r3,128(sp)
    3484:	d8803117 	ldw	r2,196(sp)
    3488:	d9002a17 	ldw	r4,168(sp)
    348c:	1100010e 	bge	r2,r4,3494 <___vfprintf_internal_r+0xab4>
    3490:	2005883a 	mov	r2,r4
    3494:	d9402f17 	ldw	r5,188(sp)
    3498:	288b883a 	add	r5,r5,r2
    349c:	d9402f15 	stw	r5,188(sp)
    34a0:	18019e1e 	bne	r3,zero,3b1c <___vfprintf_internal_r+0x113c>
    34a4:	a8800007 	ldb	r2,0(r21)
    34a8:	d8001f15 	stw	zero,124(sp)
    34ac:	da000404 	addi	r8,sp,16
    34b0:	103d851e 	bne	r2,zero,2ac8 <___vfprintf_internal_r+0xe8>
    34b4:	a821883a 	mov	r16,r21
    34b8:	003d9b06 	br	2b28 <___vfprintf_internal_r+0x148>
    34bc:	18c03fcc 	andi	r3,r3,255
    34c0:	1805c11e 	bne	r3,zero,4bc8 <___vfprintf_internal_r+0x21e8>
    34c4:	94800414 	ori	r18,r18,16
    34c8:	9080080c 	andi	r2,r18,32
    34cc:	10020c26 	beq	r2,zero,3d00 <___vfprintf_internal_r+0x1320>
    34d0:	d8802d17 	ldw	r2,180(sp)
    34d4:	d9002917 	ldw	r4,164(sp)
    34d8:	d8002785 	stb	zero,158(sp)
    34dc:	10c00204 	addi	r3,r2,8
    34e0:	14c00017 	ldw	r19,0(r2)
    34e4:	15800117 	ldw	r22,4(r2)
    34e8:	20040f16 	blt	r4,zero,4528 <___vfprintf_internal_r+0x1b48>
    34ec:	013fdfc4 	movi	r4,-129
    34f0:	9d84b03a 	or	r2,r19,r22
    34f4:	d8c02d15 	stw	r3,180(sp)
    34f8:	9124703a 	and	r18,r18,r4
    34fc:	0039883a 	mov	fp,zero
    3500:	103e891e 	bne	r2,zero,2f28 <___vfprintf_internal_r+0x548>
    3504:	d9002917 	ldw	r4,164(sp)
    3508:	2002c11e 	bne	r4,zero,4010 <___vfprintf_internal_r+0x1630>
    350c:	d8002915 	stw	zero,164(sp)
    3510:	d8002e15 	stw	zero,184(sp)
    3514:	dc001e04 	addi	r16,sp,120
    3518:	003ef806 	br	30fc <___vfprintf_internal_r+0x71c>
    351c:	18c03fcc 	andi	r3,r3,255
    3520:	18059d1e 	bne	r3,zero,4b98 <___vfprintf_internal_r+0x21b8>
    3524:	01400074 	movhi	r5,1
    3528:	29458504 	addi	r5,r5,5652
    352c:	d9403915 	stw	r5,228(sp)
    3530:	9080080c 	andi	r2,r18,32
    3534:	10005226 	beq	r2,zero,3680 <___vfprintf_internal_r+0xca0>
    3538:	d8802d17 	ldw	r2,180(sp)
    353c:	14c00017 	ldw	r19,0(r2)
    3540:	15800117 	ldw	r22,4(r2)
    3544:	10800204 	addi	r2,r2,8
    3548:	d8802d15 	stw	r2,180(sp)
    354c:	9080004c 	andi	r2,r18,1
    3550:	10019026 	beq	r2,zero,3b94 <___vfprintf_internal_r+0x11b4>
    3554:	9d84b03a 	or	r2,r19,r22
    3558:	10036926 	beq	r2,zero,4300 <___vfprintf_internal_r+0x1920>
    355c:	d8c02917 	ldw	r3,164(sp)
    3560:	00800c04 	movi	r2,48
    3564:	d8802705 	stb	r2,156(sp)
    3568:	dc402745 	stb	r17,157(sp)
    356c:	d8002785 	stb	zero,158(sp)
    3570:	90800094 	ori	r2,r18,2
    3574:	18045d16 	blt	r3,zero,46ec <___vfprintf_internal_r+0x1d0c>
    3578:	00bfdfc4 	movi	r2,-129
    357c:	90a4703a 	and	r18,r18,r2
    3580:	94800094 	ori	r18,r18,2
    3584:	0039883a 	mov	fp,zero
    3588:	d9003917 	ldw	r4,228(sp)
    358c:	dc001e04 	addi	r16,sp,120
    3590:	988003cc 	andi	r2,r19,15
    3594:	b006973a 	slli	r3,r22,28
    3598:	2085883a 	add	r2,r4,r2
    359c:	9826d13a 	srli	r19,r19,4
    35a0:	10800003 	ldbu	r2,0(r2)
    35a4:	b02cd13a 	srli	r22,r22,4
    35a8:	843fffc4 	addi	r16,r16,-1
    35ac:	1ce6b03a 	or	r19,r3,r19
    35b0:	80800005 	stb	r2,0(r16)
    35b4:	9d84b03a 	or	r2,r19,r22
    35b8:	103ff51e 	bne	r2,zero,3590 <___vfprintf_internal_r+0xbb0>
    35bc:	d8c02817 	ldw	r3,160(sp)
    35c0:	1c07c83a 	sub	r3,r3,r16
    35c4:	d8c02e15 	stw	r3,184(sp)
    35c8:	003ecc06 	br	30fc <___vfprintf_internal_r+0x71c>
    35cc:	18c03fcc 	andi	r3,r3,255
    35d0:	183e9f26 	beq	r3,zero,3050 <___vfprintf_internal_r+0x670>
    35d4:	d9c02785 	stb	r7,158(sp)
    35d8:	003e9d06 	br	3050 <___vfprintf_internal_r+0x670>
    35dc:	00c00044 	movi	r3,1
    35e0:	01c00ac4 	movi	r7,43
    35e4:	ac400007 	ldb	r17,0(r21)
    35e8:	003d5e06 	br	2b64 <___vfprintf_internal_r+0x184>
    35ec:	94800814 	ori	r18,r18,32
    35f0:	ac400007 	ldb	r17,0(r21)
    35f4:	003d5b06 	br	2b64 <___vfprintf_internal_r+0x184>
    35f8:	d8c02d17 	ldw	r3,180(sp)
    35fc:	d8002785 	stb	zero,158(sp)
    3600:	1c000017 	ldw	r16,0(r3)
    3604:	1cc00104 	addi	r19,r3,4
    3608:	80041926 	beq	r16,zero,4670 <___vfprintf_internal_r+0x1c90>
    360c:	d9002917 	ldw	r4,164(sp)
    3610:	2003d016 	blt	r4,zero,4554 <___vfprintf_internal_r+0x1b74>
    3614:	200d883a 	mov	r6,r4
    3618:	000b883a 	mov	r5,zero
    361c:	8009883a 	mov	r4,r16
    3620:	da003d15 	stw	r8,244(sp)
    3624:	00079e40 	call	79e4 <memchr>
    3628:	da003d17 	ldw	r8,244(sp)
    362c:	10045426 	beq	r2,zero,4780 <___vfprintf_internal_r+0x1da0>
    3630:	1405c83a 	sub	r2,r2,r16
    3634:	d8802e15 	stw	r2,184(sp)
    3638:	1003cc16 	blt	r2,zero,456c <___vfprintf_internal_r+0x1b8c>
    363c:	df002783 	ldbu	fp,158(sp)
    3640:	d8802a15 	stw	r2,168(sp)
    3644:	dcc02d15 	stw	r19,180(sp)
    3648:	d8002915 	stw	zero,164(sp)
    364c:	d8003215 	stw	zero,200(sp)
    3650:	003eb006 	br	3114 <___vfprintf_internal_r+0x734>
    3654:	18c03fcc 	andi	r3,r3,255
    3658:	183f9b26 	beq	r3,zero,34c8 <___vfprintf_internal_r+0xae8>
    365c:	d9c02785 	stb	r7,158(sp)
    3660:	003f9906 	br	34c8 <___vfprintf_internal_r+0xae8>
    3664:	18c03fcc 	andi	r3,r3,255
    3668:	1805551e 	bne	r3,zero,4bc0 <___vfprintf_internal_r+0x21e0>
    366c:	01400074 	movhi	r5,1
    3670:	29458a04 	addi	r5,r5,5672
    3674:	d9403915 	stw	r5,228(sp)
    3678:	9080080c 	andi	r2,r18,32
    367c:	103fae1e 	bne	r2,zero,3538 <___vfprintf_internal_r+0xb58>
    3680:	9080040c 	andi	r2,r18,16
    3684:	1002de26 	beq	r2,zero,4200 <___vfprintf_internal_r+0x1820>
    3688:	d8c02d17 	ldw	r3,180(sp)
    368c:	002d883a 	mov	r22,zero
    3690:	1cc00017 	ldw	r19,0(r3)
    3694:	18c00104 	addi	r3,r3,4
    3698:	d8c02d15 	stw	r3,180(sp)
    369c:	003fab06 	br	354c <___vfprintf_internal_r+0xb6c>
    36a0:	38803fcc 	andi	r2,r7,255
    36a4:	1080201c 	xori	r2,r2,128
    36a8:	10bfe004 	addi	r2,r2,-128
    36ac:	1002d21e 	bne	r2,zero,41f8 <___vfprintf_internal_r+0x1818>
    36b0:	00c00044 	movi	r3,1
    36b4:	01c00804 	movi	r7,32
    36b8:	ac400007 	ldb	r17,0(r21)
    36bc:	003d2906 	br	2b64 <___vfprintf_internal_r+0x184>
    36c0:	94800054 	ori	r18,r18,1
    36c4:	ac400007 	ldb	r17,0(r21)
    36c8:	003d2606 	br	2b64 <___vfprintf_internal_r+0x184>
    36cc:	18c03fcc 	andi	r3,r3,255
    36d0:	183e0526 	beq	r3,zero,2ee8 <___vfprintf_internal_r+0x508>
    36d4:	d9c02785 	stb	r7,158(sp)
    36d8:	003e0306 	br	2ee8 <___vfprintf_internal_r+0x508>
    36dc:	94801014 	ori	r18,r18,64
    36e0:	ac400007 	ldb	r17,0(r21)
    36e4:	003d1f06 	br	2b64 <___vfprintf_internal_r+0x184>
    36e8:	ac400007 	ldb	r17,0(r21)
    36ec:	8a438726 	beq	r17,r9,450c <___vfprintf_internal_r+0x1b2c>
    36f0:	94800414 	ori	r18,r18,16
    36f4:	003d1b06 	br	2b64 <___vfprintf_internal_r+0x184>
    36f8:	18c03fcc 	andi	r3,r3,255
    36fc:	1805341e 	bne	r3,zero,4bd0 <___vfprintf_internal_r+0x21f0>
    3700:	9080080c 	andi	r2,r18,32
    3704:	1002cd26 	beq	r2,zero,423c <___vfprintf_internal_r+0x185c>
    3708:	d9402d17 	ldw	r5,180(sp)
    370c:	d9002f17 	ldw	r4,188(sp)
    3710:	28800017 	ldw	r2,0(r5)
    3714:	2007d7fa 	srai	r3,r4,31
    3718:	29400104 	addi	r5,r5,4
    371c:	d9402d15 	stw	r5,180(sp)
    3720:	11000015 	stw	r4,0(r2)
    3724:	10c00115 	stw	r3,4(r2)
    3728:	003ce506 	br	2ac0 <___vfprintf_internal_r+0xe0>
    372c:	d8c02d17 	ldw	r3,180(sp)
    3730:	d9002d17 	ldw	r4,180(sp)
    3734:	d8002785 	stb	zero,158(sp)
    3738:	18800017 	ldw	r2,0(r3)
    373c:	21000104 	addi	r4,r4,4
    3740:	00c00044 	movi	r3,1
    3744:	d8c02a15 	stw	r3,168(sp)
    3748:	d8801405 	stb	r2,80(sp)
    374c:	d9002d15 	stw	r4,180(sp)
    3750:	d8c02e15 	stw	r3,184(sp)
    3754:	d8002915 	stw	zero,164(sp)
    3758:	d8003215 	stw	zero,200(sp)
    375c:	dc001404 	addi	r16,sp,80
    3760:	0039883a 	mov	fp,zero
    3764:	003e7206 	br	3130 <___vfprintf_internal_r+0x750>
    3768:	01000074 	movhi	r4,1
    376c:	21058a04 	addi	r4,r4,5672
    3770:	0039883a 	mov	fp,zero
    3774:	d9003915 	stw	r4,228(sp)
    3778:	04401e04 	movi	r17,120
    377c:	003f8206 	br	3588 <___vfprintf_internal_r+0xba8>
    3780:	18c03fcc 	andi	r3,r3,255
    3784:	1805061e 	bne	r3,zero,4ba0 <___vfprintf_internal_r+0x21c0>
    3788:	883d9126 	beq	r17,zero,2dd0 <___vfprintf_internal_r+0x3f0>
    378c:	00c00044 	movi	r3,1
    3790:	d8c02a15 	stw	r3,168(sp)
    3794:	dc401405 	stb	r17,80(sp)
    3798:	d8002785 	stb	zero,158(sp)
    379c:	003fec06 	br	3750 <___vfprintf_internal_r+0xd70>
    37a0:	01400074 	movhi	r5,1
    37a4:	29458a04 	addi	r5,r5,5672
    37a8:	d9403915 	stw	r5,228(sp)
    37ac:	d8c02d15 	stw	r3,180(sp)
    37b0:	1025883a 	mov	r18,r2
    37b4:	04401e04 	movi	r17,120
    37b8:	9d84b03a 	or	r2,r19,r22
    37bc:	1000fc1e 	bne	r2,zero,3bb0 <___vfprintf_internal_r+0x11d0>
    37c0:	0039883a 	mov	fp,zero
    37c4:	00800084 	movi	r2,2
    37c8:	10803fcc 	andi	r2,r2,255
    37cc:	00c00044 	movi	r3,1
    37d0:	10c20f26 	beq	r2,r3,4010 <___vfprintf_internal_r+0x1630>
    37d4:	00c00084 	movi	r3,2
    37d8:	10fd6326 	beq	r2,r3,2d68 <___vfprintf_internal_r+0x388>
    37dc:	003e2d06 	br	3094 <___vfprintf_internal_r+0x6b4>
    37e0:	d8c02017 	ldw	r3,128(sp)
    37e4:	003e9306 	br	3234 <___vfprintf_internal_r+0x854>
    37e8:	00801944 	movi	r2,101
    37ec:	14407e0e 	bge	r2,r17,39e8 <___vfprintf_internal_r+0x1008>
    37f0:	d9003617 	ldw	r4,216(sp)
    37f4:	d9403817 	ldw	r5,224(sp)
    37f8:	000d883a 	mov	r6,zero
    37fc:	000f883a 	mov	r7,zero
    3800:	d8c03c15 	stw	r3,240(sp)
    3804:	da003d15 	stw	r8,244(sp)
    3808:	000d2400 	call	d240 <__eqdf2>
    380c:	d8c03c17 	ldw	r3,240(sp)
    3810:	da003d17 	ldw	r8,244(sp)
    3814:	1000f71e 	bne	r2,zero,3bf4 <___vfprintf_internal_r+0x1214>
    3818:	d8801f17 	ldw	r2,124(sp)
    381c:	01000074 	movhi	r4,1
    3820:	21059104 	addi	r4,r4,5700
    3824:	18c00044 	addi	r3,r3,1
    3828:	10800044 	addi	r2,r2,1
    382c:	41000015 	stw	r4,0(r8)
    3830:	01000044 	movi	r4,1
    3834:	41000115 	stw	r4,4(r8)
    3838:	d8c02015 	stw	r3,128(sp)
    383c:	d8801f15 	stw	r2,124(sp)
    3840:	010001c4 	movi	r4,7
    3844:	2082b816 	blt	r4,r2,4328 <___vfprintf_internal_r+0x1948>
    3848:	42000204 	addi	r8,r8,8
    384c:	d8802617 	ldw	r2,152(sp)
    3850:	d9403317 	ldw	r5,204(sp)
    3854:	11400216 	blt	r2,r5,3860 <___vfprintf_internal_r+0xe80>
    3858:	9080004c 	andi	r2,r18,1
    385c:	103ed526 	beq	r2,zero,33b4 <___vfprintf_internal_r+0x9d4>
    3860:	d8803717 	ldw	r2,220(sp)
    3864:	d9003417 	ldw	r4,208(sp)
    3868:	d9403717 	ldw	r5,220(sp)
    386c:	1887883a 	add	r3,r3,r2
    3870:	d8801f17 	ldw	r2,124(sp)
    3874:	41000015 	stw	r4,0(r8)
    3878:	41400115 	stw	r5,4(r8)
    387c:	10800044 	addi	r2,r2,1
    3880:	d8c02015 	stw	r3,128(sp)
    3884:	d8801f15 	stw	r2,124(sp)
    3888:	010001c4 	movi	r4,7
    388c:	20832916 	blt	r4,r2,4534 <___vfprintf_internal_r+0x1b54>
    3890:	42000204 	addi	r8,r8,8
    3894:	d8803317 	ldw	r2,204(sp)
    3898:	143fffc4 	addi	r16,r2,-1
    389c:	043ec50e 	bge	zero,r16,33b4 <___vfprintf_internal_r+0x9d4>
    38a0:	04400404 	movi	r17,16
    38a4:	d8801f17 	ldw	r2,124(sp)
    38a8:	8c00880e 	bge	r17,r16,3acc <___vfprintf_internal_r+0x10ec>
    38ac:	01400074 	movhi	r5,1
    38b0:	29459184 	addi	r5,r5,5702
    38b4:	d9402b15 	stw	r5,172(sp)
    38b8:	058001c4 	movi	r22,7
    38bc:	dcc02c17 	ldw	r19,176(sp)
    38c0:	00000306 	br	38d0 <___vfprintf_internal_r+0xef0>
    38c4:	42000204 	addi	r8,r8,8
    38c8:	843ffc04 	addi	r16,r16,-16
    38cc:	8c00820e 	bge	r17,r16,3ad8 <___vfprintf_internal_r+0x10f8>
    38d0:	18c00404 	addi	r3,r3,16
    38d4:	10800044 	addi	r2,r2,1
    38d8:	45000015 	stw	r20,0(r8)
    38dc:	44400115 	stw	r17,4(r8)
    38e0:	d8c02015 	stw	r3,128(sp)
    38e4:	d8801f15 	stw	r2,124(sp)
    38e8:	b0bff60e 	bge	r22,r2,38c4 <___vfprintf_internal_r+0xee4>
    38ec:	d9801e04 	addi	r6,sp,120
    38f0:	b80b883a 	mov	r5,r23
    38f4:	9809883a 	mov	r4,r19
    38f8:	000977c0 	call	977c <__sprint_r>
    38fc:	103d3a1e 	bne	r2,zero,2de8 <___vfprintf_internal_r+0x408>
    3900:	d8c02017 	ldw	r3,128(sp)
    3904:	d8801f17 	ldw	r2,124(sp)
    3908:	da000404 	addi	r8,sp,16
    390c:	003fee06 	br	38c8 <___vfprintf_internal_r+0xee8>
    3910:	d9403117 	ldw	r5,196(sp)
    3914:	d8802a17 	ldw	r2,168(sp)
    3918:	28adc83a 	sub	r22,r5,r2
    391c:	05be630e 	bge	zero,r22,32ac <___vfprintf_internal_r+0x8cc>
    3920:	07000404 	movi	fp,16
    3924:	d8801f17 	ldw	r2,124(sp)
    3928:	e5838f0e 	bge	fp,r22,4768 <___vfprintf_internal_r+0x1d88>
    392c:	01400074 	movhi	r5,1
    3930:	29459184 	addi	r5,r5,5702
    3934:	dc403015 	stw	r17,192(sp)
    3938:	d9402b15 	stw	r5,172(sp)
    393c:	b023883a 	mov	r17,r22
    3940:	04c001c4 	movi	r19,7
    3944:	a82d883a 	mov	r22,r21
    3948:	902b883a 	mov	r21,r18
    394c:	8025883a 	mov	r18,r16
    3950:	dc002c17 	ldw	r16,176(sp)
    3954:	00000306 	br	3964 <___vfprintf_internal_r+0xf84>
    3958:	8c7ffc04 	addi	r17,r17,-16
    395c:	42000204 	addi	r8,r8,8
    3960:	e440110e 	bge	fp,r17,39a8 <___vfprintf_internal_r+0xfc8>
    3964:	18c00404 	addi	r3,r3,16
    3968:	10800044 	addi	r2,r2,1
    396c:	45000015 	stw	r20,0(r8)
    3970:	47000115 	stw	fp,4(r8)
    3974:	d8c02015 	stw	r3,128(sp)
    3978:	d8801f15 	stw	r2,124(sp)
    397c:	98bff60e 	bge	r19,r2,3958 <___vfprintf_internal_r+0xf78>
    3980:	d9801e04 	addi	r6,sp,120
    3984:	b80b883a 	mov	r5,r23
    3988:	8009883a 	mov	r4,r16
    398c:	000977c0 	call	977c <__sprint_r>
    3990:	103d151e 	bne	r2,zero,2de8 <___vfprintf_internal_r+0x408>
    3994:	8c7ffc04 	addi	r17,r17,-16
    3998:	d8c02017 	ldw	r3,128(sp)
    399c:	d8801f17 	ldw	r2,124(sp)
    39a0:	da000404 	addi	r8,sp,16
    39a4:	e47fef16 	blt	fp,r17,3964 <___vfprintf_internal_r+0xf84>
    39a8:	9021883a 	mov	r16,r18
    39ac:	a825883a 	mov	r18,r21
    39b0:	b02b883a 	mov	r21,r22
    39b4:	882d883a 	mov	r22,r17
    39b8:	dc403017 	ldw	r17,192(sp)
    39bc:	d9002b17 	ldw	r4,172(sp)
    39c0:	1d87883a 	add	r3,r3,r22
    39c4:	10800044 	addi	r2,r2,1
    39c8:	41000015 	stw	r4,0(r8)
    39cc:	45800115 	stw	r22,4(r8)
    39d0:	d8c02015 	stw	r3,128(sp)
    39d4:	d8801f15 	stw	r2,124(sp)
    39d8:	010001c4 	movi	r4,7
    39dc:	20818e16 	blt	r4,r2,4018 <___vfprintf_internal_r+0x1638>
    39e0:	42000204 	addi	r8,r8,8
    39e4:	003e3106 	br	32ac <___vfprintf_internal_r+0x8cc>
    39e8:	d9403317 	ldw	r5,204(sp)
    39ec:	00800044 	movi	r2,1
    39f0:	18c00044 	addi	r3,r3,1
    39f4:	1141530e 	bge	r2,r5,3f44 <___vfprintf_internal_r+0x1564>
    39f8:	dc401f17 	ldw	r17,124(sp)
    39fc:	00800044 	movi	r2,1
    3a00:	40800115 	stw	r2,4(r8)
    3a04:	8c400044 	addi	r17,r17,1
    3a08:	44000015 	stw	r16,0(r8)
    3a0c:	d8c02015 	stw	r3,128(sp)
    3a10:	dc401f15 	stw	r17,124(sp)
    3a14:	008001c4 	movi	r2,7
    3a18:	14416b16 	blt	r2,r17,3fc8 <___vfprintf_internal_r+0x15e8>
    3a1c:	42000204 	addi	r8,r8,8
    3a20:	d8803717 	ldw	r2,220(sp)
    3a24:	d9003417 	ldw	r4,208(sp)
    3a28:	8c400044 	addi	r17,r17,1
    3a2c:	10c7883a 	add	r3,r2,r3
    3a30:	40800115 	stw	r2,4(r8)
    3a34:	41000015 	stw	r4,0(r8)
    3a38:	d8c02015 	stw	r3,128(sp)
    3a3c:	dc401f15 	stw	r17,124(sp)
    3a40:	008001c4 	movi	r2,7
    3a44:	14416916 	blt	r2,r17,3fec <___vfprintf_internal_r+0x160c>
    3a48:	45800204 	addi	r22,r8,8
    3a4c:	d9003617 	ldw	r4,216(sp)
    3a50:	d9403817 	ldw	r5,224(sp)
    3a54:	000d883a 	mov	r6,zero
    3a58:	000f883a 	mov	r7,zero
    3a5c:	d8c03c15 	stw	r3,240(sp)
    3a60:	000d2400 	call	d240 <__eqdf2>
    3a64:	d8c03c17 	ldw	r3,240(sp)
    3a68:	1000bc26 	beq	r2,zero,3d5c <___vfprintf_internal_r+0x137c>
    3a6c:	d9403317 	ldw	r5,204(sp)
    3a70:	84000044 	addi	r16,r16,1
    3a74:	8c400044 	addi	r17,r17,1
    3a78:	28bfffc4 	addi	r2,r5,-1
    3a7c:	1887883a 	add	r3,r3,r2
    3a80:	b0800115 	stw	r2,4(r22)
    3a84:	b4000015 	stw	r16,0(r22)
    3a88:	d8c02015 	stw	r3,128(sp)
    3a8c:	dc401f15 	stw	r17,124(sp)
    3a90:	008001c4 	movi	r2,7
    3a94:	14414316 	blt	r2,r17,3fa4 <___vfprintf_internal_r+0x15c4>
    3a98:	b5800204 	addi	r22,r22,8
    3a9c:	d9003a17 	ldw	r4,232(sp)
    3aa0:	df0022c4 	addi	fp,sp,139
    3aa4:	8c400044 	addi	r17,r17,1
    3aa8:	20c7883a 	add	r3,r4,r3
    3aac:	b7000015 	stw	fp,0(r22)
    3ab0:	b1000115 	stw	r4,4(r22)
    3ab4:	d8c02015 	stw	r3,128(sp)
    3ab8:	dc401f15 	stw	r17,124(sp)
    3abc:	008001c4 	movi	r2,7
    3ac0:	14400e16 	blt	r2,r17,3afc <___vfprintf_internal_r+0x111c>
    3ac4:	b2000204 	addi	r8,r22,8
    3ac8:	003e3a06 	br	33b4 <___vfprintf_internal_r+0x9d4>
    3acc:	01000074 	movhi	r4,1
    3ad0:	21059184 	addi	r4,r4,5702
    3ad4:	d9002b15 	stw	r4,172(sp)
    3ad8:	d9002b17 	ldw	r4,172(sp)
    3adc:	1c07883a 	add	r3,r3,r16
    3ae0:	44000115 	stw	r16,4(r8)
    3ae4:	41000015 	stw	r4,0(r8)
    3ae8:	10800044 	addi	r2,r2,1
    3aec:	d8c02015 	stw	r3,128(sp)
    3af0:	d8801f15 	stw	r2,124(sp)
    3af4:	010001c4 	movi	r4,7
    3af8:	20be2d0e 	bge	r4,r2,33b0 <___vfprintf_internal_r+0x9d0>
    3afc:	d9002c17 	ldw	r4,176(sp)
    3b00:	d9801e04 	addi	r6,sp,120
    3b04:	b80b883a 	mov	r5,r23
    3b08:	000977c0 	call	977c <__sprint_r>
    3b0c:	103cb61e 	bne	r2,zero,2de8 <___vfprintf_internal_r+0x408>
    3b10:	d8c02017 	ldw	r3,128(sp)
    3b14:	da000404 	addi	r8,sp,16
    3b18:	003e2606 	br	33b4 <___vfprintf_internal_r+0x9d4>
    3b1c:	d9002c17 	ldw	r4,176(sp)
    3b20:	d9801e04 	addi	r6,sp,120
    3b24:	b80b883a 	mov	r5,r23
    3b28:	000977c0 	call	977c <__sprint_r>
    3b2c:	103e5d26 	beq	r2,zero,34a4 <___vfprintf_internal_r+0xac4>
    3b30:	003cad06 	br	2de8 <___vfprintf_internal_r+0x408>
    3b34:	d9002c17 	ldw	r4,176(sp)
    3b38:	d9801e04 	addi	r6,sp,120
    3b3c:	b80b883a 	mov	r5,r23
    3b40:	000977c0 	call	977c <__sprint_r>
    3b44:	103ca81e 	bne	r2,zero,2de8 <___vfprintf_internal_r+0x408>
    3b48:	d8c02017 	ldw	r3,128(sp)
    3b4c:	da000404 	addi	r8,sp,16
    3b50:	003e0b06 	br	3380 <___vfprintf_internal_r+0x9a0>
    3b54:	d9002c17 	ldw	r4,176(sp)
    3b58:	d9801e04 	addi	r6,sp,120
    3b5c:	b80b883a 	mov	r5,r23
    3b60:	000977c0 	call	977c <__sprint_r>
    3b64:	103ca01e 	bne	r2,zero,2de8 <___vfprintf_internal_r+0x408>
    3b68:	d8c02017 	ldw	r3,128(sp)
    3b6c:	da000404 	addi	r8,sp,16
    3b70:	003dbd06 	br	3268 <___vfprintf_internal_r+0x888>
    3b74:	d9002c17 	ldw	r4,176(sp)
    3b78:	d9801e04 	addi	r6,sp,120
    3b7c:	b80b883a 	mov	r5,r23
    3b80:	000977c0 	call	977c <__sprint_r>
    3b84:	103c981e 	bne	r2,zero,2de8 <___vfprintf_internal_r+0x408>
    3b88:	d8c02017 	ldw	r3,128(sp)
    3b8c:	da000404 	addi	r8,sp,16
    3b90:	003dc306 	br	32a0 <___vfprintf_internal_r+0x8c0>
    3b94:	d8802917 	ldw	r2,164(sp)
    3b98:	d8002785 	stb	zero,158(sp)
    3b9c:	103f0616 	blt	r2,zero,37b8 <___vfprintf_internal_r+0xdd8>
    3ba0:	00ffdfc4 	movi	r3,-129
    3ba4:	9d84b03a 	or	r2,r19,r22
    3ba8:	90e4703a 	and	r18,r18,r3
    3bac:	103c6b26 	beq	r2,zero,2d5c <___vfprintf_internal_r+0x37c>
    3bb0:	0039883a 	mov	fp,zero
    3bb4:	003e7406 	br	3588 <___vfprintf_internal_r+0xba8>
    3bb8:	9080040c 	andi	r2,r18,16
    3bbc:	1001b326 	beq	r2,zero,428c <___vfprintf_internal_r+0x18ac>
    3bc0:	d9002d17 	ldw	r4,180(sp)
    3bc4:	d9402917 	ldw	r5,164(sp)
    3bc8:	d8002785 	stb	zero,158(sp)
    3bcc:	20800104 	addi	r2,r4,4
    3bd0:	24c00017 	ldw	r19,0(r4)
    3bd4:	002d883a 	mov	r22,zero
    3bd8:	2801b516 	blt	r5,zero,42b0 <___vfprintf_internal_r+0x18d0>
    3bdc:	00ffdfc4 	movi	r3,-129
    3be0:	d8802d15 	stw	r2,180(sp)
    3be4:	90e4703a 	and	r18,r18,r3
    3be8:	983d2726 	beq	r19,zero,3088 <___vfprintf_internal_r+0x6a8>
    3bec:	0039883a 	mov	fp,zero
    3bf0:	003d2a06 	br	309c <___vfprintf_internal_r+0x6bc>
    3bf4:	dc402617 	ldw	r17,152(sp)
    3bf8:	0441d30e 	bge	zero,r17,4348 <___vfprintf_internal_r+0x1968>
    3bfc:	dc403217 	ldw	r17,200(sp)
    3c00:	d8803317 	ldw	r2,204(sp)
    3c04:	1440010e 	bge	r2,r17,3c0c <___vfprintf_internal_r+0x122c>
    3c08:	1023883a 	mov	r17,r2
    3c0c:	04400a0e 	bge	zero,r17,3c38 <___vfprintf_internal_r+0x1258>
    3c10:	d8801f17 	ldw	r2,124(sp)
    3c14:	1c47883a 	add	r3,r3,r17
    3c18:	44000015 	stw	r16,0(r8)
    3c1c:	10800044 	addi	r2,r2,1
    3c20:	44400115 	stw	r17,4(r8)
    3c24:	d8c02015 	stw	r3,128(sp)
    3c28:	d8801f15 	stw	r2,124(sp)
    3c2c:	010001c4 	movi	r4,7
    3c30:	20826516 	blt	r4,r2,45c8 <___vfprintf_internal_r+0x1be8>
    3c34:	42000204 	addi	r8,r8,8
    3c38:	88026116 	blt	r17,zero,45c0 <___vfprintf_internal_r+0x1be0>
    3c3c:	d9003217 	ldw	r4,200(sp)
    3c40:	2463c83a 	sub	r17,r4,r17
    3c44:	04407b0e 	bge	zero,r17,3e34 <___vfprintf_internal_r+0x1454>
    3c48:	05800404 	movi	r22,16
    3c4c:	d8801f17 	ldw	r2,124(sp)
    3c50:	b4419d0e 	bge	r22,r17,42c8 <___vfprintf_internal_r+0x18e8>
    3c54:	01000074 	movhi	r4,1
    3c58:	21059184 	addi	r4,r4,5702
    3c5c:	d9002b15 	stw	r4,172(sp)
    3c60:	070001c4 	movi	fp,7
    3c64:	dcc02c17 	ldw	r19,176(sp)
    3c68:	00000306 	br	3c78 <___vfprintf_internal_r+0x1298>
    3c6c:	42000204 	addi	r8,r8,8
    3c70:	8c7ffc04 	addi	r17,r17,-16
    3c74:	b441970e 	bge	r22,r17,42d4 <___vfprintf_internal_r+0x18f4>
    3c78:	18c00404 	addi	r3,r3,16
    3c7c:	10800044 	addi	r2,r2,1
    3c80:	45000015 	stw	r20,0(r8)
    3c84:	45800115 	stw	r22,4(r8)
    3c88:	d8c02015 	stw	r3,128(sp)
    3c8c:	d8801f15 	stw	r2,124(sp)
    3c90:	e0bff60e 	bge	fp,r2,3c6c <___vfprintf_internal_r+0x128c>
    3c94:	d9801e04 	addi	r6,sp,120
    3c98:	b80b883a 	mov	r5,r23
    3c9c:	9809883a 	mov	r4,r19
    3ca0:	000977c0 	call	977c <__sprint_r>
    3ca4:	103c501e 	bne	r2,zero,2de8 <___vfprintf_internal_r+0x408>
    3ca8:	d8c02017 	ldw	r3,128(sp)
    3cac:	d8801f17 	ldw	r2,124(sp)
    3cb0:	da000404 	addi	r8,sp,16
    3cb4:	003fee06 	br	3c70 <___vfprintf_internal_r+0x1290>
    3cb8:	d9002c17 	ldw	r4,176(sp)
    3cbc:	d9801e04 	addi	r6,sp,120
    3cc0:	b80b883a 	mov	r5,r23
    3cc4:	000977c0 	call	977c <__sprint_r>
    3cc8:	103c471e 	bne	r2,zero,2de8 <___vfprintf_internal_r+0x408>
    3ccc:	d8c02017 	ldw	r3,128(sp)
    3cd0:	df002787 	ldb	fp,158(sp)
    3cd4:	da000404 	addi	r8,sp,16
    3cd8:	003d5606 	br	3234 <___vfprintf_internal_r+0x854>
    3cdc:	9080040c 	andi	r2,r18,16
    3ce0:	10016126 	beq	r2,zero,4268 <___vfprintf_internal_r+0x1888>
    3ce4:	d8802d17 	ldw	r2,180(sp)
    3ce8:	14c00017 	ldw	r19,0(r2)
    3cec:	10800104 	addi	r2,r2,4
    3cf0:	d8802d15 	stw	r2,180(sp)
    3cf4:	982dd7fa 	srai	r22,r19,31
    3cf8:	b005883a 	mov	r2,r22
    3cfc:	003c8206 	br	2f08 <___vfprintf_internal_r+0x528>
    3d00:	9080040c 	andi	r2,r18,16
    3d04:	10003526 	beq	r2,zero,3ddc <___vfprintf_internal_r+0x13fc>
    3d08:	d9402d17 	ldw	r5,180(sp)
    3d0c:	d8c02917 	ldw	r3,164(sp)
    3d10:	d8002785 	stb	zero,158(sp)
    3d14:	28800104 	addi	r2,r5,4
    3d18:	2cc00017 	ldw	r19,0(r5)
    3d1c:	002d883a 	mov	r22,zero
    3d20:	18003716 	blt	r3,zero,3e00 <___vfprintf_internal_r+0x1420>
    3d24:	00ffdfc4 	movi	r3,-129
    3d28:	d8802d15 	stw	r2,180(sp)
    3d2c:	90e4703a 	and	r18,r18,r3
    3d30:	0039883a 	mov	fp,zero
    3d34:	983df326 	beq	r19,zero,3504 <___vfprintf_internal_r+0xb24>
    3d38:	00800244 	movi	r2,9
    3d3c:	14fc7b36 	bltu	r2,r19,2f2c <___vfprintf_internal_r+0x54c>
    3d40:	d8c02817 	ldw	r3,160(sp)
    3d44:	dc001dc4 	addi	r16,sp,119
    3d48:	9cc00c04 	addi	r19,r19,48
    3d4c:	1c07c83a 	sub	r3,r3,r16
    3d50:	dcc01dc5 	stb	r19,119(sp)
    3d54:	d8c02e15 	stw	r3,184(sp)
    3d58:	003ce806 	br	30fc <___vfprintf_internal_r+0x71c>
    3d5c:	d8803317 	ldw	r2,204(sp)
    3d60:	143fffc4 	addi	r16,r2,-1
    3d64:	043f4d0e 	bge	zero,r16,3a9c <___vfprintf_internal_r+0x10bc>
    3d68:	07000404 	movi	fp,16
    3d6c:	e400810e 	bge	fp,r16,3f74 <___vfprintf_internal_r+0x1594>
    3d70:	01400074 	movhi	r5,1
    3d74:	29459184 	addi	r5,r5,5702
    3d78:	d9402b15 	stw	r5,172(sp)
    3d7c:	01c001c4 	movi	r7,7
    3d80:	dcc02c17 	ldw	r19,176(sp)
    3d84:	00000306 	br	3d94 <___vfprintf_internal_r+0x13b4>
    3d88:	b5800204 	addi	r22,r22,8
    3d8c:	843ffc04 	addi	r16,r16,-16
    3d90:	e4007b0e 	bge	fp,r16,3f80 <___vfprintf_internal_r+0x15a0>
    3d94:	18c00404 	addi	r3,r3,16
    3d98:	8c400044 	addi	r17,r17,1
    3d9c:	b5000015 	stw	r20,0(r22)
    3da0:	b7000115 	stw	fp,4(r22)
    3da4:	d8c02015 	stw	r3,128(sp)
    3da8:	dc401f15 	stw	r17,124(sp)
    3dac:	3c7ff60e 	bge	r7,r17,3d88 <___vfprintf_internal_r+0x13a8>
    3db0:	d9801e04 	addi	r6,sp,120
    3db4:	b80b883a 	mov	r5,r23
    3db8:	9809883a 	mov	r4,r19
    3dbc:	d9c03c15 	stw	r7,240(sp)
    3dc0:	000977c0 	call	977c <__sprint_r>
    3dc4:	d9c03c17 	ldw	r7,240(sp)
    3dc8:	103c071e 	bne	r2,zero,2de8 <___vfprintf_internal_r+0x408>
    3dcc:	d8c02017 	ldw	r3,128(sp)
    3dd0:	dc401f17 	ldw	r17,124(sp)
    3dd4:	dd800404 	addi	r22,sp,16
    3dd8:	003fec06 	br	3d8c <___vfprintf_internal_r+0x13ac>
    3ddc:	9080100c 	andi	r2,r18,64
    3de0:	d8002785 	stb	zero,158(sp)
    3de4:	10010e26 	beq	r2,zero,4220 <___vfprintf_internal_r+0x1840>
    3de8:	d9002d17 	ldw	r4,180(sp)
    3dec:	d9402917 	ldw	r5,164(sp)
    3df0:	002d883a 	mov	r22,zero
    3df4:	20800104 	addi	r2,r4,4
    3df8:	24c0000b 	ldhu	r19,0(r4)
    3dfc:	283fc90e 	bge	r5,zero,3d24 <___vfprintf_internal_r+0x1344>
    3e00:	d8802d15 	stw	r2,180(sp)
    3e04:	0039883a 	mov	fp,zero
    3e08:	9d84b03a 	or	r2,r19,r22
    3e0c:	103c461e 	bne	r2,zero,2f28 <___vfprintf_internal_r+0x548>
    3e10:	00800044 	movi	r2,1
    3e14:	003e6c06 	br	37c8 <___vfprintf_internal_r+0xde8>
    3e18:	d9002c17 	ldw	r4,176(sp)
    3e1c:	d9801e04 	addi	r6,sp,120
    3e20:	b80b883a 	mov	r5,r23
    3e24:	000977c0 	call	977c <__sprint_r>
    3e28:	103bef1e 	bne	r2,zero,2de8 <___vfprintf_internal_r+0x408>
    3e2c:	d8c02017 	ldw	r3,128(sp)
    3e30:	da000404 	addi	r8,sp,16
    3e34:	d9003217 	ldw	r4,200(sp)
    3e38:	d8802617 	ldw	r2,152(sp)
    3e3c:	d9403317 	ldw	r5,204(sp)
    3e40:	8123883a 	add	r17,r16,r4
    3e44:	11400216 	blt	r2,r5,3e50 <___vfprintf_internal_r+0x1470>
    3e48:	9100004c 	andi	r4,r18,1
    3e4c:	20000d26 	beq	r4,zero,3e84 <___vfprintf_internal_r+0x14a4>
    3e50:	d9003717 	ldw	r4,220(sp)
    3e54:	d9403417 	ldw	r5,208(sp)
    3e58:	1907883a 	add	r3,r3,r4
    3e5c:	d9001f17 	ldw	r4,124(sp)
    3e60:	41400015 	stw	r5,0(r8)
    3e64:	d9403717 	ldw	r5,220(sp)
    3e68:	21000044 	addi	r4,r4,1
    3e6c:	d8c02015 	stw	r3,128(sp)
    3e70:	41400115 	stw	r5,4(r8)
    3e74:	d9001f15 	stw	r4,124(sp)
    3e78:	014001c4 	movi	r5,7
    3e7c:	2901e816 	blt	r5,r4,4620 <___vfprintf_internal_r+0x1c40>
    3e80:	42000204 	addi	r8,r8,8
    3e84:	d9003317 	ldw	r4,204(sp)
    3e88:	8121883a 	add	r16,r16,r4
    3e8c:	2085c83a 	sub	r2,r4,r2
    3e90:	8461c83a 	sub	r16,r16,r17
    3e94:	1400010e 	bge	r2,r16,3e9c <___vfprintf_internal_r+0x14bc>
    3e98:	1021883a 	mov	r16,r2
    3e9c:	04000a0e 	bge	zero,r16,3ec8 <___vfprintf_internal_r+0x14e8>
    3ea0:	d9001f17 	ldw	r4,124(sp)
    3ea4:	1c07883a 	add	r3,r3,r16
    3ea8:	44400015 	stw	r17,0(r8)
    3eac:	21000044 	addi	r4,r4,1
    3eb0:	44000115 	stw	r16,4(r8)
    3eb4:	d8c02015 	stw	r3,128(sp)
    3eb8:	d9001f15 	stw	r4,124(sp)
    3ebc:	014001c4 	movi	r5,7
    3ec0:	2901fb16 	blt	r5,r4,46b0 <___vfprintf_internal_r+0x1cd0>
    3ec4:	42000204 	addi	r8,r8,8
    3ec8:	8001f716 	blt	r16,zero,46a8 <___vfprintf_internal_r+0x1cc8>
    3ecc:	1421c83a 	sub	r16,r2,r16
    3ed0:	043d380e 	bge	zero,r16,33b4 <___vfprintf_internal_r+0x9d4>
    3ed4:	04400404 	movi	r17,16
    3ed8:	d8801f17 	ldw	r2,124(sp)
    3edc:	8c3efb0e 	bge	r17,r16,3acc <___vfprintf_internal_r+0x10ec>
    3ee0:	01400074 	movhi	r5,1
    3ee4:	29459184 	addi	r5,r5,5702
    3ee8:	d9402b15 	stw	r5,172(sp)
    3eec:	058001c4 	movi	r22,7
    3ef0:	dcc02c17 	ldw	r19,176(sp)
    3ef4:	00000306 	br	3f04 <___vfprintf_internal_r+0x1524>
    3ef8:	42000204 	addi	r8,r8,8
    3efc:	843ffc04 	addi	r16,r16,-16
    3f00:	8c3ef50e 	bge	r17,r16,3ad8 <___vfprintf_internal_r+0x10f8>
    3f04:	18c00404 	addi	r3,r3,16
    3f08:	10800044 	addi	r2,r2,1
    3f0c:	45000015 	stw	r20,0(r8)
    3f10:	44400115 	stw	r17,4(r8)
    3f14:	d8c02015 	stw	r3,128(sp)
    3f18:	d8801f15 	stw	r2,124(sp)
    3f1c:	b0bff60e 	bge	r22,r2,3ef8 <___vfprintf_internal_r+0x1518>
    3f20:	d9801e04 	addi	r6,sp,120
    3f24:	b80b883a 	mov	r5,r23
    3f28:	9809883a 	mov	r4,r19
    3f2c:	000977c0 	call	977c <__sprint_r>
    3f30:	103bad1e 	bne	r2,zero,2de8 <___vfprintf_internal_r+0x408>
    3f34:	d8c02017 	ldw	r3,128(sp)
    3f38:	d8801f17 	ldw	r2,124(sp)
    3f3c:	da000404 	addi	r8,sp,16
    3f40:	003fee06 	br	3efc <___vfprintf_internal_r+0x151c>
    3f44:	9088703a 	and	r4,r18,r2
    3f48:	203eab1e 	bne	r4,zero,39f8 <___vfprintf_internal_r+0x1018>
    3f4c:	dc401f17 	ldw	r17,124(sp)
    3f50:	40800115 	stw	r2,4(r8)
    3f54:	44000015 	stw	r16,0(r8)
    3f58:	8c400044 	addi	r17,r17,1
    3f5c:	d8c02015 	stw	r3,128(sp)
    3f60:	dc401f15 	stw	r17,124(sp)
    3f64:	008001c4 	movi	r2,7
    3f68:	14400e16 	blt	r2,r17,3fa4 <___vfprintf_internal_r+0x15c4>
    3f6c:	45800204 	addi	r22,r8,8
    3f70:	003eca06 	br	3a9c <___vfprintf_internal_r+0x10bc>
    3f74:	01000074 	movhi	r4,1
    3f78:	21059184 	addi	r4,r4,5702
    3f7c:	d9002b15 	stw	r4,172(sp)
    3f80:	d8802b17 	ldw	r2,172(sp)
    3f84:	1c07883a 	add	r3,r3,r16
    3f88:	8c400044 	addi	r17,r17,1
    3f8c:	b0800015 	stw	r2,0(r22)
    3f90:	b4000115 	stw	r16,4(r22)
    3f94:	d8c02015 	stw	r3,128(sp)
    3f98:	dc401f15 	stw	r17,124(sp)
    3f9c:	008001c4 	movi	r2,7
    3fa0:	147ebd0e 	bge	r2,r17,3a98 <___vfprintf_internal_r+0x10b8>
    3fa4:	d9002c17 	ldw	r4,176(sp)
    3fa8:	d9801e04 	addi	r6,sp,120
    3fac:	b80b883a 	mov	r5,r23
    3fb0:	000977c0 	call	977c <__sprint_r>
    3fb4:	103b8c1e 	bne	r2,zero,2de8 <___vfprintf_internal_r+0x408>
    3fb8:	d8c02017 	ldw	r3,128(sp)
    3fbc:	dc401f17 	ldw	r17,124(sp)
    3fc0:	dd800404 	addi	r22,sp,16
    3fc4:	003eb506 	br	3a9c <___vfprintf_internal_r+0x10bc>
    3fc8:	d9002c17 	ldw	r4,176(sp)
    3fcc:	d9801e04 	addi	r6,sp,120
    3fd0:	b80b883a 	mov	r5,r23
    3fd4:	000977c0 	call	977c <__sprint_r>
    3fd8:	103b831e 	bne	r2,zero,2de8 <___vfprintf_internal_r+0x408>
    3fdc:	d8c02017 	ldw	r3,128(sp)
    3fe0:	dc401f17 	ldw	r17,124(sp)
    3fe4:	da000404 	addi	r8,sp,16
    3fe8:	003e8d06 	br	3a20 <___vfprintf_internal_r+0x1040>
    3fec:	d9002c17 	ldw	r4,176(sp)
    3ff0:	d9801e04 	addi	r6,sp,120
    3ff4:	b80b883a 	mov	r5,r23
    3ff8:	000977c0 	call	977c <__sprint_r>
    3ffc:	103b7a1e 	bne	r2,zero,2de8 <___vfprintf_internal_r+0x408>
    4000:	d8c02017 	ldw	r3,128(sp)
    4004:	dc401f17 	ldw	r17,124(sp)
    4008:	dd800404 	addi	r22,sp,16
    400c:	003e8f06 	br	3a4c <___vfprintf_internal_r+0x106c>
    4010:	0027883a 	mov	r19,zero
    4014:	003f4a06 	br	3d40 <___vfprintf_internal_r+0x1360>
    4018:	d9002c17 	ldw	r4,176(sp)
    401c:	d9801e04 	addi	r6,sp,120
    4020:	b80b883a 	mov	r5,r23
    4024:	000977c0 	call	977c <__sprint_r>
    4028:	103b6f1e 	bne	r2,zero,2de8 <___vfprintf_internal_r+0x408>
    402c:	d8c02017 	ldw	r3,128(sp)
    4030:	da000404 	addi	r8,sp,16
    4034:	003c9d06 	br	32ac <___vfprintf_internal_r+0x8cc>
    4038:	04e7c83a 	sub	r19,zero,r19
    403c:	9804c03a 	cmpne	r2,r19,zero
    4040:	05adc83a 	sub	r22,zero,r22
    4044:	b0adc83a 	sub	r22,r22,r2
    4048:	d8802917 	ldw	r2,164(sp)
    404c:	07000b44 	movi	fp,45
    4050:	df002785 	stb	fp,158(sp)
    4054:	10017b16 	blt	r2,zero,4644 <___vfprintf_internal_r+0x1c64>
    4058:	00bfdfc4 	movi	r2,-129
    405c:	90a4703a 	and	r18,r18,r2
    4060:	003bb106 	br	2f28 <___vfprintf_internal_r+0x548>
    4064:	d9003617 	ldw	r4,216(sp)
    4068:	d9403817 	ldw	r5,224(sp)
    406c:	da003d15 	stw	r8,244(sp)
    4070:	00093f40 	call	93f4 <__fpclassifyd>
    4074:	da003d17 	ldw	r8,244(sp)
    4078:	1000f026 	beq	r2,zero,443c <___vfprintf_internal_r+0x1a5c>
    407c:	d9002917 	ldw	r4,164(sp)
    4080:	05bff7c4 	movi	r22,-33
    4084:	00bfffc4 	movi	r2,-1
    4088:	8dac703a 	and	r22,r17,r22
    408c:	20820026 	beq	r4,r2,4890 <___vfprintf_internal_r+0x1eb0>
    4090:	008011c4 	movi	r2,71
    4094:	b081f726 	beq	r22,r2,4874 <___vfprintf_internal_r+0x1e94>
    4098:	d9003817 	ldw	r4,224(sp)
    409c:	90c04014 	ori	r3,r18,256
    40a0:	d8c02b15 	stw	r3,172(sp)
    40a4:	20021516 	blt	r4,zero,48fc <___vfprintf_internal_r+0x1f1c>
    40a8:	dcc03817 	ldw	r19,224(sp)
    40ac:	d8002a05 	stb	zero,168(sp)
    40b0:	00801984 	movi	r2,102
    40b4:	8881f926 	beq	r17,r2,489c <___vfprintf_internal_r+0x1ebc>
    40b8:	00801184 	movi	r2,70
    40bc:	88821c26 	beq	r17,r2,4930 <___vfprintf_internal_r+0x1f50>
    40c0:	00801144 	movi	r2,69
    40c4:	b081ef26 	beq	r22,r2,4884 <___vfprintf_internal_r+0x1ea4>
    40c8:	d8c02917 	ldw	r3,164(sp)
    40cc:	d8802104 	addi	r2,sp,132
    40d0:	d8800315 	stw	r2,12(sp)
    40d4:	d9403617 	ldw	r5,216(sp)
    40d8:	d8802504 	addi	r2,sp,148
    40dc:	d9002c17 	ldw	r4,176(sp)
    40e0:	d8800215 	stw	r2,8(sp)
    40e4:	d8802604 	addi	r2,sp,152
    40e8:	d8c00015 	stw	r3,0(sp)
    40ec:	d8800115 	stw	r2,4(sp)
    40f0:	01c00084 	movi	r7,2
    40f4:	980d883a 	mov	r6,r19
    40f8:	d8c03c15 	stw	r3,240(sp)
    40fc:	da003d15 	stw	r8,244(sp)
    4100:	00050040 	call	5004 <_dtoa_r>
    4104:	1021883a 	mov	r16,r2
    4108:	008019c4 	movi	r2,103
    410c:	d8c03c17 	ldw	r3,240(sp)
    4110:	da003d17 	ldw	r8,244(sp)
    4114:	88817126 	beq	r17,r2,46dc <___vfprintf_internal_r+0x1cfc>
    4118:	008011c4 	movi	r2,71
    411c:	88829226 	beq	r17,r2,4b68 <___vfprintf_internal_r+0x2188>
    4120:	80f9883a 	add	fp,r16,r3
    4124:	d9003617 	ldw	r4,216(sp)
    4128:	000d883a 	mov	r6,zero
    412c:	000f883a 	mov	r7,zero
    4130:	980b883a 	mov	r5,r19
    4134:	da003d15 	stw	r8,244(sp)
    4138:	000d2400 	call	d240 <__eqdf2>
    413c:	da003d17 	ldw	r8,244(sp)
    4140:	10018d26 	beq	r2,zero,4778 <___vfprintf_internal_r+0x1d98>
    4144:	d8802117 	ldw	r2,132(sp)
    4148:	1700062e 	bgeu	r2,fp,4164 <___vfprintf_internal_r+0x1784>
    414c:	01000c04 	movi	r4,48
    4150:	10c00044 	addi	r3,r2,1
    4154:	d8c02115 	stw	r3,132(sp)
    4158:	11000005 	stb	r4,0(r2)
    415c:	d8802117 	ldw	r2,132(sp)
    4160:	173ffb36 	bltu	r2,fp,4150 <___vfprintf_internal_r+0x1770>
    4164:	1405c83a 	sub	r2,r2,r16
    4168:	d8803315 	stw	r2,204(sp)
    416c:	008011c4 	movi	r2,71
    4170:	b0817626 	beq	r22,r2,474c <___vfprintf_internal_r+0x1d6c>
    4174:	00801944 	movi	r2,101
    4178:	1442810e 	bge	r2,r17,4b80 <___vfprintf_internal_r+0x21a0>
    417c:	d8c02617 	ldw	r3,152(sp)
    4180:	00801984 	movi	r2,102
    4184:	d8c03215 	stw	r3,200(sp)
    4188:	8881fe26 	beq	r17,r2,4984 <___vfprintf_internal_r+0x1fa4>
    418c:	d8c03217 	ldw	r3,200(sp)
    4190:	d9003317 	ldw	r4,204(sp)
    4194:	1901dd16 	blt	r3,r4,490c <___vfprintf_internal_r+0x1f2c>
    4198:	9480004c 	andi	r18,r18,1
    419c:	90022b1e 	bne	r18,zero,4a4c <___vfprintf_internal_r+0x206c>
    41a0:	1805883a 	mov	r2,r3
    41a4:	18028016 	blt	r3,zero,4ba8 <___vfprintf_internal_r+0x21c8>
    41a8:	d8c03217 	ldw	r3,200(sp)
    41ac:	044019c4 	movi	r17,103
    41b0:	d8c02e15 	stw	r3,184(sp)
    41b4:	df002a07 	ldb	fp,168(sp)
    41b8:	e001531e 	bne	fp,zero,4708 <___vfprintf_internal_r+0x1d28>
    41bc:	df002783 	ldbu	fp,158(sp)
    41c0:	d8802a15 	stw	r2,168(sp)
    41c4:	dc802b17 	ldw	r18,172(sp)
    41c8:	d8002915 	stw	zero,164(sp)
    41cc:	003bd106 	br	3114 <___vfprintf_internal_r+0x734>
    41d0:	d8802d17 	ldw	r2,180(sp)
    41d4:	d8c02d17 	ldw	r3,180(sp)
    41d8:	d9002d17 	ldw	r4,180(sp)
    41dc:	10800017 	ldw	r2,0(r2)
    41e0:	18c00117 	ldw	r3,4(r3)
    41e4:	21000204 	addi	r4,r4,8
    41e8:	d8803615 	stw	r2,216(sp)
    41ec:	d8c03815 	stw	r3,224(sp)
    41f0:	d9002d15 	stw	r4,180(sp)
    41f4:	003b7506 	br	2fcc <___vfprintf_internal_r+0x5ec>
    41f8:	ac400007 	ldb	r17,0(r21)
    41fc:	003a5906 	br	2b64 <___vfprintf_internal_r+0x184>
    4200:	9080100c 	andi	r2,r18,64
    4204:	1000a826 	beq	r2,zero,44a8 <___vfprintf_internal_r+0x1ac8>
    4208:	d9002d17 	ldw	r4,180(sp)
    420c:	002d883a 	mov	r22,zero
    4210:	24c0000b 	ldhu	r19,0(r4)
    4214:	21000104 	addi	r4,r4,4
    4218:	d9002d15 	stw	r4,180(sp)
    421c:	003ccb06 	br	354c <___vfprintf_internal_r+0xb6c>
    4220:	d8c02d17 	ldw	r3,180(sp)
    4224:	d9002917 	ldw	r4,164(sp)
    4228:	002d883a 	mov	r22,zero
    422c:	18800104 	addi	r2,r3,4
    4230:	1cc00017 	ldw	r19,0(r3)
    4234:	203ebb0e 	bge	r4,zero,3d24 <___vfprintf_internal_r+0x1344>
    4238:	003ef106 	br	3e00 <___vfprintf_internal_r+0x1420>
    423c:	9080040c 	andi	r2,r18,16
    4240:	1000921e 	bne	r2,zero,448c <___vfprintf_internal_r+0x1aac>
    4244:	9480100c 	andi	r18,r18,64
    4248:	90013926 	beq	r18,zero,4730 <___vfprintf_internal_r+0x1d50>
    424c:	d9002d17 	ldw	r4,180(sp)
    4250:	d9402f17 	ldw	r5,188(sp)
    4254:	20800017 	ldw	r2,0(r4)
    4258:	21000104 	addi	r4,r4,4
    425c:	d9002d15 	stw	r4,180(sp)
    4260:	1140000d 	sth	r5,0(r2)
    4264:	003a1606 	br	2ac0 <___vfprintf_internal_r+0xe0>
    4268:	9080100c 	andi	r2,r18,64
    426c:	10008026 	beq	r2,zero,4470 <___vfprintf_internal_r+0x1a90>
    4270:	d8c02d17 	ldw	r3,180(sp)
    4274:	1cc0000f 	ldh	r19,0(r3)
    4278:	18c00104 	addi	r3,r3,4
    427c:	d8c02d15 	stw	r3,180(sp)
    4280:	982dd7fa 	srai	r22,r19,31
    4284:	b005883a 	mov	r2,r22
    4288:	003b1f06 	br	2f08 <___vfprintf_internal_r+0x528>
    428c:	9080100c 	andi	r2,r18,64
    4290:	d8002785 	stb	zero,158(sp)
    4294:	10008a1e 	bne	r2,zero,44c0 <___vfprintf_internal_r+0x1ae0>
    4298:	d9402d17 	ldw	r5,180(sp)
    429c:	d8c02917 	ldw	r3,164(sp)
    42a0:	002d883a 	mov	r22,zero
    42a4:	28800104 	addi	r2,r5,4
    42a8:	2cc00017 	ldw	r19,0(r5)
    42ac:	183e4b0e 	bge	r3,zero,3bdc <___vfprintf_internal_r+0x11fc>
    42b0:	9d86b03a 	or	r3,r19,r22
    42b4:	d8802d15 	stw	r2,180(sp)
    42b8:	183e4c1e 	bne	r3,zero,3bec <___vfprintf_internal_r+0x120c>
    42bc:	0039883a 	mov	fp,zero
    42c0:	0005883a 	mov	r2,zero
    42c4:	003d4006 	br	37c8 <___vfprintf_internal_r+0xde8>
    42c8:	01400074 	movhi	r5,1
    42cc:	29459184 	addi	r5,r5,5702
    42d0:	d9402b15 	stw	r5,172(sp)
    42d4:	d9402b17 	ldw	r5,172(sp)
    42d8:	1c47883a 	add	r3,r3,r17
    42dc:	10800044 	addi	r2,r2,1
    42e0:	41400015 	stw	r5,0(r8)
    42e4:	44400115 	stw	r17,4(r8)
    42e8:	d8c02015 	stw	r3,128(sp)
    42ec:	d8801f15 	stw	r2,124(sp)
    42f0:	010001c4 	movi	r4,7
    42f4:	20bec816 	blt	r4,r2,3e18 <___vfprintf_internal_r+0x1438>
    42f8:	42000204 	addi	r8,r8,8
    42fc:	003ecd06 	br	3e34 <___vfprintf_internal_r+0x1454>
    4300:	d9002917 	ldw	r4,164(sp)
    4304:	d8002785 	stb	zero,158(sp)
    4308:	203d2d16 	blt	r4,zero,37c0 <___vfprintf_internal_r+0xde0>
    430c:	00bfdfc4 	movi	r2,-129
    4310:	90a4703a 	and	r18,r18,r2
    4314:	003a9106 	br	2d5c <___vfprintf_internal_r+0x37c>
    4318:	01000074 	movhi	r4,1
    431c:	21059184 	addi	r4,r4,5702
    4320:	d9002b15 	stw	r4,172(sp)
    4324:	003c0c06 	br	3358 <___vfprintf_internal_r+0x978>
    4328:	d9002c17 	ldw	r4,176(sp)
    432c:	d9801e04 	addi	r6,sp,120
    4330:	b80b883a 	mov	r5,r23
    4334:	000977c0 	call	977c <__sprint_r>
    4338:	103aab1e 	bne	r2,zero,2de8 <___vfprintf_internal_r+0x408>
    433c:	d8c02017 	ldw	r3,128(sp)
    4340:	da000404 	addi	r8,sp,16
    4344:	003d4106 	br	384c <___vfprintf_internal_r+0xe6c>
    4348:	d8801f17 	ldw	r2,124(sp)
    434c:	01400074 	movhi	r5,1
    4350:	01000044 	movi	r4,1
    4354:	18c00044 	addi	r3,r3,1
    4358:	10800044 	addi	r2,r2,1
    435c:	29459104 	addi	r5,r5,5700
    4360:	41000115 	stw	r4,4(r8)
    4364:	41400015 	stw	r5,0(r8)
    4368:	d8c02015 	stw	r3,128(sp)
    436c:	d8801f15 	stw	r2,124(sp)
    4370:	010001c4 	movi	r4,7
    4374:	20805c16 	blt	r4,r2,44e8 <___vfprintf_internal_r+0x1b08>
    4378:	42000204 	addi	r8,r8,8
    437c:	8800041e 	bne	r17,zero,4390 <___vfprintf_internal_r+0x19b0>
    4380:	d8803317 	ldw	r2,204(sp)
    4384:	1000021e 	bne	r2,zero,4390 <___vfprintf_internal_r+0x19b0>
    4388:	9080004c 	andi	r2,r18,1
    438c:	103c0926 	beq	r2,zero,33b4 <___vfprintf_internal_r+0x9d4>
    4390:	d9003717 	ldw	r4,220(sp)
    4394:	d8801f17 	ldw	r2,124(sp)
    4398:	d9403417 	ldw	r5,208(sp)
    439c:	20c7883a 	add	r3,r4,r3
    43a0:	10800044 	addi	r2,r2,1
    43a4:	41000115 	stw	r4,4(r8)
    43a8:	41400015 	stw	r5,0(r8)
    43ac:	d8c02015 	stw	r3,128(sp)
    43b0:	d8801f15 	stw	r2,124(sp)
    43b4:	010001c4 	movi	r4,7
    43b8:	20812116 	blt	r4,r2,4840 <___vfprintf_internal_r+0x1e60>
    43bc:	42000204 	addi	r8,r8,8
    43c0:	0463c83a 	sub	r17,zero,r17
    43c4:	0440730e 	bge	zero,r17,4594 <___vfprintf_internal_r+0x1bb4>
    43c8:	05800404 	movi	r22,16
    43cc:	b440860e 	bge	r22,r17,45e8 <___vfprintf_internal_r+0x1c08>
    43d0:	01400074 	movhi	r5,1
    43d4:	29459184 	addi	r5,r5,5702
    43d8:	d9402b15 	stw	r5,172(sp)
    43dc:	070001c4 	movi	fp,7
    43e0:	dcc02c17 	ldw	r19,176(sp)
    43e4:	00000306 	br	43f4 <___vfprintf_internal_r+0x1a14>
    43e8:	42000204 	addi	r8,r8,8
    43ec:	8c7ffc04 	addi	r17,r17,-16
    43f0:	b440800e 	bge	r22,r17,45f4 <___vfprintf_internal_r+0x1c14>
    43f4:	18c00404 	addi	r3,r3,16
    43f8:	10800044 	addi	r2,r2,1
    43fc:	45000015 	stw	r20,0(r8)
    4400:	45800115 	stw	r22,4(r8)
    4404:	d8c02015 	stw	r3,128(sp)
    4408:	d8801f15 	stw	r2,124(sp)
    440c:	e0bff60e 	bge	fp,r2,43e8 <___vfprintf_internal_r+0x1a08>
    4410:	d9801e04 	addi	r6,sp,120
    4414:	b80b883a 	mov	r5,r23
    4418:	9809883a 	mov	r4,r19
    441c:	000977c0 	call	977c <__sprint_r>
    4420:	103a711e 	bne	r2,zero,2de8 <___vfprintf_internal_r+0x408>
    4424:	d8c02017 	ldw	r3,128(sp)
    4428:	d8801f17 	ldw	r2,124(sp)
    442c:	da000404 	addi	r8,sp,16
    4430:	003fee06 	br	43ec <___vfprintf_internal_r+0x1a0c>
    4434:	00bfffc4 	movi	r2,-1
    4438:	003a6f06 	br	2df8 <___vfprintf_internal_r+0x418>
    443c:	008011c4 	movi	r2,71
    4440:	1440b816 	blt	r2,r17,4724 <___vfprintf_internal_r+0x1d44>
    4444:	04000074 	movhi	r16,1
    4448:	84058304 	addi	r16,r16,5644
    444c:	00c000c4 	movi	r3,3
    4450:	00bfdfc4 	movi	r2,-129
    4454:	d8c02a15 	stw	r3,168(sp)
    4458:	90a4703a 	and	r18,r18,r2
    445c:	df002783 	ldbu	fp,158(sp)
    4460:	d8c02e15 	stw	r3,184(sp)
    4464:	d8002915 	stw	zero,164(sp)
    4468:	d8003215 	stw	zero,200(sp)
    446c:	003b2906 	br	3114 <___vfprintf_internal_r+0x734>
    4470:	d9002d17 	ldw	r4,180(sp)
    4474:	24c00017 	ldw	r19,0(r4)
    4478:	21000104 	addi	r4,r4,4
    447c:	d9002d15 	stw	r4,180(sp)
    4480:	982dd7fa 	srai	r22,r19,31
    4484:	b005883a 	mov	r2,r22
    4488:	003a9f06 	br	2f08 <___vfprintf_internal_r+0x528>
    448c:	d9402d17 	ldw	r5,180(sp)
    4490:	d8c02f17 	ldw	r3,188(sp)
    4494:	28800017 	ldw	r2,0(r5)
    4498:	29400104 	addi	r5,r5,4
    449c:	d9402d15 	stw	r5,180(sp)
    44a0:	10c00015 	stw	r3,0(r2)
    44a4:	00398606 	br	2ac0 <___vfprintf_internal_r+0xe0>
    44a8:	d9402d17 	ldw	r5,180(sp)
    44ac:	002d883a 	mov	r22,zero
    44b0:	2cc00017 	ldw	r19,0(r5)
    44b4:	29400104 	addi	r5,r5,4
    44b8:	d9402d15 	stw	r5,180(sp)
    44bc:	003c2306 	br	354c <___vfprintf_internal_r+0xb6c>
    44c0:	d8c02d17 	ldw	r3,180(sp)
    44c4:	d9002917 	ldw	r4,164(sp)
    44c8:	002d883a 	mov	r22,zero
    44cc:	18800104 	addi	r2,r3,4
    44d0:	1cc0000b 	ldhu	r19,0(r3)
    44d4:	203dc10e 	bge	r4,zero,3bdc <___vfprintf_internal_r+0x11fc>
    44d8:	003f7506 	br	42b0 <___vfprintf_internal_r+0x18d0>
    44dc:	04000074 	movhi	r16,1
    44e0:	84058104 	addi	r16,r16,5636
    44e4:	003acc06 	br	3018 <___vfprintf_internal_r+0x638>
    44e8:	d9002c17 	ldw	r4,176(sp)
    44ec:	d9801e04 	addi	r6,sp,120
    44f0:	b80b883a 	mov	r5,r23
    44f4:	000977c0 	call	977c <__sprint_r>
    44f8:	103a3b1e 	bne	r2,zero,2de8 <___vfprintf_internal_r+0x408>
    44fc:	dc402617 	ldw	r17,152(sp)
    4500:	d8c02017 	ldw	r3,128(sp)
    4504:	da000404 	addi	r8,sp,16
    4508:	003f9c06 	br	437c <___vfprintf_internal_r+0x199c>
    450c:	ac400043 	ldbu	r17,1(r21)
    4510:	94800814 	ori	r18,r18,32
    4514:	ad400044 	addi	r21,r21,1
    4518:	8c403fcc 	andi	r17,r17,255
    451c:	8c40201c 	xori	r17,r17,128
    4520:	8c7fe004 	addi	r17,r17,-128
    4524:	00398f06 	br	2b64 <___vfprintf_internal_r+0x184>
    4528:	d8c02d15 	stw	r3,180(sp)
    452c:	0039883a 	mov	fp,zero
    4530:	003e3506 	br	3e08 <___vfprintf_internal_r+0x1428>
    4534:	d9002c17 	ldw	r4,176(sp)
    4538:	d9801e04 	addi	r6,sp,120
    453c:	b80b883a 	mov	r5,r23
    4540:	000977c0 	call	977c <__sprint_r>
    4544:	103a281e 	bne	r2,zero,2de8 <___vfprintf_internal_r+0x408>
    4548:	d8c02017 	ldw	r3,128(sp)
    454c:	da000404 	addi	r8,sp,16
    4550:	003cd006 	br	3894 <___vfprintf_internal_r+0xeb4>
    4554:	8009883a 	mov	r4,r16
    4558:	da003d15 	stw	r8,244(sp)
    455c:	00029480 	call	2948 <strlen>
    4560:	d8802e15 	stw	r2,184(sp)
    4564:	da003d17 	ldw	r8,244(sp)
    4568:	103c340e 	bge	r2,zero,363c <___vfprintf_internal_r+0xc5c>
    456c:	0005883a 	mov	r2,zero
    4570:	003c3206 	br	363c <___vfprintf_internal_r+0xc5c>
    4574:	d9002c17 	ldw	r4,176(sp)
    4578:	d9801e04 	addi	r6,sp,120
    457c:	b80b883a 	mov	r5,r23
    4580:	000977c0 	call	977c <__sprint_r>
    4584:	103a181e 	bne	r2,zero,2de8 <___vfprintf_internal_r+0x408>
    4588:	d8c02017 	ldw	r3,128(sp)
    458c:	d8801f17 	ldw	r2,124(sp)
    4590:	da000404 	addi	r8,sp,16
    4594:	d9403317 	ldw	r5,204(sp)
    4598:	10800044 	addi	r2,r2,1
    459c:	44000015 	stw	r16,0(r8)
    45a0:	28c7883a 	add	r3,r5,r3
    45a4:	003b7d06 	br	339c <___vfprintf_internal_r+0x9bc>
    45a8:	01000074 	movhi	r4,1
    45ac:	21059584 	addi	r4,r4,5718
    45b0:	d9003515 	stw	r4,212(sp)
    45b4:	003b1406 	br	3208 <___vfprintf_internal_r+0x828>
    45b8:	013fffc4 	movi	r4,-1
    45bc:	003a3506 	br	2e94 <___vfprintf_internal_r+0x4b4>
    45c0:	0023883a 	mov	r17,zero
    45c4:	003d9d06 	br	3c3c <___vfprintf_internal_r+0x125c>
    45c8:	d9002c17 	ldw	r4,176(sp)
    45cc:	d9801e04 	addi	r6,sp,120
    45d0:	b80b883a 	mov	r5,r23
    45d4:	000977c0 	call	977c <__sprint_r>
    45d8:	103a031e 	bne	r2,zero,2de8 <___vfprintf_internal_r+0x408>
    45dc:	d8c02017 	ldw	r3,128(sp)
    45e0:	da000404 	addi	r8,sp,16
    45e4:	003d9406 	br	3c38 <___vfprintf_internal_r+0x1258>
    45e8:	01000074 	movhi	r4,1
    45ec:	21059184 	addi	r4,r4,5702
    45f0:	d9002b15 	stw	r4,172(sp)
    45f4:	d9002b17 	ldw	r4,172(sp)
    45f8:	1c47883a 	add	r3,r3,r17
    45fc:	10800044 	addi	r2,r2,1
    4600:	41000015 	stw	r4,0(r8)
    4604:	44400115 	stw	r17,4(r8)
    4608:	d8c02015 	stw	r3,128(sp)
    460c:	d8801f15 	stw	r2,124(sp)
    4610:	010001c4 	movi	r4,7
    4614:	20bfd716 	blt	r4,r2,4574 <___vfprintf_internal_r+0x1b94>
    4618:	42000204 	addi	r8,r8,8
    461c:	003fdd06 	br	4594 <___vfprintf_internal_r+0x1bb4>
    4620:	d9002c17 	ldw	r4,176(sp)
    4624:	d9801e04 	addi	r6,sp,120
    4628:	b80b883a 	mov	r5,r23
    462c:	000977c0 	call	977c <__sprint_r>
    4630:	1039ed1e 	bne	r2,zero,2de8 <___vfprintf_internal_r+0x408>
    4634:	d8802617 	ldw	r2,152(sp)
    4638:	d8c02017 	ldw	r3,128(sp)
    463c:	da000404 	addi	r8,sp,16
    4640:	003e1006 	br	3e84 <___vfprintf_internal_r+0x14a4>
    4644:	00800044 	movi	r2,1
    4648:	10803fcc 	andi	r2,r2,255
    464c:	00c00044 	movi	r3,1
    4650:	10fa3526 	beq	r2,r3,2f28 <___vfprintf_internal_r+0x548>
    4654:	00c00084 	movi	r3,2
    4658:	10fbcb26 	beq	r2,r3,3588 <___vfprintf_internal_r+0xba8>
    465c:	003a8f06 	br	309c <___vfprintf_internal_r+0x6bc>
    4660:	01000074 	movhi	r4,1
    4664:	21059584 	addi	r4,r4,5718
    4668:	d9003515 	stw	r4,212(sp)
    466c:	003b7606 	br	3448 <___vfprintf_internal_r+0xa68>
    4670:	d8802917 	ldw	r2,164(sp)
    4674:	00c00184 	movi	r3,6
    4678:	1880012e 	bgeu	r3,r2,4680 <___vfprintf_internal_r+0x1ca0>
    467c:	1805883a 	mov	r2,r3
    4680:	d8802e15 	stw	r2,184(sp)
    4684:	1000ef16 	blt	r2,zero,4a44 <___vfprintf_internal_r+0x2064>
    4688:	04000074 	movhi	r16,1
    468c:	d8802a15 	stw	r2,168(sp)
    4690:	dcc02d15 	stw	r19,180(sp)
    4694:	d8002915 	stw	zero,164(sp)
    4698:	d8003215 	stw	zero,200(sp)
    469c:	84058f04 	addi	r16,r16,5692
    46a0:	0039883a 	mov	fp,zero
    46a4:	003aa206 	br	3130 <___vfprintf_internal_r+0x750>
    46a8:	0021883a 	mov	r16,zero
    46ac:	003e0706 	br	3ecc <___vfprintf_internal_r+0x14ec>
    46b0:	d9002c17 	ldw	r4,176(sp)
    46b4:	d9801e04 	addi	r6,sp,120
    46b8:	b80b883a 	mov	r5,r23
    46bc:	000977c0 	call	977c <__sprint_r>
    46c0:	1039c91e 	bne	r2,zero,2de8 <___vfprintf_internal_r+0x408>
    46c4:	d8802617 	ldw	r2,152(sp)
    46c8:	d9403317 	ldw	r5,204(sp)
    46cc:	d8c02017 	ldw	r3,128(sp)
    46d0:	da000404 	addi	r8,sp,16
    46d4:	2885c83a 	sub	r2,r5,r2
    46d8:	003dfb06 	br	3ec8 <___vfprintf_internal_r+0x14e8>
    46dc:	9080004c 	andi	r2,r18,1
    46e0:	103e8f1e 	bne	r2,zero,4120 <___vfprintf_internal_r+0x1740>
    46e4:	d8802117 	ldw	r2,132(sp)
    46e8:	003e9e06 	br	4164 <___vfprintf_internal_r+0x1784>
    46ec:	1025883a 	mov	r18,r2
    46f0:	0039883a 	mov	fp,zero
    46f4:	00800084 	movi	r2,2
    46f8:	003fd306 	br	4648 <___vfprintf_internal_r+0x1c68>
    46fc:	07000b44 	movi	fp,45
    4700:	df002785 	stb	fp,158(sp)
    4704:	003a4006 	br	3008 <___vfprintf_internal_r+0x628>
    4708:	00c00b44 	movi	r3,45
    470c:	d8c02785 	stb	r3,158(sp)
    4710:	d8802a15 	stw	r2,168(sp)
    4714:	dc802b17 	ldw	r18,172(sp)
    4718:	d8002915 	stw	zero,164(sp)
    471c:	07000b44 	movi	fp,45
    4720:	003a8006 	br	3124 <___vfprintf_internal_r+0x744>
    4724:	04000074 	movhi	r16,1
    4728:	84058404 	addi	r16,r16,5648
    472c:	003f4706 	br	444c <___vfprintf_internal_r+0x1a6c>
    4730:	d8c02d17 	ldw	r3,180(sp)
    4734:	d9002f17 	ldw	r4,188(sp)
    4738:	18800017 	ldw	r2,0(r3)
    473c:	18c00104 	addi	r3,r3,4
    4740:	d8c02d15 	stw	r3,180(sp)
    4744:	11000015 	stw	r4,0(r2)
    4748:	0038dd06 	br	2ac0 <___vfprintf_internal_r+0xe0>
    474c:	dd802617 	ldw	r22,152(sp)
    4750:	00bfff44 	movi	r2,-3
    4754:	b0801c16 	blt	r22,r2,47c8 <___vfprintf_internal_r+0x1de8>
    4758:	d9402917 	ldw	r5,164(sp)
    475c:	2d801a16 	blt	r5,r22,47c8 <___vfprintf_internal_r+0x1de8>
    4760:	dd803215 	stw	r22,200(sp)
    4764:	003e8906 	br	418c <___vfprintf_internal_r+0x17ac>
    4768:	01000074 	movhi	r4,1
    476c:	21059184 	addi	r4,r4,5702
    4770:	d9002b15 	stw	r4,172(sp)
    4774:	003c9106 	br	39bc <___vfprintf_internal_r+0xfdc>
    4778:	e005883a 	mov	r2,fp
    477c:	003e7906 	br	4164 <___vfprintf_internal_r+0x1784>
    4780:	d9402917 	ldw	r5,164(sp)
    4784:	df002783 	ldbu	fp,158(sp)
    4788:	dcc02d15 	stw	r19,180(sp)
    478c:	d9402a15 	stw	r5,168(sp)
    4790:	d9402e15 	stw	r5,184(sp)
    4794:	d8002915 	stw	zero,164(sp)
    4798:	d8003215 	stw	zero,200(sp)
    479c:	003a5d06 	br	3114 <___vfprintf_internal_r+0x734>
    47a0:	9080004c 	andi	r2,r18,1
    47a4:	0039883a 	mov	fp,zero
    47a8:	10000426 	beq	r2,zero,47bc <___vfprintf_internal_r+0x1ddc>
    47ac:	00800c04 	movi	r2,48
    47b0:	dc001dc4 	addi	r16,sp,119
    47b4:	d8801dc5 	stb	r2,119(sp)
    47b8:	003b8006 	br	35bc <___vfprintf_internal_r+0xbdc>
    47bc:	d8002e15 	stw	zero,184(sp)
    47c0:	dc001e04 	addi	r16,sp,120
    47c4:	003a4d06 	br	30fc <___vfprintf_internal_r+0x71c>
    47c8:	8c7fff84 	addi	r17,r17,-2
    47cc:	b5bfffc4 	addi	r22,r22,-1
    47d0:	dd802615 	stw	r22,152(sp)
    47d4:	dc4022c5 	stb	r17,139(sp)
    47d8:	b000bf16 	blt	r22,zero,4ad8 <___vfprintf_internal_r+0x20f8>
    47dc:	00800ac4 	movi	r2,43
    47e0:	d8802305 	stb	r2,140(sp)
    47e4:	00800244 	movi	r2,9
    47e8:	15807016 	blt	r2,r22,49ac <___vfprintf_internal_r+0x1fcc>
    47ec:	00800c04 	movi	r2,48
    47f0:	b5800c04 	addi	r22,r22,48
    47f4:	d8802345 	stb	r2,141(sp)
    47f8:	dd802385 	stb	r22,142(sp)
    47fc:	d88023c4 	addi	r2,sp,143
    4800:	df0022c4 	addi	fp,sp,139
    4804:	d8c03317 	ldw	r3,204(sp)
    4808:	1739c83a 	sub	fp,r2,fp
    480c:	d9003317 	ldw	r4,204(sp)
    4810:	e0c7883a 	add	r3,fp,r3
    4814:	df003a15 	stw	fp,232(sp)
    4818:	d8c02e15 	stw	r3,184(sp)
    481c:	00800044 	movi	r2,1
    4820:	1100b30e 	bge	r2,r4,4af0 <___vfprintf_internal_r+0x2110>
    4824:	d8c02e17 	ldw	r3,184(sp)
    4828:	18c00044 	addi	r3,r3,1
    482c:	d8c02e15 	stw	r3,184(sp)
    4830:	1805883a 	mov	r2,r3
    4834:	1800ac16 	blt	r3,zero,4ae8 <___vfprintf_internal_r+0x2108>
    4838:	d8003215 	stw	zero,200(sp)
    483c:	003e5d06 	br	41b4 <___vfprintf_internal_r+0x17d4>
    4840:	d9002c17 	ldw	r4,176(sp)
    4844:	d9801e04 	addi	r6,sp,120
    4848:	b80b883a 	mov	r5,r23
    484c:	000977c0 	call	977c <__sprint_r>
    4850:	1039651e 	bne	r2,zero,2de8 <___vfprintf_internal_r+0x408>
    4854:	dc402617 	ldw	r17,152(sp)
    4858:	d8c02017 	ldw	r3,128(sp)
    485c:	d8801f17 	ldw	r2,124(sp)
    4860:	da000404 	addi	r8,sp,16
    4864:	003ed606 	br	43c0 <___vfprintf_internal_r+0x19e0>
    4868:	582b883a 	mov	r21,r11
    486c:	d8002915 	stw	zero,164(sp)
    4870:	0038bd06 	br	2b68 <___vfprintf_internal_r+0x188>
    4874:	d8802917 	ldw	r2,164(sp)
    4878:	103e071e 	bne	r2,zero,4098 <___vfprintf_internal_r+0x16b8>
    487c:	dc002915 	stw	r16,164(sp)
    4880:	003e0506 	br	4098 <___vfprintf_internal_r+0x16b8>
    4884:	d9002917 	ldw	r4,164(sp)
    4888:	20c00044 	addi	r3,r4,1
    488c:	003e0f06 	br	40cc <___vfprintf_internal_r+0x16ec>
    4890:	01400184 	movi	r5,6
    4894:	d9402915 	stw	r5,164(sp)
    4898:	003dff06 	br	4098 <___vfprintf_internal_r+0x16b8>
    489c:	d8802104 	addi	r2,sp,132
    48a0:	d8800315 	stw	r2,12(sp)
    48a4:	d8802504 	addi	r2,sp,148
    48a8:	d8800215 	stw	r2,8(sp)
    48ac:	d8802604 	addi	r2,sp,152
    48b0:	d8800115 	stw	r2,4(sp)
    48b4:	d8802917 	ldw	r2,164(sp)
    48b8:	d9403617 	ldw	r5,216(sp)
    48bc:	d9002c17 	ldw	r4,176(sp)
    48c0:	d8800015 	stw	r2,0(sp)
    48c4:	01c000c4 	movi	r7,3
    48c8:	980d883a 	mov	r6,r19
    48cc:	da003d15 	stw	r8,244(sp)
    48d0:	00050040 	call	5004 <_dtoa_r>
    48d4:	d8c02917 	ldw	r3,164(sp)
    48d8:	da003d17 	ldw	r8,244(sp)
    48dc:	1021883a 	mov	r16,r2
    48e0:	10f9883a 	add	fp,r2,r3
    48e4:	81000007 	ldb	r4,0(r16)
    48e8:	00800c04 	movi	r2,48
    48ec:	20805e26 	beq	r4,r2,4a68 <___vfprintf_internal_r+0x2088>
    48f0:	d8c02617 	ldw	r3,152(sp)
    48f4:	e0f9883a 	add	fp,fp,r3
    48f8:	003e0a06 	br	4124 <___vfprintf_internal_r+0x1744>
    48fc:	00c00b44 	movi	r3,45
    4900:	24e0003c 	xorhi	r19,r4,32768
    4904:	d8c02a05 	stb	r3,168(sp)
    4908:	003de906 	br	40b0 <___vfprintf_internal_r+0x16d0>
    490c:	d8c03217 	ldw	r3,200(sp)
    4910:	00c07a0e 	bge	zero,r3,4afc <___vfprintf_internal_r+0x211c>
    4914:	00800044 	movi	r2,1
    4918:	d9003317 	ldw	r4,204(sp)
    491c:	1105883a 	add	r2,r2,r4
    4920:	d8802e15 	stw	r2,184(sp)
    4924:	10004e16 	blt	r2,zero,4a60 <___vfprintf_internal_r+0x2080>
    4928:	044019c4 	movi	r17,103
    492c:	003e2106 	br	41b4 <___vfprintf_internal_r+0x17d4>
    4930:	d9002917 	ldw	r4,164(sp)
    4934:	d8802104 	addi	r2,sp,132
    4938:	d8800315 	stw	r2,12(sp)
    493c:	d9000015 	stw	r4,0(sp)
    4940:	d8802504 	addi	r2,sp,148
    4944:	d9403617 	ldw	r5,216(sp)
    4948:	d9002c17 	ldw	r4,176(sp)
    494c:	d8800215 	stw	r2,8(sp)
    4950:	d8802604 	addi	r2,sp,152
    4954:	d8800115 	stw	r2,4(sp)
    4958:	01c000c4 	movi	r7,3
    495c:	980d883a 	mov	r6,r19
    4960:	da003d15 	stw	r8,244(sp)
    4964:	00050040 	call	5004 <_dtoa_r>
    4968:	d8c02917 	ldw	r3,164(sp)
    496c:	da003d17 	ldw	r8,244(sp)
    4970:	1021883a 	mov	r16,r2
    4974:	00801184 	movi	r2,70
    4978:	80f9883a 	add	fp,r16,r3
    497c:	88bfd926 	beq	r17,r2,48e4 <___vfprintf_internal_r+0x1f04>
    4980:	003de806 	br	4124 <___vfprintf_internal_r+0x1744>
    4984:	d9002917 	ldw	r4,164(sp)
    4988:	00c04d0e 	bge	zero,r3,4ac0 <___vfprintf_internal_r+0x20e0>
    498c:	2000441e 	bne	r4,zero,4aa0 <___vfprintf_internal_r+0x20c0>
    4990:	9480004c 	andi	r18,r18,1
    4994:	9000421e 	bne	r18,zero,4aa0 <___vfprintf_internal_r+0x20c0>
    4998:	1805883a 	mov	r2,r3
    499c:	18007016 	blt	r3,zero,4b60 <___vfprintf_internal_r+0x2180>
    49a0:	d8c03217 	ldw	r3,200(sp)
    49a4:	d8c02e15 	stw	r3,184(sp)
    49a8:	003e0206 	br	41b4 <___vfprintf_internal_r+0x17d4>
    49ac:	df0022c4 	addi	fp,sp,139
    49b0:	dc002915 	stw	r16,164(sp)
    49b4:	4027883a 	mov	r19,r8
    49b8:	e021883a 	mov	r16,fp
    49bc:	b009883a 	mov	r4,r22
    49c0:	01400284 	movi	r5,10
    49c4:	0001e500 	call	1e50 <__modsi3>
    49c8:	10800c04 	addi	r2,r2,48
    49cc:	843fffc4 	addi	r16,r16,-1
    49d0:	b009883a 	mov	r4,r22
    49d4:	01400284 	movi	r5,10
    49d8:	80800005 	stb	r2,0(r16)
    49dc:	0001dcc0 	call	1dcc <__divsi3>
    49e0:	102d883a 	mov	r22,r2
    49e4:	00800244 	movi	r2,9
    49e8:	15bff416 	blt	r2,r22,49bc <___vfprintf_internal_r+0x1fdc>
    49ec:	9811883a 	mov	r8,r19
    49f0:	b0800c04 	addi	r2,r22,48
    49f4:	8027883a 	mov	r19,r16
    49f8:	997fffc4 	addi	r5,r19,-1
    49fc:	98bfffc5 	stb	r2,-1(r19)
    4a00:	dc002917 	ldw	r16,164(sp)
    4a04:	2f006a2e 	bgeu	r5,fp,4bb0 <___vfprintf_internal_r+0x21d0>
    4a08:	d9c02384 	addi	r7,sp,142
    4a0c:	3ccfc83a 	sub	r7,r7,r19
    4a10:	d9002344 	addi	r4,sp,141
    4a14:	e1cf883a 	add	r7,fp,r7
    4a18:	00000106 	br	4a20 <___vfprintf_internal_r+0x2040>
    4a1c:	28800003 	ldbu	r2,0(r5)
    4a20:	20800005 	stb	r2,0(r4)
    4a24:	21000044 	addi	r4,r4,1
    4a28:	29400044 	addi	r5,r5,1
    4a2c:	393ffb1e 	bne	r7,r4,4a1c <___vfprintf_internal_r+0x203c>
    4a30:	d8802304 	addi	r2,sp,140
    4a34:	14c5c83a 	sub	r2,r2,r19
    4a38:	d8c02344 	addi	r3,sp,141
    4a3c:	1885883a 	add	r2,r3,r2
    4a40:	003f7006 	br	4804 <___vfprintf_internal_r+0x1e24>
    4a44:	0005883a 	mov	r2,zero
    4a48:	003f0f06 	br	4688 <___vfprintf_internal_r+0x1ca8>
    4a4c:	d8c03217 	ldw	r3,200(sp)
    4a50:	18c00044 	addi	r3,r3,1
    4a54:	d8c02e15 	stw	r3,184(sp)
    4a58:	1805883a 	mov	r2,r3
    4a5c:	183fb20e 	bge	r3,zero,4928 <___vfprintf_internal_r+0x1f48>
    4a60:	0005883a 	mov	r2,zero
    4a64:	003fb006 	br	4928 <___vfprintf_internal_r+0x1f48>
    4a68:	d9003617 	ldw	r4,216(sp)
    4a6c:	000d883a 	mov	r6,zero
    4a70:	000f883a 	mov	r7,zero
    4a74:	980b883a 	mov	r5,r19
    4a78:	d8c03c15 	stw	r3,240(sp)
    4a7c:	da003d15 	stw	r8,244(sp)
    4a80:	000d2400 	call	d240 <__eqdf2>
    4a84:	d8c03c17 	ldw	r3,240(sp)
    4a88:	da003d17 	ldw	r8,244(sp)
    4a8c:	103f9826 	beq	r2,zero,48f0 <___vfprintf_internal_r+0x1f10>
    4a90:	00800044 	movi	r2,1
    4a94:	10c7c83a 	sub	r3,r2,r3
    4a98:	d8c02615 	stw	r3,152(sp)
    4a9c:	003f9506 	br	48f4 <___vfprintf_internal_r+0x1f14>
    4aa0:	d9002917 	ldw	r4,164(sp)
    4aa4:	d8c03217 	ldw	r3,200(sp)
    4aa8:	20800044 	addi	r2,r4,1
    4aac:	1885883a 	add	r2,r3,r2
    4ab0:	d8802e15 	stw	r2,184(sp)
    4ab4:	103dbf0e 	bge	r2,zero,41b4 <___vfprintf_internal_r+0x17d4>
    4ab8:	0005883a 	mov	r2,zero
    4abc:	003dbd06 	br	41b4 <___vfprintf_internal_r+0x17d4>
    4ac0:	2000211e 	bne	r4,zero,4b48 <___vfprintf_internal_r+0x2168>
    4ac4:	9480004c 	andi	r18,r18,1
    4ac8:	90001f1e 	bne	r18,zero,4b48 <___vfprintf_internal_r+0x2168>
    4acc:	00800044 	movi	r2,1
    4ad0:	d8802e15 	stw	r2,184(sp)
    4ad4:	003db706 	br	41b4 <___vfprintf_internal_r+0x17d4>
    4ad8:	00800b44 	movi	r2,45
    4adc:	05adc83a 	sub	r22,zero,r22
    4ae0:	d8802305 	stb	r2,140(sp)
    4ae4:	003f3f06 	br	47e4 <___vfprintf_internal_r+0x1e04>
    4ae8:	0005883a 	mov	r2,zero
    4aec:	003f5206 	br	4838 <___vfprintf_internal_r+0x1e58>
    4af0:	90a4703a 	and	r18,r18,r2
    4af4:	903f4e26 	beq	r18,zero,4830 <___vfprintf_internal_r+0x1e50>
    4af8:	003f4a06 	br	4824 <___vfprintf_internal_r+0x1e44>
    4afc:	00800084 	movi	r2,2
    4b00:	10c5c83a 	sub	r2,r2,r3
    4b04:	003f8406 	br	4918 <___vfprintf_internal_r+0x1f38>
    4b08:	d8802d17 	ldw	r2,180(sp)
    4b0c:	d9002d17 	ldw	r4,180(sp)
    4b10:	ac400043 	ldbu	r17,1(r21)
    4b14:	10800017 	ldw	r2,0(r2)
    4b18:	582b883a 	mov	r21,r11
    4b1c:	d8802915 	stw	r2,164(sp)
    4b20:	20800104 	addi	r2,r4,4
    4b24:	d9002917 	ldw	r4,164(sp)
    4b28:	d8802d15 	stw	r2,180(sp)
    4b2c:	203e7a0e 	bge	r4,zero,4518 <___vfprintf_internal_r+0x1b38>
    4b30:	8c403fcc 	andi	r17,r17,255
    4b34:	00bfffc4 	movi	r2,-1
    4b38:	8c40201c 	xori	r17,r17,128
    4b3c:	d8802915 	stw	r2,164(sp)
    4b40:	8c7fe004 	addi	r17,r17,-128
    4b44:	00380706 	br	2b64 <___vfprintf_internal_r+0x184>
    4b48:	d8c02917 	ldw	r3,164(sp)
    4b4c:	18c00084 	addi	r3,r3,2
    4b50:	d8c02e15 	stw	r3,184(sp)
    4b54:	1805883a 	mov	r2,r3
    4b58:	183d960e 	bge	r3,zero,41b4 <___vfprintf_internal_r+0x17d4>
    4b5c:	003fd606 	br	4ab8 <___vfprintf_internal_r+0x20d8>
    4b60:	0005883a 	mov	r2,zero
    4b64:	003f8e06 	br	49a0 <___vfprintf_internal_r+0x1fc0>
    4b68:	9080004c 	andi	r2,r18,1
    4b6c:	103f811e 	bne	r2,zero,4974 <___vfprintf_internal_r+0x1f94>
    4b70:	d8802117 	ldw	r2,132(sp)
    4b74:	1405c83a 	sub	r2,r2,r16
    4b78:	d8803315 	stw	r2,204(sp)
    4b7c:	b47ef326 	beq	r22,r17,474c <___vfprintf_internal_r+0x1d6c>
    4b80:	dd802617 	ldw	r22,152(sp)
    4b84:	003f1106 	br	47cc <___vfprintf_internal_r+0x1dec>
    4b88:	d9c02785 	stb	r7,158(sp)
    4b8c:	00390406 	br	2fa0 <___vfprintf_internal_r+0x5c0>
    4b90:	d9c02785 	stb	r7,158(sp)
    4b94:	0038d306 	br	2ee4 <___vfprintf_internal_r+0x504>
    4b98:	d9c02785 	stb	r7,158(sp)
    4b9c:	003a6106 	br	3524 <___vfprintf_internal_r+0xb44>
    4ba0:	d9c02785 	stb	r7,158(sp)
    4ba4:	003af806 	br	3788 <___vfprintf_internal_r+0xda8>
    4ba8:	0005883a 	mov	r2,zero
    4bac:	003d7e06 	br	41a8 <___vfprintf_internal_r+0x17c8>
    4bb0:	d8802344 	addi	r2,sp,141
    4bb4:	003f1306 	br	4804 <___vfprintf_internal_r+0x1e24>
    4bb8:	d9c02785 	stb	r7,158(sp)
    4bbc:	00392306 	br	304c <___vfprintf_internal_r+0x66c>
    4bc0:	d9c02785 	stb	r7,158(sp)
    4bc4:	003aa906 	br	366c <___vfprintf_internal_r+0xc8c>
    4bc8:	d9c02785 	stb	r7,158(sp)
    4bcc:	003a3d06 	br	34c4 <___vfprintf_internal_r+0xae4>
    4bd0:	d9c02785 	stb	r7,158(sp)
    4bd4:	003aca06 	br	3700 <___vfprintf_internal_r+0xd20>

00004bd8 <__vfprintf_internal>:
    4bd8:	00800074 	movhi	r2,1
    4bdc:	108d2c04 	addi	r2,r2,13488
    4be0:	300f883a 	mov	r7,r6
    4be4:	280d883a 	mov	r6,r5
    4be8:	200b883a 	mov	r5,r4
    4bec:	11000017 	ldw	r4,0(r2)
    4bf0:	00029e01 	jmpi	29e0 <___vfprintf_internal_r>

00004bf4 <__sbprintf>:
    4bf4:	2880030b 	ldhu	r2,12(r5)
    4bf8:	2ac01917 	ldw	r11,100(r5)
    4bfc:	2a80038b 	ldhu	r10,14(r5)
    4c00:	2a400717 	ldw	r9,28(r5)
    4c04:	2a000917 	ldw	r8,36(r5)
    4c08:	defee204 	addi	sp,sp,-1144
    4c0c:	00c10004 	movi	r3,1024
    4c10:	dc011a15 	stw	r16,1128(sp)
    4c14:	10bfff4c 	andi	r2,r2,65533
    4c18:	2821883a 	mov	r16,r5
    4c1c:	d8cb883a 	add	r5,sp,r3
    4c20:	dc811c15 	stw	r18,1136(sp)
    4c24:	dc411b15 	stw	r17,1132(sp)
    4c28:	dfc11d15 	stw	ra,1140(sp)
    4c2c:	2025883a 	mov	r18,r4
    4c30:	d881030d 	sth	r2,1036(sp)
    4c34:	dac11915 	stw	r11,1124(sp)
    4c38:	da81038d 	sth	r10,1038(sp)
    4c3c:	da410715 	stw	r9,1052(sp)
    4c40:	da010915 	stw	r8,1060(sp)
    4c44:	dec10015 	stw	sp,1024(sp)
    4c48:	dec10415 	stw	sp,1040(sp)
    4c4c:	d8c10215 	stw	r3,1032(sp)
    4c50:	d8c10515 	stw	r3,1044(sp)
    4c54:	d8010615 	stw	zero,1048(sp)
    4c58:	00029e00 	call	29e0 <___vfprintf_internal_r>
    4c5c:	1023883a 	mov	r17,r2
    4c60:	10000416 	blt	r2,zero,4c74 <__sbprintf+0x80>
    4c64:	d9410004 	addi	r5,sp,1024
    4c68:	9009883a 	mov	r4,r18
    4c6c:	00068a80 	call	68a8 <_fflush_r>
    4c70:	10000d1e 	bne	r2,zero,4ca8 <__sbprintf+0xb4>
    4c74:	d881030b 	ldhu	r2,1036(sp)
    4c78:	1080100c 	andi	r2,r2,64
    4c7c:	10000326 	beq	r2,zero,4c8c <__sbprintf+0x98>
    4c80:	8080030b 	ldhu	r2,12(r16)
    4c84:	10801014 	ori	r2,r2,64
    4c88:	8080030d 	sth	r2,12(r16)
    4c8c:	8805883a 	mov	r2,r17
    4c90:	dfc11d17 	ldw	ra,1140(sp)
    4c94:	dc811c17 	ldw	r18,1136(sp)
    4c98:	dc411b17 	ldw	r17,1132(sp)
    4c9c:	dc011a17 	ldw	r16,1128(sp)
    4ca0:	dec11e04 	addi	sp,sp,1144
    4ca4:	f800283a 	ret
    4ca8:	047fffc4 	movi	r17,-1
    4cac:	003ff106 	br	4c74 <__sbprintf+0x80>

00004cb0 <__swsetup_r>:
    4cb0:	00800074 	movhi	r2,1
    4cb4:	defffd04 	addi	sp,sp,-12
    4cb8:	108d2c04 	addi	r2,r2,13488
    4cbc:	dc400115 	stw	r17,4(sp)
    4cc0:	2023883a 	mov	r17,r4
    4cc4:	11000017 	ldw	r4,0(r2)
    4cc8:	dc000015 	stw	r16,0(sp)
    4ccc:	dfc00215 	stw	ra,8(sp)
    4cd0:	2821883a 	mov	r16,r5
    4cd4:	20000226 	beq	r4,zero,4ce0 <__swsetup_r+0x30>
    4cd8:	20800e17 	ldw	r2,56(r4)
    4cdc:	10003126 	beq	r2,zero,4da4 <__swsetup_r+0xf4>
    4ce0:	8080030b 	ldhu	r2,12(r16)
    4ce4:	10c0020c 	andi	r3,r2,8
    4ce8:	1009883a 	mov	r4,r2
    4cec:	18000f26 	beq	r3,zero,4d2c <__swsetup_r+0x7c>
    4cf0:	80c00417 	ldw	r3,16(r16)
    4cf4:	18001526 	beq	r3,zero,4d4c <__swsetup_r+0x9c>
    4cf8:	1100004c 	andi	r4,r2,1
    4cfc:	20001c1e 	bne	r4,zero,4d70 <__swsetup_r+0xc0>
    4d00:	1080008c 	andi	r2,r2,2
    4d04:	1000291e 	bne	r2,zero,4dac <__swsetup_r+0xfc>
    4d08:	80800517 	ldw	r2,20(r16)
    4d0c:	80800215 	stw	r2,8(r16)
    4d10:	18001c26 	beq	r3,zero,4d84 <__swsetup_r+0xd4>
    4d14:	0005883a 	mov	r2,zero
    4d18:	dfc00217 	ldw	ra,8(sp)
    4d1c:	dc400117 	ldw	r17,4(sp)
    4d20:	dc000017 	ldw	r16,0(sp)
    4d24:	dec00304 	addi	sp,sp,12
    4d28:	f800283a 	ret
    4d2c:	2080040c 	andi	r2,r4,16
    4d30:	10002e26 	beq	r2,zero,4dec <__swsetup_r+0x13c>
    4d34:	2080010c 	andi	r2,r4,4
    4d38:	10001e1e 	bne	r2,zero,4db4 <__swsetup_r+0x104>
    4d3c:	80c00417 	ldw	r3,16(r16)
    4d40:	20800214 	ori	r2,r4,8
    4d44:	8080030d 	sth	r2,12(r16)
    4d48:	183feb1e 	bne	r3,zero,4cf8 <__swsetup_r+0x48>
    4d4c:	1100a00c 	andi	r4,r2,640
    4d50:	01408004 	movi	r5,512
    4d54:	217fe826 	beq	r4,r5,4cf8 <__swsetup_r+0x48>
    4d58:	800b883a 	mov	r5,r16
    4d5c:	8809883a 	mov	r4,r17
    4d60:	00078280 	call	7828 <__smakebuf_r>
    4d64:	8080030b 	ldhu	r2,12(r16)
    4d68:	80c00417 	ldw	r3,16(r16)
    4d6c:	003fe206 	br	4cf8 <__swsetup_r+0x48>
    4d70:	80800517 	ldw	r2,20(r16)
    4d74:	80000215 	stw	zero,8(r16)
    4d78:	0085c83a 	sub	r2,zero,r2
    4d7c:	80800615 	stw	r2,24(r16)
    4d80:	183fe41e 	bne	r3,zero,4d14 <__swsetup_r+0x64>
    4d84:	80c0030b 	ldhu	r3,12(r16)
    4d88:	0005883a 	mov	r2,zero
    4d8c:	1900200c 	andi	r4,r3,128
    4d90:	203fe126 	beq	r4,zero,4d18 <__swsetup_r+0x68>
    4d94:	18c01014 	ori	r3,r3,64
    4d98:	80c0030d 	sth	r3,12(r16)
    4d9c:	00bfffc4 	movi	r2,-1
    4da0:	003fdd06 	br	4d18 <__swsetup_r+0x68>
    4da4:	0006c840 	call	6c84 <__sinit>
    4da8:	003fcd06 	br	4ce0 <__swsetup_r+0x30>
    4dac:	0005883a 	mov	r2,zero
    4db0:	003fd606 	br	4d0c <__swsetup_r+0x5c>
    4db4:	81400c17 	ldw	r5,48(r16)
    4db8:	28000626 	beq	r5,zero,4dd4 <__swsetup_r+0x124>
    4dbc:	80801004 	addi	r2,r16,64
    4dc0:	28800326 	beq	r5,r2,4dd0 <__swsetup_r+0x120>
    4dc4:	8809883a 	mov	r4,r17
    4dc8:	0006df80 	call	6df8 <_free_r>
    4dcc:	8100030b 	ldhu	r4,12(r16)
    4dd0:	80000c15 	stw	zero,48(r16)
    4dd4:	80c00417 	ldw	r3,16(r16)
    4dd8:	00bff6c4 	movi	r2,-37
    4ddc:	1108703a 	and	r4,r2,r4
    4de0:	80000115 	stw	zero,4(r16)
    4de4:	80c00015 	stw	r3,0(r16)
    4de8:	003fd506 	br	4d40 <__swsetup_r+0x90>
    4dec:	00800244 	movi	r2,9
    4df0:	88800015 	stw	r2,0(r17)
    4df4:	20801014 	ori	r2,r4,64
    4df8:	8080030d 	sth	r2,12(r16)
    4dfc:	00bfffc4 	movi	r2,-1
    4e00:	003fc506 	br	4d18 <__swsetup_r+0x68>

00004e04 <quorem>:
    4e04:	defff704 	addi	sp,sp,-36
    4e08:	dc800215 	stw	r18,8(sp)
    4e0c:	20800417 	ldw	r2,16(r4)
    4e10:	2c800417 	ldw	r18,16(r5)
    4e14:	dfc00815 	stw	ra,32(sp)
    4e18:	ddc00715 	stw	r23,28(sp)
    4e1c:	dd800615 	stw	r22,24(sp)
    4e20:	dd400515 	stw	r21,20(sp)
    4e24:	dd000415 	stw	r20,16(sp)
    4e28:	dcc00315 	stw	r19,12(sp)
    4e2c:	dc400115 	stw	r17,4(sp)
    4e30:	dc000015 	stw	r16,0(sp)
    4e34:	14807116 	blt	r2,r18,4ffc <quorem+0x1f8>
    4e38:	94bfffc4 	addi	r18,r18,-1
    4e3c:	94ad883a 	add	r22,r18,r18
    4e40:	b5ad883a 	add	r22,r22,r22
    4e44:	2c400504 	addi	r17,r5,20
    4e48:	8da9883a 	add	r20,r17,r22
    4e4c:	25400504 	addi	r21,r4,20
    4e50:	282f883a 	mov	r23,r5
    4e54:	adad883a 	add	r22,r21,r22
    4e58:	a1400017 	ldw	r5,0(r20)
    4e5c:	2021883a 	mov	r16,r4
    4e60:	b1000017 	ldw	r4,0(r22)
    4e64:	29400044 	addi	r5,r5,1
    4e68:	0001ec40 	call	1ec4 <__udivsi3>
    4e6c:	1027883a 	mov	r19,r2
    4e70:	10002c26 	beq	r2,zero,4f24 <quorem+0x120>
    4e74:	a813883a 	mov	r9,r21
    4e78:	880b883a 	mov	r5,r17
    4e7c:	0009883a 	mov	r4,zero
    4e80:	000d883a 	mov	r6,zero
    4e84:	2a000017 	ldw	r8,0(r5)
    4e88:	49c00017 	ldw	r7,0(r9)
    4e8c:	29400104 	addi	r5,r5,4
    4e90:	40bfffcc 	andi	r2,r8,65535
    4e94:	14c5383a 	mul	r2,r2,r19
    4e98:	4010d43a 	srli	r8,r8,16
    4e9c:	38ffffcc 	andi	r3,r7,65535
    4ea0:	1105883a 	add	r2,r2,r4
    4ea4:	1008d43a 	srli	r4,r2,16
    4ea8:	44d1383a 	mul	r8,r8,r19
    4eac:	198d883a 	add	r6,r3,r6
    4eb0:	10ffffcc 	andi	r3,r2,65535
    4eb4:	30c7c83a 	sub	r3,r6,r3
    4eb8:	380ed43a 	srli	r7,r7,16
    4ebc:	4105883a 	add	r2,r8,r4
    4ec0:	180dd43a 	srai	r6,r3,16
    4ec4:	113fffcc 	andi	r4,r2,65535
    4ec8:	390fc83a 	sub	r7,r7,r4
    4ecc:	398d883a 	add	r6,r7,r6
    4ed0:	300e943a 	slli	r7,r6,16
    4ed4:	18ffffcc 	andi	r3,r3,65535
    4ed8:	1008d43a 	srli	r4,r2,16
    4edc:	38ceb03a 	or	r7,r7,r3
    4ee0:	49c00015 	stw	r7,0(r9)
    4ee4:	300dd43a 	srai	r6,r6,16
    4ee8:	4a400104 	addi	r9,r9,4
    4eec:	a17fe52e 	bgeu	r20,r5,4e84 <quorem+0x80>
    4ef0:	b0800017 	ldw	r2,0(r22)
    4ef4:	10000b1e 	bne	r2,zero,4f24 <quorem+0x120>
    4ef8:	b0bfff04 	addi	r2,r22,-4
    4efc:	a880082e 	bgeu	r21,r2,4f20 <quorem+0x11c>
    4f00:	b0ffff17 	ldw	r3,-4(r22)
    4f04:	18000326 	beq	r3,zero,4f14 <quorem+0x110>
    4f08:	00000506 	br	4f20 <quorem+0x11c>
    4f0c:	10c00017 	ldw	r3,0(r2)
    4f10:	1800031e 	bne	r3,zero,4f20 <quorem+0x11c>
    4f14:	10bfff04 	addi	r2,r2,-4
    4f18:	94bfffc4 	addi	r18,r18,-1
    4f1c:	a8bffb36 	bltu	r21,r2,4f0c <quorem+0x108>
    4f20:	84800415 	stw	r18,16(r16)
    4f24:	b80b883a 	mov	r5,r23
    4f28:	8009883a 	mov	r4,r16
    4f2c:	000875c0 	call	875c <__mcmp>
    4f30:	10002616 	blt	r2,zero,4fcc <quorem+0x1c8>
    4f34:	9cc00044 	addi	r19,r19,1
    4f38:	a805883a 	mov	r2,r21
    4f3c:	000b883a 	mov	r5,zero
    4f40:	11000017 	ldw	r4,0(r2)
    4f44:	89800017 	ldw	r6,0(r17)
    4f48:	10800104 	addi	r2,r2,4
    4f4c:	20ffffcc 	andi	r3,r4,65535
    4f50:	194b883a 	add	r5,r3,r5
    4f54:	30ffffcc 	andi	r3,r6,65535
    4f58:	28c7c83a 	sub	r3,r5,r3
    4f5c:	300cd43a 	srli	r6,r6,16
    4f60:	2008d43a 	srli	r4,r4,16
    4f64:	180bd43a 	srai	r5,r3,16
    4f68:	18ffffcc 	andi	r3,r3,65535
    4f6c:	2189c83a 	sub	r4,r4,r6
    4f70:	2149883a 	add	r4,r4,r5
    4f74:	200c943a 	slli	r6,r4,16
    4f78:	8c400104 	addi	r17,r17,4
    4f7c:	200bd43a 	srai	r5,r4,16
    4f80:	30c6b03a 	or	r3,r6,r3
    4f84:	10ffff15 	stw	r3,-4(r2)
    4f88:	a47fed2e 	bgeu	r20,r17,4f40 <quorem+0x13c>
    4f8c:	9485883a 	add	r2,r18,r18
    4f90:	1085883a 	add	r2,r2,r2
    4f94:	a887883a 	add	r3,r21,r2
    4f98:	18800017 	ldw	r2,0(r3)
    4f9c:	10000b1e 	bne	r2,zero,4fcc <quorem+0x1c8>
    4fa0:	18bfff04 	addi	r2,r3,-4
    4fa4:	a880082e 	bgeu	r21,r2,4fc8 <quorem+0x1c4>
    4fa8:	18ffff17 	ldw	r3,-4(r3)
    4fac:	18000326 	beq	r3,zero,4fbc <quorem+0x1b8>
    4fb0:	00000506 	br	4fc8 <quorem+0x1c4>
    4fb4:	10c00017 	ldw	r3,0(r2)
    4fb8:	1800031e 	bne	r3,zero,4fc8 <quorem+0x1c4>
    4fbc:	10bfff04 	addi	r2,r2,-4
    4fc0:	94bfffc4 	addi	r18,r18,-1
    4fc4:	a8bffb36 	bltu	r21,r2,4fb4 <quorem+0x1b0>
    4fc8:	84800415 	stw	r18,16(r16)
    4fcc:	9805883a 	mov	r2,r19
    4fd0:	dfc00817 	ldw	ra,32(sp)
    4fd4:	ddc00717 	ldw	r23,28(sp)
    4fd8:	dd800617 	ldw	r22,24(sp)
    4fdc:	dd400517 	ldw	r21,20(sp)
    4fe0:	dd000417 	ldw	r20,16(sp)
    4fe4:	dcc00317 	ldw	r19,12(sp)
    4fe8:	dc800217 	ldw	r18,8(sp)
    4fec:	dc400117 	ldw	r17,4(sp)
    4ff0:	dc000017 	ldw	r16,0(sp)
    4ff4:	dec00904 	addi	sp,sp,36
    4ff8:	f800283a 	ret
    4ffc:	0005883a 	mov	r2,zero
    5000:	003ff306 	br	4fd0 <quorem+0x1cc>

00005004 <_dtoa_r>:
    5004:	20801017 	ldw	r2,64(r4)
    5008:	deffde04 	addi	sp,sp,-136
    500c:	df002015 	stw	fp,128(sp)
    5010:	dcc01b15 	stw	r19,108(sp)
    5014:	dc801a15 	stw	r18,104(sp)
    5018:	dc401915 	stw	r17,100(sp)
    501c:	dc001815 	stw	r16,96(sp)
    5020:	dfc02115 	stw	ra,132(sp)
    5024:	ddc01f15 	stw	r23,124(sp)
    5028:	dd801e15 	stw	r22,120(sp)
    502c:	dd401d15 	stw	r21,116(sp)
    5030:	dd001c15 	stw	r20,112(sp)
    5034:	d9c00315 	stw	r7,12(sp)
    5038:	2039883a 	mov	fp,r4
    503c:	3023883a 	mov	r17,r6
    5040:	2825883a 	mov	r18,r5
    5044:	dc002417 	ldw	r16,144(sp)
    5048:	3027883a 	mov	r19,r6
    504c:	10000826 	beq	r2,zero,5070 <_dtoa_r+0x6c>
    5050:	21801117 	ldw	r6,68(r4)
    5054:	00c00044 	movi	r3,1
    5058:	100b883a 	mov	r5,r2
    505c:	1986983a 	sll	r3,r3,r6
    5060:	11800115 	stw	r6,4(r2)
    5064:	10c00215 	stw	r3,8(r2)
    5068:	0007f3c0 	call	7f3c <_Bfree>
    506c:	e0001015 	stw	zero,64(fp)
    5070:	88002e16 	blt	r17,zero,512c <_dtoa_r+0x128>
    5074:	80000015 	stw	zero,0(r16)
    5078:	889ffc2c 	andhi	r2,r17,32752
    507c:	00dffc34 	movhi	r3,32752
    5080:	10c01c26 	beq	r2,r3,50f4 <_dtoa_r+0xf0>
    5084:	000d883a 	mov	r6,zero
    5088:	000f883a 	mov	r7,zero
    508c:	9009883a 	mov	r4,r18
    5090:	980b883a 	mov	r5,r19
    5094:	000d2400 	call	d240 <__eqdf2>
    5098:	10002b1e 	bne	r2,zero,5148 <_dtoa_r+0x144>
    509c:	d9c02317 	ldw	r7,140(sp)
    50a0:	00800044 	movi	r2,1
    50a4:	38800015 	stw	r2,0(r7)
    50a8:	d8802517 	ldw	r2,148(sp)
    50ac:	10019e26 	beq	r2,zero,5728 <_dtoa_r+0x724>
    50b0:	d8c02517 	ldw	r3,148(sp)
    50b4:	00800074 	movhi	r2,1
    50b8:	10859144 	addi	r2,r2,5701
    50bc:	18800015 	stw	r2,0(r3)
    50c0:	10bfffc4 	addi	r2,r2,-1
    50c4:	dfc02117 	ldw	ra,132(sp)
    50c8:	df002017 	ldw	fp,128(sp)
    50cc:	ddc01f17 	ldw	r23,124(sp)
    50d0:	dd801e17 	ldw	r22,120(sp)
    50d4:	dd401d17 	ldw	r21,116(sp)
    50d8:	dd001c17 	ldw	r20,112(sp)
    50dc:	dcc01b17 	ldw	r19,108(sp)
    50e0:	dc801a17 	ldw	r18,104(sp)
    50e4:	dc401917 	ldw	r17,100(sp)
    50e8:	dc001817 	ldw	r16,96(sp)
    50ec:	dec02204 	addi	sp,sp,136
    50f0:	f800283a 	ret
    50f4:	d8c02317 	ldw	r3,140(sp)
    50f8:	0089c3c4 	movi	r2,9999
    50fc:	18800015 	stw	r2,0(r3)
    5100:	90017726 	beq	r18,zero,56e0 <_dtoa_r+0x6dc>
    5104:	00800074 	movhi	r2,1
    5108:	10859d04 	addi	r2,r2,5748
    510c:	d9002517 	ldw	r4,148(sp)
    5110:	203fec26 	beq	r4,zero,50c4 <_dtoa_r+0xc0>
    5114:	10c000c7 	ldb	r3,3(r2)
    5118:	1801781e 	bne	r3,zero,56fc <_dtoa_r+0x6f8>
    511c:	10c000c4 	addi	r3,r2,3
    5120:	d9802517 	ldw	r6,148(sp)
    5124:	30c00015 	stw	r3,0(r6)
    5128:	003fe606 	br	50c4 <_dtoa_r+0xc0>
    512c:	04e00034 	movhi	r19,32768
    5130:	9cffffc4 	addi	r19,r19,-1
    5134:	00800044 	movi	r2,1
    5138:	8ce6703a 	and	r19,r17,r19
    513c:	80800015 	stw	r2,0(r16)
    5140:	9823883a 	mov	r17,r19
    5144:	003fcc06 	br	5078 <_dtoa_r+0x74>
    5148:	d8800204 	addi	r2,sp,8
    514c:	d8800015 	stw	r2,0(sp)
    5150:	d9c00104 	addi	r7,sp,4
    5154:	900b883a 	mov	r5,r18
    5158:	980d883a 	mov	r6,r19
    515c:	e009883a 	mov	r4,fp
    5160:	8820d53a 	srli	r16,r17,20
    5164:	0008b280 	call	8b28 <__d2b>
    5168:	d8800915 	stw	r2,36(sp)
    516c:	8001651e 	bne	r16,zero,5704 <_dtoa_r+0x700>
    5170:	dd800217 	ldw	r22,8(sp)
    5174:	dc000117 	ldw	r16,4(sp)
    5178:	00800804 	movi	r2,32
    517c:	b421883a 	add	r16,r22,r16
    5180:	80c10c84 	addi	r3,r16,1074
    5184:	10c2d10e 	bge	r2,r3,5ccc <_dtoa_r+0xcc8>
    5188:	00801004 	movi	r2,64
    518c:	81010484 	addi	r4,r16,1042
    5190:	10c7c83a 	sub	r3,r2,r3
    5194:	9108d83a 	srl	r4,r18,r4
    5198:	88e2983a 	sll	r17,r17,r3
    519c:	2448b03a 	or	r4,r4,r17
    51a0:	000e6080 	call	e608 <__floatunsidf>
    51a4:	017f8434 	movhi	r5,65040
    51a8:	01800044 	movi	r6,1
    51ac:	1009883a 	mov	r4,r2
    51b0:	194b883a 	add	r5,r3,r5
    51b4:	843fffc4 	addi	r16,r16,-1
    51b8:	d9801115 	stw	r6,68(sp)
    51bc:	000d883a 	mov	r6,zero
    51c0:	01cffe34 	movhi	r7,16376
    51c4:	000dbb00 	call	dbb0 <__subdf3>
    51c8:	0198dbf4 	movhi	r6,25455
    51cc:	01cff4f4 	movhi	r7,16339
    51d0:	3190d844 	addi	r6,r6,17249
    51d4:	39e1e9c4 	addi	r7,r7,-30809
    51d8:	1009883a 	mov	r4,r2
    51dc:	180b883a 	mov	r5,r3
    51e0:	000d4980 	call	d498 <__muldf3>
    51e4:	01a2d874 	movhi	r6,35681
    51e8:	01cff1f4 	movhi	r7,16327
    51ec:	31b22cc4 	addi	r6,r6,-14157
    51f0:	39e28a04 	addi	r7,r7,-30168
    51f4:	180b883a 	mov	r5,r3
    51f8:	1009883a 	mov	r4,r2
    51fc:	000c0ac0 	call	c0ac <__adddf3>
    5200:	8009883a 	mov	r4,r16
    5204:	1029883a 	mov	r20,r2
    5208:	1823883a 	mov	r17,r3
    520c:	000e52c0 	call	e52c <__floatsidf>
    5210:	019427f4 	movhi	r6,20639
    5214:	01cff4f4 	movhi	r7,16339
    5218:	319e7ec4 	addi	r6,r6,31227
    521c:	39d104c4 	addi	r7,r7,17427
    5220:	1009883a 	mov	r4,r2
    5224:	180b883a 	mov	r5,r3
    5228:	000d4980 	call	d498 <__muldf3>
    522c:	100d883a 	mov	r6,r2
    5230:	180f883a 	mov	r7,r3
    5234:	a009883a 	mov	r4,r20
    5238:	880b883a 	mov	r5,r17
    523c:	000c0ac0 	call	c0ac <__adddf3>
    5240:	1009883a 	mov	r4,r2
    5244:	180b883a 	mov	r5,r3
    5248:	1029883a 	mov	r20,r2
    524c:	1823883a 	mov	r17,r3
    5250:	000e4ac0 	call	e4ac <__fixdfsi>
    5254:	000d883a 	mov	r6,zero
    5258:	000f883a 	mov	r7,zero
    525c:	a009883a 	mov	r4,r20
    5260:	880b883a 	mov	r5,r17
    5264:	d8800515 	stw	r2,20(sp)
    5268:	000d3a40 	call	d3a4 <__ledf2>
    526c:	10028716 	blt	r2,zero,5c8c <_dtoa_r+0xc88>
    5270:	d8c00517 	ldw	r3,20(sp)
    5274:	00800584 	movi	r2,22
    5278:	10c27536 	bltu	r2,r3,5c50 <_dtoa_r+0xc4c>
    527c:	180490fa 	slli	r2,r3,3
    5280:	00c00074 	movhi	r3,1
    5284:	18c5b904 	addi	r3,r3,5860
    5288:	1885883a 	add	r2,r3,r2
    528c:	11000017 	ldw	r4,0(r2)
    5290:	11400117 	ldw	r5,4(r2)
    5294:	900d883a 	mov	r6,r18
    5298:	980f883a 	mov	r7,r19
    529c:	000d2c80 	call	d2c8 <__gedf2>
    52a0:	00828d0e 	bge	zero,r2,5cd8 <_dtoa_r+0xcd4>
    52a4:	d9000517 	ldw	r4,20(sp)
    52a8:	d8000e15 	stw	zero,56(sp)
    52ac:	213fffc4 	addi	r4,r4,-1
    52b0:	d9000515 	stw	r4,20(sp)
    52b4:	b42dc83a 	sub	r22,r22,r16
    52b8:	b5bfffc4 	addi	r22,r22,-1
    52bc:	b0026f16 	blt	r22,zero,5c7c <_dtoa_r+0xc78>
    52c0:	d8000815 	stw	zero,32(sp)
    52c4:	d9c00517 	ldw	r7,20(sp)
    52c8:	38026416 	blt	r7,zero,5c5c <_dtoa_r+0xc58>
    52cc:	b1ed883a 	add	r22,r22,r7
    52d0:	d9c00d15 	stw	r7,52(sp)
    52d4:	d8000a15 	stw	zero,40(sp)
    52d8:	d9800317 	ldw	r6,12(sp)
    52dc:	00800244 	movi	r2,9
    52e0:	11811436 	bltu	r2,r6,5734 <_dtoa_r+0x730>
    52e4:	00800144 	movi	r2,5
    52e8:	1184e10e 	bge	r2,r6,6670 <_dtoa_r+0x166c>
    52ec:	31bfff04 	addi	r6,r6,-4
    52f0:	d9800315 	stw	r6,12(sp)
    52f4:	0023883a 	mov	r17,zero
    52f8:	d9800317 	ldw	r6,12(sp)
    52fc:	008000c4 	movi	r2,3
    5300:	30836726 	beq	r6,r2,60a0 <_dtoa_r+0x109c>
    5304:	1183410e 	bge	r2,r6,600c <_dtoa_r+0x1008>
    5308:	d9c00317 	ldw	r7,12(sp)
    530c:	00800104 	movi	r2,4
    5310:	38827c26 	beq	r7,r2,5d04 <_dtoa_r+0xd00>
    5314:	00800144 	movi	r2,5
    5318:	3884c41e 	bne	r7,r2,662c <_dtoa_r+0x1628>
    531c:	00800044 	movi	r2,1
    5320:	d8800b15 	stw	r2,44(sp)
    5324:	d8c00517 	ldw	r3,20(sp)
    5328:	d9002217 	ldw	r4,136(sp)
    532c:	1907883a 	add	r3,r3,r4
    5330:	19800044 	addi	r6,r3,1
    5334:	d8c00c15 	stw	r3,48(sp)
    5338:	d9800615 	stw	r6,24(sp)
    533c:	0183a40e 	bge	zero,r6,61d0 <_dtoa_r+0x11cc>
    5340:	d9800617 	ldw	r6,24(sp)
    5344:	3021883a 	mov	r16,r6
    5348:	e0001115 	stw	zero,68(fp)
    534c:	008005c4 	movi	r2,23
    5350:	1184c92e 	bgeu	r2,r6,6678 <_dtoa_r+0x1674>
    5354:	00c00044 	movi	r3,1
    5358:	00800104 	movi	r2,4
    535c:	1085883a 	add	r2,r2,r2
    5360:	11000504 	addi	r4,r2,20
    5364:	180b883a 	mov	r5,r3
    5368:	18c00044 	addi	r3,r3,1
    536c:	313ffb2e 	bgeu	r6,r4,535c <_dtoa_r+0x358>
    5370:	e1401115 	stw	r5,68(fp)
    5374:	e009883a 	mov	r4,fp
    5378:	0007e940 	call	7e94 <_Balloc>
    537c:	d8800715 	stw	r2,28(sp)
    5380:	e0801015 	stw	r2,64(fp)
    5384:	00800384 	movi	r2,14
    5388:	1400f736 	bltu	r2,r16,5768 <_dtoa_r+0x764>
    538c:	8800f626 	beq	r17,zero,5768 <_dtoa_r+0x764>
    5390:	d9c00517 	ldw	r7,20(sp)
    5394:	01c39a0e 	bge	zero,r7,6200 <_dtoa_r+0x11fc>
    5398:	388003cc 	andi	r2,r7,15
    539c:	100490fa 	slli	r2,r2,3
    53a0:	382bd13a 	srai	r21,r7,4
    53a4:	00c00074 	movhi	r3,1
    53a8:	18c5b904 	addi	r3,r3,5860
    53ac:	1885883a 	add	r2,r3,r2
    53b0:	a8c0040c 	andi	r3,r21,16
    53b4:	12400017 	ldw	r9,0(r2)
    53b8:	12000117 	ldw	r8,4(r2)
    53bc:	18037926 	beq	r3,zero,61a4 <_dtoa_r+0x11a0>
    53c0:	00800074 	movhi	r2,1
    53c4:	1085af04 	addi	r2,r2,5820
    53c8:	11800817 	ldw	r6,32(r2)
    53cc:	11c00917 	ldw	r7,36(r2)
    53d0:	9009883a 	mov	r4,r18
    53d4:	980b883a 	mov	r5,r19
    53d8:	da001715 	stw	r8,92(sp)
    53dc:	da401615 	stw	r9,88(sp)
    53e0:	000c9580 	call	c958 <__divdf3>
    53e4:	da001717 	ldw	r8,92(sp)
    53e8:	da401617 	ldw	r9,88(sp)
    53ec:	ad4003cc 	andi	r21,r21,15
    53f0:	040000c4 	movi	r16,3
    53f4:	1023883a 	mov	r17,r2
    53f8:	1829883a 	mov	r20,r3
    53fc:	a8001126 	beq	r21,zero,5444 <_dtoa_r+0x440>
    5400:	05c00074 	movhi	r23,1
    5404:	bdc5af04 	addi	r23,r23,5820
    5408:	4805883a 	mov	r2,r9
    540c:	4007883a 	mov	r3,r8
    5410:	a980004c 	andi	r6,r21,1
    5414:	1009883a 	mov	r4,r2
    5418:	a82bd07a 	srai	r21,r21,1
    541c:	180b883a 	mov	r5,r3
    5420:	30000426 	beq	r6,zero,5434 <_dtoa_r+0x430>
    5424:	b9800017 	ldw	r6,0(r23)
    5428:	b9c00117 	ldw	r7,4(r23)
    542c:	84000044 	addi	r16,r16,1
    5430:	000d4980 	call	d498 <__muldf3>
    5434:	bdc00204 	addi	r23,r23,8
    5438:	a83ff51e 	bne	r21,zero,5410 <_dtoa_r+0x40c>
    543c:	1013883a 	mov	r9,r2
    5440:	1811883a 	mov	r8,r3
    5444:	480d883a 	mov	r6,r9
    5448:	400f883a 	mov	r7,r8
    544c:	8809883a 	mov	r4,r17
    5450:	a00b883a 	mov	r5,r20
    5454:	000c9580 	call	c958 <__divdf3>
    5458:	d8800f15 	stw	r2,60(sp)
    545c:	d8c01015 	stw	r3,64(sp)
    5460:	d8c00e17 	ldw	r3,56(sp)
    5464:	18000626 	beq	r3,zero,5480 <_dtoa_r+0x47c>
    5468:	d9000f17 	ldw	r4,60(sp)
    546c:	d9401017 	ldw	r5,64(sp)
    5470:	000d883a 	mov	r6,zero
    5474:	01cffc34 	movhi	r7,16368
    5478:	000d3a40 	call	d3a4 <__ledf2>
    547c:	10040b16 	blt	r2,zero,64ac <_dtoa_r+0x14a8>
    5480:	8009883a 	mov	r4,r16
    5484:	000e52c0 	call	e52c <__floatsidf>
    5488:	d9800f17 	ldw	r6,60(sp)
    548c:	d9c01017 	ldw	r7,64(sp)
    5490:	1009883a 	mov	r4,r2
    5494:	180b883a 	mov	r5,r3
    5498:	000d4980 	call	d498 <__muldf3>
    549c:	000d883a 	mov	r6,zero
    54a0:	01d00734 	movhi	r7,16412
    54a4:	1009883a 	mov	r4,r2
    54a8:	180b883a 	mov	r5,r3
    54ac:	000c0ac0 	call	c0ac <__adddf3>
    54b0:	1021883a 	mov	r16,r2
    54b4:	d8800617 	ldw	r2,24(sp)
    54b8:	047f3034 	movhi	r17,64704
    54bc:	1c63883a 	add	r17,r3,r17
    54c0:	10031826 	beq	r2,zero,6124 <_dtoa_r+0x1120>
    54c4:	d8c00517 	ldw	r3,20(sp)
    54c8:	db000617 	ldw	r12,24(sp)
    54cc:	d8c01315 	stw	r3,76(sp)
    54d0:	d9000b17 	ldw	r4,44(sp)
    54d4:	20038f26 	beq	r4,zero,6314 <_dtoa_r+0x1310>
    54d8:	60bfffc4 	addi	r2,r12,-1
    54dc:	100490fa 	slli	r2,r2,3
    54e0:	00c00074 	movhi	r3,1
    54e4:	18c5b904 	addi	r3,r3,5860
    54e8:	1885883a 	add	r2,r3,r2
    54ec:	11800017 	ldw	r6,0(r2)
    54f0:	11c00117 	ldw	r7,4(r2)
    54f4:	d8800717 	ldw	r2,28(sp)
    54f8:	0009883a 	mov	r4,zero
    54fc:	014ff834 	movhi	r5,16352
    5500:	db001615 	stw	r12,88(sp)
    5504:	15c00044 	addi	r23,r2,1
    5508:	000c9580 	call	c958 <__divdf3>
    550c:	800d883a 	mov	r6,r16
    5510:	880f883a 	mov	r7,r17
    5514:	1009883a 	mov	r4,r2
    5518:	180b883a 	mov	r5,r3
    551c:	000dbb00 	call	dbb0 <__subdf3>
    5520:	d9401017 	ldw	r5,64(sp)
    5524:	d9000f17 	ldw	r4,60(sp)
    5528:	102b883a 	mov	r21,r2
    552c:	d8c01215 	stw	r3,72(sp)
    5530:	000e4ac0 	call	e4ac <__fixdfsi>
    5534:	1009883a 	mov	r4,r2
    5538:	1029883a 	mov	r20,r2
    553c:	000e52c0 	call	e52c <__floatsidf>
    5540:	d9000f17 	ldw	r4,60(sp)
    5544:	d9401017 	ldw	r5,64(sp)
    5548:	100d883a 	mov	r6,r2
    554c:	180f883a 	mov	r7,r3
    5550:	000dbb00 	call	dbb0 <__subdf3>
    5554:	1823883a 	mov	r17,r3
    5558:	d8c00717 	ldw	r3,28(sp)
    555c:	d9401217 	ldw	r5,72(sp)
    5560:	a2000c04 	addi	r8,r20,48
    5564:	1021883a 	mov	r16,r2
    5568:	1a000005 	stb	r8,0(r3)
    556c:	800d883a 	mov	r6,r16
    5570:	880f883a 	mov	r7,r17
    5574:	a809883a 	mov	r4,r21
    5578:	4029883a 	mov	r20,r8
    557c:	000d2c80 	call	d2c8 <__gedf2>
    5580:	00841d16 	blt	zero,r2,65f8 <_dtoa_r+0x15f4>
    5584:	800d883a 	mov	r6,r16
    5588:	880f883a 	mov	r7,r17
    558c:	0009883a 	mov	r4,zero
    5590:	014ffc34 	movhi	r5,16368
    5594:	000dbb00 	call	dbb0 <__subdf3>
    5598:	d9401217 	ldw	r5,72(sp)
    559c:	100d883a 	mov	r6,r2
    55a0:	180f883a 	mov	r7,r3
    55a4:	a809883a 	mov	r4,r21
    55a8:	000d2c80 	call	d2c8 <__gedf2>
    55ac:	db001617 	ldw	r12,88(sp)
    55b0:	00840e16 	blt	zero,r2,65ec <_dtoa_r+0x15e8>
    55b4:	00800044 	movi	r2,1
    55b8:	13006b0e 	bge	r2,r12,5768 <_dtoa_r+0x764>
    55bc:	d9000717 	ldw	r4,28(sp)
    55c0:	dd800f15 	stw	r22,60(sp)
    55c4:	dcc01015 	stw	r19,64(sp)
    55c8:	2319883a 	add	r12,r4,r12
    55cc:	dcc01217 	ldw	r19,72(sp)
    55d0:	602d883a 	mov	r22,r12
    55d4:	dc801215 	stw	r18,72(sp)
    55d8:	b825883a 	mov	r18,r23
    55dc:	00000906 	br	5604 <_dtoa_r+0x600>
    55e0:	000dbb00 	call	dbb0 <__subdf3>
    55e4:	a80d883a 	mov	r6,r21
    55e8:	980f883a 	mov	r7,r19
    55ec:	1009883a 	mov	r4,r2
    55f0:	180b883a 	mov	r5,r3
    55f4:	000d3a40 	call	d3a4 <__ledf2>
    55f8:	1003e816 	blt	r2,zero,659c <_dtoa_r+0x1598>
    55fc:	b825883a 	mov	r18,r23
    5600:	bd83e926 	beq	r23,r22,65a8 <_dtoa_r+0x15a4>
    5604:	a809883a 	mov	r4,r21
    5608:	980b883a 	mov	r5,r19
    560c:	000d883a 	mov	r6,zero
    5610:	01d00934 	movhi	r7,16420
    5614:	000d4980 	call	d498 <__muldf3>
    5618:	000d883a 	mov	r6,zero
    561c:	01d00934 	movhi	r7,16420
    5620:	8009883a 	mov	r4,r16
    5624:	880b883a 	mov	r5,r17
    5628:	102b883a 	mov	r21,r2
    562c:	1827883a 	mov	r19,r3
    5630:	000d4980 	call	d498 <__muldf3>
    5634:	180b883a 	mov	r5,r3
    5638:	1009883a 	mov	r4,r2
    563c:	1821883a 	mov	r16,r3
    5640:	1023883a 	mov	r17,r2
    5644:	000e4ac0 	call	e4ac <__fixdfsi>
    5648:	1009883a 	mov	r4,r2
    564c:	1029883a 	mov	r20,r2
    5650:	000e52c0 	call	e52c <__floatsidf>
    5654:	8809883a 	mov	r4,r17
    5658:	800b883a 	mov	r5,r16
    565c:	100d883a 	mov	r6,r2
    5660:	180f883a 	mov	r7,r3
    5664:	000dbb00 	call	dbb0 <__subdf3>
    5668:	a5000c04 	addi	r20,r20,48
    566c:	a80d883a 	mov	r6,r21
    5670:	980f883a 	mov	r7,r19
    5674:	1009883a 	mov	r4,r2
    5678:	180b883a 	mov	r5,r3
    567c:	95000005 	stb	r20,0(r18)
    5680:	1021883a 	mov	r16,r2
    5684:	1823883a 	mov	r17,r3
    5688:	000d3a40 	call	d3a4 <__ledf2>
    568c:	bdc00044 	addi	r23,r23,1
    5690:	800d883a 	mov	r6,r16
    5694:	880f883a 	mov	r7,r17
    5698:	0009883a 	mov	r4,zero
    569c:	014ffc34 	movhi	r5,16368
    56a0:	103fcf0e 	bge	r2,zero,55e0 <_dtoa_r+0x5dc>
    56a4:	d8c01317 	ldw	r3,76(sp)
    56a8:	d8c00515 	stw	r3,20(sp)
    56ac:	d9400917 	ldw	r5,36(sp)
    56b0:	e009883a 	mov	r4,fp
    56b4:	0007f3c0 	call	7f3c <_Bfree>
    56b8:	d9000517 	ldw	r4,20(sp)
    56bc:	d9802317 	ldw	r6,140(sp)
    56c0:	d9c02517 	ldw	r7,148(sp)
    56c4:	b8000005 	stb	zero,0(r23)
    56c8:	20800044 	addi	r2,r4,1
    56cc:	30800015 	stw	r2,0(r6)
    56d0:	3802aa26 	beq	r7,zero,617c <_dtoa_r+0x1178>
    56d4:	3dc00015 	stw	r23,0(r7)
    56d8:	d8800717 	ldw	r2,28(sp)
    56dc:	003e7906 	br	50c4 <_dtoa_r+0xc0>
    56e0:	00800434 	movhi	r2,16
    56e4:	10bfffc4 	addi	r2,r2,-1
    56e8:	88a2703a 	and	r17,r17,r2
    56ec:	883e851e 	bne	r17,zero,5104 <_dtoa_r+0x100>
    56f0:	00800074 	movhi	r2,1
    56f4:	10859a04 	addi	r2,r2,5736
    56f8:	003e8406 	br	510c <_dtoa_r+0x108>
    56fc:	10c00204 	addi	r3,r2,8
    5700:	003e8706 	br	5120 <_dtoa_r+0x11c>
    5704:	01400434 	movhi	r5,16
    5708:	297fffc4 	addi	r5,r5,-1
    570c:	994a703a 	and	r5,r19,r5
    5710:	9009883a 	mov	r4,r18
    5714:	843f0044 	addi	r16,r16,-1023
    5718:	294ffc34 	orhi	r5,r5,16368
    571c:	dd800217 	ldw	r22,8(sp)
    5720:	d8001115 	stw	zero,68(sp)
    5724:	003ea506 	br	51bc <_dtoa_r+0x1b8>
    5728:	00800074 	movhi	r2,1
    572c:	10859104 	addi	r2,r2,5700
    5730:	003e6406 	br	50c4 <_dtoa_r+0xc0>
    5734:	e0001115 	stw	zero,68(fp)
    5738:	000b883a 	mov	r5,zero
    573c:	e009883a 	mov	r4,fp
    5740:	0007e940 	call	7e94 <_Balloc>
    5744:	01bfffc4 	movi	r6,-1
    5748:	01c00044 	movi	r7,1
    574c:	d8800715 	stw	r2,28(sp)
    5750:	d9800c15 	stw	r6,48(sp)
    5754:	e0801015 	stw	r2,64(fp)
    5758:	d8000315 	stw	zero,12(sp)
    575c:	d9c00b15 	stw	r7,44(sp)
    5760:	d9800615 	stw	r6,24(sp)
    5764:	d8002215 	stw	zero,136(sp)
    5768:	d8800117 	ldw	r2,4(sp)
    576c:	10008916 	blt	r2,zero,5994 <_dtoa_r+0x990>
    5770:	d9000517 	ldw	r4,20(sp)
    5774:	00c00384 	movi	r3,14
    5778:	19008616 	blt	r3,r4,5994 <_dtoa_r+0x990>
    577c:	200490fa 	slli	r2,r4,3
    5780:	00c00074 	movhi	r3,1
    5784:	d9802217 	ldw	r6,136(sp)
    5788:	18c5b904 	addi	r3,r3,5860
    578c:	1885883a 	add	r2,r3,r2
    5790:	14000017 	ldw	r16,0(r2)
    5794:	14400117 	ldw	r17,4(r2)
    5798:	30016316 	blt	r6,zero,5d28 <_dtoa_r+0xd24>
    579c:	800d883a 	mov	r6,r16
    57a0:	880f883a 	mov	r7,r17
    57a4:	9009883a 	mov	r4,r18
    57a8:	980b883a 	mov	r5,r19
    57ac:	000c9580 	call	c958 <__divdf3>
    57b0:	180b883a 	mov	r5,r3
    57b4:	1009883a 	mov	r4,r2
    57b8:	000e4ac0 	call	e4ac <__fixdfsi>
    57bc:	1009883a 	mov	r4,r2
    57c0:	102b883a 	mov	r21,r2
    57c4:	000e52c0 	call	e52c <__floatsidf>
    57c8:	800d883a 	mov	r6,r16
    57cc:	880f883a 	mov	r7,r17
    57d0:	1009883a 	mov	r4,r2
    57d4:	180b883a 	mov	r5,r3
    57d8:	000d4980 	call	d498 <__muldf3>
    57dc:	100d883a 	mov	r6,r2
    57e0:	180f883a 	mov	r7,r3
    57e4:	9009883a 	mov	r4,r18
    57e8:	980b883a 	mov	r5,r19
    57ec:	000dbb00 	call	dbb0 <__subdf3>
    57f0:	d9c00717 	ldw	r7,28(sp)
    57f4:	1009883a 	mov	r4,r2
    57f8:	a8800c04 	addi	r2,r21,48
    57fc:	38800005 	stb	r2,0(r7)
    5800:	3dc00044 	addi	r23,r7,1
    5804:	d9c00617 	ldw	r7,24(sp)
    5808:	01800044 	movi	r6,1
    580c:	180b883a 	mov	r5,r3
    5810:	2005883a 	mov	r2,r4
    5814:	39803826 	beq	r7,r6,58f8 <_dtoa_r+0x8f4>
    5818:	000d883a 	mov	r6,zero
    581c:	01d00934 	movhi	r7,16420
    5820:	000d4980 	call	d498 <__muldf3>
    5824:	000d883a 	mov	r6,zero
    5828:	000f883a 	mov	r7,zero
    582c:	1009883a 	mov	r4,r2
    5830:	180b883a 	mov	r5,r3
    5834:	1025883a 	mov	r18,r2
    5838:	1827883a 	mov	r19,r3
    583c:	000d2400 	call	d240 <__eqdf2>
    5840:	103f9a26 	beq	r2,zero,56ac <_dtoa_r+0x6a8>
    5844:	d9c00617 	ldw	r7,24(sp)
    5848:	d8c00717 	ldw	r3,28(sp)
    584c:	b829883a 	mov	r20,r23
    5850:	38bfffc4 	addi	r2,r7,-1
    5854:	18ad883a 	add	r22,r3,r2
    5858:	00000a06 	br	5884 <_dtoa_r+0x880>
    585c:	000d4980 	call	d498 <__muldf3>
    5860:	000d883a 	mov	r6,zero
    5864:	000f883a 	mov	r7,zero
    5868:	1009883a 	mov	r4,r2
    586c:	180b883a 	mov	r5,r3
    5870:	1025883a 	mov	r18,r2
    5874:	1827883a 	mov	r19,r3
    5878:	b829883a 	mov	r20,r23
    587c:	000d2400 	call	d240 <__eqdf2>
    5880:	103f8a26 	beq	r2,zero,56ac <_dtoa_r+0x6a8>
    5884:	800d883a 	mov	r6,r16
    5888:	880f883a 	mov	r7,r17
    588c:	9009883a 	mov	r4,r18
    5890:	980b883a 	mov	r5,r19
    5894:	000c9580 	call	c958 <__divdf3>
    5898:	180b883a 	mov	r5,r3
    589c:	1009883a 	mov	r4,r2
    58a0:	000e4ac0 	call	e4ac <__fixdfsi>
    58a4:	1009883a 	mov	r4,r2
    58a8:	102b883a 	mov	r21,r2
    58ac:	000e52c0 	call	e52c <__floatsidf>
    58b0:	800d883a 	mov	r6,r16
    58b4:	880f883a 	mov	r7,r17
    58b8:	1009883a 	mov	r4,r2
    58bc:	180b883a 	mov	r5,r3
    58c0:	000d4980 	call	d498 <__muldf3>
    58c4:	100d883a 	mov	r6,r2
    58c8:	180f883a 	mov	r7,r3
    58cc:	9009883a 	mov	r4,r18
    58d0:	980b883a 	mov	r5,r19
    58d4:	000dbb00 	call	dbb0 <__subdf3>
    58d8:	aa000c04 	addi	r8,r21,48
    58dc:	a2000005 	stb	r8,0(r20)
    58e0:	000d883a 	mov	r6,zero
    58e4:	01d00934 	movhi	r7,16420
    58e8:	1009883a 	mov	r4,r2
    58ec:	180b883a 	mov	r5,r3
    58f0:	a5c00044 	addi	r23,r20,1
    58f4:	b53fd91e 	bne	r22,r20,585c <_dtoa_r+0x858>
    58f8:	100d883a 	mov	r6,r2
    58fc:	180f883a 	mov	r7,r3
    5900:	1009883a 	mov	r4,r2
    5904:	180b883a 	mov	r5,r3
    5908:	000c0ac0 	call	c0ac <__adddf3>
    590c:	100d883a 	mov	r6,r2
    5910:	180f883a 	mov	r7,r3
    5914:	8009883a 	mov	r4,r16
    5918:	880b883a 	mov	r5,r17
    591c:	1027883a 	mov	r19,r2
    5920:	1825883a 	mov	r18,r3
    5924:	000d3a40 	call	d3a4 <__ledf2>
    5928:	10000816 	blt	r2,zero,594c <_dtoa_r+0x948>
    592c:	980d883a 	mov	r6,r19
    5930:	900f883a 	mov	r7,r18
    5934:	8009883a 	mov	r4,r16
    5938:	880b883a 	mov	r5,r17
    593c:	000d2400 	call	d240 <__eqdf2>
    5940:	103f5a1e 	bne	r2,zero,56ac <_dtoa_r+0x6a8>
    5944:	ad40004c 	andi	r21,r21,1
    5948:	a83f5826 	beq	r21,zero,56ac <_dtoa_r+0x6a8>
    594c:	bd3fffc3 	ldbu	r20,-1(r23)
    5950:	b8bfffc4 	addi	r2,r23,-1
    5954:	1007883a 	mov	r3,r2
    5958:	01400e44 	movi	r5,57
    595c:	d9800717 	ldw	r6,28(sp)
    5960:	00000506 	br	5978 <_dtoa_r+0x974>
    5964:	18ffffc4 	addi	r3,r3,-1
    5968:	11824726 	beq	r2,r6,6288 <_dtoa_r+0x1284>
    596c:	1d000003 	ldbu	r20,0(r3)
    5970:	102f883a 	mov	r23,r2
    5974:	10bfffc4 	addi	r2,r2,-1
    5978:	a1003fcc 	andi	r4,r20,255
    597c:	2100201c 	xori	r4,r4,128
    5980:	213fe004 	addi	r4,r4,-128
    5984:	217ff726 	beq	r4,r5,5964 <_dtoa_r+0x960>
    5988:	a2000044 	addi	r8,r20,1
    598c:	12000005 	stb	r8,0(r2)
    5990:	003f4606 	br	56ac <_dtoa_r+0x6a8>
    5994:	d9000b17 	ldw	r4,44(sp)
    5998:	2000c826 	beq	r4,zero,5cbc <_dtoa_r+0xcb8>
    599c:	d9800317 	ldw	r6,12(sp)
    59a0:	00c00044 	movi	r3,1
    59a4:	1980f90e 	bge	r3,r6,5d8c <_dtoa_r+0xd88>
    59a8:	d8800617 	ldw	r2,24(sp)
    59ac:	d8c00a17 	ldw	r3,40(sp)
    59b0:	157fffc4 	addi	r21,r2,-1
    59b4:	1d41f316 	blt	r3,r21,6184 <_dtoa_r+0x1180>
    59b8:	1d6bc83a 	sub	r21,r3,r21
    59bc:	d9c00617 	ldw	r7,24(sp)
    59c0:	3802aa16 	blt	r7,zero,646c <_dtoa_r+0x1468>
    59c4:	dd000817 	ldw	r20,32(sp)
    59c8:	d8800617 	ldw	r2,24(sp)
    59cc:	d8c00817 	ldw	r3,32(sp)
    59d0:	01400044 	movi	r5,1
    59d4:	e009883a 	mov	r4,fp
    59d8:	1887883a 	add	r3,r3,r2
    59dc:	d8c00815 	stw	r3,32(sp)
    59e0:	b0ad883a 	add	r22,r22,r2
    59e4:	00082a00 	call	82a0 <__i2b>
    59e8:	1023883a 	mov	r17,r2
    59ec:	a0000826 	beq	r20,zero,5a10 <_dtoa_r+0xa0c>
    59f0:	0580070e 	bge	zero,r22,5a10 <_dtoa_r+0xa0c>
    59f4:	a005883a 	mov	r2,r20
    59f8:	b500b916 	blt	r22,r20,5ce0 <_dtoa_r+0xcdc>
    59fc:	d9000817 	ldw	r4,32(sp)
    5a00:	a0a9c83a 	sub	r20,r20,r2
    5a04:	b0adc83a 	sub	r22,r22,r2
    5a08:	2089c83a 	sub	r4,r4,r2
    5a0c:	d9000815 	stw	r4,32(sp)
    5a10:	d9800a17 	ldw	r6,40(sp)
    5a14:	0181810e 	bge	zero,r6,601c <_dtoa_r+0x1018>
    5a18:	d9c00b17 	ldw	r7,44(sp)
    5a1c:	3800b326 	beq	r7,zero,5cec <_dtoa_r+0xce8>
    5a20:	a800b226 	beq	r21,zero,5cec <_dtoa_r+0xce8>
    5a24:	880b883a 	mov	r5,r17
    5a28:	a80d883a 	mov	r6,r21
    5a2c:	e009883a 	mov	r4,fp
    5a30:	00084d40 	call	84d4 <__pow5mult>
    5a34:	d9800917 	ldw	r6,36(sp)
    5a38:	100b883a 	mov	r5,r2
    5a3c:	e009883a 	mov	r4,fp
    5a40:	1023883a 	mov	r17,r2
    5a44:	00082dc0 	call	82dc <__multiply>
    5a48:	1021883a 	mov	r16,r2
    5a4c:	d8800a17 	ldw	r2,40(sp)
    5a50:	d9400917 	ldw	r5,36(sp)
    5a54:	e009883a 	mov	r4,fp
    5a58:	1545c83a 	sub	r2,r2,r21
    5a5c:	d8800a15 	stw	r2,40(sp)
    5a60:	0007f3c0 	call	7f3c <_Bfree>
    5a64:	d8c00a17 	ldw	r3,40(sp)
    5a68:	18009f1e 	bne	r3,zero,5ce8 <_dtoa_r+0xce4>
    5a6c:	05c00044 	movi	r23,1
    5a70:	e009883a 	mov	r4,fp
    5a74:	b80b883a 	mov	r5,r23
    5a78:	00082a00 	call	82a0 <__i2b>
    5a7c:	d9000d17 	ldw	r4,52(sp)
    5a80:	102b883a 	mov	r21,r2
    5a84:	2000ce26 	beq	r4,zero,5dc0 <_dtoa_r+0xdbc>
    5a88:	200d883a 	mov	r6,r4
    5a8c:	100b883a 	mov	r5,r2
    5a90:	e009883a 	mov	r4,fp
    5a94:	00084d40 	call	84d4 <__pow5mult>
    5a98:	d9800317 	ldw	r6,12(sp)
    5a9c:	102b883a 	mov	r21,r2
    5aa0:	b981810e 	bge	r23,r6,60a8 <_dtoa_r+0x10a4>
    5aa4:	0027883a 	mov	r19,zero
    5aa8:	a8800417 	ldw	r2,16(r21)
    5aac:	05c00804 	movi	r23,32
    5ab0:	10800104 	addi	r2,r2,4
    5ab4:	1085883a 	add	r2,r2,r2
    5ab8:	1085883a 	add	r2,r2,r2
    5abc:	a885883a 	add	r2,r21,r2
    5ac0:	11000017 	ldw	r4,0(r2)
    5ac4:	00081880 	call	8188 <__hi0bits>
    5ac8:	b885c83a 	sub	r2,r23,r2
    5acc:	1585883a 	add	r2,r2,r22
    5ad0:	108007cc 	andi	r2,r2,31
    5ad4:	1000b326 	beq	r2,zero,5da4 <_dtoa_r+0xda0>
    5ad8:	00c00804 	movi	r3,32
    5adc:	1887c83a 	sub	r3,r3,r2
    5ae0:	01000104 	movi	r4,4
    5ae4:	20c2cd0e 	bge	r4,r3,661c <_dtoa_r+0x1618>
    5ae8:	00c00704 	movi	r3,28
    5aec:	1885c83a 	sub	r2,r3,r2
    5af0:	d8c00817 	ldw	r3,32(sp)
    5af4:	a0a9883a 	add	r20,r20,r2
    5af8:	b0ad883a 	add	r22,r22,r2
    5afc:	1887883a 	add	r3,r3,r2
    5b00:	d8c00815 	stw	r3,32(sp)
    5b04:	d9800817 	ldw	r6,32(sp)
    5b08:	0180040e 	bge	zero,r6,5b1c <_dtoa_r+0xb18>
    5b0c:	800b883a 	mov	r5,r16
    5b10:	e009883a 	mov	r4,fp
    5b14:	00086140 	call	8614 <__lshift>
    5b18:	1021883a 	mov	r16,r2
    5b1c:	0580050e 	bge	zero,r22,5b34 <_dtoa_r+0xb30>
    5b20:	a80b883a 	mov	r5,r21
    5b24:	b00d883a 	mov	r6,r22
    5b28:	e009883a 	mov	r4,fp
    5b2c:	00086140 	call	8614 <__lshift>
    5b30:	102b883a 	mov	r21,r2
    5b34:	d9c00e17 	ldw	r7,56(sp)
    5b38:	3801211e 	bne	r7,zero,5fc0 <_dtoa_r+0xfbc>
    5b3c:	d9800617 	ldw	r6,24(sp)
    5b40:	0181380e 	bge	zero,r6,6024 <_dtoa_r+0x1020>
    5b44:	d8c00b17 	ldw	r3,44(sp)
    5b48:	1800ab1e 	bne	r3,zero,5df8 <_dtoa_r+0xdf4>
    5b4c:	dc800717 	ldw	r18,28(sp)
    5b50:	dcc00617 	ldw	r19,24(sp)
    5b54:	9029883a 	mov	r20,r18
    5b58:	00000206 	br	5b64 <_dtoa_r+0xb60>
    5b5c:	0007f640 	call	7f64 <__multadd>
    5b60:	1021883a 	mov	r16,r2
    5b64:	a80b883a 	mov	r5,r21
    5b68:	8009883a 	mov	r4,r16
    5b6c:	0004e040 	call	4e04 <quorem>
    5b70:	10800c04 	addi	r2,r2,48
    5b74:	90800005 	stb	r2,0(r18)
    5b78:	94800044 	addi	r18,r18,1
    5b7c:	9507c83a 	sub	r3,r18,r20
    5b80:	000f883a 	mov	r7,zero
    5b84:	01800284 	movi	r6,10
    5b88:	800b883a 	mov	r5,r16
    5b8c:	e009883a 	mov	r4,fp
    5b90:	1cfff216 	blt	r3,r19,5b5c <_dtoa_r+0xb58>
    5b94:	1011883a 	mov	r8,r2
    5b98:	d8800617 	ldw	r2,24(sp)
    5b9c:	0082370e 	bge	zero,r2,647c <_dtoa_r+0x1478>
    5ba0:	d9000717 	ldw	r4,28(sp)
    5ba4:	0025883a 	mov	r18,zero
    5ba8:	20af883a 	add	r23,r4,r2
    5bac:	01800044 	movi	r6,1
    5bb0:	800b883a 	mov	r5,r16
    5bb4:	e009883a 	mov	r4,fp
    5bb8:	da001715 	stw	r8,92(sp)
    5bbc:	00086140 	call	8614 <__lshift>
    5bc0:	a80b883a 	mov	r5,r21
    5bc4:	1009883a 	mov	r4,r2
    5bc8:	d8800915 	stw	r2,36(sp)
    5bcc:	000875c0 	call	875c <__mcmp>
    5bd0:	da001717 	ldw	r8,92(sp)
    5bd4:	0081800e 	bge	zero,r2,61d8 <_dtoa_r+0x11d4>
    5bd8:	b93fffc3 	ldbu	r4,-1(r23)
    5bdc:	b8bfffc4 	addi	r2,r23,-1
    5be0:	1007883a 	mov	r3,r2
    5be4:	01800e44 	movi	r6,57
    5be8:	d9c00717 	ldw	r7,28(sp)
    5bec:	00000506 	br	5c04 <_dtoa_r+0xc00>
    5bf0:	18ffffc4 	addi	r3,r3,-1
    5bf4:	11c12326 	beq	r2,r7,6084 <_dtoa_r+0x1080>
    5bf8:	19000003 	ldbu	r4,0(r3)
    5bfc:	102f883a 	mov	r23,r2
    5c00:	10bfffc4 	addi	r2,r2,-1
    5c04:	21403fcc 	andi	r5,r4,255
    5c08:	2940201c 	xori	r5,r5,128
    5c0c:	297fe004 	addi	r5,r5,-128
    5c10:	29bff726 	beq	r5,r6,5bf0 <_dtoa_r+0xbec>
    5c14:	21000044 	addi	r4,r4,1
    5c18:	11000005 	stb	r4,0(r2)
    5c1c:	a80b883a 	mov	r5,r21
    5c20:	e009883a 	mov	r4,fp
    5c24:	0007f3c0 	call	7f3c <_Bfree>
    5c28:	883ea026 	beq	r17,zero,56ac <_dtoa_r+0x6a8>
    5c2c:	90000426 	beq	r18,zero,5c40 <_dtoa_r+0xc3c>
    5c30:	94400326 	beq	r18,r17,5c40 <_dtoa_r+0xc3c>
    5c34:	900b883a 	mov	r5,r18
    5c38:	e009883a 	mov	r4,fp
    5c3c:	0007f3c0 	call	7f3c <_Bfree>
    5c40:	880b883a 	mov	r5,r17
    5c44:	e009883a 	mov	r4,fp
    5c48:	0007f3c0 	call	7f3c <_Bfree>
    5c4c:	003e9706 	br	56ac <_dtoa_r+0x6a8>
    5c50:	01800044 	movi	r6,1
    5c54:	d9800e15 	stw	r6,56(sp)
    5c58:	003d9606 	br	52b4 <_dtoa_r+0x2b0>
    5c5c:	d8800817 	ldw	r2,32(sp)
    5c60:	d8c00517 	ldw	r3,20(sp)
    5c64:	d8000d15 	stw	zero,52(sp)
    5c68:	10c5c83a 	sub	r2,r2,r3
    5c6c:	00c9c83a 	sub	r4,zero,r3
    5c70:	d8800815 	stw	r2,32(sp)
    5c74:	d9000a15 	stw	r4,40(sp)
    5c78:	003d9706 	br	52d8 <_dtoa_r+0x2d4>
    5c7c:	05adc83a 	sub	r22,zero,r22
    5c80:	dd800815 	stw	r22,32(sp)
    5c84:	002d883a 	mov	r22,zero
    5c88:	003d8e06 	br	52c4 <_dtoa_r+0x2c0>
    5c8c:	d9000517 	ldw	r4,20(sp)
    5c90:	000e52c0 	call	e52c <__floatsidf>
    5c94:	100d883a 	mov	r6,r2
    5c98:	180f883a 	mov	r7,r3
    5c9c:	a009883a 	mov	r4,r20
    5ca0:	880b883a 	mov	r5,r17
    5ca4:	000d2400 	call	d240 <__eqdf2>
    5ca8:	103d7126 	beq	r2,zero,5270 <_dtoa_r+0x26c>
    5cac:	d9c00517 	ldw	r7,20(sp)
    5cb0:	39ffffc4 	addi	r7,r7,-1
    5cb4:	d9c00515 	stw	r7,20(sp)
    5cb8:	003d6d06 	br	5270 <_dtoa_r+0x26c>
    5cbc:	dd400a17 	ldw	r21,40(sp)
    5cc0:	dd000817 	ldw	r20,32(sp)
    5cc4:	0023883a 	mov	r17,zero
    5cc8:	003f4806 	br	59ec <_dtoa_r+0x9e8>
    5ccc:	10e3c83a 	sub	r17,r2,r3
    5cd0:	9448983a 	sll	r4,r18,r17
    5cd4:	003d3206 	br	51a0 <_dtoa_r+0x19c>
    5cd8:	d8000e15 	stw	zero,56(sp)
    5cdc:	003d7506 	br	52b4 <_dtoa_r+0x2b0>
    5ce0:	b005883a 	mov	r2,r22
    5ce4:	003f4506 	br	59fc <_dtoa_r+0x9f8>
    5ce8:	dc000915 	stw	r16,36(sp)
    5cec:	d9800a17 	ldw	r6,40(sp)
    5cf0:	d9400917 	ldw	r5,36(sp)
    5cf4:	e009883a 	mov	r4,fp
    5cf8:	00084d40 	call	84d4 <__pow5mult>
    5cfc:	1021883a 	mov	r16,r2
    5d00:	003f5a06 	br	5a6c <_dtoa_r+0xa68>
    5d04:	01c00044 	movi	r7,1
    5d08:	d9c00b15 	stw	r7,44(sp)
    5d0c:	d8802217 	ldw	r2,136(sp)
    5d10:	0081280e 	bge	zero,r2,61b4 <_dtoa_r+0x11b0>
    5d14:	100d883a 	mov	r6,r2
    5d18:	1021883a 	mov	r16,r2
    5d1c:	d8800c15 	stw	r2,48(sp)
    5d20:	d8800615 	stw	r2,24(sp)
    5d24:	003d8806 	br	5348 <_dtoa_r+0x344>
    5d28:	d8800617 	ldw	r2,24(sp)
    5d2c:	00be9b16 	blt	zero,r2,579c <_dtoa_r+0x798>
    5d30:	10010f1e 	bne	r2,zero,6170 <_dtoa_r+0x116c>
    5d34:	880b883a 	mov	r5,r17
    5d38:	000d883a 	mov	r6,zero
    5d3c:	01d00534 	movhi	r7,16404
    5d40:	8009883a 	mov	r4,r16
    5d44:	000d4980 	call	d498 <__muldf3>
    5d48:	900d883a 	mov	r6,r18
    5d4c:	980f883a 	mov	r7,r19
    5d50:	1009883a 	mov	r4,r2
    5d54:	180b883a 	mov	r5,r3
    5d58:	000d2c80 	call	d2c8 <__gedf2>
    5d5c:	002b883a 	mov	r21,zero
    5d60:	0023883a 	mov	r17,zero
    5d64:	1000bf16 	blt	r2,zero,6064 <_dtoa_r+0x1060>
    5d68:	d9802217 	ldw	r6,136(sp)
    5d6c:	ddc00717 	ldw	r23,28(sp)
    5d70:	018c303a 	nor	r6,zero,r6
    5d74:	d9800515 	stw	r6,20(sp)
    5d78:	a80b883a 	mov	r5,r21
    5d7c:	e009883a 	mov	r4,fp
    5d80:	0007f3c0 	call	7f3c <_Bfree>
    5d84:	883e4926 	beq	r17,zero,56ac <_dtoa_r+0x6a8>
    5d88:	003fad06 	br	5c40 <_dtoa_r+0xc3c>
    5d8c:	d9c01117 	ldw	r7,68(sp)
    5d90:	3801bc26 	beq	r7,zero,6484 <_dtoa_r+0x1480>
    5d94:	10810cc4 	addi	r2,r2,1075
    5d98:	dd400a17 	ldw	r21,40(sp)
    5d9c:	dd000817 	ldw	r20,32(sp)
    5da0:	003f0a06 	br	59cc <_dtoa_r+0x9c8>
    5da4:	00800704 	movi	r2,28
    5da8:	d9000817 	ldw	r4,32(sp)
    5dac:	a0a9883a 	add	r20,r20,r2
    5db0:	b0ad883a 	add	r22,r22,r2
    5db4:	2089883a 	add	r4,r4,r2
    5db8:	d9000815 	stw	r4,32(sp)
    5dbc:	003f5106 	br	5b04 <_dtoa_r+0xb00>
    5dc0:	d8c00317 	ldw	r3,12(sp)
    5dc4:	b8c1fc0e 	bge	r23,r3,65b8 <_dtoa_r+0x15b4>
    5dc8:	0027883a 	mov	r19,zero
    5dcc:	b805883a 	mov	r2,r23
    5dd0:	003f3e06 	br	5acc <_dtoa_r+0xac8>
    5dd4:	880b883a 	mov	r5,r17
    5dd8:	e009883a 	mov	r4,fp
    5ddc:	000f883a 	mov	r7,zero
    5de0:	01800284 	movi	r6,10
    5de4:	0007f640 	call	7f64 <__multadd>
    5de8:	d9000c17 	ldw	r4,48(sp)
    5dec:	1023883a 	mov	r17,r2
    5df0:	0102040e 	bge	zero,r4,6604 <_dtoa_r+0x1600>
    5df4:	d9000615 	stw	r4,24(sp)
    5df8:	0500050e 	bge	zero,r20,5e10 <_dtoa_r+0xe0c>
    5dfc:	880b883a 	mov	r5,r17
    5e00:	a00d883a 	mov	r6,r20
    5e04:	e009883a 	mov	r4,fp
    5e08:	00086140 	call	8614 <__lshift>
    5e0c:	1023883a 	mov	r17,r2
    5e10:	9801241e 	bne	r19,zero,62a4 <_dtoa_r+0x12a0>
    5e14:	8829883a 	mov	r20,r17
    5e18:	d9000617 	ldw	r4,24(sp)
    5e1c:	dcc00717 	ldw	r19,28(sp)
    5e20:	9480004c 	andi	r18,r18,1
    5e24:	20bfffc4 	addi	r2,r4,-1
    5e28:	9885883a 	add	r2,r19,r2
    5e2c:	d8800415 	stw	r2,16(sp)
    5e30:	dc800615 	stw	r18,24(sp)
    5e34:	a80b883a 	mov	r5,r21
    5e38:	8009883a 	mov	r4,r16
    5e3c:	0004e040 	call	4e04 <quorem>
    5e40:	880b883a 	mov	r5,r17
    5e44:	8009883a 	mov	r4,r16
    5e48:	102f883a 	mov	r23,r2
    5e4c:	000875c0 	call	875c <__mcmp>
    5e50:	a80b883a 	mov	r5,r21
    5e54:	a00d883a 	mov	r6,r20
    5e58:	e009883a 	mov	r4,fp
    5e5c:	102d883a 	mov	r22,r2
    5e60:	00087bc0 	call	87bc <__mdiff>
    5e64:	1007883a 	mov	r3,r2
    5e68:	10800317 	ldw	r2,12(r2)
    5e6c:	bc800c04 	addi	r18,r23,48
    5e70:	180b883a 	mov	r5,r3
    5e74:	10004e1e 	bne	r2,zero,5fb0 <_dtoa_r+0xfac>
    5e78:	8009883a 	mov	r4,r16
    5e7c:	d8c01615 	stw	r3,88(sp)
    5e80:	000875c0 	call	875c <__mcmp>
    5e84:	d8c01617 	ldw	r3,88(sp)
    5e88:	e009883a 	mov	r4,fp
    5e8c:	d8801615 	stw	r2,88(sp)
    5e90:	180b883a 	mov	r5,r3
    5e94:	0007f3c0 	call	7f3c <_Bfree>
    5e98:	d8801617 	ldw	r2,88(sp)
    5e9c:	1000041e 	bne	r2,zero,5eb0 <_dtoa_r+0xeac>
    5ea0:	d9800317 	ldw	r6,12(sp)
    5ea4:	3000021e 	bne	r6,zero,5eb0 <_dtoa_r+0xeac>
    5ea8:	d8c00617 	ldw	r3,24(sp)
    5eac:	18003726 	beq	r3,zero,5f8c <_dtoa_r+0xf88>
    5eb0:	b0002016 	blt	r22,zero,5f34 <_dtoa_r+0xf30>
    5eb4:	b000041e 	bne	r22,zero,5ec8 <_dtoa_r+0xec4>
    5eb8:	d9000317 	ldw	r4,12(sp)
    5ebc:	2000021e 	bne	r4,zero,5ec8 <_dtoa_r+0xec4>
    5ec0:	d8c00617 	ldw	r3,24(sp)
    5ec4:	18001b26 	beq	r3,zero,5f34 <_dtoa_r+0xf30>
    5ec8:	00810716 	blt	zero,r2,62e8 <_dtoa_r+0x12e4>
    5ecc:	d8c00417 	ldw	r3,16(sp)
    5ed0:	9d800044 	addi	r22,r19,1
    5ed4:	9c800005 	stb	r18,0(r19)
    5ed8:	b02f883a 	mov	r23,r22
    5edc:	98c10626 	beq	r19,r3,62f8 <_dtoa_r+0x12f4>
    5ee0:	800b883a 	mov	r5,r16
    5ee4:	000f883a 	mov	r7,zero
    5ee8:	01800284 	movi	r6,10
    5eec:	e009883a 	mov	r4,fp
    5ef0:	0007f640 	call	7f64 <__multadd>
    5ef4:	1021883a 	mov	r16,r2
    5ef8:	000f883a 	mov	r7,zero
    5efc:	01800284 	movi	r6,10
    5f00:	880b883a 	mov	r5,r17
    5f04:	e009883a 	mov	r4,fp
    5f08:	8d002526 	beq	r17,r20,5fa0 <_dtoa_r+0xf9c>
    5f0c:	0007f640 	call	7f64 <__multadd>
    5f10:	a00b883a 	mov	r5,r20
    5f14:	000f883a 	mov	r7,zero
    5f18:	01800284 	movi	r6,10
    5f1c:	e009883a 	mov	r4,fp
    5f20:	1023883a 	mov	r17,r2
    5f24:	0007f640 	call	7f64 <__multadd>
    5f28:	1029883a 	mov	r20,r2
    5f2c:	b027883a 	mov	r19,r22
    5f30:	003fc006 	br	5e34 <_dtoa_r+0xe30>
    5f34:	9011883a 	mov	r8,r18
    5f38:	00800e0e 	bge	zero,r2,5f74 <_dtoa_r+0xf70>
    5f3c:	800b883a 	mov	r5,r16
    5f40:	01800044 	movi	r6,1
    5f44:	e009883a 	mov	r4,fp
    5f48:	da001715 	stw	r8,92(sp)
    5f4c:	00086140 	call	8614 <__lshift>
    5f50:	a80b883a 	mov	r5,r21
    5f54:	1009883a 	mov	r4,r2
    5f58:	1021883a 	mov	r16,r2
    5f5c:	000875c0 	call	875c <__mcmp>
    5f60:	da001717 	ldw	r8,92(sp)
    5f64:	0081960e 	bge	zero,r2,65c0 <_dtoa_r+0x15bc>
    5f68:	00800e44 	movi	r2,57
    5f6c:	40817026 	beq	r8,r2,6530 <_dtoa_r+0x152c>
    5f70:	ba000c44 	addi	r8,r23,49
    5f74:	8825883a 	mov	r18,r17
    5f78:	9dc00044 	addi	r23,r19,1
    5f7c:	9a000005 	stb	r8,0(r19)
    5f80:	a023883a 	mov	r17,r20
    5f84:	dc000915 	stw	r16,36(sp)
    5f88:	003f2406 	br	5c1c <_dtoa_r+0xc18>
    5f8c:	00800e44 	movi	r2,57
    5f90:	9011883a 	mov	r8,r18
    5f94:	90816626 	beq	r18,r2,6530 <_dtoa_r+0x152c>
    5f98:	05bff516 	blt	zero,r22,5f70 <_dtoa_r+0xf6c>
    5f9c:	003ff506 	br	5f74 <_dtoa_r+0xf70>
    5fa0:	0007f640 	call	7f64 <__multadd>
    5fa4:	1023883a 	mov	r17,r2
    5fa8:	1029883a 	mov	r20,r2
    5fac:	003fdf06 	br	5f2c <_dtoa_r+0xf28>
    5fb0:	e009883a 	mov	r4,fp
    5fb4:	0007f3c0 	call	7f3c <_Bfree>
    5fb8:	00800044 	movi	r2,1
    5fbc:	003fbc06 	br	5eb0 <_dtoa_r+0xeac>
    5fc0:	a80b883a 	mov	r5,r21
    5fc4:	8009883a 	mov	r4,r16
    5fc8:	000875c0 	call	875c <__mcmp>
    5fcc:	103edb0e 	bge	r2,zero,5b3c <_dtoa_r+0xb38>
    5fd0:	800b883a 	mov	r5,r16
    5fd4:	000f883a 	mov	r7,zero
    5fd8:	01800284 	movi	r6,10
    5fdc:	e009883a 	mov	r4,fp
    5fe0:	0007f640 	call	7f64 <__multadd>
    5fe4:	1021883a 	mov	r16,r2
    5fe8:	d8800517 	ldw	r2,20(sp)
    5fec:	d8c00b17 	ldw	r3,44(sp)
    5ff0:	10bfffc4 	addi	r2,r2,-1
    5ff4:	d8800515 	stw	r2,20(sp)
    5ff8:	183f761e 	bne	r3,zero,5dd4 <_dtoa_r+0xdd0>
    5ffc:	d9000c17 	ldw	r4,48(sp)
    6000:	0101730e 	bge	zero,r4,65d0 <_dtoa_r+0x15cc>
    6004:	d9000615 	stw	r4,24(sp)
    6008:	003ed006 	br	5b4c <_dtoa_r+0xb48>
    600c:	00800084 	movi	r2,2
    6010:	3081861e 	bne	r6,r2,662c <_dtoa_r+0x1628>
    6014:	d8000b15 	stw	zero,44(sp)
    6018:	003f3c06 	br	5d0c <_dtoa_r+0xd08>
    601c:	dc000917 	ldw	r16,36(sp)
    6020:	003e9206 	br	5a6c <_dtoa_r+0xa68>
    6024:	d9c00317 	ldw	r7,12(sp)
    6028:	00800084 	movi	r2,2
    602c:	11fec50e 	bge	r2,r7,5b44 <_dtoa_r+0xb40>
    6030:	d9000617 	ldw	r4,24(sp)
    6034:	20013c1e 	bne	r4,zero,6528 <_dtoa_r+0x1524>
    6038:	a80b883a 	mov	r5,r21
    603c:	000f883a 	mov	r7,zero
    6040:	01800144 	movi	r6,5
    6044:	e009883a 	mov	r4,fp
    6048:	0007f640 	call	7f64 <__multadd>
    604c:	100b883a 	mov	r5,r2
    6050:	8009883a 	mov	r4,r16
    6054:	102b883a 	mov	r21,r2
    6058:	000875c0 	call	875c <__mcmp>
    605c:	dc000915 	stw	r16,36(sp)
    6060:	00bf410e 	bge	zero,r2,5d68 <_dtoa_r+0xd64>
    6064:	d9c00717 	ldw	r7,28(sp)
    6068:	00800c44 	movi	r2,49
    606c:	38800005 	stb	r2,0(r7)
    6070:	d8800517 	ldw	r2,20(sp)
    6074:	3dc00044 	addi	r23,r7,1
    6078:	10800044 	addi	r2,r2,1
    607c:	d8800515 	stw	r2,20(sp)
    6080:	003f3d06 	br	5d78 <_dtoa_r+0xd74>
    6084:	d9800517 	ldw	r6,20(sp)
    6088:	d9c00717 	ldw	r7,28(sp)
    608c:	00800c44 	movi	r2,49
    6090:	31800044 	addi	r6,r6,1
    6094:	d9800515 	stw	r6,20(sp)
    6098:	38800005 	stb	r2,0(r7)
    609c:	003edf06 	br	5c1c <_dtoa_r+0xc18>
    60a0:	d8000b15 	stw	zero,44(sp)
    60a4:	003c9f06 	br	5324 <_dtoa_r+0x320>
    60a8:	903e7e1e 	bne	r18,zero,5aa4 <_dtoa_r+0xaa0>
    60ac:	00800434 	movhi	r2,16
    60b0:	10bfffc4 	addi	r2,r2,-1
    60b4:	9884703a 	and	r2,r19,r2
    60b8:	1000ea1e 	bne	r2,zero,6464 <_dtoa_r+0x1460>
    60bc:	9cdffc2c 	andhi	r19,r19,32752
    60c0:	9800e826 	beq	r19,zero,6464 <_dtoa_r+0x1460>
    60c4:	d9c00817 	ldw	r7,32(sp)
    60c8:	b5800044 	addi	r22,r22,1
    60cc:	04c00044 	movi	r19,1
    60d0:	39c00044 	addi	r7,r7,1
    60d4:	d9c00815 	stw	r7,32(sp)
    60d8:	d8800d17 	ldw	r2,52(sp)
    60dc:	103e721e 	bne	r2,zero,5aa8 <_dtoa_r+0xaa4>
    60e0:	00800044 	movi	r2,1
    60e4:	003e7906 	br	5acc <_dtoa_r+0xac8>
    60e8:	8009883a 	mov	r4,r16
    60ec:	000e52c0 	call	e52c <__floatsidf>
    60f0:	d9800f17 	ldw	r6,60(sp)
    60f4:	d9c01017 	ldw	r7,64(sp)
    60f8:	1009883a 	mov	r4,r2
    60fc:	180b883a 	mov	r5,r3
    6100:	000d4980 	call	d498 <__muldf3>
    6104:	000d883a 	mov	r6,zero
    6108:	01d00734 	movhi	r7,16412
    610c:	1009883a 	mov	r4,r2
    6110:	180b883a 	mov	r5,r3
    6114:	000c0ac0 	call	c0ac <__adddf3>
    6118:	047f3034 	movhi	r17,64704
    611c:	1021883a 	mov	r16,r2
    6120:	1c63883a 	add	r17,r3,r17
    6124:	d9000f17 	ldw	r4,60(sp)
    6128:	d9401017 	ldw	r5,64(sp)
    612c:	000d883a 	mov	r6,zero
    6130:	01d00534 	movhi	r7,16404
    6134:	000dbb00 	call	dbb0 <__subdf3>
    6138:	800d883a 	mov	r6,r16
    613c:	880f883a 	mov	r7,r17
    6140:	1009883a 	mov	r4,r2
    6144:	180b883a 	mov	r5,r3
    6148:	102b883a 	mov	r21,r2
    614c:	1829883a 	mov	r20,r3
    6150:	000d2c80 	call	d2c8 <__gedf2>
    6154:	00806c16 	blt	zero,r2,6308 <_dtoa_r+0x1304>
    6158:	89e0003c 	xorhi	r7,r17,32768
    615c:	800d883a 	mov	r6,r16
    6160:	a809883a 	mov	r4,r21
    6164:	a00b883a 	mov	r5,r20
    6168:	000d3a40 	call	d3a4 <__ledf2>
    616c:	103d7e0e 	bge	r2,zero,5768 <_dtoa_r+0x764>
    6170:	002b883a 	mov	r21,zero
    6174:	0023883a 	mov	r17,zero
    6178:	003efb06 	br	5d68 <_dtoa_r+0xd64>
    617c:	d8800717 	ldw	r2,28(sp)
    6180:	003bd006 	br	50c4 <_dtoa_r+0xc0>
    6184:	d9000a17 	ldw	r4,40(sp)
    6188:	d9800d17 	ldw	r6,52(sp)
    618c:	dd400a15 	stw	r21,40(sp)
    6190:	a905c83a 	sub	r2,r21,r4
    6194:	308d883a 	add	r6,r6,r2
    6198:	d9800d15 	stw	r6,52(sp)
    619c:	002b883a 	mov	r21,zero
    61a0:	003e0606 	br	59bc <_dtoa_r+0x9b8>
    61a4:	9023883a 	mov	r17,r18
    61a8:	9829883a 	mov	r20,r19
    61ac:	04000084 	movi	r16,2
    61b0:	003c9206 	br	53fc <_dtoa_r+0x3f8>
    61b4:	04000044 	movi	r16,1
    61b8:	dc000c15 	stw	r16,48(sp)
    61bc:	dc000615 	stw	r16,24(sp)
    61c0:	dc002215 	stw	r16,136(sp)
    61c4:	e0001115 	stw	zero,68(fp)
    61c8:	000b883a 	mov	r5,zero
    61cc:	003c6906 	br	5374 <_dtoa_r+0x370>
    61d0:	3021883a 	mov	r16,r6
    61d4:	003ffb06 	br	61c4 <_dtoa_r+0x11c0>
    61d8:	1000021e 	bne	r2,zero,61e4 <_dtoa_r+0x11e0>
    61dc:	4200004c 	andi	r8,r8,1
    61e0:	403e7d1e 	bne	r8,zero,5bd8 <_dtoa_r+0xbd4>
    61e4:	01000c04 	movi	r4,48
    61e8:	00000106 	br	61f0 <_dtoa_r+0x11ec>
    61ec:	102f883a 	mov	r23,r2
    61f0:	b8bfffc4 	addi	r2,r23,-1
    61f4:	10c00007 	ldb	r3,0(r2)
    61f8:	193ffc26 	beq	r3,r4,61ec <_dtoa_r+0x11e8>
    61fc:	003e8706 	br	5c1c <_dtoa_r+0xc18>
    6200:	d8800517 	ldw	r2,20(sp)
    6204:	00a3c83a 	sub	r17,zero,r2
    6208:	8800a426 	beq	r17,zero,649c <_dtoa_r+0x1498>
    620c:	888003cc 	andi	r2,r17,15
    6210:	100490fa 	slli	r2,r2,3
    6214:	00c00074 	movhi	r3,1
    6218:	18c5b904 	addi	r3,r3,5860
    621c:	1885883a 	add	r2,r3,r2
    6220:	11800017 	ldw	r6,0(r2)
    6224:	11c00117 	ldw	r7,4(r2)
    6228:	9009883a 	mov	r4,r18
    622c:	980b883a 	mov	r5,r19
    6230:	8823d13a 	srai	r17,r17,4
    6234:	000d4980 	call	d498 <__muldf3>
    6238:	d8800f15 	stw	r2,60(sp)
    623c:	d8c01015 	stw	r3,64(sp)
    6240:	8800e826 	beq	r17,zero,65e4 <_dtoa_r+0x15e0>
    6244:	05000074 	movhi	r20,1
    6248:	a505af04 	addi	r20,r20,5820
    624c:	04000084 	movi	r16,2
    6250:	8980004c 	andi	r6,r17,1
    6254:	1009883a 	mov	r4,r2
    6258:	8823d07a 	srai	r17,r17,1
    625c:	180b883a 	mov	r5,r3
    6260:	30000426 	beq	r6,zero,6274 <_dtoa_r+0x1270>
    6264:	a1800017 	ldw	r6,0(r20)
    6268:	a1c00117 	ldw	r7,4(r20)
    626c:	84000044 	addi	r16,r16,1
    6270:	000d4980 	call	d498 <__muldf3>
    6274:	a5000204 	addi	r20,r20,8
    6278:	883ff51e 	bne	r17,zero,6250 <_dtoa_r+0x124c>
    627c:	d8800f15 	stw	r2,60(sp)
    6280:	d8c01015 	stw	r3,64(sp)
    6284:	003c7606 	br	5460 <_dtoa_r+0x45c>
    6288:	00c00c04 	movi	r3,48
    628c:	10c00005 	stb	r3,0(r2)
    6290:	d8c00517 	ldw	r3,20(sp)
    6294:	bd3fffc3 	ldbu	r20,-1(r23)
    6298:	18c00044 	addi	r3,r3,1
    629c:	d8c00515 	stw	r3,20(sp)
    62a0:	003db906 	br	5988 <_dtoa_r+0x984>
    62a4:	89400117 	ldw	r5,4(r17)
    62a8:	e009883a 	mov	r4,fp
    62ac:	0007e940 	call	7e94 <_Balloc>
    62b0:	89800417 	ldw	r6,16(r17)
    62b4:	89400304 	addi	r5,r17,12
    62b8:	11000304 	addi	r4,r2,12
    62bc:	31800084 	addi	r6,r6,2
    62c0:	318d883a 	add	r6,r6,r6
    62c4:	318d883a 	add	r6,r6,r6
    62c8:	1027883a 	mov	r19,r2
    62cc:	0007ac80 	call	7ac8 <memcpy>
    62d0:	01800044 	movi	r6,1
    62d4:	980b883a 	mov	r5,r19
    62d8:	e009883a 	mov	r4,fp
    62dc:	00086140 	call	8614 <__lshift>
    62e0:	1029883a 	mov	r20,r2
    62e4:	003ecc06 	br	5e18 <_dtoa_r+0xe14>
    62e8:	00800e44 	movi	r2,57
    62ec:	90809026 	beq	r18,r2,6530 <_dtoa_r+0x152c>
    62f0:	92000044 	addi	r8,r18,1
    62f4:	003f1f06 	br	5f74 <_dtoa_r+0xf70>
    62f8:	9011883a 	mov	r8,r18
    62fc:	8825883a 	mov	r18,r17
    6300:	a023883a 	mov	r17,r20
    6304:	003e2906 	br	5bac <_dtoa_r+0xba8>
    6308:	002b883a 	mov	r21,zero
    630c:	0023883a 	mov	r17,zero
    6310:	003f5406 	br	6064 <_dtoa_r+0x1060>
    6314:	61bfffc4 	addi	r6,r12,-1
    6318:	300490fa 	slli	r2,r6,3
    631c:	00c00074 	movhi	r3,1
    6320:	18c5b904 	addi	r3,r3,5860
    6324:	1885883a 	add	r2,r3,r2
    6328:	11000017 	ldw	r4,0(r2)
    632c:	11400117 	ldw	r5,4(r2)
    6330:	d8800717 	ldw	r2,28(sp)
    6334:	880f883a 	mov	r7,r17
    6338:	d9801215 	stw	r6,72(sp)
    633c:	800d883a 	mov	r6,r16
    6340:	db001615 	stw	r12,88(sp)
    6344:	15c00044 	addi	r23,r2,1
    6348:	000d4980 	call	d498 <__muldf3>
    634c:	d9401017 	ldw	r5,64(sp)
    6350:	d9000f17 	ldw	r4,60(sp)
    6354:	d8c01515 	stw	r3,84(sp)
    6358:	d8801415 	stw	r2,80(sp)
    635c:	000e4ac0 	call	e4ac <__fixdfsi>
    6360:	1009883a 	mov	r4,r2
    6364:	1021883a 	mov	r16,r2
    6368:	000e52c0 	call	e52c <__floatsidf>
    636c:	d9000f17 	ldw	r4,60(sp)
    6370:	d9401017 	ldw	r5,64(sp)
    6374:	100d883a 	mov	r6,r2
    6378:	180f883a 	mov	r7,r3
    637c:	000dbb00 	call	dbb0 <__subdf3>
    6380:	1829883a 	mov	r20,r3
    6384:	d8c00717 	ldw	r3,28(sp)
    6388:	84000c04 	addi	r16,r16,48
    638c:	1023883a 	mov	r17,r2
    6390:	1c000005 	stb	r16,0(r3)
    6394:	db001617 	ldw	r12,88(sp)
    6398:	00800044 	movi	r2,1
    639c:	60802226 	beq	r12,r2,6428 <_dtoa_r+0x1424>
    63a0:	d9c00717 	ldw	r7,28(sp)
    63a4:	8805883a 	mov	r2,r17
    63a8:	b82b883a 	mov	r21,r23
    63ac:	3b19883a 	add	r12,r7,r12
    63b0:	6023883a 	mov	r17,r12
    63b4:	a007883a 	mov	r3,r20
    63b8:	dc800f15 	stw	r18,60(sp)
    63bc:	000d883a 	mov	r6,zero
    63c0:	01d00934 	movhi	r7,16420
    63c4:	1009883a 	mov	r4,r2
    63c8:	180b883a 	mov	r5,r3
    63cc:	000d4980 	call	d498 <__muldf3>
    63d0:	180b883a 	mov	r5,r3
    63d4:	1009883a 	mov	r4,r2
    63d8:	1829883a 	mov	r20,r3
    63dc:	1025883a 	mov	r18,r2
    63e0:	000e4ac0 	call	e4ac <__fixdfsi>
    63e4:	1009883a 	mov	r4,r2
    63e8:	1021883a 	mov	r16,r2
    63ec:	000e52c0 	call	e52c <__floatsidf>
    63f0:	100d883a 	mov	r6,r2
    63f4:	180f883a 	mov	r7,r3
    63f8:	9009883a 	mov	r4,r18
    63fc:	a00b883a 	mov	r5,r20
    6400:	84000c04 	addi	r16,r16,48
    6404:	000dbb00 	call	dbb0 <__subdf3>
    6408:	ad400044 	addi	r21,r21,1
    640c:	ac3fffc5 	stb	r16,-1(r21)
    6410:	ac7fea1e 	bne	r21,r17,63bc <_dtoa_r+0x13b8>
    6414:	1023883a 	mov	r17,r2
    6418:	d8801217 	ldw	r2,72(sp)
    641c:	dc800f17 	ldw	r18,60(sp)
    6420:	1829883a 	mov	r20,r3
    6424:	b8af883a 	add	r23,r23,r2
    6428:	d9001417 	ldw	r4,80(sp)
    642c:	d9401517 	ldw	r5,84(sp)
    6430:	000d883a 	mov	r6,zero
    6434:	01cff834 	movhi	r7,16352
    6438:	000c0ac0 	call	c0ac <__adddf3>
    643c:	880d883a 	mov	r6,r17
    6440:	a00f883a 	mov	r7,r20
    6444:	1009883a 	mov	r4,r2
    6448:	180b883a 	mov	r5,r3
    644c:	000d3a40 	call	d3a4 <__ledf2>
    6450:	10003e0e 	bge	r2,zero,654c <_dtoa_r+0x1548>
    6454:	d9001317 	ldw	r4,76(sp)
    6458:	bd3fffc3 	ldbu	r20,-1(r23)
    645c:	d9000515 	stw	r4,20(sp)
    6460:	003d3b06 	br	5950 <_dtoa_r+0x94c>
    6464:	0027883a 	mov	r19,zero
    6468:	003f1b06 	br	60d8 <_dtoa_r+0x10d4>
    646c:	d8800817 	ldw	r2,32(sp)
    6470:	11e9c83a 	sub	r20,r2,r7
    6474:	0005883a 	mov	r2,zero
    6478:	003d5406 	br	59cc <_dtoa_r+0x9c8>
    647c:	00800044 	movi	r2,1
    6480:	003dc706 	br	5ba0 <_dtoa_r+0xb9c>
    6484:	d8c00217 	ldw	r3,8(sp)
    6488:	00800d84 	movi	r2,54
    648c:	dd400a17 	ldw	r21,40(sp)
    6490:	10c5c83a 	sub	r2,r2,r3
    6494:	dd000817 	ldw	r20,32(sp)
    6498:	003d4c06 	br	59cc <_dtoa_r+0x9c8>
    649c:	dc800f15 	stw	r18,60(sp)
    64a0:	dcc01015 	stw	r19,64(sp)
    64a4:	04000084 	movi	r16,2
    64a8:	003bed06 	br	5460 <_dtoa_r+0x45c>
    64ac:	d9000617 	ldw	r4,24(sp)
    64b0:	203f0d26 	beq	r4,zero,60e8 <_dtoa_r+0x10e4>
    64b4:	d9800c17 	ldw	r6,48(sp)
    64b8:	01bcab0e 	bge	zero,r6,5768 <_dtoa_r+0x764>
    64bc:	d9401017 	ldw	r5,64(sp)
    64c0:	d9000f17 	ldw	r4,60(sp)
    64c4:	000d883a 	mov	r6,zero
    64c8:	01d00934 	movhi	r7,16420
    64cc:	000d4980 	call	d498 <__muldf3>
    64d0:	81000044 	addi	r4,r16,1
    64d4:	d8800f15 	stw	r2,60(sp)
    64d8:	d8c01015 	stw	r3,64(sp)
    64dc:	000e52c0 	call	e52c <__floatsidf>
    64e0:	d9800f17 	ldw	r6,60(sp)
    64e4:	d9c01017 	ldw	r7,64(sp)
    64e8:	1009883a 	mov	r4,r2
    64ec:	180b883a 	mov	r5,r3
    64f0:	000d4980 	call	d498 <__muldf3>
    64f4:	01d00734 	movhi	r7,16412
    64f8:	000d883a 	mov	r6,zero
    64fc:	1009883a 	mov	r4,r2
    6500:	180b883a 	mov	r5,r3
    6504:	000c0ac0 	call	c0ac <__adddf3>
    6508:	d9c00517 	ldw	r7,20(sp)
    650c:	047f3034 	movhi	r17,64704
    6510:	1021883a 	mov	r16,r2
    6514:	39ffffc4 	addi	r7,r7,-1
    6518:	d9c01315 	stw	r7,76(sp)
    651c:	1c63883a 	add	r17,r3,r17
    6520:	db000c17 	ldw	r12,48(sp)
    6524:	003bea06 	br	54d0 <_dtoa_r+0x4cc>
    6528:	dc000915 	stw	r16,36(sp)
    652c:	003e0e06 	br	5d68 <_dtoa_r+0xd64>
    6530:	01000e44 	movi	r4,57
    6534:	8825883a 	mov	r18,r17
    6538:	9dc00044 	addi	r23,r19,1
    653c:	99000005 	stb	r4,0(r19)
    6540:	a023883a 	mov	r17,r20
    6544:	dc000915 	stw	r16,36(sp)
    6548:	003da406 	br	5bdc <_dtoa_r+0xbd8>
    654c:	d9801417 	ldw	r6,80(sp)
    6550:	d9c01517 	ldw	r7,84(sp)
    6554:	0009883a 	mov	r4,zero
    6558:	014ff834 	movhi	r5,16352
    655c:	000dbb00 	call	dbb0 <__subdf3>
    6560:	880d883a 	mov	r6,r17
    6564:	a00f883a 	mov	r7,r20
    6568:	1009883a 	mov	r4,r2
    656c:	180b883a 	mov	r5,r3
    6570:	000d2c80 	call	d2c8 <__gedf2>
    6574:	00bc7c0e 	bge	zero,r2,5768 <_dtoa_r+0x764>
    6578:	01000c04 	movi	r4,48
    657c:	00000106 	br	6584 <_dtoa_r+0x1580>
    6580:	102f883a 	mov	r23,r2
    6584:	b8bfffc4 	addi	r2,r23,-1
    6588:	10c00007 	ldb	r3,0(r2)
    658c:	193ffc26 	beq	r3,r4,6580 <_dtoa_r+0x157c>
    6590:	d9801317 	ldw	r6,76(sp)
    6594:	d9800515 	stw	r6,20(sp)
    6598:	003c4406 	br	56ac <_dtoa_r+0x6a8>
    659c:	d9801317 	ldw	r6,76(sp)
    65a0:	d9800515 	stw	r6,20(sp)
    65a4:	003cea06 	br	5950 <_dtoa_r+0x94c>
    65a8:	dd800f17 	ldw	r22,60(sp)
    65ac:	dcc01017 	ldw	r19,64(sp)
    65b0:	dc801217 	ldw	r18,72(sp)
    65b4:	003c6c06 	br	5768 <_dtoa_r+0x764>
    65b8:	903e031e 	bne	r18,zero,5dc8 <_dtoa_r+0xdc4>
    65bc:	003ebb06 	br	60ac <_dtoa_r+0x10a8>
    65c0:	103e6c1e 	bne	r2,zero,5f74 <_dtoa_r+0xf70>
    65c4:	4080004c 	andi	r2,r8,1
    65c8:	103e6a26 	beq	r2,zero,5f74 <_dtoa_r+0xf70>
    65cc:	003e6606 	br	5f68 <_dtoa_r+0xf64>
    65d0:	d8c00317 	ldw	r3,12(sp)
    65d4:	00800084 	movi	r2,2
    65d8:	10c02916 	blt	r2,r3,6680 <_dtoa_r+0x167c>
    65dc:	d9000c17 	ldw	r4,48(sp)
    65e0:	003e8806 	br	6004 <_dtoa_r+0x1000>
    65e4:	04000084 	movi	r16,2
    65e8:	003b9d06 	br	5460 <_dtoa_r+0x45c>
    65ec:	d9001317 	ldw	r4,76(sp)
    65f0:	d9000515 	stw	r4,20(sp)
    65f4:	003cd606 	br	5950 <_dtoa_r+0x94c>
    65f8:	d8801317 	ldw	r2,76(sp)
    65fc:	d8800515 	stw	r2,20(sp)
    6600:	003c2a06 	br	56ac <_dtoa_r+0x6a8>
    6604:	d9800317 	ldw	r6,12(sp)
    6608:	00800084 	movi	r2,2
    660c:	11801516 	blt	r2,r6,6664 <_dtoa_r+0x1660>
    6610:	d9c00c17 	ldw	r7,48(sp)
    6614:	d9c00615 	stw	r7,24(sp)
    6618:	003df706 	br	5df8 <_dtoa_r+0xdf4>
    661c:	193d3926 	beq	r3,r4,5b04 <_dtoa_r+0xb00>
    6620:	00c00f04 	movi	r3,60
    6624:	1885c83a 	sub	r2,r3,r2
    6628:	003ddf06 	br	5da8 <_dtoa_r+0xda4>
    662c:	e009883a 	mov	r4,fp
    6630:	e0001115 	stw	zero,68(fp)
    6634:	000b883a 	mov	r5,zero
    6638:	0007e940 	call	7e94 <_Balloc>
    663c:	d8800715 	stw	r2,28(sp)
    6640:	d8c00717 	ldw	r3,28(sp)
    6644:	00bfffc4 	movi	r2,-1
    6648:	01000044 	movi	r4,1
    664c:	d8800c15 	stw	r2,48(sp)
    6650:	e0c01015 	stw	r3,64(fp)
    6654:	d9000b15 	stw	r4,44(sp)
    6658:	d8800615 	stw	r2,24(sp)
    665c:	d8002215 	stw	zero,136(sp)
    6660:	003c4106 	br	5768 <_dtoa_r+0x764>
    6664:	d8c00c17 	ldw	r3,48(sp)
    6668:	d8c00615 	stw	r3,24(sp)
    666c:	003e7006 	br	6030 <_dtoa_r+0x102c>
    6670:	04400044 	movi	r17,1
    6674:	003b2006 	br	52f8 <_dtoa_r+0x2f4>
    6678:	000b883a 	mov	r5,zero
    667c:	003b3d06 	br	5374 <_dtoa_r+0x370>
    6680:	d8800c17 	ldw	r2,48(sp)
    6684:	d8800615 	stw	r2,24(sp)
    6688:	003e6906 	br	6030 <_dtoa_r+0x102c>

0000668c <__sflush_r>:
    668c:	2880030b 	ldhu	r2,12(r5)
    6690:	defffb04 	addi	sp,sp,-20
    6694:	dcc00315 	stw	r19,12(sp)
    6698:	dc400115 	stw	r17,4(sp)
    669c:	dfc00415 	stw	ra,16(sp)
    66a0:	dc800215 	stw	r18,8(sp)
    66a4:	dc000015 	stw	r16,0(sp)
    66a8:	10c0020c 	andi	r3,r2,8
    66ac:	2823883a 	mov	r17,r5
    66b0:	2027883a 	mov	r19,r4
    66b4:	1800311e 	bne	r3,zero,677c <__sflush_r+0xf0>
    66b8:	28c00117 	ldw	r3,4(r5)
    66bc:	10820014 	ori	r2,r2,2048
    66c0:	2880030d 	sth	r2,12(r5)
    66c4:	00c04b0e 	bge	zero,r3,67f4 <__sflush_r+0x168>
    66c8:	8a000a17 	ldw	r8,40(r17)
    66cc:	40002326 	beq	r8,zero,675c <__sflush_r+0xd0>
    66d0:	9c000017 	ldw	r16,0(r19)
    66d4:	10c4000c 	andi	r3,r2,4096
    66d8:	98000015 	stw	zero,0(r19)
    66dc:	18004826 	beq	r3,zero,6800 <__sflush_r+0x174>
    66e0:	89801417 	ldw	r6,80(r17)
    66e4:	10c0010c 	andi	r3,r2,4
    66e8:	18000626 	beq	r3,zero,6704 <__sflush_r+0x78>
    66ec:	88c00117 	ldw	r3,4(r17)
    66f0:	88800c17 	ldw	r2,48(r17)
    66f4:	30cdc83a 	sub	r6,r6,r3
    66f8:	10000226 	beq	r2,zero,6704 <__sflush_r+0x78>
    66fc:	88800f17 	ldw	r2,60(r17)
    6700:	308dc83a 	sub	r6,r6,r2
    6704:	89400717 	ldw	r5,28(r17)
    6708:	000f883a 	mov	r7,zero
    670c:	9809883a 	mov	r4,r19
    6710:	403ee83a 	callr	r8
    6714:	00ffffc4 	movi	r3,-1
    6718:	10c04426 	beq	r2,r3,682c <__sflush_r+0x1a0>
    671c:	88c0030b 	ldhu	r3,12(r17)
    6720:	89000417 	ldw	r4,16(r17)
    6724:	88000115 	stw	zero,4(r17)
    6728:	197dffcc 	andi	r5,r3,63487
    672c:	8940030d 	sth	r5,12(r17)
    6730:	89000015 	stw	r4,0(r17)
    6734:	18c4000c 	andi	r3,r3,4096
    6738:	18002c1e 	bne	r3,zero,67ec <__sflush_r+0x160>
    673c:	89400c17 	ldw	r5,48(r17)
    6740:	9c000015 	stw	r16,0(r19)
    6744:	28000526 	beq	r5,zero,675c <__sflush_r+0xd0>
    6748:	88801004 	addi	r2,r17,64
    674c:	28800226 	beq	r5,r2,6758 <__sflush_r+0xcc>
    6750:	9809883a 	mov	r4,r19
    6754:	0006df80 	call	6df8 <_free_r>
    6758:	88000c15 	stw	zero,48(r17)
    675c:	0005883a 	mov	r2,zero
    6760:	dfc00417 	ldw	ra,16(sp)
    6764:	dcc00317 	ldw	r19,12(sp)
    6768:	dc800217 	ldw	r18,8(sp)
    676c:	dc400117 	ldw	r17,4(sp)
    6770:	dc000017 	ldw	r16,0(sp)
    6774:	dec00504 	addi	sp,sp,20
    6778:	f800283a 	ret
    677c:	2c800417 	ldw	r18,16(r5)
    6780:	903ff626 	beq	r18,zero,675c <__sflush_r+0xd0>
    6784:	2c000017 	ldw	r16,0(r5)
    6788:	108000cc 	andi	r2,r2,3
    678c:	2c800015 	stw	r18,0(r5)
    6790:	84a1c83a 	sub	r16,r16,r18
    6794:	1000131e 	bne	r2,zero,67e4 <__sflush_r+0x158>
    6798:	28800517 	ldw	r2,20(r5)
    679c:	88800215 	stw	r2,8(r17)
    67a0:	04000316 	blt	zero,r16,67b0 <__sflush_r+0x124>
    67a4:	003fed06 	br	675c <__sflush_r+0xd0>
    67a8:	90a5883a 	add	r18,r18,r2
    67ac:	043feb0e 	bge	zero,r16,675c <__sflush_r+0xd0>
    67b0:	88800917 	ldw	r2,36(r17)
    67b4:	89400717 	ldw	r5,28(r17)
    67b8:	800f883a 	mov	r7,r16
    67bc:	900d883a 	mov	r6,r18
    67c0:	9809883a 	mov	r4,r19
    67c4:	103ee83a 	callr	r2
    67c8:	80a1c83a 	sub	r16,r16,r2
    67cc:	00bff616 	blt	zero,r2,67a8 <__sflush_r+0x11c>
    67d0:	88c0030b 	ldhu	r3,12(r17)
    67d4:	00bfffc4 	movi	r2,-1
    67d8:	18c01014 	ori	r3,r3,64
    67dc:	88c0030d 	sth	r3,12(r17)
    67e0:	003fdf06 	br	6760 <__sflush_r+0xd4>
    67e4:	0005883a 	mov	r2,zero
    67e8:	003fec06 	br	679c <__sflush_r+0x110>
    67ec:	88801415 	stw	r2,80(r17)
    67f0:	003fd206 	br	673c <__sflush_r+0xb0>
    67f4:	28c00f17 	ldw	r3,60(r5)
    67f8:	00ffb316 	blt	zero,r3,66c8 <__sflush_r+0x3c>
    67fc:	003fd706 	br	675c <__sflush_r+0xd0>
    6800:	89400717 	ldw	r5,28(r17)
    6804:	000d883a 	mov	r6,zero
    6808:	01c00044 	movi	r7,1
    680c:	9809883a 	mov	r4,r19
    6810:	403ee83a 	callr	r8
    6814:	100d883a 	mov	r6,r2
    6818:	00bfffc4 	movi	r2,-1
    681c:	30801426 	beq	r6,r2,6870 <__sflush_r+0x1e4>
    6820:	8880030b 	ldhu	r2,12(r17)
    6824:	8a000a17 	ldw	r8,40(r17)
    6828:	003fae06 	br	66e4 <__sflush_r+0x58>
    682c:	98c00017 	ldw	r3,0(r19)
    6830:	183fba26 	beq	r3,zero,671c <__sflush_r+0x90>
    6834:	01000744 	movi	r4,29
    6838:	19000626 	beq	r3,r4,6854 <__sflush_r+0x1c8>
    683c:	01000584 	movi	r4,22
    6840:	19000426 	beq	r3,r4,6854 <__sflush_r+0x1c8>
    6844:	88c0030b 	ldhu	r3,12(r17)
    6848:	18c01014 	ori	r3,r3,64
    684c:	88c0030d 	sth	r3,12(r17)
    6850:	003fc306 	br	6760 <__sflush_r+0xd4>
    6854:	8880030b 	ldhu	r2,12(r17)
    6858:	88c00417 	ldw	r3,16(r17)
    685c:	88000115 	stw	zero,4(r17)
    6860:	10bdffcc 	andi	r2,r2,63487
    6864:	8880030d 	sth	r2,12(r17)
    6868:	88c00015 	stw	r3,0(r17)
    686c:	003fb306 	br	673c <__sflush_r+0xb0>
    6870:	98800017 	ldw	r2,0(r19)
    6874:	103fea26 	beq	r2,zero,6820 <__sflush_r+0x194>
    6878:	00c00744 	movi	r3,29
    687c:	10c00226 	beq	r2,r3,6888 <__sflush_r+0x1fc>
    6880:	00c00584 	movi	r3,22
    6884:	10c0031e 	bne	r2,r3,6894 <__sflush_r+0x208>
    6888:	9c000015 	stw	r16,0(r19)
    688c:	0005883a 	mov	r2,zero
    6890:	003fb306 	br	6760 <__sflush_r+0xd4>
    6894:	88c0030b 	ldhu	r3,12(r17)
    6898:	3005883a 	mov	r2,r6
    689c:	18c01014 	ori	r3,r3,64
    68a0:	88c0030d 	sth	r3,12(r17)
    68a4:	003fae06 	br	6760 <__sflush_r+0xd4>

000068a8 <_fflush_r>:
    68a8:	defffd04 	addi	sp,sp,-12
    68ac:	dc000115 	stw	r16,4(sp)
    68b0:	dfc00215 	stw	ra,8(sp)
    68b4:	2021883a 	mov	r16,r4
    68b8:	20000226 	beq	r4,zero,68c4 <_fflush_r+0x1c>
    68bc:	20800e17 	ldw	r2,56(r4)
    68c0:	10000c26 	beq	r2,zero,68f4 <_fflush_r+0x4c>
    68c4:	2880030f 	ldh	r2,12(r5)
    68c8:	1000051e 	bne	r2,zero,68e0 <_fflush_r+0x38>
    68cc:	0005883a 	mov	r2,zero
    68d0:	dfc00217 	ldw	ra,8(sp)
    68d4:	dc000117 	ldw	r16,4(sp)
    68d8:	dec00304 	addi	sp,sp,12
    68dc:	f800283a 	ret
    68e0:	8009883a 	mov	r4,r16
    68e4:	dfc00217 	ldw	ra,8(sp)
    68e8:	dc000117 	ldw	r16,4(sp)
    68ec:	dec00304 	addi	sp,sp,12
    68f0:	000668c1 	jmpi	668c <__sflush_r>
    68f4:	d9400015 	stw	r5,0(sp)
    68f8:	0006c840 	call	6c84 <__sinit>
    68fc:	d9400017 	ldw	r5,0(sp)
    6900:	003ff006 	br	68c4 <_fflush_r+0x1c>

00006904 <fflush>:
    6904:	20000526 	beq	r4,zero,691c <fflush+0x18>
    6908:	00800074 	movhi	r2,1
    690c:	108d2c04 	addi	r2,r2,13488
    6910:	200b883a 	mov	r5,r4
    6914:	11000017 	ldw	r4,0(r2)
    6918:	00068a81 	jmpi	68a8 <_fflush_r>
    691c:	00800074 	movhi	r2,1
    6920:	108d2b04 	addi	r2,r2,13484
    6924:	11000017 	ldw	r4,0(r2)
    6928:	01400034 	movhi	r5,0
    692c:	295a2a04 	addi	r5,r5,26792
    6930:	00076881 	jmpi	7688 <_fwalk_reent>

00006934 <__fp_unlock>:
    6934:	0005883a 	mov	r2,zero
    6938:	f800283a 	ret

0000693c <_cleanup_r>:
    693c:	01400074 	movhi	r5,1
    6940:	296b9004 	addi	r5,r5,-20928
    6944:	00076881 	jmpi	7688 <_fwalk_reent>

00006948 <__sinit.part.1>:
    6948:	defff704 	addi	sp,sp,-36
    694c:	00c00034 	movhi	r3,0
    6950:	dfc00815 	stw	ra,32(sp)
    6954:	ddc00715 	stw	r23,28(sp)
    6958:	dd800615 	stw	r22,24(sp)
    695c:	dd400515 	stw	r21,20(sp)
    6960:	dd000415 	stw	r20,16(sp)
    6964:	dcc00315 	stw	r19,12(sp)
    6968:	dc800215 	stw	r18,8(sp)
    696c:	dc400115 	stw	r17,4(sp)
    6970:	dc000015 	stw	r16,0(sp)
    6974:	18da4f04 	addi	r3,r3,26940
    6978:	24000117 	ldw	r16,4(r4)
    697c:	20c00f15 	stw	r3,60(r4)
    6980:	2080bb04 	addi	r2,r4,748
    6984:	00c000c4 	movi	r3,3
    6988:	20c0b915 	stw	r3,740(r4)
    698c:	2080ba15 	stw	r2,744(r4)
    6990:	2000b815 	stw	zero,736(r4)
    6994:	05c00204 	movi	r23,8
    6998:	00800104 	movi	r2,4
    699c:	2025883a 	mov	r18,r4
    69a0:	b80d883a 	mov	r6,r23
    69a4:	81001704 	addi	r4,r16,92
    69a8:	000b883a 	mov	r5,zero
    69ac:	80000015 	stw	zero,0(r16)
    69b0:	80000115 	stw	zero,4(r16)
    69b4:	80000215 	stw	zero,8(r16)
    69b8:	8080030d 	sth	r2,12(r16)
    69bc:	80001915 	stw	zero,100(r16)
    69c0:	8000038d 	sth	zero,14(r16)
    69c4:	80000415 	stw	zero,16(r16)
    69c8:	80000515 	stw	zero,20(r16)
    69cc:	80000615 	stw	zero,24(r16)
    69d0:	0007d6c0 	call	7d6c <memset>
    69d4:	05800074 	movhi	r22,1
    69d8:	94400217 	ldw	r17,8(r18)
    69dc:	05400074 	movhi	r21,1
    69e0:	05000074 	movhi	r20,1
    69e4:	04c00074 	movhi	r19,1
    69e8:	b5a51a04 	addi	r22,r22,-27544
    69ec:	ad653104 	addi	r21,r21,-27452
    69f0:	a5255004 	addi	r20,r20,-27328
    69f4:	9ce56704 	addi	r19,r19,-27236
    69f8:	85800815 	stw	r22,32(r16)
    69fc:	85400915 	stw	r21,36(r16)
    6a00:	85000a15 	stw	r20,40(r16)
    6a04:	84c00b15 	stw	r19,44(r16)
    6a08:	84000715 	stw	r16,28(r16)
    6a0c:	00800284 	movi	r2,10
    6a10:	8880030d 	sth	r2,12(r17)
    6a14:	00800044 	movi	r2,1
    6a18:	b80d883a 	mov	r6,r23
    6a1c:	89001704 	addi	r4,r17,92
    6a20:	000b883a 	mov	r5,zero
    6a24:	88000015 	stw	zero,0(r17)
    6a28:	88000115 	stw	zero,4(r17)
    6a2c:	88000215 	stw	zero,8(r17)
    6a30:	88001915 	stw	zero,100(r17)
    6a34:	8880038d 	sth	r2,14(r17)
    6a38:	88000415 	stw	zero,16(r17)
    6a3c:	88000515 	stw	zero,20(r17)
    6a40:	88000615 	stw	zero,24(r17)
    6a44:	0007d6c0 	call	7d6c <memset>
    6a48:	94000317 	ldw	r16,12(r18)
    6a4c:	00800484 	movi	r2,18
    6a50:	8c400715 	stw	r17,28(r17)
    6a54:	8d800815 	stw	r22,32(r17)
    6a58:	8d400915 	stw	r21,36(r17)
    6a5c:	8d000a15 	stw	r20,40(r17)
    6a60:	8cc00b15 	stw	r19,44(r17)
    6a64:	8080030d 	sth	r2,12(r16)
    6a68:	00800084 	movi	r2,2
    6a6c:	80000015 	stw	zero,0(r16)
    6a70:	80000115 	stw	zero,4(r16)
    6a74:	80000215 	stw	zero,8(r16)
    6a78:	80001915 	stw	zero,100(r16)
    6a7c:	8080038d 	sth	r2,14(r16)
    6a80:	80000415 	stw	zero,16(r16)
    6a84:	80000515 	stw	zero,20(r16)
    6a88:	80000615 	stw	zero,24(r16)
    6a8c:	b80d883a 	mov	r6,r23
    6a90:	000b883a 	mov	r5,zero
    6a94:	81001704 	addi	r4,r16,92
    6a98:	0007d6c0 	call	7d6c <memset>
    6a9c:	00800044 	movi	r2,1
    6aa0:	84000715 	stw	r16,28(r16)
    6aa4:	85800815 	stw	r22,32(r16)
    6aa8:	85400915 	stw	r21,36(r16)
    6aac:	85000a15 	stw	r20,40(r16)
    6ab0:	84c00b15 	stw	r19,44(r16)
    6ab4:	90800e15 	stw	r2,56(r18)
    6ab8:	dfc00817 	ldw	ra,32(sp)
    6abc:	ddc00717 	ldw	r23,28(sp)
    6ac0:	dd800617 	ldw	r22,24(sp)
    6ac4:	dd400517 	ldw	r21,20(sp)
    6ac8:	dd000417 	ldw	r20,16(sp)
    6acc:	dcc00317 	ldw	r19,12(sp)
    6ad0:	dc800217 	ldw	r18,8(sp)
    6ad4:	dc400117 	ldw	r17,4(sp)
    6ad8:	dc000017 	ldw	r16,0(sp)
    6adc:	dec00904 	addi	sp,sp,36
    6ae0:	f800283a 	ret

00006ae4 <__fp_lock>:
    6ae4:	0005883a 	mov	r2,zero
    6ae8:	f800283a 	ret

00006aec <__sfmoreglue>:
    6aec:	defffc04 	addi	sp,sp,-16
    6af0:	dc400115 	stw	r17,4(sp)
    6af4:	2c7fffc4 	addi	r17,r5,-1
    6af8:	8c401a24 	muli	r17,r17,104
    6afc:	dc800215 	stw	r18,8(sp)
    6b00:	2825883a 	mov	r18,r5
    6b04:	89401d04 	addi	r5,r17,116
    6b08:	dc000015 	stw	r16,0(sp)
    6b0c:	dfc00315 	stw	ra,12(sp)
    6b10:	0001fa80 	call	1fa8 <_malloc_r>
    6b14:	1021883a 	mov	r16,r2
    6b18:	10000726 	beq	r2,zero,6b38 <__sfmoreglue+0x4c>
    6b1c:	11000304 	addi	r4,r2,12
    6b20:	10000015 	stw	zero,0(r2)
    6b24:	14800115 	stw	r18,4(r2)
    6b28:	11000215 	stw	r4,8(r2)
    6b2c:	89801a04 	addi	r6,r17,104
    6b30:	000b883a 	mov	r5,zero
    6b34:	0007d6c0 	call	7d6c <memset>
    6b38:	8005883a 	mov	r2,r16
    6b3c:	dfc00317 	ldw	ra,12(sp)
    6b40:	dc800217 	ldw	r18,8(sp)
    6b44:	dc400117 	ldw	r17,4(sp)
    6b48:	dc000017 	ldw	r16,0(sp)
    6b4c:	dec00404 	addi	sp,sp,16
    6b50:	f800283a 	ret

00006b54 <__sfp>:
    6b54:	defffb04 	addi	sp,sp,-20
    6b58:	dc000015 	stw	r16,0(sp)
    6b5c:	04000074 	movhi	r16,1
    6b60:	840d2b04 	addi	r16,r16,13484
    6b64:	dcc00315 	stw	r19,12(sp)
    6b68:	2027883a 	mov	r19,r4
    6b6c:	81000017 	ldw	r4,0(r16)
    6b70:	dfc00415 	stw	ra,16(sp)
    6b74:	dc800215 	stw	r18,8(sp)
    6b78:	20800e17 	ldw	r2,56(r4)
    6b7c:	dc400115 	stw	r17,4(sp)
    6b80:	1000021e 	bne	r2,zero,6b8c <__sfp+0x38>
    6b84:	00069480 	call	6948 <__sinit.part.1>
    6b88:	81000017 	ldw	r4,0(r16)
    6b8c:	2480b804 	addi	r18,r4,736
    6b90:	047fffc4 	movi	r17,-1
    6b94:	91000117 	ldw	r4,4(r18)
    6b98:	94000217 	ldw	r16,8(r18)
    6b9c:	213fffc4 	addi	r4,r4,-1
    6ba0:	20000a16 	blt	r4,zero,6bcc <__sfp+0x78>
    6ba4:	8080030f 	ldh	r2,12(r16)
    6ba8:	10000c26 	beq	r2,zero,6bdc <__sfp+0x88>
    6bac:	80c01d04 	addi	r3,r16,116
    6bb0:	00000206 	br	6bbc <__sfp+0x68>
    6bb4:	18bfe60f 	ldh	r2,-104(r3)
    6bb8:	10000826 	beq	r2,zero,6bdc <__sfp+0x88>
    6bbc:	213fffc4 	addi	r4,r4,-1
    6bc0:	1c3ffd04 	addi	r16,r3,-12
    6bc4:	18c01a04 	addi	r3,r3,104
    6bc8:	247ffa1e 	bne	r4,r17,6bb4 <__sfp+0x60>
    6bcc:	90800017 	ldw	r2,0(r18)
    6bd0:	10001d26 	beq	r2,zero,6c48 <__sfp+0xf4>
    6bd4:	1025883a 	mov	r18,r2
    6bd8:	003fee06 	br	6b94 <__sfp+0x40>
    6bdc:	00bfffc4 	movi	r2,-1
    6be0:	8080038d 	sth	r2,14(r16)
    6be4:	00800044 	movi	r2,1
    6be8:	8080030d 	sth	r2,12(r16)
    6bec:	80001915 	stw	zero,100(r16)
    6bf0:	80000015 	stw	zero,0(r16)
    6bf4:	80000215 	stw	zero,8(r16)
    6bf8:	80000115 	stw	zero,4(r16)
    6bfc:	80000415 	stw	zero,16(r16)
    6c00:	80000515 	stw	zero,20(r16)
    6c04:	80000615 	stw	zero,24(r16)
    6c08:	01800204 	movi	r6,8
    6c0c:	000b883a 	mov	r5,zero
    6c10:	81001704 	addi	r4,r16,92
    6c14:	0007d6c0 	call	7d6c <memset>
    6c18:	8005883a 	mov	r2,r16
    6c1c:	80000c15 	stw	zero,48(r16)
    6c20:	80000d15 	stw	zero,52(r16)
    6c24:	80001115 	stw	zero,68(r16)
    6c28:	80001215 	stw	zero,72(r16)
    6c2c:	dfc00417 	ldw	ra,16(sp)
    6c30:	dcc00317 	ldw	r19,12(sp)
    6c34:	dc800217 	ldw	r18,8(sp)
    6c38:	dc400117 	ldw	r17,4(sp)
    6c3c:	dc000017 	ldw	r16,0(sp)
    6c40:	dec00504 	addi	sp,sp,20
    6c44:	f800283a 	ret
    6c48:	01400104 	movi	r5,4
    6c4c:	9809883a 	mov	r4,r19
    6c50:	0006aec0 	call	6aec <__sfmoreglue>
    6c54:	90800015 	stw	r2,0(r18)
    6c58:	103fde1e 	bne	r2,zero,6bd4 <__sfp+0x80>
    6c5c:	00800304 	movi	r2,12
    6c60:	98800015 	stw	r2,0(r19)
    6c64:	0005883a 	mov	r2,zero
    6c68:	003ff006 	br	6c2c <__sfp+0xd8>

00006c6c <_cleanup>:
    6c6c:	00800074 	movhi	r2,1
    6c70:	108d2b04 	addi	r2,r2,13484
    6c74:	11000017 	ldw	r4,0(r2)
    6c78:	01400074 	movhi	r5,1
    6c7c:	296b9004 	addi	r5,r5,-20928
    6c80:	00076881 	jmpi	7688 <_fwalk_reent>

00006c84 <__sinit>:
    6c84:	20800e17 	ldw	r2,56(r4)
    6c88:	10000126 	beq	r2,zero,6c90 <__sinit+0xc>
    6c8c:	f800283a 	ret
    6c90:	00069481 	jmpi	6948 <__sinit.part.1>

00006c94 <__sfp_lock_acquire>:
    6c94:	f800283a 	ret

00006c98 <__sfp_lock_release>:
    6c98:	f800283a 	ret

00006c9c <__sinit_lock_acquire>:
    6c9c:	f800283a 	ret

00006ca0 <__sinit_lock_release>:
    6ca0:	f800283a 	ret

00006ca4 <__fp_lock_all>:
    6ca4:	00800074 	movhi	r2,1
    6ca8:	108d2c04 	addi	r2,r2,13488
    6cac:	11000017 	ldw	r4,0(r2)
    6cb0:	01400034 	movhi	r5,0
    6cb4:	295ab904 	addi	r5,r5,27364
    6cb8:	00075c41 	jmpi	75c4 <_fwalk>

00006cbc <__fp_unlock_all>:
    6cbc:	00800074 	movhi	r2,1
    6cc0:	108d2c04 	addi	r2,r2,13488
    6cc4:	11000017 	ldw	r4,0(r2)
    6cc8:	01400034 	movhi	r5,0
    6ccc:	295a4d04 	addi	r5,r5,26932
    6cd0:	00075c41 	jmpi	75c4 <_fwalk>

00006cd4 <_malloc_trim_r>:
    6cd4:	defffb04 	addi	sp,sp,-20
    6cd8:	dcc00315 	stw	r19,12(sp)
    6cdc:	04c00074 	movhi	r19,1
    6ce0:	dc800215 	stw	r18,8(sp)
    6ce4:	dc400115 	stw	r17,4(sp)
    6ce8:	dc000015 	stw	r16,0(sp)
    6cec:	dfc00415 	stw	ra,16(sp)
    6cf0:	2821883a 	mov	r16,r5
    6cf4:	9cc67e04 	addi	r19,r19,6648
    6cf8:	2025883a 	mov	r18,r4
    6cfc:	000ec900 	call	ec90 <__malloc_lock>
    6d00:	98800217 	ldw	r2,8(r19)
    6d04:	14400117 	ldw	r17,4(r2)
    6d08:	00bfff04 	movi	r2,-4
    6d0c:	88a2703a 	and	r17,r17,r2
    6d10:	8c21c83a 	sub	r16,r17,r16
    6d14:	8403fbc4 	addi	r16,r16,4079
    6d18:	8020d33a 	srli	r16,r16,12
    6d1c:	0083ffc4 	movi	r2,4095
    6d20:	843fffc4 	addi	r16,r16,-1
    6d24:	8020933a 	slli	r16,r16,12
    6d28:	1400060e 	bge	r2,r16,6d44 <_malloc_trim_r+0x70>
    6d2c:	000b883a 	mov	r5,zero
    6d30:	9009883a 	mov	r4,r18
    6d34:	00028f40 	call	28f4 <_sbrk_r>
    6d38:	98c00217 	ldw	r3,8(r19)
    6d3c:	1c47883a 	add	r3,r3,r17
    6d40:	10c00a26 	beq	r2,r3,6d6c <_malloc_trim_r+0x98>
    6d44:	9009883a 	mov	r4,r18
    6d48:	000ecb40 	call	ecb4 <__malloc_unlock>
    6d4c:	0005883a 	mov	r2,zero
    6d50:	dfc00417 	ldw	ra,16(sp)
    6d54:	dcc00317 	ldw	r19,12(sp)
    6d58:	dc800217 	ldw	r18,8(sp)
    6d5c:	dc400117 	ldw	r17,4(sp)
    6d60:	dc000017 	ldw	r16,0(sp)
    6d64:	dec00504 	addi	sp,sp,20
    6d68:	f800283a 	ret
    6d6c:	040bc83a 	sub	r5,zero,r16
    6d70:	9009883a 	mov	r4,r18
    6d74:	00028f40 	call	28f4 <_sbrk_r>
    6d78:	00ffffc4 	movi	r3,-1
    6d7c:	10c00d26 	beq	r2,r3,6db4 <_malloc_trim_r+0xe0>
    6d80:	00c00074 	movhi	r3,1
    6d84:	18d45a04 	addi	r3,r3,20840
    6d88:	18800017 	ldw	r2,0(r3)
    6d8c:	99000217 	ldw	r4,8(r19)
    6d90:	8c23c83a 	sub	r17,r17,r16
    6d94:	8c400054 	ori	r17,r17,1
    6d98:	1421c83a 	sub	r16,r2,r16
    6d9c:	24400115 	stw	r17,4(r4)
    6da0:	9009883a 	mov	r4,r18
    6da4:	1c000015 	stw	r16,0(r3)
    6da8:	000ecb40 	call	ecb4 <__malloc_unlock>
    6dac:	00800044 	movi	r2,1
    6db0:	003fe706 	br	6d50 <_malloc_trim_r+0x7c>
    6db4:	000b883a 	mov	r5,zero
    6db8:	9009883a 	mov	r4,r18
    6dbc:	00028f40 	call	28f4 <_sbrk_r>
    6dc0:	99000217 	ldw	r4,8(r19)
    6dc4:	014003c4 	movi	r5,15
    6dc8:	1107c83a 	sub	r3,r2,r4
    6dcc:	28ffdd0e 	bge	r5,r3,6d44 <_malloc_trim_r+0x70>
    6dd0:	01400074 	movhi	r5,1
    6dd4:	294d2904 	addi	r5,r5,13476
    6dd8:	29400017 	ldw	r5,0(r5)
    6ddc:	18c00054 	ori	r3,r3,1
    6de0:	20c00115 	stw	r3,4(r4)
    6de4:	00c00074 	movhi	r3,1
    6de8:	1145c83a 	sub	r2,r2,r5
    6dec:	18d45a04 	addi	r3,r3,20840
    6df0:	18800015 	stw	r2,0(r3)
    6df4:	003fd306 	br	6d44 <_malloc_trim_r+0x70>

00006df8 <_free_r>:
    6df8:	28004126 	beq	r5,zero,6f00 <_free_r+0x108>
    6dfc:	defffd04 	addi	sp,sp,-12
    6e00:	dc400115 	stw	r17,4(sp)
    6e04:	dc000015 	stw	r16,0(sp)
    6e08:	2023883a 	mov	r17,r4
    6e0c:	2821883a 	mov	r16,r5
    6e10:	dfc00215 	stw	ra,8(sp)
    6e14:	000ec900 	call	ec90 <__malloc_lock>
    6e18:	81ffff17 	ldw	r7,-4(r16)
    6e1c:	00bfff84 	movi	r2,-2
    6e20:	01000074 	movhi	r4,1
    6e24:	81bffe04 	addi	r6,r16,-8
    6e28:	3884703a 	and	r2,r7,r2
    6e2c:	21067e04 	addi	r4,r4,6648
    6e30:	308b883a 	add	r5,r6,r2
    6e34:	2a400117 	ldw	r9,4(r5)
    6e38:	22000217 	ldw	r8,8(r4)
    6e3c:	00ffff04 	movi	r3,-4
    6e40:	48c6703a 	and	r3,r9,r3
    6e44:	2a005726 	beq	r5,r8,6fa4 <_free_r+0x1ac>
    6e48:	28c00115 	stw	r3,4(r5)
    6e4c:	39c0004c 	andi	r7,r7,1
    6e50:	3800091e 	bne	r7,zero,6e78 <_free_r+0x80>
    6e54:	823ffe17 	ldw	r8,-8(r16)
    6e58:	22400204 	addi	r9,r4,8
    6e5c:	320dc83a 	sub	r6,r6,r8
    6e60:	31c00217 	ldw	r7,8(r6)
    6e64:	1205883a 	add	r2,r2,r8
    6e68:	3a406526 	beq	r7,r9,7000 <_free_r+0x208>
    6e6c:	32000317 	ldw	r8,12(r6)
    6e70:	3a000315 	stw	r8,12(r7)
    6e74:	41c00215 	stw	r7,8(r8)
    6e78:	28cf883a 	add	r7,r5,r3
    6e7c:	39c00117 	ldw	r7,4(r7)
    6e80:	39c0004c 	andi	r7,r7,1
    6e84:	38003a26 	beq	r7,zero,6f70 <_free_r+0x178>
    6e88:	10c00054 	ori	r3,r2,1
    6e8c:	30c00115 	stw	r3,4(r6)
    6e90:	3087883a 	add	r3,r6,r2
    6e94:	18800015 	stw	r2,0(r3)
    6e98:	00c07fc4 	movi	r3,511
    6e9c:	18801936 	bltu	r3,r2,6f04 <_free_r+0x10c>
    6ea0:	1004d0fa 	srli	r2,r2,3
    6ea4:	01c00044 	movi	r7,1
    6ea8:	21400117 	ldw	r5,4(r4)
    6eac:	10c00044 	addi	r3,r2,1
    6eb0:	18c7883a 	add	r3,r3,r3
    6eb4:	1005d0ba 	srai	r2,r2,2
    6eb8:	18c7883a 	add	r3,r3,r3
    6ebc:	18c7883a 	add	r3,r3,r3
    6ec0:	1907883a 	add	r3,r3,r4
    6ec4:	3884983a 	sll	r2,r7,r2
    6ec8:	19c00017 	ldw	r7,0(r3)
    6ecc:	1a3ffe04 	addi	r8,r3,-8
    6ed0:	1144b03a 	or	r2,r2,r5
    6ed4:	32000315 	stw	r8,12(r6)
    6ed8:	31c00215 	stw	r7,8(r6)
    6edc:	20800115 	stw	r2,4(r4)
    6ee0:	19800015 	stw	r6,0(r3)
    6ee4:	39800315 	stw	r6,12(r7)
    6ee8:	8809883a 	mov	r4,r17
    6eec:	dfc00217 	ldw	ra,8(sp)
    6ef0:	dc400117 	ldw	r17,4(sp)
    6ef4:	dc000017 	ldw	r16,0(sp)
    6ef8:	dec00304 	addi	sp,sp,12
    6efc:	000ecb41 	jmpi	ecb4 <__malloc_unlock>
    6f00:	f800283a 	ret
    6f04:	100ad27a 	srli	r5,r2,9
    6f08:	00c00104 	movi	r3,4
    6f0c:	19404a36 	bltu	r3,r5,7038 <_free_r+0x240>
    6f10:	100ad1ba 	srli	r5,r2,6
    6f14:	28c00e44 	addi	r3,r5,57
    6f18:	18c7883a 	add	r3,r3,r3
    6f1c:	29400e04 	addi	r5,r5,56
    6f20:	18c7883a 	add	r3,r3,r3
    6f24:	18c7883a 	add	r3,r3,r3
    6f28:	1909883a 	add	r4,r3,r4
    6f2c:	20c00017 	ldw	r3,0(r4)
    6f30:	01c00074 	movhi	r7,1
    6f34:	213ffe04 	addi	r4,r4,-8
    6f38:	39c67e04 	addi	r7,r7,6648
    6f3c:	20c04426 	beq	r4,r3,7050 <_free_r+0x258>
    6f40:	01ffff04 	movi	r7,-4
    6f44:	19400117 	ldw	r5,4(r3)
    6f48:	29ca703a 	and	r5,r5,r7
    6f4c:	1140022e 	bgeu	r2,r5,6f58 <_free_r+0x160>
    6f50:	18c00217 	ldw	r3,8(r3)
    6f54:	20fffb1e 	bne	r4,r3,6f44 <_free_r+0x14c>
    6f58:	19000317 	ldw	r4,12(r3)
    6f5c:	31000315 	stw	r4,12(r6)
    6f60:	30c00215 	stw	r3,8(r6)
    6f64:	21800215 	stw	r6,8(r4)
    6f68:	19800315 	stw	r6,12(r3)
    6f6c:	003fde06 	br	6ee8 <_free_r+0xf0>
    6f70:	29c00217 	ldw	r7,8(r5)
    6f74:	10c5883a 	add	r2,r2,r3
    6f78:	00c00074 	movhi	r3,1
    6f7c:	18c68004 	addi	r3,r3,6656
    6f80:	38c03b26 	beq	r7,r3,7070 <_free_r+0x278>
    6f84:	2a000317 	ldw	r8,12(r5)
    6f88:	11400054 	ori	r5,r2,1
    6f8c:	3087883a 	add	r3,r6,r2
    6f90:	3a000315 	stw	r8,12(r7)
    6f94:	41c00215 	stw	r7,8(r8)
    6f98:	31400115 	stw	r5,4(r6)
    6f9c:	18800015 	stw	r2,0(r3)
    6fa0:	003fbd06 	br	6e98 <_free_r+0xa0>
    6fa4:	39c0004c 	andi	r7,r7,1
    6fa8:	10c5883a 	add	r2,r2,r3
    6fac:	3800071e 	bne	r7,zero,6fcc <_free_r+0x1d4>
    6fb0:	81fffe17 	ldw	r7,-8(r16)
    6fb4:	31cdc83a 	sub	r6,r6,r7
    6fb8:	30c00317 	ldw	r3,12(r6)
    6fbc:	31400217 	ldw	r5,8(r6)
    6fc0:	11c5883a 	add	r2,r2,r7
    6fc4:	28c00315 	stw	r3,12(r5)
    6fc8:	19400215 	stw	r5,8(r3)
    6fcc:	10c00054 	ori	r3,r2,1
    6fd0:	30c00115 	stw	r3,4(r6)
    6fd4:	00c00074 	movhi	r3,1
    6fd8:	18cd2a04 	addi	r3,r3,13480
    6fdc:	18c00017 	ldw	r3,0(r3)
    6fe0:	21800215 	stw	r6,8(r4)
    6fe4:	10ffc036 	bltu	r2,r3,6ee8 <_free_r+0xf0>
    6fe8:	00800074 	movhi	r2,1
    6fec:	10944c04 	addi	r2,r2,20784
    6ff0:	11400017 	ldw	r5,0(r2)
    6ff4:	8809883a 	mov	r4,r17
    6ff8:	0006cd40 	call	6cd4 <_malloc_trim_r>
    6ffc:	003fba06 	br	6ee8 <_free_r+0xf0>
    7000:	28c9883a 	add	r4,r5,r3
    7004:	21000117 	ldw	r4,4(r4)
    7008:	2100004c 	andi	r4,r4,1
    700c:	2000391e 	bne	r4,zero,70f4 <_free_r+0x2fc>
    7010:	29c00217 	ldw	r7,8(r5)
    7014:	29000317 	ldw	r4,12(r5)
    7018:	1885883a 	add	r2,r3,r2
    701c:	10c00054 	ori	r3,r2,1
    7020:	39000315 	stw	r4,12(r7)
    7024:	21c00215 	stw	r7,8(r4)
    7028:	30c00115 	stw	r3,4(r6)
    702c:	308d883a 	add	r6,r6,r2
    7030:	30800015 	stw	r2,0(r6)
    7034:	003fac06 	br	6ee8 <_free_r+0xf0>
    7038:	00c00504 	movi	r3,20
    703c:	19401536 	bltu	r3,r5,7094 <_free_r+0x29c>
    7040:	28c01704 	addi	r3,r5,92
    7044:	18c7883a 	add	r3,r3,r3
    7048:	294016c4 	addi	r5,r5,91
    704c:	003fb406 	br	6f20 <_free_r+0x128>
    7050:	280bd0ba 	srai	r5,r5,2
    7054:	00c00044 	movi	r3,1
    7058:	38800117 	ldw	r2,4(r7)
    705c:	194a983a 	sll	r5,r3,r5
    7060:	2007883a 	mov	r3,r4
    7064:	2884b03a 	or	r2,r5,r2
    7068:	38800115 	stw	r2,4(r7)
    706c:	003fbb06 	br	6f5c <_free_r+0x164>
    7070:	21800515 	stw	r6,20(r4)
    7074:	21800415 	stw	r6,16(r4)
    7078:	10c00054 	ori	r3,r2,1
    707c:	31c00315 	stw	r7,12(r6)
    7080:	31c00215 	stw	r7,8(r6)
    7084:	30c00115 	stw	r3,4(r6)
    7088:	308d883a 	add	r6,r6,r2
    708c:	30800015 	stw	r2,0(r6)
    7090:	003f9506 	br	6ee8 <_free_r+0xf0>
    7094:	00c01504 	movi	r3,84
    7098:	19400536 	bltu	r3,r5,70b0 <_free_r+0x2b8>
    709c:	100ad33a 	srli	r5,r2,12
    70a0:	28c01bc4 	addi	r3,r5,111
    70a4:	18c7883a 	add	r3,r3,r3
    70a8:	29401b84 	addi	r5,r5,110
    70ac:	003f9c06 	br	6f20 <_free_r+0x128>
    70b0:	00c05504 	movi	r3,340
    70b4:	19400536 	bltu	r3,r5,70cc <_free_r+0x2d4>
    70b8:	100ad3fa 	srli	r5,r2,15
    70bc:	28c01e04 	addi	r3,r5,120
    70c0:	18c7883a 	add	r3,r3,r3
    70c4:	29401dc4 	addi	r5,r5,119
    70c8:	003f9506 	br	6f20 <_free_r+0x128>
    70cc:	00c15504 	movi	r3,1364
    70d0:	19400536 	bltu	r3,r5,70e8 <_free_r+0x2f0>
    70d4:	100ad4ba 	srli	r5,r2,18
    70d8:	28c01f44 	addi	r3,r5,125
    70dc:	18c7883a 	add	r3,r3,r3
    70e0:	29401f04 	addi	r5,r5,124
    70e4:	003f8e06 	br	6f20 <_free_r+0x128>
    70e8:	00c03f84 	movi	r3,254
    70ec:	01401f84 	movi	r5,126
    70f0:	003f8b06 	br	6f20 <_free_r+0x128>
    70f4:	10c00054 	ori	r3,r2,1
    70f8:	30c00115 	stw	r3,4(r6)
    70fc:	308d883a 	add	r6,r6,r2
    7100:	30800015 	stw	r2,0(r6)
    7104:	003f7806 	br	6ee8 <_free_r+0xf0>

00007108 <__sfvwrite_r>:
    7108:	30800217 	ldw	r2,8(r6)
    710c:	10006726 	beq	r2,zero,72ac <__sfvwrite_r+0x1a4>
    7110:	28c0030b 	ldhu	r3,12(r5)
    7114:	defff404 	addi	sp,sp,-48
    7118:	dd400715 	stw	r21,28(sp)
    711c:	dd000615 	stw	r20,24(sp)
    7120:	dc000215 	stw	r16,8(sp)
    7124:	dfc00b15 	stw	ra,44(sp)
    7128:	df000a15 	stw	fp,40(sp)
    712c:	ddc00915 	stw	r23,36(sp)
    7130:	dd800815 	stw	r22,32(sp)
    7134:	dcc00515 	stw	r19,20(sp)
    7138:	dc800415 	stw	r18,16(sp)
    713c:	dc400315 	stw	r17,12(sp)
    7140:	1880020c 	andi	r2,r3,8
    7144:	2821883a 	mov	r16,r5
    7148:	202b883a 	mov	r21,r4
    714c:	3029883a 	mov	r20,r6
    7150:	10002726 	beq	r2,zero,71f0 <__sfvwrite_r+0xe8>
    7154:	28800417 	ldw	r2,16(r5)
    7158:	10002526 	beq	r2,zero,71f0 <__sfvwrite_r+0xe8>
    715c:	1880008c 	andi	r2,r3,2
    7160:	a4400017 	ldw	r17,0(r20)
    7164:	10002a26 	beq	r2,zero,7210 <__sfvwrite_r+0x108>
    7168:	05a00034 	movhi	r22,32768
    716c:	0027883a 	mov	r19,zero
    7170:	0025883a 	mov	r18,zero
    7174:	b5bf0004 	addi	r22,r22,-1024
    7178:	980d883a 	mov	r6,r19
    717c:	a809883a 	mov	r4,r21
    7180:	90004626 	beq	r18,zero,729c <__sfvwrite_r+0x194>
    7184:	900f883a 	mov	r7,r18
    7188:	b480022e 	bgeu	r22,r18,7194 <__sfvwrite_r+0x8c>
    718c:	01e00034 	movhi	r7,32768
    7190:	39ff0004 	addi	r7,r7,-1024
    7194:	80800917 	ldw	r2,36(r16)
    7198:	81400717 	ldw	r5,28(r16)
    719c:	103ee83a 	callr	r2
    71a0:	0080570e 	bge	zero,r2,7300 <__sfvwrite_r+0x1f8>
    71a4:	a0c00217 	ldw	r3,8(r20)
    71a8:	98a7883a 	add	r19,r19,r2
    71ac:	90a5c83a 	sub	r18,r18,r2
    71b0:	1885c83a 	sub	r2,r3,r2
    71b4:	a0800215 	stw	r2,8(r20)
    71b8:	103fef1e 	bne	r2,zero,7178 <__sfvwrite_r+0x70>
    71bc:	0005883a 	mov	r2,zero
    71c0:	dfc00b17 	ldw	ra,44(sp)
    71c4:	df000a17 	ldw	fp,40(sp)
    71c8:	ddc00917 	ldw	r23,36(sp)
    71cc:	dd800817 	ldw	r22,32(sp)
    71d0:	dd400717 	ldw	r21,28(sp)
    71d4:	dd000617 	ldw	r20,24(sp)
    71d8:	dcc00517 	ldw	r19,20(sp)
    71dc:	dc800417 	ldw	r18,16(sp)
    71e0:	dc400317 	ldw	r17,12(sp)
    71e4:	dc000217 	ldw	r16,8(sp)
    71e8:	dec00c04 	addi	sp,sp,48
    71ec:	f800283a 	ret
    71f0:	800b883a 	mov	r5,r16
    71f4:	a809883a 	mov	r4,r21
    71f8:	0004cb00 	call	4cb0 <__swsetup_r>
    71fc:	1000eb1e 	bne	r2,zero,75ac <__sfvwrite_r+0x4a4>
    7200:	80c0030b 	ldhu	r3,12(r16)
    7204:	a4400017 	ldw	r17,0(r20)
    7208:	1880008c 	andi	r2,r3,2
    720c:	103fd61e 	bne	r2,zero,7168 <__sfvwrite_r+0x60>
    7210:	1880004c 	andi	r2,r3,1
    7214:	10003f1e 	bne	r2,zero,7314 <__sfvwrite_r+0x20c>
    7218:	0039883a 	mov	fp,zero
    721c:	0025883a 	mov	r18,zero
    7220:	90001a26 	beq	r18,zero,728c <__sfvwrite_r+0x184>
    7224:	1880800c 	andi	r2,r3,512
    7228:	84c00217 	ldw	r19,8(r16)
    722c:	10002126 	beq	r2,zero,72b4 <__sfvwrite_r+0x1ac>
    7230:	982f883a 	mov	r23,r19
    7234:	94c09336 	bltu	r18,r19,7484 <__sfvwrite_r+0x37c>
    7238:	1881200c 	andi	r2,r3,1152
    723c:	10009e1e 	bne	r2,zero,74b8 <__sfvwrite_r+0x3b0>
    7240:	81000017 	ldw	r4,0(r16)
    7244:	b80d883a 	mov	r6,r23
    7248:	e00b883a 	mov	r5,fp
    724c:	0007c100 	call	7c10 <memmove>
    7250:	80c00217 	ldw	r3,8(r16)
    7254:	81000017 	ldw	r4,0(r16)
    7258:	9005883a 	mov	r2,r18
    725c:	1ce7c83a 	sub	r19,r3,r19
    7260:	25cf883a 	add	r7,r4,r23
    7264:	84c00215 	stw	r19,8(r16)
    7268:	81c00015 	stw	r7,0(r16)
    726c:	a0c00217 	ldw	r3,8(r20)
    7270:	e0b9883a 	add	fp,fp,r2
    7274:	90a5c83a 	sub	r18,r18,r2
    7278:	18a7c83a 	sub	r19,r3,r2
    727c:	a4c00215 	stw	r19,8(r20)
    7280:	983fce26 	beq	r19,zero,71bc <__sfvwrite_r+0xb4>
    7284:	80c0030b 	ldhu	r3,12(r16)
    7288:	903fe61e 	bne	r18,zero,7224 <__sfvwrite_r+0x11c>
    728c:	8f000017 	ldw	fp,0(r17)
    7290:	8c800117 	ldw	r18,4(r17)
    7294:	8c400204 	addi	r17,r17,8
    7298:	003fe106 	br	7220 <__sfvwrite_r+0x118>
    729c:	8cc00017 	ldw	r19,0(r17)
    72a0:	8c800117 	ldw	r18,4(r17)
    72a4:	8c400204 	addi	r17,r17,8
    72a8:	003fb306 	br	7178 <__sfvwrite_r+0x70>
    72ac:	0005883a 	mov	r2,zero
    72b0:	f800283a 	ret
    72b4:	81000017 	ldw	r4,0(r16)
    72b8:	80800417 	ldw	r2,16(r16)
    72bc:	11005736 	bltu	r2,r4,741c <__sfvwrite_r+0x314>
    72c0:	85c00517 	ldw	r23,20(r16)
    72c4:	95c05536 	bltu	r18,r23,741c <__sfvwrite_r+0x314>
    72c8:	00a00034 	movhi	r2,32768
    72cc:	10bfffc4 	addi	r2,r2,-1
    72d0:	9009883a 	mov	r4,r18
    72d4:	1480012e 	bgeu	r2,r18,72dc <__sfvwrite_r+0x1d4>
    72d8:	1009883a 	mov	r4,r2
    72dc:	b80b883a 	mov	r5,r23
    72e0:	0001dcc0 	call	1dcc <__divsi3>
    72e4:	15cf383a 	mul	r7,r2,r23
    72e8:	81400717 	ldw	r5,28(r16)
    72ec:	80800917 	ldw	r2,36(r16)
    72f0:	e00d883a 	mov	r6,fp
    72f4:	a809883a 	mov	r4,r21
    72f8:	103ee83a 	callr	r2
    72fc:	00bfdb16 	blt	zero,r2,726c <__sfvwrite_r+0x164>
    7300:	8080030b 	ldhu	r2,12(r16)
    7304:	10801014 	ori	r2,r2,64
    7308:	8080030d 	sth	r2,12(r16)
    730c:	00bfffc4 	movi	r2,-1
    7310:	003fab06 	br	71c0 <__sfvwrite_r+0xb8>
    7314:	0027883a 	mov	r19,zero
    7318:	0011883a 	mov	r8,zero
    731c:	0039883a 	mov	fp,zero
    7320:	0025883a 	mov	r18,zero
    7324:	90001f26 	beq	r18,zero,73a4 <__sfvwrite_r+0x29c>
    7328:	40005a26 	beq	r8,zero,7494 <__sfvwrite_r+0x38c>
    732c:	982d883a 	mov	r22,r19
    7330:	94c0012e 	bgeu	r18,r19,7338 <__sfvwrite_r+0x230>
    7334:	902d883a 	mov	r22,r18
    7338:	81000017 	ldw	r4,0(r16)
    733c:	80800417 	ldw	r2,16(r16)
    7340:	b02f883a 	mov	r23,r22
    7344:	81c00517 	ldw	r7,20(r16)
    7348:	1100032e 	bgeu	r2,r4,7358 <__sfvwrite_r+0x250>
    734c:	80c00217 	ldw	r3,8(r16)
    7350:	38c7883a 	add	r3,r7,r3
    7354:	1d801816 	blt	r3,r22,73b8 <__sfvwrite_r+0x2b0>
    7358:	b1c03e16 	blt	r22,r7,7454 <__sfvwrite_r+0x34c>
    735c:	80800917 	ldw	r2,36(r16)
    7360:	81400717 	ldw	r5,28(r16)
    7364:	e00d883a 	mov	r6,fp
    7368:	da000115 	stw	r8,4(sp)
    736c:	a809883a 	mov	r4,r21
    7370:	103ee83a 	callr	r2
    7374:	102f883a 	mov	r23,r2
    7378:	da000117 	ldw	r8,4(sp)
    737c:	00bfe00e 	bge	zero,r2,7300 <__sfvwrite_r+0x1f8>
    7380:	9de7c83a 	sub	r19,r19,r23
    7384:	98001f26 	beq	r19,zero,7404 <__sfvwrite_r+0x2fc>
    7388:	a0800217 	ldw	r2,8(r20)
    738c:	e5f9883a 	add	fp,fp,r23
    7390:	95e5c83a 	sub	r18,r18,r23
    7394:	15efc83a 	sub	r23,r2,r23
    7398:	a5c00215 	stw	r23,8(r20)
    739c:	b83f8726 	beq	r23,zero,71bc <__sfvwrite_r+0xb4>
    73a0:	903fe11e 	bne	r18,zero,7328 <__sfvwrite_r+0x220>
    73a4:	8f000017 	ldw	fp,0(r17)
    73a8:	8c800117 	ldw	r18,4(r17)
    73ac:	0011883a 	mov	r8,zero
    73b0:	8c400204 	addi	r17,r17,8
    73b4:	003fdb06 	br	7324 <__sfvwrite_r+0x21c>
    73b8:	180d883a 	mov	r6,r3
    73bc:	e00b883a 	mov	r5,fp
    73c0:	da000115 	stw	r8,4(sp)
    73c4:	d8c00015 	stw	r3,0(sp)
    73c8:	0007c100 	call	7c10 <memmove>
    73cc:	d8c00017 	ldw	r3,0(sp)
    73d0:	80800017 	ldw	r2,0(r16)
    73d4:	800b883a 	mov	r5,r16
    73d8:	a809883a 	mov	r4,r21
    73dc:	10c5883a 	add	r2,r2,r3
    73e0:	80800015 	stw	r2,0(r16)
    73e4:	d8c00015 	stw	r3,0(sp)
    73e8:	00068a80 	call	68a8 <_fflush_r>
    73ec:	d8c00017 	ldw	r3,0(sp)
    73f0:	da000117 	ldw	r8,4(sp)
    73f4:	103fc21e 	bne	r2,zero,7300 <__sfvwrite_r+0x1f8>
    73f8:	182f883a 	mov	r23,r3
    73fc:	9de7c83a 	sub	r19,r19,r23
    7400:	983fe11e 	bne	r19,zero,7388 <__sfvwrite_r+0x280>
    7404:	800b883a 	mov	r5,r16
    7408:	a809883a 	mov	r4,r21
    740c:	00068a80 	call	68a8 <_fflush_r>
    7410:	103fbb1e 	bne	r2,zero,7300 <__sfvwrite_r+0x1f8>
    7414:	0011883a 	mov	r8,zero
    7418:	003fdb06 	br	7388 <__sfvwrite_r+0x280>
    741c:	94c0012e 	bgeu	r18,r19,7424 <__sfvwrite_r+0x31c>
    7420:	9027883a 	mov	r19,r18
    7424:	980d883a 	mov	r6,r19
    7428:	e00b883a 	mov	r5,fp
    742c:	0007c100 	call	7c10 <memmove>
    7430:	80800217 	ldw	r2,8(r16)
    7434:	80c00017 	ldw	r3,0(r16)
    7438:	14c5c83a 	sub	r2,r2,r19
    743c:	1cc7883a 	add	r3,r3,r19
    7440:	80800215 	stw	r2,8(r16)
    7444:	80c00015 	stw	r3,0(r16)
    7448:	10004326 	beq	r2,zero,7558 <__sfvwrite_r+0x450>
    744c:	9805883a 	mov	r2,r19
    7450:	003f8606 	br	726c <__sfvwrite_r+0x164>
    7454:	b00d883a 	mov	r6,r22
    7458:	e00b883a 	mov	r5,fp
    745c:	da000115 	stw	r8,4(sp)
    7460:	0007c100 	call	7c10 <memmove>
    7464:	80800217 	ldw	r2,8(r16)
    7468:	80c00017 	ldw	r3,0(r16)
    746c:	da000117 	ldw	r8,4(sp)
    7470:	1585c83a 	sub	r2,r2,r22
    7474:	1dad883a 	add	r22,r3,r22
    7478:	80800215 	stw	r2,8(r16)
    747c:	85800015 	stw	r22,0(r16)
    7480:	003fbf06 	br	7380 <__sfvwrite_r+0x278>
    7484:	81000017 	ldw	r4,0(r16)
    7488:	9027883a 	mov	r19,r18
    748c:	902f883a 	mov	r23,r18
    7490:	003f6c06 	br	7244 <__sfvwrite_r+0x13c>
    7494:	900d883a 	mov	r6,r18
    7498:	01400284 	movi	r5,10
    749c:	e009883a 	mov	r4,fp
    74a0:	00079e40 	call	79e4 <memchr>
    74a4:	10003e26 	beq	r2,zero,75a0 <__sfvwrite_r+0x498>
    74a8:	10800044 	addi	r2,r2,1
    74ac:	1727c83a 	sub	r19,r2,fp
    74b0:	02000044 	movi	r8,1
    74b4:	003f9d06 	br	732c <__sfvwrite_r+0x224>
    74b8:	80800517 	ldw	r2,20(r16)
    74bc:	81400417 	ldw	r5,16(r16)
    74c0:	81c00017 	ldw	r7,0(r16)
    74c4:	10a7883a 	add	r19,r2,r2
    74c8:	9885883a 	add	r2,r19,r2
    74cc:	1026d7fa 	srli	r19,r2,31
    74d0:	396dc83a 	sub	r22,r7,r5
    74d4:	b1000044 	addi	r4,r22,1
    74d8:	9885883a 	add	r2,r19,r2
    74dc:	1027d07a 	srai	r19,r2,1
    74e0:	2485883a 	add	r2,r4,r18
    74e4:	980d883a 	mov	r6,r19
    74e8:	9880022e 	bgeu	r19,r2,74f4 <__sfvwrite_r+0x3ec>
    74ec:	1027883a 	mov	r19,r2
    74f0:	100d883a 	mov	r6,r2
    74f4:	18c1000c 	andi	r3,r3,1024
    74f8:	18001c26 	beq	r3,zero,756c <__sfvwrite_r+0x464>
    74fc:	300b883a 	mov	r5,r6
    7500:	a809883a 	mov	r4,r21
    7504:	0001fa80 	call	1fa8 <_malloc_r>
    7508:	102f883a 	mov	r23,r2
    750c:	10002926 	beq	r2,zero,75b4 <__sfvwrite_r+0x4ac>
    7510:	81400417 	ldw	r5,16(r16)
    7514:	b00d883a 	mov	r6,r22
    7518:	1009883a 	mov	r4,r2
    751c:	0007ac80 	call	7ac8 <memcpy>
    7520:	8080030b 	ldhu	r2,12(r16)
    7524:	00fedfc4 	movi	r3,-1153
    7528:	10c4703a 	and	r2,r2,r3
    752c:	10802014 	ori	r2,r2,128
    7530:	8080030d 	sth	r2,12(r16)
    7534:	bd89883a 	add	r4,r23,r22
    7538:	9d8fc83a 	sub	r7,r19,r22
    753c:	85c00415 	stw	r23,16(r16)
    7540:	84c00515 	stw	r19,20(r16)
    7544:	81000015 	stw	r4,0(r16)
    7548:	9027883a 	mov	r19,r18
    754c:	81c00215 	stw	r7,8(r16)
    7550:	902f883a 	mov	r23,r18
    7554:	003f3b06 	br	7244 <__sfvwrite_r+0x13c>
    7558:	800b883a 	mov	r5,r16
    755c:	a809883a 	mov	r4,r21
    7560:	00068a80 	call	68a8 <_fflush_r>
    7564:	103fb926 	beq	r2,zero,744c <__sfvwrite_r+0x344>
    7568:	003f6506 	br	7300 <__sfvwrite_r+0x1f8>
    756c:	a809883a 	mov	r4,r21
    7570:	0008e900 	call	8e90 <_realloc_r>
    7574:	102f883a 	mov	r23,r2
    7578:	103fee1e 	bne	r2,zero,7534 <__sfvwrite_r+0x42c>
    757c:	81400417 	ldw	r5,16(r16)
    7580:	a809883a 	mov	r4,r21
    7584:	0006df80 	call	6df8 <_free_r>
    7588:	8080030b 	ldhu	r2,12(r16)
    758c:	00ffdfc4 	movi	r3,-129
    7590:	1884703a 	and	r2,r3,r2
    7594:	00c00304 	movi	r3,12
    7598:	a8c00015 	stw	r3,0(r21)
    759c:	003f5906 	br	7304 <__sfvwrite_r+0x1fc>
    75a0:	94c00044 	addi	r19,r18,1
    75a4:	02000044 	movi	r8,1
    75a8:	003f6006 	br	732c <__sfvwrite_r+0x224>
    75ac:	00bfffc4 	movi	r2,-1
    75b0:	003f0306 	br	71c0 <__sfvwrite_r+0xb8>
    75b4:	00800304 	movi	r2,12
    75b8:	a8800015 	stw	r2,0(r21)
    75bc:	8080030b 	ldhu	r2,12(r16)
    75c0:	003f5006 	br	7304 <__sfvwrite_r+0x1fc>

000075c4 <_fwalk>:
    75c4:	defff704 	addi	sp,sp,-36
    75c8:	dd000415 	stw	r20,16(sp)
    75cc:	dfc00815 	stw	ra,32(sp)
    75d0:	ddc00715 	stw	r23,28(sp)
    75d4:	dd800615 	stw	r22,24(sp)
    75d8:	dd400515 	stw	r21,20(sp)
    75dc:	dcc00315 	stw	r19,12(sp)
    75e0:	dc800215 	stw	r18,8(sp)
    75e4:	dc400115 	stw	r17,4(sp)
    75e8:	dc000015 	stw	r16,0(sp)
    75ec:	2500b804 	addi	r20,r4,736
    75f0:	a0002326 	beq	r20,zero,7680 <_fwalk+0xbc>
    75f4:	282b883a 	mov	r21,r5
    75f8:	002f883a 	mov	r23,zero
    75fc:	05800044 	movi	r22,1
    7600:	04ffffc4 	movi	r19,-1
    7604:	a4400117 	ldw	r17,4(r20)
    7608:	a4800217 	ldw	r18,8(r20)
    760c:	8c7fffc4 	addi	r17,r17,-1
    7610:	88000d16 	blt	r17,zero,7648 <_fwalk+0x84>
    7614:	94000304 	addi	r16,r18,12
    7618:	94800384 	addi	r18,r18,14
    761c:	8080000b 	ldhu	r2,0(r16)
    7620:	8c7fffc4 	addi	r17,r17,-1
    7624:	813ffd04 	addi	r4,r16,-12
    7628:	b080042e 	bgeu	r22,r2,763c <_fwalk+0x78>
    762c:	9080000f 	ldh	r2,0(r18)
    7630:	14c00226 	beq	r2,r19,763c <_fwalk+0x78>
    7634:	a83ee83a 	callr	r21
    7638:	b8aeb03a 	or	r23,r23,r2
    763c:	84001a04 	addi	r16,r16,104
    7640:	94801a04 	addi	r18,r18,104
    7644:	8cfff51e 	bne	r17,r19,761c <_fwalk+0x58>
    7648:	a5000017 	ldw	r20,0(r20)
    764c:	a03fed1e 	bne	r20,zero,7604 <_fwalk+0x40>
    7650:	b805883a 	mov	r2,r23
    7654:	dfc00817 	ldw	ra,32(sp)
    7658:	ddc00717 	ldw	r23,28(sp)
    765c:	dd800617 	ldw	r22,24(sp)
    7660:	dd400517 	ldw	r21,20(sp)
    7664:	dd000417 	ldw	r20,16(sp)
    7668:	dcc00317 	ldw	r19,12(sp)
    766c:	dc800217 	ldw	r18,8(sp)
    7670:	dc400117 	ldw	r17,4(sp)
    7674:	dc000017 	ldw	r16,0(sp)
    7678:	dec00904 	addi	sp,sp,36
    767c:	f800283a 	ret
    7680:	002f883a 	mov	r23,zero
    7684:	003ff206 	br	7650 <_fwalk+0x8c>

00007688 <_fwalk_reent>:
    7688:	defff704 	addi	sp,sp,-36
    768c:	dd000415 	stw	r20,16(sp)
    7690:	dfc00815 	stw	ra,32(sp)
    7694:	ddc00715 	stw	r23,28(sp)
    7698:	dd800615 	stw	r22,24(sp)
    769c:	dd400515 	stw	r21,20(sp)
    76a0:	dcc00315 	stw	r19,12(sp)
    76a4:	dc800215 	stw	r18,8(sp)
    76a8:	dc400115 	stw	r17,4(sp)
    76ac:	dc000015 	stw	r16,0(sp)
    76b0:	2500b804 	addi	r20,r4,736
    76b4:	a0002326 	beq	r20,zero,7744 <_fwalk_reent+0xbc>
    76b8:	282b883a 	mov	r21,r5
    76bc:	2027883a 	mov	r19,r4
    76c0:	002f883a 	mov	r23,zero
    76c4:	05800044 	movi	r22,1
    76c8:	04bfffc4 	movi	r18,-1
    76cc:	a4400117 	ldw	r17,4(r20)
    76d0:	a4000217 	ldw	r16,8(r20)
    76d4:	8c7fffc4 	addi	r17,r17,-1
    76d8:	88000c16 	blt	r17,zero,770c <_fwalk_reent+0x84>
    76dc:	84000304 	addi	r16,r16,12
    76e0:	8080000b 	ldhu	r2,0(r16)
    76e4:	8c7fffc4 	addi	r17,r17,-1
    76e8:	817ffd04 	addi	r5,r16,-12
    76ec:	b080052e 	bgeu	r22,r2,7704 <_fwalk_reent+0x7c>
    76f0:	8080008f 	ldh	r2,2(r16)
    76f4:	9809883a 	mov	r4,r19
    76f8:	14800226 	beq	r2,r18,7704 <_fwalk_reent+0x7c>
    76fc:	a83ee83a 	callr	r21
    7700:	b8aeb03a 	or	r23,r23,r2
    7704:	84001a04 	addi	r16,r16,104
    7708:	8cbff51e 	bne	r17,r18,76e0 <_fwalk_reent+0x58>
    770c:	a5000017 	ldw	r20,0(r20)
    7710:	a03fee1e 	bne	r20,zero,76cc <_fwalk_reent+0x44>
    7714:	b805883a 	mov	r2,r23
    7718:	dfc00817 	ldw	ra,32(sp)
    771c:	ddc00717 	ldw	r23,28(sp)
    7720:	dd800617 	ldw	r22,24(sp)
    7724:	dd400517 	ldw	r21,20(sp)
    7728:	dd000417 	ldw	r20,16(sp)
    772c:	dcc00317 	ldw	r19,12(sp)
    7730:	dc800217 	ldw	r18,8(sp)
    7734:	dc400117 	ldw	r17,4(sp)
    7738:	dc000017 	ldw	r16,0(sp)
    773c:	dec00904 	addi	sp,sp,36
    7740:	f800283a 	ret
    7744:	002f883a 	mov	r23,zero
    7748:	003ff206 	br	7714 <_fwalk_reent+0x8c>

0000774c <_setlocale_r>:
    774c:	30001b26 	beq	r6,zero,77bc <_setlocale_r+0x70>
    7750:	01400074 	movhi	r5,1
    7754:	defffe04 	addi	sp,sp,-8
    7758:	29459f04 	addi	r5,r5,5756
    775c:	3009883a 	mov	r4,r6
    7760:	dc000015 	stw	r16,0(sp)
    7764:	dfc00115 	stw	ra,4(sp)
    7768:	3021883a 	mov	r16,r6
    776c:	00095a40 	call	95a4 <strcmp>
    7770:	1000061e 	bne	r2,zero,778c <_setlocale_r+0x40>
    7774:	00800074 	movhi	r2,1
    7778:	10859e04 	addi	r2,r2,5752
    777c:	dfc00117 	ldw	ra,4(sp)
    7780:	dc000017 	ldw	r16,0(sp)
    7784:	dec00204 	addi	sp,sp,8
    7788:	f800283a 	ret
    778c:	01400074 	movhi	r5,1
    7790:	29459e04 	addi	r5,r5,5752
    7794:	8009883a 	mov	r4,r16
    7798:	00095a40 	call	95a4 <strcmp>
    779c:	103ff526 	beq	r2,zero,7774 <_setlocale_r+0x28>
    77a0:	01400074 	movhi	r5,1
    77a4:	29456e04 	addi	r5,r5,5560
    77a8:	8009883a 	mov	r4,r16
    77ac:	00095a40 	call	95a4 <strcmp>
    77b0:	103ff026 	beq	r2,zero,7774 <_setlocale_r+0x28>
    77b4:	0005883a 	mov	r2,zero
    77b8:	003ff006 	br	777c <_setlocale_r+0x30>
    77bc:	00800074 	movhi	r2,1
    77c0:	10859e04 	addi	r2,r2,5752
    77c4:	f800283a 	ret

000077c8 <__locale_charset>:
    77c8:	00800074 	movhi	r2,1
    77cc:	10889104 	addi	r2,r2,8772
    77d0:	f800283a 	ret

000077d4 <__locale_mb_cur_max>:
    77d4:	00800074 	movhi	r2,1
    77d8:	108d2d04 	addi	r2,r2,13492
    77dc:	10800017 	ldw	r2,0(r2)
    77e0:	f800283a 	ret

000077e4 <__locale_msgcharset>:
    77e4:	00800074 	movhi	r2,1
    77e8:	10888904 	addi	r2,r2,8740
    77ec:	f800283a 	ret

000077f0 <__locale_cjk_lang>:
    77f0:	0005883a 	mov	r2,zero
    77f4:	f800283a 	ret

000077f8 <_localeconv_r>:
    77f8:	00800074 	movhi	r2,1
    77fc:	10889904 	addi	r2,r2,8804
    7800:	f800283a 	ret

00007804 <setlocale>:
    7804:	00800074 	movhi	r2,1
    7808:	108d2c04 	addi	r2,r2,13488
    780c:	280d883a 	mov	r6,r5
    7810:	200b883a 	mov	r5,r4
    7814:	11000017 	ldw	r4,0(r2)
    7818:	000774c1 	jmpi	774c <_setlocale_r>

0000781c <localeconv>:
    781c:	00800074 	movhi	r2,1
    7820:	10889904 	addi	r2,r2,8804
    7824:	f800283a 	ret

00007828 <__smakebuf_r>:
    7828:	2880030b 	ldhu	r2,12(r5)
    782c:	10c0008c 	andi	r3,r2,2
    7830:	1800411e 	bne	r3,zero,7938 <__smakebuf_r+0x110>
    7834:	deffec04 	addi	sp,sp,-80
    7838:	dc000f15 	stw	r16,60(sp)
    783c:	2821883a 	mov	r16,r5
    7840:	2940038f 	ldh	r5,14(r5)
    7844:	dc401015 	stw	r17,64(sp)
    7848:	dfc01315 	stw	ra,76(sp)
    784c:	dcc01215 	stw	r19,72(sp)
    7850:	dc801115 	stw	r18,68(sp)
    7854:	2023883a 	mov	r17,r4
    7858:	28001c16 	blt	r5,zero,78cc <__smakebuf_r+0xa4>
    785c:	d80d883a 	mov	r6,sp
    7860:	000b14c0 	call	b14c <_fstat_r>
    7864:	10001816 	blt	r2,zero,78c8 <__smakebuf_r+0xa0>
    7868:	d8800117 	ldw	r2,4(sp)
    786c:	00e00014 	movui	r3,32768
    7870:	10bc000c 	andi	r2,r2,61440
    7874:	14c80020 	cmpeqi	r19,r2,8192
    7878:	10c03726 	beq	r2,r3,7958 <__smakebuf_r+0x130>
    787c:	80c0030b 	ldhu	r3,12(r16)
    7880:	18c20014 	ori	r3,r3,2048
    7884:	80c0030d 	sth	r3,12(r16)
    7888:	00c80004 	movi	r3,8192
    788c:	10c0521e 	bne	r2,r3,79d8 <__smakebuf_r+0x1b0>
    7890:	8140038f 	ldh	r5,14(r16)
    7894:	8809883a 	mov	r4,r17
    7898:	000b1a80 	call	b1a8 <_isatty_r>
    789c:	10004c26 	beq	r2,zero,79d0 <__smakebuf_r+0x1a8>
    78a0:	8080030b 	ldhu	r2,12(r16)
    78a4:	80c010c4 	addi	r3,r16,67
    78a8:	80c00015 	stw	r3,0(r16)
    78ac:	10800054 	ori	r2,r2,1
    78b0:	8080030d 	sth	r2,12(r16)
    78b4:	00800044 	movi	r2,1
    78b8:	80c00415 	stw	r3,16(r16)
    78bc:	80800515 	stw	r2,20(r16)
    78c0:	04810004 	movi	r18,1024
    78c4:	00000706 	br	78e4 <__smakebuf_r+0xbc>
    78c8:	8080030b 	ldhu	r2,12(r16)
    78cc:	10c0200c 	andi	r3,r2,128
    78d0:	18001f1e 	bne	r3,zero,7950 <__smakebuf_r+0x128>
    78d4:	04810004 	movi	r18,1024
    78d8:	10820014 	ori	r2,r2,2048
    78dc:	8080030d 	sth	r2,12(r16)
    78e0:	0027883a 	mov	r19,zero
    78e4:	900b883a 	mov	r5,r18
    78e8:	8809883a 	mov	r4,r17
    78ec:	0001fa80 	call	1fa8 <_malloc_r>
    78f0:	10002c26 	beq	r2,zero,79a4 <__smakebuf_r+0x17c>
    78f4:	80c0030b 	ldhu	r3,12(r16)
    78f8:	01000034 	movhi	r4,0
    78fc:	211a4f04 	addi	r4,r4,26940
    7900:	89000f15 	stw	r4,60(r17)
    7904:	18c02014 	ori	r3,r3,128
    7908:	80c0030d 	sth	r3,12(r16)
    790c:	80800015 	stw	r2,0(r16)
    7910:	80800415 	stw	r2,16(r16)
    7914:	84800515 	stw	r18,20(r16)
    7918:	98001a1e 	bne	r19,zero,7984 <__smakebuf_r+0x15c>
    791c:	dfc01317 	ldw	ra,76(sp)
    7920:	dcc01217 	ldw	r19,72(sp)
    7924:	dc801117 	ldw	r18,68(sp)
    7928:	dc401017 	ldw	r17,64(sp)
    792c:	dc000f17 	ldw	r16,60(sp)
    7930:	dec01404 	addi	sp,sp,80
    7934:	f800283a 	ret
    7938:	288010c4 	addi	r2,r5,67
    793c:	28800015 	stw	r2,0(r5)
    7940:	28800415 	stw	r2,16(r5)
    7944:	00800044 	movi	r2,1
    7948:	28800515 	stw	r2,20(r5)
    794c:	f800283a 	ret
    7950:	04801004 	movi	r18,64
    7954:	003fe006 	br	78d8 <__smakebuf_r+0xb0>
    7958:	81000a17 	ldw	r4,40(r16)
    795c:	00c00074 	movhi	r3,1
    7960:	18e55004 	addi	r3,r3,-27328
    7964:	20ffc51e 	bne	r4,r3,787c <__smakebuf_r+0x54>
    7968:	8080030b 	ldhu	r2,12(r16)
    796c:	04810004 	movi	r18,1024
    7970:	84801315 	stw	r18,76(r16)
    7974:	1484b03a 	or	r2,r2,r18
    7978:	8080030d 	sth	r2,12(r16)
    797c:	0027883a 	mov	r19,zero
    7980:	003fd806 	br	78e4 <__smakebuf_r+0xbc>
    7984:	8140038f 	ldh	r5,14(r16)
    7988:	8809883a 	mov	r4,r17
    798c:	000b1a80 	call	b1a8 <_isatty_r>
    7990:	103fe226 	beq	r2,zero,791c <__smakebuf_r+0xf4>
    7994:	8080030b 	ldhu	r2,12(r16)
    7998:	10800054 	ori	r2,r2,1
    799c:	8080030d 	sth	r2,12(r16)
    79a0:	003fde06 	br	791c <__smakebuf_r+0xf4>
    79a4:	8080030b 	ldhu	r2,12(r16)
    79a8:	10c0800c 	andi	r3,r2,512
    79ac:	183fdb1e 	bne	r3,zero,791c <__smakebuf_r+0xf4>
    79b0:	10800094 	ori	r2,r2,2
    79b4:	80c010c4 	addi	r3,r16,67
    79b8:	8080030d 	sth	r2,12(r16)
    79bc:	00800044 	movi	r2,1
    79c0:	80c00015 	stw	r3,0(r16)
    79c4:	80c00415 	stw	r3,16(r16)
    79c8:	80800515 	stw	r2,20(r16)
    79cc:	003fd306 	br	791c <__smakebuf_r+0xf4>
    79d0:	04810004 	movi	r18,1024
    79d4:	003fc306 	br	78e4 <__smakebuf_r+0xbc>
    79d8:	0027883a 	mov	r19,zero
    79dc:	04810004 	movi	r18,1024
    79e0:	003fc006 	br	78e4 <__smakebuf_r+0xbc>

000079e4 <memchr>:
    79e4:	208000cc 	andi	r2,r4,3
    79e8:	280f883a 	mov	r7,r5
    79ec:	10003426 	beq	r2,zero,7ac0 <memchr+0xdc>
    79f0:	30bfffc4 	addi	r2,r6,-1
    79f4:	30001a26 	beq	r6,zero,7a60 <memchr+0x7c>
    79f8:	20c00003 	ldbu	r3,0(r4)
    79fc:	29803fcc 	andi	r6,r5,255
    7a00:	30c0051e 	bne	r6,r3,7a18 <memchr+0x34>
    7a04:	00001806 	br	7a68 <memchr+0x84>
    7a08:	10001526 	beq	r2,zero,7a60 <memchr+0x7c>
    7a0c:	20c00003 	ldbu	r3,0(r4)
    7a10:	10bfffc4 	addi	r2,r2,-1
    7a14:	30c01426 	beq	r6,r3,7a68 <memchr+0x84>
    7a18:	21000044 	addi	r4,r4,1
    7a1c:	20c000cc 	andi	r3,r4,3
    7a20:	183ff91e 	bne	r3,zero,7a08 <memchr+0x24>
    7a24:	020000c4 	movi	r8,3
    7a28:	40801136 	bltu	r8,r2,7a70 <memchr+0x8c>
    7a2c:	10000c26 	beq	r2,zero,7a60 <memchr+0x7c>
    7a30:	20c00003 	ldbu	r3,0(r4)
    7a34:	29403fcc 	andi	r5,r5,255
    7a38:	28c00b26 	beq	r5,r3,7a68 <memchr+0x84>
    7a3c:	20c00044 	addi	r3,r4,1
    7a40:	39803fcc 	andi	r6,r7,255
    7a44:	2089883a 	add	r4,r4,r2
    7a48:	00000306 	br	7a58 <memchr+0x74>
    7a4c:	18c00044 	addi	r3,r3,1
    7a50:	197fffc3 	ldbu	r5,-1(r3)
    7a54:	31400526 	beq	r6,r5,7a6c <memchr+0x88>
    7a58:	1805883a 	mov	r2,r3
    7a5c:	20fffb1e 	bne	r4,r3,7a4c <memchr+0x68>
    7a60:	0005883a 	mov	r2,zero
    7a64:	f800283a 	ret
    7a68:	2005883a 	mov	r2,r4
    7a6c:	f800283a 	ret
    7a70:	28c03fcc 	andi	r3,r5,255
    7a74:	1812923a 	slli	r9,r3,8
    7a78:	02ffbff4 	movhi	r11,65279
    7a7c:	02a02074 	movhi	r10,32897
    7a80:	48d2b03a 	or	r9,r9,r3
    7a84:	4806943a 	slli	r3,r9,16
    7a88:	5affbfc4 	addi	r11,r11,-257
    7a8c:	52a02004 	addi	r10,r10,-32640
    7a90:	48d2b03a 	or	r9,r9,r3
    7a94:	20c00017 	ldw	r3,0(r4)
    7a98:	48c6f03a 	xor	r3,r9,r3
    7a9c:	1acd883a 	add	r6,r3,r11
    7aa0:	00c6303a 	nor	r3,zero,r3
    7aa4:	30c6703a 	and	r3,r6,r3
    7aa8:	1a86703a 	and	r3,r3,r10
    7aac:	183fe01e 	bne	r3,zero,7a30 <memchr+0x4c>
    7ab0:	10bfff04 	addi	r2,r2,-4
    7ab4:	21000104 	addi	r4,r4,4
    7ab8:	40bff636 	bltu	r8,r2,7a94 <memchr+0xb0>
    7abc:	003fdb06 	br	7a2c <memchr+0x48>
    7ac0:	3005883a 	mov	r2,r6
    7ac4:	003fd706 	br	7a24 <memchr+0x40>

00007ac8 <memcpy>:
    7ac8:	defffd04 	addi	sp,sp,-12
    7acc:	dfc00215 	stw	ra,8(sp)
    7ad0:	dc400115 	stw	r17,4(sp)
    7ad4:	dc000015 	stw	r16,0(sp)
    7ad8:	00c003c4 	movi	r3,15
    7adc:	2005883a 	mov	r2,r4
    7ae0:	1980452e 	bgeu	r3,r6,7bf8 <memcpy+0x130>
    7ae4:	2906b03a 	or	r3,r5,r4
    7ae8:	18c000cc 	andi	r3,r3,3
    7aec:	1800441e 	bne	r3,zero,7c00 <memcpy+0x138>
    7af0:	347ffc04 	addi	r17,r6,-16
    7af4:	8822d13a 	srli	r17,r17,4
    7af8:	28c00104 	addi	r3,r5,4
    7afc:	23400104 	addi	r13,r4,4
    7b00:	8820913a 	slli	r16,r17,4
    7b04:	2b000204 	addi	r12,r5,8
    7b08:	22c00204 	addi	r11,r4,8
    7b0c:	84000504 	addi	r16,r16,20
    7b10:	2a800304 	addi	r10,r5,12
    7b14:	22400304 	addi	r9,r4,12
    7b18:	2c21883a 	add	r16,r5,r16
    7b1c:	2811883a 	mov	r8,r5
    7b20:	200f883a 	mov	r7,r4
    7b24:	41000017 	ldw	r4,0(r8)
    7b28:	1fc00017 	ldw	ra,0(r3)
    7b2c:	63c00017 	ldw	r15,0(r12)
    7b30:	39000015 	stw	r4,0(r7)
    7b34:	53800017 	ldw	r14,0(r10)
    7b38:	6fc00015 	stw	ra,0(r13)
    7b3c:	5bc00015 	stw	r15,0(r11)
    7b40:	4b800015 	stw	r14,0(r9)
    7b44:	18c00404 	addi	r3,r3,16
    7b48:	39c00404 	addi	r7,r7,16
    7b4c:	42000404 	addi	r8,r8,16
    7b50:	6b400404 	addi	r13,r13,16
    7b54:	63000404 	addi	r12,r12,16
    7b58:	5ac00404 	addi	r11,r11,16
    7b5c:	52800404 	addi	r10,r10,16
    7b60:	4a400404 	addi	r9,r9,16
    7b64:	1c3fef1e 	bne	r3,r16,7b24 <memcpy+0x5c>
    7b68:	89c00044 	addi	r7,r17,1
    7b6c:	380e913a 	slli	r7,r7,4
    7b70:	310003cc 	andi	r4,r6,15
    7b74:	02c000c4 	movi	r11,3
    7b78:	11c7883a 	add	r3,r2,r7
    7b7c:	29cb883a 	add	r5,r5,r7
    7b80:	5900212e 	bgeu	r11,r4,7c08 <memcpy+0x140>
    7b84:	1813883a 	mov	r9,r3
    7b88:	2811883a 	mov	r8,r5
    7b8c:	200f883a 	mov	r7,r4
    7b90:	42800017 	ldw	r10,0(r8)
    7b94:	4a400104 	addi	r9,r9,4
    7b98:	39ffff04 	addi	r7,r7,-4
    7b9c:	4abfff15 	stw	r10,-4(r9)
    7ba0:	42000104 	addi	r8,r8,4
    7ba4:	59fffa36 	bltu	r11,r7,7b90 <memcpy+0xc8>
    7ba8:	213fff04 	addi	r4,r4,-4
    7bac:	2008d0ba 	srli	r4,r4,2
    7bb0:	318000cc 	andi	r6,r6,3
    7bb4:	21000044 	addi	r4,r4,1
    7bb8:	2109883a 	add	r4,r4,r4
    7bbc:	2109883a 	add	r4,r4,r4
    7bc0:	1907883a 	add	r3,r3,r4
    7bc4:	290b883a 	add	r5,r5,r4
    7bc8:	30000626 	beq	r6,zero,7be4 <memcpy+0x11c>
    7bcc:	198d883a 	add	r6,r3,r6
    7bd0:	29c00003 	ldbu	r7,0(r5)
    7bd4:	18c00044 	addi	r3,r3,1
    7bd8:	29400044 	addi	r5,r5,1
    7bdc:	19ffffc5 	stb	r7,-1(r3)
    7be0:	19bffb1e 	bne	r3,r6,7bd0 <memcpy+0x108>
    7be4:	dfc00217 	ldw	ra,8(sp)
    7be8:	dc400117 	ldw	r17,4(sp)
    7bec:	dc000017 	ldw	r16,0(sp)
    7bf0:	dec00304 	addi	sp,sp,12
    7bf4:	f800283a 	ret
    7bf8:	2007883a 	mov	r3,r4
    7bfc:	003ff206 	br	7bc8 <memcpy+0x100>
    7c00:	2007883a 	mov	r3,r4
    7c04:	003ff106 	br	7bcc <memcpy+0x104>
    7c08:	200d883a 	mov	r6,r4
    7c0c:	003fee06 	br	7bc8 <memcpy+0x100>

00007c10 <memmove>:
    7c10:	2005883a 	mov	r2,r4
    7c14:	29000b2e 	bgeu	r5,r4,7c44 <memmove+0x34>
    7c18:	298f883a 	add	r7,r5,r6
    7c1c:	21c0092e 	bgeu	r4,r7,7c44 <memmove+0x34>
    7c20:	2187883a 	add	r3,r4,r6
    7c24:	198bc83a 	sub	r5,r3,r6
    7c28:	30004826 	beq	r6,zero,7d4c <memmove+0x13c>
    7c2c:	39ffffc4 	addi	r7,r7,-1
    7c30:	39000003 	ldbu	r4,0(r7)
    7c34:	18ffffc4 	addi	r3,r3,-1
    7c38:	19000005 	stb	r4,0(r3)
    7c3c:	28fffb1e 	bne	r5,r3,7c2c <memmove+0x1c>
    7c40:	f800283a 	ret
    7c44:	00c003c4 	movi	r3,15
    7c48:	1980412e 	bgeu	r3,r6,7d50 <memmove+0x140>
    7c4c:	2886b03a 	or	r3,r5,r2
    7c50:	18c000cc 	andi	r3,r3,3
    7c54:	1800401e 	bne	r3,zero,7d58 <memmove+0x148>
    7c58:	33fffc04 	addi	r15,r6,-16
    7c5c:	781ed13a 	srli	r15,r15,4
    7c60:	28c00104 	addi	r3,r5,4
    7c64:	13400104 	addi	r13,r2,4
    7c68:	781c913a 	slli	r14,r15,4
    7c6c:	2b000204 	addi	r12,r5,8
    7c70:	12c00204 	addi	r11,r2,8
    7c74:	73800504 	addi	r14,r14,20
    7c78:	2a800304 	addi	r10,r5,12
    7c7c:	12400304 	addi	r9,r2,12
    7c80:	2b9d883a 	add	r14,r5,r14
    7c84:	2811883a 	mov	r8,r5
    7c88:	100f883a 	mov	r7,r2
    7c8c:	41000017 	ldw	r4,0(r8)
    7c90:	39c00404 	addi	r7,r7,16
    7c94:	18c00404 	addi	r3,r3,16
    7c98:	393ffc15 	stw	r4,-16(r7)
    7c9c:	193ffc17 	ldw	r4,-16(r3)
    7ca0:	6b400404 	addi	r13,r13,16
    7ca4:	5ac00404 	addi	r11,r11,16
    7ca8:	693ffc15 	stw	r4,-16(r13)
    7cac:	61000017 	ldw	r4,0(r12)
    7cb0:	4a400404 	addi	r9,r9,16
    7cb4:	42000404 	addi	r8,r8,16
    7cb8:	593ffc15 	stw	r4,-16(r11)
    7cbc:	51000017 	ldw	r4,0(r10)
    7cc0:	63000404 	addi	r12,r12,16
    7cc4:	52800404 	addi	r10,r10,16
    7cc8:	493ffc15 	stw	r4,-16(r9)
    7ccc:	1bbfef1e 	bne	r3,r14,7c8c <memmove+0x7c>
    7cd0:	79000044 	addi	r4,r15,1
    7cd4:	2008913a 	slli	r4,r4,4
    7cd8:	328003cc 	andi	r10,r6,15
    7cdc:	02c000c4 	movi	r11,3
    7ce0:	1107883a 	add	r3,r2,r4
    7ce4:	290b883a 	add	r5,r5,r4
    7ce8:	5a801e2e 	bgeu	r11,r10,7d64 <memmove+0x154>
    7cec:	1813883a 	mov	r9,r3
    7cf0:	2811883a 	mov	r8,r5
    7cf4:	500f883a 	mov	r7,r10
    7cf8:	41000017 	ldw	r4,0(r8)
    7cfc:	4a400104 	addi	r9,r9,4
    7d00:	39ffff04 	addi	r7,r7,-4
    7d04:	493fff15 	stw	r4,-4(r9)
    7d08:	42000104 	addi	r8,r8,4
    7d0c:	59fffa36 	bltu	r11,r7,7cf8 <memmove+0xe8>
    7d10:	513fff04 	addi	r4,r10,-4
    7d14:	2008d0ba 	srli	r4,r4,2
    7d18:	318000cc 	andi	r6,r6,3
    7d1c:	21000044 	addi	r4,r4,1
    7d20:	2109883a 	add	r4,r4,r4
    7d24:	2109883a 	add	r4,r4,r4
    7d28:	1907883a 	add	r3,r3,r4
    7d2c:	290b883a 	add	r5,r5,r4
    7d30:	30000b26 	beq	r6,zero,7d60 <memmove+0x150>
    7d34:	198d883a 	add	r6,r3,r6
    7d38:	29c00003 	ldbu	r7,0(r5)
    7d3c:	18c00044 	addi	r3,r3,1
    7d40:	29400044 	addi	r5,r5,1
    7d44:	19ffffc5 	stb	r7,-1(r3)
    7d48:	19bffb1e 	bne	r3,r6,7d38 <memmove+0x128>
    7d4c:	f800283a 	ret
    7d50:	1007883a 	mov	r3,r2
    7d54:	003ff606 	br	7d30 <memmove+0x120>
    7d58:	1007883a 	mov	r3,r2
    7d5c:	003ff506 	br	7d34 <memmove+0x124>
    7d60:	f800283a 	ret
    7d64:	500d883a 	mov	r6,r10
    7d68:	003ff106 	br	7d30 <memmove+0x120>

00007d6c <memset>:
    7d6c:	20c000cc 	andi	r3,r4,3
    7d70:	2005883a 	mov	r2,r4
    7d74:	18004426 	beq	r3,zero,7e88 <memset+0x11c>
    7d78:	31ffffc4 	addi	r7,r6,-1
    7d7c:	30004026 	beq	r6,zero,7e80 <memset+0x114>
    7d80:	2813883a 	mov	r9,r5
    7d84:	200d883a 	mov	r6,r4
    7d88:	2007883a 	mov	r3,r4
    7d8c:	00000406 	br	7da0 <memset+0x34>
    7d90:	3a3fffc4 	addi	r8,r7,-1
    7d94:	31800044 	addi	r6,r6,1
    7d98:	38003926 	beq	r7,zero,7e80 <memset+0x114>
    7d9c:	400f883a 	mov	r7,r8
    7da0:	18c00044 	addi	r3,r3,1
    7da4:	32400005 	stb	r9,0(r6)
    7da8:	1a0000cc 	andi	r8,r3,3
    7dac:	403ff81e 	bne	r8,zero,7d90 <memset+0x24>
    7db0:	010000c4 	movi	r4,3
    7db4:	21c02d2e 	bgeu	r4,r7,7e6c <memset+0x100>
    7db8:	29003fcc 	andi	r4,r5,255
    7dbc:	200c923a 	slli	r6,r4,8
    7dc0:	3108b03a 	or	r4,r6,r4
    7dc4:	200c943a 	slli	r6,r4,16
    7dc8:	218cb03a 	or	r6,r4,r6
    7dcc:	010003c4 	movi	r4,15
    7dd0:	21c0182e 	bgeu	r4,r7,7e34 <memset+0xc8>
    7dd4:	3b3ffc04 	addi	r12,r7,-16
    7dd8:	6018d13a 	srli	r12,r12,4
    7ddc:	1a000104 	addi	r8,r3,4
    7de0:	1ac00204 	addi	r11,r3,8
    7de4:	6008913a 	slli	r4,r12,4
    7de8:	1a800304 	addi	r10,r3,12
    7dec:	1813883a 	mov	r9,r3
    7df0:	21000504 	addi	r4,r4,20
    7df4:	1909883a 	add	r4,r3,r4
    7df8:	49800015 	stw	r6,0(r9)
    7dfc:	41800015 	stw	r6,0(r8)
    7e00:	59800015 	stw	r6,0(r11)
    7e04:	51800015 	stw	r6,0(r10)
    7e08:	42000404 	addi	r8,r8,16
    7e0c:	4a400404 	addi	r9,r9,16
    7e10:	5ac00404 	addi	r11,r11,16
    7e14:	52800404 	addi	r10,r10,16
    7e18:	413ff71e 	bne	r8,r4,7df8 <memset+0x8c>
    7e1c:	63000044 	addi	r12,r12,1
    7e20:	6018913a 	slli	r12,r12,4
    7e24:	39c003cc 	andi	r7,r7,15
    7e28:	010000c4 	movi	r4,3
    7e2c:	1b07883a 	add	r3,r3,r12
    7e30:	21c00e2e 	bgeu	r4,r7,7e6c <memset+0x100>
    7e34:	1813883a 	mov	r9,r3
    7e38:	3811883a 	mov	r8,r7
    7e3c:	010000c4 	movi	r4,3
    7e40:	49800015 	stw	r6,0(r9)
    7e44:	423fff04 	addi	r8,r8,-4
    7e48:	4a400104 	addi	r9,r9,4
    7e4c:	223ffc36 	bltu	r4,r8,7e40 <memset+0xd4>
    7e50:	393fff04 	addi	r4,r7,-4
    7e54:	2008d0ba 	srli	r4,r4,2
    7e58:	39c000cc 	andi	r7,r7,3
    7e5c:	21000044 	addi	r4,r4,1
    7e60:	2109883a 	add	r4,r4,r4
    7e64:	2109883a 	add	r4,r4,r4
    7e68:	1907883a 	add	r3,r3,r4
    7e6c:	38000526 	beq	r7,zero,7e84 <memset+0x118>
    7e70:	19cf883a 	add	r7,r3,r7
    7e74:	19400005 	stb	r5,0(r3)
    7e78:	18c00044 	addi	r3,r3,1
    7e7c:	38fffd1e 	bne	r7,r3,7e74 <memset+0x108>
    7e80:	f800283a 	ret
    7e84:	f800283a 	ret
    7e88:	2007883a 	mov	r3,r4
    7e8c:	300f883a 	mov	r7,r6
    7e90:	003fc706 	br	7db0 <memset+0x44>

00007e94 <_Balloc>:
    7e94:	20801317 	ldw	r2,76(r4)
    7e98:	defffc04 	addi	sp,sp,-16
    7e9c:	dc400115 	stw	r17,4(sp)
    7ea0:	dc000015 	stw	r16,0(sp)
    7ea4:	dfc00315 	stw	ra,12(sp)
    7ea8:	dc800215 	stw	r18,8(sp)
    7eac:	2023883a 	mov	r17,r4
    7eb0:	2821883a 	mov	r16,r5
    7eb4:	10000f26 	beq	r2,zero,7ef4 <_Balloc+0x60>
    7eb8:	8407883a 	add	r3,r16,r16
    7ebc:	18c7883a 	add	r3,r3,r3
    7ec0:	10c7883a 	add	r3,r2,r3
    7ec4:	18800017 	ldw	r2,0(r3)
    7ec8:	10001126 	beq	r2,zero,7f10 <_Balloc+0x7c>
    7ecc:	11000017 	ldw	r4,0(r2)
    7ed0:	19000015 	stw	r4,0(r3)
    7ed4:	10000415 	stw	zero,16(r2)
    7ed8:	10000315 	stw	zero,12(r2)
    7edc:	dfc00317 	ldw	ra,12(sp)
    7ee0:	dc800217 	ldw	r18,8(sp)
    7ee4:	dc400117 	ldw	r17,4(sp)
    7ee8:	dc000017 	ldw	r16,0(sp)
    7eec:	dec00404 	addi	sp,sp,16
    7ef0:	f800283a 	ret
    7ef4:	01800844 	movi	r6,33
    7ef8:	01400104 	movi	r5,4
    7efc:	000ad7c0 	call	ad7c <_calloc_r>
    7f00:	88801315 	stw	r2,76(r17)
    7f04:	103fec1e 	bne	r2,zero,7eb8 <_Balloc+0x24>
    7f08:	0005883a 	mov	r2,zero
    7f0c:	003ff306 	br	7edc <_Balloc+0x48>
    7f10:	01400044 	movi	r5,1
    7f14:	2c24983a 	sll	r18,r5,r16
    7f18:	8809883a 	mov	r4,r17
    7f1c:	91800144 	addi	r6,r18,5
    7f20:	318d883a 	add	r6,r6,r6
    7f24:	318d883a 	add	r6,r6,r6
    7f28:	000ad7c0 	call	ad7c <_calloc_r>
    7f2c:	103ff626 	beq	r2,zero,7f08 <_Balloc+0x74>
    7f30:	14000115 	stw	r16,4(r2)
    7f34:	14800215 	stw	r18,8(r2)
    7f38:	003fe606 	br	7ed4 <_Balloc+0x40>

00007f3c <_Bfree>:
    7f3c:	28000826 	beq	r5,zero,7f60 <_Bfree+0x24>
    7f40:	28c00117 	ldw	r3,4(r5)
    7f44:	20801317 	ldw	r2,76(r4)
    7f48:	18c7883a 	add	r3,r3,r3
    7f4c:	18c7883a 	add	r3,r3,r3
    7f50:	10c5883a 	add	r2,r2,r3
    7f54:	10c00017 	ldw	r3,0(r2)
    7f58:	28c00015 	stw	r3,0(r5)
    7f5c:	11400015 	stw	r5,0(r2)
    7f60:	f800283a 	ret

00007f64 <__multadd>:
    7f64:	defffa04 	addi	sp,sp,-24
    7f68:	dc800315 	stw	r18,12(sp)
    7f6c:	dc400215 	stw	r17,8(sp)
    7f70:	dc000115 	stw	r16,4(sp)
    7f74:	2823883a 	mov	r17,r5
    7f78:	2c000417 	ldw	r16,16(r5)
    7f7c:	dfc00515 	stw	ra,20(sp)
    7f80:	dcc00415 	stw	r19,16(sp)
    7f84:	2025883a 	mov	r18,r4
    7f88:	29400504 	addi	r5,r5,20
    7f8c:	0011883a 	mov	r8,zero
    7f90:	28c00017 	ldw	r3,0(r5)
    7f94:	29400104 	addi	r5,r5,4
    7f98:	42000044 	addi	r8,r8,1
    7f9c:	18bfffcc 	andi	r2,r3,65535
    7fa0:	1185383a 	mul	r2,r2,r6
    7fa4:	1806d43a 	srli	r3,r3,16
    7fa8:	11cf883a 	add	r7,r2,r7
    7fac:	3808d43a 	srli	r4,r7,16
    7fb0:	1987383a 	mul	r3,r3,r6
    7fb4:	38bfffcc 	andi	r2,r7,65535
    7fb8:	1907883a 	add	r3,r3,r4
    7fbc:	1808943a 	slli	r4,r3,16
    7fc0:	180ed43a 	srli	r7,r3,16
    7fc4:	2085883a 	add	r2,r4,r2
    7fc8:	28bfff15 	stw	r2,-4(r5)
    7fcc:	443ff016 	blt	r8,r16,7f90 <__multadd+0x2c>
    7fd0:	38000926 	beq	r7,zero,7ff8 <__multadd+0x94>
    7fd4:	88800217 	ldw	r2,8(r17)
    7fd8:	80800f0e 	bge	r16,r2,8018 <__multadd+0xb4>
    7fdc:	80800144 	addi	r2,r16,5
    7fe0:	1085883a 	add	r2,r2,r2
    7fe4:	1085883a 	add	r2,r2,r2
    7fe8:	8885883a 	add	r2,r17,r2
    7fec:	11c00015 	stw	r7,0(r2)
    7ff0:	84000044 	addi	r16,r16,1
    7ff4:	8c000415 	stw	r16,16(r17)
    7ff8:	8805883a 	mov	r2,r17
    7ffc:	dfc00517 	ldw	ra,20(sp)
    8000:	dcc00417 	ldw	r19,16(sp)
    8004:	dc800317 	ldw	r18,12(sp)
    8008:	dc400217 	ldw	r17,8(sp)
    800c:	dc000117 	ldw	r16,4(sp)
    8010:	dec00604 	addi	sp,sp,24
    8014:	f800283a 	ret
    8018:	89400117 	ldw	r5,4(r17)
    801c:	9009883a 	mov	r4,r18
    8020:	d9c00015 	stw	r7,0(sp)
    8024:	29400044 	addi	r5,r5,1
    8028:	0007e940 	call	7e94 <_Balloc>
    802c:	89800417 	ldw	r6,16(r17)
    8030:	89400304 	addi	r5,r17,12
    8034:	11000304 	addi	r4,r2,12
    8038:	31800084 	addi	r6,r6,2
    803c:	318d883a 	add	r6,r6,r6
    8040:	318d883a 	add	r6,r6,r6
    8044:	1027883a 	mov	r19,r2
    8048:	0007ac80 	call	7ac8 <memcpy>
    804c:	d9c00017 	ldw	r7,0(sp)
    8050:	88000a26 	beq	r17,zero,807c <__multadd+0x118>
    8054:	88c00117 	ldw	r3,4(r17)
    8058:	90801317 	ldw	r2,76(r18)
    805c:	18c7883a 	add	r3,r3,r3
    8060:	18c7883a 	add	r3,r3,r3
    8064:	10c5883a 	add	r2,r2,r3
    8068:	10c00017 	ldw	r3,0(r2)
    806c:	88c00015 	stw	r3,0(r17)
    8070:	14400015 	stw	r17,0(r2)
    8074:	9823883a 	mov	r17,r19
    8078:	003fd806 	br	7fdc <__multadd+0x78>
    807c:	9823883a 	mov	r17,r19
    8080:	003fd606 	br	7fdc <__multadd+0x78>

00008084 <__s2b>:
    8084:	defff904 	addi	sp,sp,-28
    8088:	dc400115 	stw	r17,4(sp)
    808c:	dc000015 	stw	r16,0(sp)
    8090:	2023883a 	mov	r17,r4
    8094:	2821883a 	mov	r16,r5
    8098:	39000204 	addi	r4,r7,8
    809c:	01400244 	movi	r5,9
    80a0:	dcc00315 	stw	r19,12(sp)
    80a4:	dc800215 	stw	r18,8(sp)
    80a8:	dfc00615 	stw	ra,24(sp)
    80ac:	dd400515 	stw	r21,20(sp)
    80b0:	dd000415 	stw	r20,16(sp)
    80b4:	3825883a 	mov	r18,r7
    80b8:	3027883a 	mov	r19,r6
    80bc:	0001dcc0 	call	1dcc <__divsi3>
    80c0:	00c00044 	movi	r3,1
    80c4:	000b883a 	mov	r5,zero
    80c8:	1880030e 	bge	r3,r2,80d8 <__s2b+0x54>
    80cc:	18c7883a 	add	r3,r3,r3
    80d0:	29400044 	addi	r5,r5,1
    80d4:	18bffd16 	blt	r3,r2,80cc <__s2b+0x48>
    80d8:	8809883a 	mov	r4,r17
    80dc:	0007e940 	call	7e94 <_Balloc>
    80e0:	d8c00717 	ldw	r3,28(sp)
    80e4:	10c00515 	stw	r3,20(r2)
    80e8:	00c00044 	movi	r3,1
    80ec:	10c00415 	stw	r3,16(r2)
    80f0:	00c00244 	movi	r3,9
    80f4:	1cc0210e 	bge	r3,r19,817c <__s2b+0xf8>
    80f8:	80eb883a 	add	r21,r16,r3
    80fc:	a829883a 	mov	r20,r21
    8100:	84e1883a 	add	r16,r16,r19
    8104:	a1c00007 	ldb	r7,0(r20)
    8108:	01800284 	movi	r6,10
    810c:	a5000044 	addi	r20,r20,1
    8110:	100b883a 	mov	r5,r2
    8114:	39fff404 	addi	r7,r7,-48
    8118:	8809883a 	mov	r4,r17
    811c:	0007f640 	call	7f64 <__multadd>
    8120:	a43ff81e 	bne	r20,r16,8104 <__s2b+0x80>
    8124:	ace1883a 	add	r16,r21,r19
    8128:	843ffe04 	addi	r16,r16,-8
    812c:	9c800a0e 	bge	r19,r18,8158 <__s2b+0xd4>
    8130:	94e5c83a 	sub	r18,r18,r19
    8134:	84a5883a 	add	r18,r16,r18
    8138:	81c00007 	ldb	r7,0(r16)
    813c:	01800284 	movi	r6,10
    8140:	84000044 	addi	r16,r16,1
    8144:	100b883a 	mov	r5,r2
    8148:	39fff404 	addi	r7,r7,-48
    814c:	8809883a 	mov	r4,r17
    8150:	0007f640 	call	7f64 <__multadd>
    8154:	84bff81e 	bne	r16,r18,8138 <__s2b+0xb4>
    8158:	dfc00617 	ldw	ra,24(sp)
    815c:	dd400517 	ldw	r21,20(sp)
    8160:	dd000417 	ldw	r20,16(sp)
    8164:	dcc00317 	ldw	r19,12(sp)
    8168:	dc800217 	ldw	r18,8(sp)
    816c:	dc400117 	ldw	r17,4(sp)
    8170:	dc000017 	ldw	r16,0(sp)
    8174:	dec00704 	addi	sp,sp,28
    8178:	f800283a 	ret
    817c:	84000284 	addi	r16,r16,10
    8180:	1827883a 	mov	r19,r3
    8184:	003fe906 	br	812c <__s2b+0xa8>

00008188 <__hi0bits>:
    8188:	20bfffec 	andhi	r2,r4,65535
    818c:	1000141e 	bne	r2,zero,81e0 <__hi0bits+0x58>
    8190:	2008943a 	slli	r4,r4,16
    8194:	00800404 	movi	r2,16
    8198:	20ffc02c 	andhi	r3,r4,65280
    819c:	1800021e 	bne	r3,zero,81a8 <__hi0bits+0x20>
    81a0:	2008923a 	slli	r4,r4,8
    81a4:	10800204 	addi	r2,r2,8
    81a8:	20fc002c 	andhi	r3,r4,61440
    81ac:	1800021e 	bne	r3,zero,81b8 <__hi0bits+0x30>
    81b0:	2008913a 	slli	r4,r4,4
    81b4:	10800104 	addi	r2,r2,4
    81b8:	20f0002c 	andhi	r3,r4,49152
    81bc:	1800031e 	bne	r3,zero,81cc <__hi0bits+0x44>
    81c0:	2109883a 	add	r4,r4,r4
    81c4:	10800084 	addi	r2,r2,2
    81c8:	2109883a 	add	r4,r4,r4
    81cc:	20000316 	blt	r4,zero,81dc <__hi0bits+0x54>
    81d0:	2110002c 	andhi	r4,r4,16384
    81d4:	2000041e 	bne	r4,zero,81e8 <__hi0bits+0x60>
    81d8:	00800804 	movi	r2,32
    81dc:	f800283a 	ret
    81e0:	0005883a 	mov	r2,zero
    81e4:	003fec06 	br	8198 <__hi0bits+0x10>
    81e8:	10800044 	addi	r2,r2,1
    81ec:	f800283a 	ret

000081f0 <__lo0bits>:
    81f0:	20c00017 	ldw	r3,0(r4)
    81f4:	188001cc 	andi	r2,r3,7
    81f8:	10000826 	beq	r2,zero,821c <__lo0bits+0x2c>
    81fc:	1880004c 	andi	r2,r3,1
    8200:	1000211e 	bne	r2,zero,8288 <__lo0bits+0x98>
    8204:	1880008c 	andi	r2,r3,2
    8208:	1000211e 	bne	r2,zero,8290 <__lo0bits+0xa0>
    820c:	1806d0ba 	srli	r3,r3,2
    8210:	00800084 	movi	r2,2
    8214:	20c00015 	stw	r3,0(r4)
    8218:	f800283a 	ret
    821c:	18bfffcc 	andi	r2,r3,65535
    8220:	10001326 	beq	r2,zero,8270 <__lo0bits+0x80>
    8224:	0005883a 	mov	r2,zero
    8228:	19403fcc 	andi	r5,r3,255
    822c:	2800021e 	bne	r5,zero,8238 <__lo0bits+0x48>
    8230:	1806d23a 	srli	r3,r3,8
    8234:	10800204 	addi	r2,r2,8
    8238:	194003cc 	andi	r5,r3,15
    823c:	2800021e 	bne	r5,zero,8248 <__lo0bits+0x58>
    8240:	1806d13a 	srli	r3,r3,4
    8244:	10800104 	addi	r2,r2,4
    8248:	194000cc 	andi	r5,r3,3
    824c:	2800021e 	bne	r5,zero,8258 <__lo0bits+0x68>
    8250:	1806d0ba 	srli	r3,r3,2
    8254:	10800084 	addi	r2,r2,2
    8258:	1940004c 	andi	r5,r3,1
    825c:	2800081e 	bne	r5,zero,8280 <__lo0bits+0x90>
    8260:	1806d07a 	srli	r3,r3,1
    8264:	1800051e 	bne	r3,zero,827c <__lo0bits+0x8c>
    8268:	00800804 	movi	r2,32
    826c:	f800283a 	ret
    8270:	1806d43a 	srli	r3,r3,16
    8274:	00800404 	movi	r2,16
    8278:	003feb06 	br	8228 <__lo0bits+0x38>
    827c:	10800044 	addi	r2,r2,1
    8280:	20c00015 	stw	r3,0(r4)
    8284:	f800283a 	ret
    8288:	0005883a 	mov	r2,zero
    828c:	f800283a 	ret
    8290:	1806d07a 	srli	r3,r3,1
    8294:	00800044 	movi	r2,1
    8298:	20c00015 	stw	r3,0(r4)
    829c:	f800283a 	ret

000082a0 <__i2b>:
    82a0:	defffd04 	addi	sp,sp,-12
    82a4:	dc000015 	stw	r16,0(sp)
    82a8:	04000044 	movi	r16,1
    82ac:	dc400115 	stw	r17,4(sp)
    82b0:	2823883a 	mov	r17,r5
    82b4:	800b883a 	mov	r5,r16
    82b8:	dfc00215 	stw	ra,8(sp)
    82bc:	0007e940 	call	7e94 <_Balloc>
    82c0:	14400515 	stw	r17,20(r2)
    82c4:	14000415 	stw	r16,16(r2)
    82c8:	dfc00217 	ldw	ra,8(sp)
    82cc:	dc400117 	ldw	r17,4(sp)
    82d0:	dc000017 	ldw	r16,0(sp)
    82d4:	dec00304 	addi	sp,sp,12
    82d8:	f800283a 	ret

000082dc <__multiply>:
    82dc:	defffa04 	addi	sp,sp,-24
    82e0:	dcc00315 	stw	r19,12(sp)
    82e4:	dc800215 	stw	r18,8(sp)
    82e8:	34c00417 	ldw	r19,16(r6)
    82ec:	2c800417 	ldw	r18,16(r5)
    82f0:	dd000415 	stw	r20,16(sp)
    82f4:	dc400115 	stw	r17,4(sp)
    82f8:	dfc00515 	stw	ra,20(sp)
    82fc:	dc000015 	stw	r16,0(sp)
    8300:	2829883a 	mov	r20,r5
    8304:	3023883a 	mov	r17,r6
    8308:	94c0050e 	bge	r18,r19,8320 <__multiply+0x44>
    830c:	9007883a 	mov	r3,r18
    8310:	3029883a 	mov	r20,r6
    8314:	9825883a 	mov	r18,r19
    8318:	2823883a 	mov	r17,r5
    831c:	1827883a 	mov	r19,r3
    8320:	a0800217 	ldw	r2,8(r20)
    8324:	94e1883a 	add	r16,r18,r19
    8328:	a1400117 	ldw	r5,4(r20)
    832c:	1400010e 	bge	r2,r16,8334 <__multiply+0x58>
    8330:	29400044 	addi	r5,r5,1
    8334:	0007e940 	call	7e94 <_Balloc>
    8338:	8415883a 	add	r10,r16,r16
    833c:	12c00504 	addi	r11,r2,20
    8340:	5295883a 	add	r10,r10,r10
    8344:	5a95883a 	add	r10,r11,r10
    8348:	5807883a 	mov	r3,r11
    834c:	5a80032e 	bgeu	r11,r10,835c <__multiply+0x80>
    8350:	18000015 	stw	zero,0(r3)
    8354:	18c00104 	addi	r3,r3,4
    8358:	1abffd36 	bltu	r3,r10,8350 <__multiply+0x74>
    835c:	9ce7883a 	add	r19,r19,r19
    8360:	94a5883a 	add	r18,r18,r18
    8364:	89800504 	addi	r6,r17,20
    8368:	9ce7883a 	add	r19,r19,r19
    836c:	a3400504 	addi	r13,r20,20
    8370:	94a5883a 	add	r18,r18,r18
    8374:	34d9883a 	add	r12,r6,r19
    8378:	6c93883a 	add	r9,r13,r18
    837c:	3300422e 	bgeu	r6,r12,8488 <__multiply+0x1ac>
    8380:	37c00017 	ldw	ra,0(r6)
    8384:	fbffffcc 	andi	r15,ra,65535
    8388:	78001b26 	beq	r15,zero,83f8 <__multiply+0x11c>
    838c:	5811883a 	mov	r8,r11
    8390:	681d883a 	mov	r14,r13
    8394:	000f883a 	mov	r7,zero
    8398:	71000017 	ldw	r4,0(r14)
    839c:	40c00017 	ldw	r3,0(r8)
    83a0:	73800104 	addi	r14,r14,4
    83a4:	217fffcc 	andi	r5,r4,65535
    83a8:	2bcb383a 	mul	r5,r5,r15
    83ac:	2008d43a 	srli	r4,r4,16
    83b0:	1c7fffcc 	andi	r17,r3,65535
    83b4:	2c4b883a 	add	r5,r5,r17
    83b8:	29cb883a 	add	r5,r5,r7
    83bc:	23c9383a 	mul	r4,r4,r15
    83c0:	1806d43a 	srli	r3,r3,16
    83c4:	280ed43a 	srli	r7,r5,16
    83c8:	297fffcc 	andi	r5,r5,65535
    83cc:	20c7883a 	add	r3,r4,r3
    83d0:	19c7883a 	add	r3,r3,r7
    83d4:	1808943a 	slli	r4,r3,16
    83d8:	4023883a 	mov	r17,r8
    83dc:	180ed43a 	srli	r7,r3,16
    83e0:	214ab03a 	or	r5,r4,r5
    83e4:	41400015 	stw	r5,0(r8)
    83e8:	42000104 	addi	r8,r8,4
    83ec:	727fea36 	bltu	r14,r9,8398 <__multiply+0xbc>
    83f0:	89c00115 	stw	r7,4(r17)
    83f4:	37c00017 	ldw	ra,0(r6)
    83f8:	f83ed43a 	srli	ra,ra,16
    83fc:	f8001f26 	beq	ra,zero,847c <__multiply+0x1a0>
    8400:	58c00017 	ldw	r3,0(r11)
    8404:	681d883a 	mov	r14,r13
    8408:	581f883a 	mov	r15,r11
    840c:	1811883a 	mov	r8,r3
    8410:	5825883a 	mov	r18,r11
    8414:	000f883a 	mov	r7,zero
    8418:	00000106 	br	8420 <__multiply+0x144>
    841c:	8825883a 	mov	r18,r17
    8420:	7140000b 	ldhu	r5,0(r14)
    8424:	4010d43a 	srli	r8,r8,16
    8428:	193fffcc 	andi	r4,r3,65535
    842c:	2fcb383a 	mul	r5,r5,ra
    8430:	7bc00104 	addi	r15,r15,4
    8434:	73800104 	addi	r14,r14,4
    8438:	2a0b883a 	add	r5,r5,r8
    843c:	29cb883a 	add	r5,r5,r7
    8440:	2806943a 	slli	r3,r5,16
    8444:	94400104 	addi	r17,r18,4
    8448:	280ad43a 	srli	r5,r5,16
    844c:	1908b03a 	or	r4,r3,r4
    8450:	793fff15 	stw	r4,-4(r15)
    8454:	70ffff17 	ldw	r3,-4(r14)
    8458:	8a000017 	ldw	r8,0(r17)
    845c:	1806d43a 	srli	r3,r3,16
    8460:	413fffcc 	andi	r4,r8,65535
    8464:	1fc7383a 	mul	r3,r3,ra
    8468:	1907883a 	add	r3,r3,r4
    846c:	1947883a 	add	r3,r3,r5
    8470:	180ed43a 	srli	r7,r3,16
    8474:	727fe936 	bltu	r14,r9,841c <__multiply+0x140>
    8478:	90c00115 	stw	r3,4(r18)
    847c:	31800104 	addi	r6,r6,4
    8480:	5ac00104 	addi	r11,r11,4
    8484:	333fbe36 	bltu	r6,r12,8380 <__multiply+0xa4>
    8488:	0400090e 	bge	zero,r16,84b0 <__multiply+0x1d4>
    848c:	50ffff17 	ldw	r3,-4(r10)
    8490:	52bfff04 	addi	r10,r10,-4
    8494:	18000326 	beq	r3,zero,84a4 <__multiply+0x1c8>
    8498:	00000506 	br	84b0 <__multiply+0x1d4>
    849c:	50c00017 	ldw	r3,0(r10)
    84a0:	1800031e 	bne	r3,zero,84b0 <__multiply+0x1d4>
    84a4:	843fffc4 	addi	r16,r16,-1
    84a8:	52bfff04 	addi	r10,r10,-4
    84ac:	803ffb1e 	bne	r16,zero,849c <__multiply+0x1c0>
    84b0:	14000415 	stw	r16,16(r2)
    84b4:	dfc00517 	ldw	ra,20(sp)
    84b8:	dd000417 	ldw	r20,16(sp)
    84bc:	dcc00317 	ldw	r19,12(sp)
    84c0:	dc800217 	ldw	r18,8(sp)
    84c4:	dc400117 	ldw	r17,4(sp)
    84c8:	dc000017 	ldw	r16,0(sp)
    84cc:	dec00604 	addi	sp,sp,24
    84d0:	f800283a 	ret

000084d4 <__pow5mult>:
    84d4:	defffa04 	addi	sp,sp,-24
    84d8:	dcc00315 	stw	r19,12(sp)
    84dc:	dc000015 	stw	r16,0(sp)
    84e0:	dfc00515 	stw	ra,20(sp)
    84e4:	dd000415 	stw	r20,16(sp)
    84e8:	dc800215 	stw	r18,8(sp)
    84ec:	dc400115 	stw	r17,4(sp)
    84f0:	308000cc 	andi	r2,r6,3
    84f4:	3021883a 	mov	r16,r6
    84f8:	2027883a 	mov	r19,r4
    84fc:	10002f1e 	bne	r2,zero,85bc <__pow5mult+0xe8>
    8500:	2825883a 	mov	r18,r5
    8504:	8021d0ba 	srai	r16,r16,2
    8508:	80001a26 	beq	r16,zero,8574 <__pow5mult+0xa0>
    850c:	9c401217 	ldw	r17,72(r19)
    8510:	8800061e 	bne	r17,zero,852c <__pow5mult+0x58>
    8514:	00003406 	br	85e8 <__pow5mult+0x114>
    8518:	8021d07a 	srai	r16,r16,1
    851c:	80001526 	beq	r16,zero,8574 <__pow5mult+0xa0>
    8520:	88800017 	ldw	r2,0(r17)
    8524:	10001c26 	beq	r2,zero,8598 <__pow5mult+0xc4>
    8528:	1023883a 	mov	r17,r2
    852c:	8080004c 	andi	r2,r16,1
    8530:	103ff926 	beq	r2,zero,8518 <__pow5mult+0x44>
    8534:	880d883a 	mov	r6,r17
    8538:	900b883a 	mov	r5,r18
    853c:	9809883a 	mov	r4,r19
    8540:	00082dc0 	call	82dc <__multiply>
    8544:	90001b26 	beq	r18,zero,85b4 <__pow5mult+0xe0>
    8548:	91000117 	ldw	r4,4(r18)
    854c:	98c01317 	ldw	r3,76(r19)
    8550:	8021d07a 	srai	r16,r16,1
    8554:	2109883a 	add	r4,r4,r4
    8558:	2109883a 	add	r4,r4,r4
    855c:	1907883a 	add	r3,r3,r4
    8560:	19000017 	ldw	r4,0(r3)
    8564:	91000015 	stw	r4,0(r18)
    8568:	1c800015 	stw	r18,0(r3)
    856c:	1025883a 	mov	r18,r2
    8570:	803feb1e 	bne	r16,zero,8520 <__pow5mult+0x4c>
    8574:	9005883a 	mov	r2,r18
    8578:	dfc00517 	ldw	ra,20(sp)
    857c:	dd000417 	ldw	r20,16(sp)
    8580:	dcc00317 	ldw	r19,12(sp)
    8584:	dc800217 	ldw	r18,8(sp)
    8588:	dc400117 	ldw	r17,4(sp)
    858c:	dc000017 	ldw	r16,0(sp)
    8590:	dec00604 	addi	sp,sp,24
    8594:	f800283a 	ret
    8598:	880d883a 	mov	r6,r17
    859c:	880b883a 	mov	r5,r17
    85a0:	9809883a 	mov	r4,r19
    85a4:	00082dc0 	call	82dc <__multiply>
    85a8:	88800015 	stw	r2,0(r17)
    85ac:	10000015 	stw	zero,0(r2)
    85b0:	003fdd06 	br	8528 <__pow5mult+0x54>
    85b4:	1025883a 	mov	r18,r2
    85b8:	003fd706 	br	8518 <__pow5mult+0x44>
    85bc:	10bfffc4 	addi	r2,r2,-1
    85c0:	1085883a 	add	r2,r2,r2
    85c4:	00c00074 	movhi	r3,1
    85c8:	18c5a204 	addi	r3,r3,5768
    85cc:	1085883a 	add	r2,r2,r2
    85d0:	1885883a 	add	r2,r3,r2
    85d4:	11800017 	ldw	r6,0(r2)
    85d8:	000f883a 	mov	r7,zero
    85dc:	0007f640 	call	7f64 <__multadd>
    85e0:	1025883a 	mov	r18,r2
    85e4:	003fc706 	br	8504 <__pow5mult+0x30>
    85e8:	05000044 	movi	r20,1
    85ec:	a00b883a 	mov	r5,r20
    85f0:	9809883a 	mov	r4,r19
    85f4:	0007e940 	call	7e94 <_Balloc>
    85f8:	1023883a 	mov	r17,r2
    85fc:	00809c44 	movi	r2,625
    8600:	88800515 	stw	r2,20(r17)
    8604:	8d000415 	stw	r20,16(r17)
    8608:	9c401215 	stw	r17,72(r19)
    860c:	88000015 	stw	zero,0(r17)
    8610:	003fc606 	br	852c <__pow5mult+0x58>

00008614 <__lshift>:
    8614:	defff904 	addi	sp,sp,-28
    8618:	dd400515 	stw	r21,20(sp)
    861c:	dcc00315 	stw	r19,12(sp)
    8620:	302bd17a 	srai	r21,r6,5
    8624:	2cc00417 	ldw	r19,16(r5)
    8628:	28800217 	ldw	r2,8(r5)
    862c:	dd000415 	stw	r20,16(sp)
    8630:	ace7883a 	add	r19,r21,r19
    8634:	dc800215 	stw	r18,8(sp)
    8638:	dc400115 	stw	r17,4(sp)
    863c:	dc000015 	stw	r16,0(sp)
    8640:	dfc00615 	stw	ra,24(sp)
    8644:	9c000044 	addi	r16,r19,1
    8648:	2823883a 	mov	r17,r5
    864c:	3029883a 	mov	r20,r6
    8650:	2025883a 	mov	r18,r4
    8654:	29400117 	ldw	r5,4(r5)
    8658:	1400030e 	bge	r2,r16,8668 <__lshift+0x54>
    865c:	1085883a 	add	r2,r2,r2
    8660:	29400044 	addi	r5,r5,1
    8664:	143ffd16 	blt	r2,r16,865c <__lshift+0x48>
    8668:	9009883a 	mov	r4,r18
    866c:	0007e940 	call	7e94 <_Balloc>
    8670:	10c00504 	addi	r3,r2,20
    8674:	0540070e 	bge	zero,r21,8694 <__lshift+0x80>
    8678:	ad6b883a 	add	r21,r21,r21
    867c:	ad6b883a 	add	r21,r21,r21
    8680:	1809883a 	mov	r4,r3
    8684:	1d47883a 	add	r3,r3,r21
    8688:	20000015 	stw	zero,0(r4)
    868c:	21000104 	addi	r4,r4,4
    8690:	193ffd1e 	bne	r3,r4,8688 <__lshift+0x74>
    8694:	8a000417 	ldw	r8,16(r17)
    8698:	89000504 	addi	r4,r17,20
    869c:	a18007cc 	andi	r6,r20,31
    86a0:	4211883a 	add	r8,r8,r8
    86a4:	4211883a 	add	r8,r8,r8
    86a8:	2211883a 	add	r8,r4,r8
    86ac:	30002326 	beq	r6,zero,873c <__lshift+0x128>
    86b0:	02400804 	movi	r9,32
    86b4:	4993c83a 	sub	r9,r9,r6
    86b8:	000b883a 	mov	r5,zero
    86bc:	21c00017 	ldw	r7,0(r4)
    86c0:	1815883a 	mov	r10,r3
    86c4:	18c00104 	addi	r3,r3,4
    86c8:	398e983a 	sll	r7,r7,r6
    86cc:	21000104 	addi	r4,r4,4
    86d0:	394ab03a 	or	r5,r7,r5
    86d4:	197fff15 	stw	r5,-4(r3)
    86d8:	217fff17 	ldw	r5,-4(r4)
    86dc:	2a4ad83a 	srl	r5,r5,r9
    86e0:	223ff636 	bltu	r4,r8,86bc <__lshift+0xa8>
    86e4:	51400115 	stw	r5,4(r10)
    86e8:	28001a1e 	bne	r5,zero,8754 <__lshift+0x140>
    86ec:	843fffc4 	addi	r16,r16,-1
    86f0:	14000415 	stw	r16,16(r2)
    86f4:	88000826 	beq	r17,zero,8718 <__lshift+0x104>
    86f8:	89000117 	ldw	r4,4(r17)
    86fc:	90c01317 	ldw	r3,76(r18)
    8700:	2109883a 	add	r4,r4,r4
    8704:	2109883a 	add	r4,r4,r4
    8708:	1907883a 	add	r3,r3,r4
    870c:	19000017 	ldw	r4,0(r3)
    8710:	89000015 	stw	r4,0(r17)
    8714:	1c400015 	stw	r17,0(r3)
    8718:	dfc00617 	ldw	ra,24(sp)
    871c:	dd400517 	ldw	r21,20(sp)
    8720:	dd000417 	ldw	r20,16(sp)
    8724:	dcc00317 	ldw	r19,12(sp)
    8728:	dc800217 	ldw	r18,8(sp)
    872c:	dc400117 	ldw	r17,4(sp)
    8730:	dc000017 	ldw	r16,0(sp)
    8734:	dec00704 	addi	sp,sp,28
    8738:	f800283a 	ret
    873c:	21400017 	ldw	r5,0(r4)
    8740:	18c00104 	addi	r3,r3,4
    8744:	21000104 	addi	r4,r4,4
    8748:	197fff15 	stw	r5,-4(r3)
    874c:	223ffb36 	bltu	r4,r8,873c <__lshift+0x128>
    8750:	003fe606 	br	86ec <__lshift+0xd8>
    8754:	9c000084 	addi	r16,r19,2
    8758:	003fe406 	br	86ec <__lshift+0xd8>

0000875c <__mcmp>:
    875c:	20800417 	ldw	r2,16(r4)
    8760:	28c00417 	ldw	r3,16(r5)
    8764:	10c5c83a 	sub	r2,r2,r3
    8768:	1000111e 	bne	r2,zero,87b0 <__mcmp+0x54>
    876c:	18c7883a 	add	r3,r3,r3
    8770:	18c7883a 	add	r3,r3,r3
    8774:	21000504 	addi	r4,r4,20
    8778:	29400504 	addi	r5,r5,20
    877c:	20c5883a 	add	r2,r4,r3
    8780:	28cb883a 	add	r5,r5,r3
    8784:	00000106 	br	878c <__mcmp+0x30>
    8788:	20800a2e 	bgeu	r4,r2,87b4 <__mcmp+0x58>
    878c:	10bfff04 	addi	r2,r2,-4
    8790:	297fff04 	addi	r5,r5,-4
    8794:	11800017 	ldw	r6,0(r2)
    8798:	28c00017 	ldw	r3,0(r5)
    879c:	30fffa26 	beq	r6,r3,8788 <__mcmp+0x2c>
    87a0:	30c00236 	bltu	r6,r3,87ac <__mcmp+0x50>
    87a4:	00800044 	movi	r2,1
    87a8:	f800283a 	ret
    87ac:	00bfffc4 	movi	r2,-1
    87b0:	f800283a 	ret
    87b4:	0005883a 	mov	r2,zero
    87b8:	f800283a 	ret

000087bc <__mdiff>:
    87bc:	28c00417 	ldw	r3,16(r5)
    87c0:	30800417 	ldw	r2,16(r6)
    87c4:	defffa04 	addi	sp,sp,-24
    87c8:	dcc00315 	stw	r19,12(sp)
    87cc:	dc800215 	stw	r18,8(sp)
    87d0:	dfc00515 	stw	ra,20(sp)
    87d4:	dd000415 	stw	r20,16(sp)
    87d8:	dc400115 	stw	r17,4(sp)
    87dc:	dc000015 	stw	r16,0(sp)
    87e0:	1887c83a 	sub	r3,r3,r2
    87e4:	2825883a 	mov	r18,r5
    87e8:	3027883a 	mov	r19,r6
    87ec:	1800141e 	bne	r3,zero,8840 <__mdiff+0x84>
    87f0:	1085883a 	add	r2,r2,r2
    87f4:	1085883a 	add	r2,r2,r2
    87f8:	2a000504 	addi	r8,r5,20
    87fc:	34000504 	addi	r16,r6,20
    8800:	4087883a 	add	r3,r8,r2
    8804:	8085883a 	add	r2,r16,r2
    8808:	00000106 	br	8810 <__mdiff+0x54>
    880c:	40c0592e 	bgeu	r8,r3,8974 <__mdiff+0x1b8>
    8810:	18ffff04 	addi	r3,r3,-4
    8814:	10bfff04 	addi	r2,r2,-4
    8818:	19c00017 	ldw	r7,0(r3)
    881c:	11400017 	ldw	r5,0(r2)
    8820:	397ffa26 	beq	r7,r5,880c <__mdiff+0x50>
    8824:	3940592e 	bgeu	r7,r5,898c <__mdiff+0x1d0>
    8828:	9005883a 	mov	r2,r18
    882c:	4023883a 	mov	r17,r8
    8830:	9825883a 	mov	r18,r19
    8834:	05000044 	movi	r20,1
    8838:	1027883a 	mov	r19,r2
    883c:	00000406 	br	8850 <__mdiff+0x94>
    8840:	18005616 	blt	r3,zero,899c <__mdiff+0x1e0>
    8844:	34400504 	addi	r17,r6,20
    8848:	2c000504 	addi	r16,r5,20
    884c:	0029883a 	mov	r20,zero
    8850:	91400117 	ldw	r5,4(r18)
    8854:	0007e940 	call	7e94 <_Balloc>
    8858:	92400417 	ldw	r9,16(r18)
    885c:	9b000417 	ldw	r12,16(r19)
    8860:	12c00504 	addi	r11,r2,20
    8864:	4a51883a 	add	r8,r9,r9
    8868:	6319883a 	add	r12,r12,r12
    886c:	4211883a 	add	r8,r8,r8
    8870:	6319883a 	add	r12,r12,r12
    8874:	15000315 	stw	r20,12(r2)
    8878:	8211883a 	add	r8,r16,r8
    887c:	8b19883a 	add	r12,r17,r12
    8880:	0007883a 	mov	r3,zero
    8884:	81400017 	ldw	r5,0(r16)
    8888:	89c00017 	ldw	r7,0(r17)
    888c:	59800104 	addi	r6,r11,4
    8890:	293fffcc 	andi	r4,r5,65535
    8894:	20c7883a 	add	r3,r4,r3
    8898:	393fffcc 	andi	r4,r7,65535
    889c:	1909c83a 	sub	r4,r3,r4
    88a0:	280ad43a 	srli	r5,r5,16
    88a4:	380ed43a 	srli	r7,r7,16
    88a8:	2007d43a 	srai	r3,r4,16
    88ac:	213fffcc 	andi	r4,r4,65535
    88b0:	29cbc83a 	sub	r5,r5,r7
    88b4:	28c7883a 	add	r3,r5,r3
    88b8:	180a943a 	slli	r5,r3,16
    88bc:	8c400104 	addi	r17,r17,4
    88c0:	84000104 	addi	r16,r16,4
    88c4:	2908b03a 	or	r4,r5,r4
    88c8:	59000015 	stw	r4,0(r11)
    88cc:	1807d43a 	srai	r3,r3,16
    88d0:	3015883a 	mov	r10,r6
    88d4:	3017883a 	mov	r11,r6
    88d8:	8b3fea36 	bltu	r17,r12,8884 <__mdiff+0xc8>
    88dc:	8200162e 	bgeu	r16,r8,8938 <__mdiff+0x17c>
    88e0:	8017883a 	mov	r11,r16
    88e4:	59400017 	ldw	r5,0(r11)
    88e8:	31800104 	addi	r6,r6,4
    88ec:	5ac00104 	addi	r11,r11,4
    88f0:	293fffcc 	andi	r4,r5,65535
    88f4:	20c7883a 	add	r3,r4,r3
    88f8:	280ed43a 	srli	r7,r5,16
    88fc:	180bd43a 	srai	r5,r3,16
    8900:	193fffcc 	andi	r4,r3,65535
    8904:	3947883a 	add	r3,r7,r5
    8908:	180a943a 	slli	r5,r3,16
    890c:	1807d43a 	srai	r3,r3,16
    8910:	2908b03a 	or	r4,r5,r4
    8914:	313fff15 	stw	r4,-4(r6)
    8918:	5a3ff236 	bltu	r11,r8,88e4 <__mdiff+0x128>
    891c:	0406303a 	nor	r3,zero,r16
    8920:	1a07883a 	add	r3,r3,r8
    8924:	1806d0ba 	srli	r3,r3,2
    8928:	18c00044 	addi	r3,r3,1
    892c:	18c7883a 	add	r3,r3,r3
    8930:	18c7883a 	add	r3,r3,r3
    8934:	50d5883a 	add	r10,r10,r3
    8938:	50ffff04 	addi	r3,r10,-4
    893c:	2000041e 	bne	r4,zero,8950 <__mdiff+0x194>
    8940:	18ffff04 	addi	r3,r3,-4
    8944:	19000017 	ldw	r4,0(r3)
    8948:	4a7fffc4 	addi	r9,r9,-1
    894c:	203ffc26 	beq	r4,zero,8940 <__mdiff+0x184>
    8950:	12400415 	stw	r9,16(r2)
    8954:	dfc00517 	ldw	ra,20(sp)
    8958:	dd000417 	ldw	r20,16(sp)
    895c:	dcc00317 	ldw	r19,12(sp)
    8960:	dc800217 	ldw	r18,8(sp)
    8964:	dc400117 	ldw	r17,4(sp)
    8968:	dc000017 	ldw	r16,0(sp)
    896c:	dec00604 	addi	sp,sp,24
    8970:	f800283a 	ret
    8974:	000b883a 	mov	r5,zero
    8978:	0007e940 	call	7e94 <_Balloc>
    897c:	00c00044 	movi	r3,1
    8980:	10c00415 	stw	r3,16(r2)
    8984:	10000515 	stw	zero,20(r2)
    8988:	003ff206 	br	8954 <__mdiff+0x198>
    898c:	8023883a 	mov	r17,r16
    8990:	0029883a 	mov	r20,zero
    8994:	4021883a 	mov	r16,r8
    8998:	003fad06 	br	8850 <__mdiff+0x94>
    899c:	9005883a 	mov	r2,r18
    89a0:	94400504 	addi	r17,r18,20
    89a4:	9c000504 	addi	r16,r19,20
    89a8:	9825883a 	mov	r18,r19
    89ac:	05000044 	movi	r20,1
    89b0:	1027883a 	mov	r19,r2
    89b4:	003fa606 	br	8850 <__mdiff+0x94>

000089b8 <__ulp>:
    89b8:	295ffc2c 	andhi	r5,r5,32752
    89bc:	00bf3034 	movhi	r2,64704
    89c0:	2887883a 	add	r3,r5,r2
    89c4:	00c0020e 	bge	zero,r3,89d0 <__ulp+0x18>
    89c8:	0005883a 	mov	r2,zero
    89cc:	f800283a 	ret
    89d0:	00c7c83a 	sub	r3,zero,r3
    89d4:	1807d53a 	srai	r3,r3,20
    89d8:	008004c4 	movi	r2,19
    89dc:	10c00b0e 	bge	r2,r3,8a0c <__ulp+0x54>
    89e0:	18bffb04 	addi	r2,r3,-20
    89e4:	01000784 	movi	r4,30
    89e8:	0007883a 	mov	r3,zero
    89ec:	20800516 	blt	r4,r2,8a04 <__ulp+0x4c>
    89f0:	010007c4 	movi	r4,31
    89f4:	2089c83a 	sub	r4,r4,r2
    89f8:	00800044 	movi	r2,1
    89fc:	1104983a 	sll	r2,r2,r4
    8a00:	f800283a 	ret
    8a04:	00800044 	movi	r2,1
    8a08:	f800283a 	ret
    8a0c:	01400234 	movhi	r5,8
    8a10:	28c7d83a 	sra	r3,r5,r3
    8a14:	0005883a 	mov	r2,zero
    8a18:	f800283a 	ret

00008a1c <__b2d>:
    8a1c:	defffa04 	addi	sp,sp,-24
    8a20:	dc000015 	stw	r16,0(sp)
    8a24:	24000417 	ldw	r16,16(r4)
    8a28:	dc400115 	stw	r17,4(sp)
    8a2c:	24400504 	addi	r17,r4,20
    8a30:	8421883a 	add	r16,r16,r16
    8a34:	8421883a 	add	r16,r16,r16
    8a38:	8c21883a 	add	r16,r17,r16
    8a3c:	dc800215 	stw	r18,8(sp)
    8a40:	84bfff17 	ldw	r18,-4(r16)
    8a44:	dd000415 	stw	r20,16(sp)
    8a48:	dcc00315 	stw	r19,12(sp)
    8a4c:	9009883a 	mov	r4,r18
    8a50:	2829883a 	mov	r20,r5
    8a54:	dfc00515 	stw	ra,20(sp)
    8a58:	00081880 	call	8188 <__hi0bits>
    8a5c:	00c00804 	movi	r3,32
    8a60:	1889c83a 	sub	r4,r3,r2
    8a64:	a1000015 	stw	r4,0(r20)
    8a68:	01000284 	movi	r4,10
    8a6c:	84ffff04 	addi	r19,r16,-4
    8a70:	20801216 	blt	r4,r2,8abc <__b2d+0xa0>
    8a74:	018002c4 	movi	r6,11
    8a78:	308dc83a 	sub	r6,r6,r2
    8a7c:	9186d83a 	srl	r3,r18,r6
    8a80:	18cffc34 	orhi	r3,r3,16368
    8a84:	8cc0212e 	bgeu	r17,r19,8b0c <__b2d+0xf0>
    8a88:	813ffe17 	ldw	r4,-8(r16)
    8a8c:	218cd83a 	srl	r6,r4,r6
    8a90:	10800544 	addi	r2,r2,21
    8a94:	9084983a 	sll	r2,r18,r2
    8a98:	1184b03a 	or	r2,r2,r6
    8a9c:	dfc00517 	ldw	ra,20(sp)
    8aa0:	dd000417 	ldw	r20,16(sp)
    8aa4:	dcc00317 	ldw	r19,12(sp)
    8aa8:	dc800217 	ldw	r18,8(sp)
    8aac:	dc400117 	ldw	r17,4(sp)
    8ab0:	dc000017 	ldw	r16,0(sp)
    8ab4:	dec00604 	addi	sp,sp,24
    8ab8:	f800283a 	ret
    8abc:	8cc00f2e 	bgeu	r17,r19,8afc <__b2d+0xe0>
    8ac0:	117ffd44 	addi	r5,r2,-11
    8ac4:	80bffe17 	ldw	r2,-8(r16)
    8ac8:	28000e26 	beq	r5,zero,8b04 <__b2d+0xe8>
    8acc:	1949c83a 	sub	r4,r3,r5
    8ad0:	9164983a 	sll	r18,r18,r5
    8ad4:	1106d83a 	srl	r3,r2,r4
    8ad8:	81bffe04 	addi	r6,r16,-8
    8adc:	948ffc34 	orhi	r18,r18,16368
    8ae0:	90c6b03a 	or	r3,r18,r3
    8ae4:	89800e2e 	bgeu	r17,r6,8b20 <__b2d+0x104>
    8ae8:	81bffd17 	ldw	r6,-12(r16)
    8aec:	1144983a 	sll	r2,r2,r5
    8af0:	310ad83a 	srl	r5,r6,r4
    8af4:	2884b03a 	or	r2,r5,r2
    8af8:	003fe806 	br	8a9c <__b2d+0x80>
    8afc:	10bffd44 	addi	r2,r2,-11
    8b00:	1000041e 	bne	r2,zero,8b14 <__b2d+0xf8>
    8b04:	90cffc34 	orhi	r3,r18,16368
    8b08:	003fe406 	br	8a9c <__b2d+0x80>
    8b0c:	000d883a 	mov	r6,zero
    8b10:	003fdf06 	br	8a90 <__b2d+0x74>
    8b14:	90a4983a 	sll	r18,r18,r2
    8b18:	0005883a 	mov	r2,zero
    8b1c:	003ff906 	br	8b04 <__b2d+0xe8>
    8b20:	1144983a 	sll	r2,r2,r5
    8b24:	003fdd06 	br	8a9c <__b2d+0x80>

00008b28 <__d2b>:
    8b28:	defff804 	addi	sp,sp,-32
    8b2c:	dc000215 	stw	r16,8(sp)
    8b30:	3021883a 	mov	r16,r6
    8b34:	dc400315 	stw	r17,12(sp)
    8b38:	8022907a 	slli	r17,r16,1
    8b3c:	dd000615 	stw	r20,24(sp)
    8b40:	2829883a 	mov	r20,r5
    8b44:	01400044 	movi	r5,1
    8b48:	dcc00515 	stw	r19,20(sp)
    8b4c:	dc800415 	stw	r18,16(sp)
    8b50:	dfc00715 	stw	ra,28(sp)
    8b54:	3825883a 	mov	r18,r7
    8b58:	8822d57a 	srli	r17,r17,21
    8b5c:	0007e940 	call	7e94 <_Balloc>
    8b60:	1027883a 	mov	r19,r2
    8b64:	00800434 	movhi	r2,16
    8b68:	10bfffc4 	addi	r2,r2,-1
    8b6c:	808c703a 	and	r6,r16,r2
    8b70:	88000126 	beq	r17,zero,8b78 <__d2b+0x50>
    8b74:	31800434 	orhi	r6,r6,16
    8b78:	d9800015 	stw	r6,0(sp)
    8b7c:	a0002426 	beq	r20,zero,8c10 <__d2b+0xe8>
    8b80:	d9000104 	addi	r4,sp,4
    8b84:	dd000115 	stw	r20,4(sp)
    8b88:	00081f00 	call	81f0 <__lo0bits>
    8b8c:	d8c00017 	ldw	r3,0(sp)
    8b90:	10002f1e 	bne	r2,zero,8c50 <__d2b+0x128>
    8b94:	d9000117 	ldw	r4,4(sp)
    8b98:	99000515 	stw	r4,20(r19)
    8b9c:	1821003a 	cmpeq	r16,r3,zero
    8ba0:	01000084 	movi	r4,2
    8ba4:	2421c83a 	sub	r16,r4,r16
    8ba8:	98c00615 	stw	r3,24(r19)
    8bac:	9c000415 	stw	r16,16(r19)
    8bb0:	88001f1e 	bne	r17,zero,8c30 <__d2b+0x108>
    8bb4:	10bef384 	addi	r2,r2,-1074
    8bb8:	90800015 	stw	r2,0(r18)
    8bbc:	00900034 	movhi	r2,16384
    8bc0:	10bfffc4 	addi	r2,r2,-1
    8bc4:	8085883a 	add	r2,r16,r2
    8bc8:	1085883a 	add	r2,r2,r2
    8bcc:	1085883a 	add	r2,r2,r2
    8bd0:	9885883a 	add	r2,r19,r2
    8bd4:	11000517 	ldw	r4,20(r2)
    8bd8:	8020917a 	slli	r16,r16,5
    8bdc:	00081880 	call	8188 <__hi0bits>
    8be0:	d8c00817 	ldw	r3,32(sp)
    8be4:	8085c83a 	sub	r2,r16,r2
    8be8:	18800015 	stw	r2,0(r3)
    8bec:	9805883a 	mov	r2,r19
    8bf0:	dfc00717 	ldw	ra,28(sp)
    8bf4:	dd000617 	ldw	r20,24(sp)
    8bf8:	dcc00517 	ldw	r19,20(sp)
    8bfc:	dc800417 	ldw	r18,16(sp)
    8c00:	dc400317 	ldw	r17,12(sp)
    8c04:	dc000217 	ldw	r16,8(sp)
    8c08:	dec00804 	addi	sp,sp,32
    8c0c:	f800283a 	ret
    8c10:	d809883a 	mov	r4,sp
    8c14:	00081f00 	call	81f0 <__lo0bits>
    8c18:	d8c00017 	ldw	r3,0(sp)
    8c1c:	04000044 	movi	r16,1
    8c20:	9c000415 	stw	r16,16(r19)
    8c24:	98c00515 	stw	r3,20(r19)
    8c28:	10800804 	addi	r2,r2,32
    8c2c:	883fe126 	beq	r17,zero,8bb4 <__d2b+0x8c>
    8c30:	00c00d44 	movi	r3,53
    8c34:	8c7ef344 	addi	r17,r17,-1075
    8c38:	88a3883a 	add	r17,r17,r2
    8c3c:	1885c83a 	sub	r2,r3,r2
    8c40:	d8c00817 	ldw	r3,32(sp)
    8c44:	94400015 	stw	r17,0(r18)
    8c48:	18800015 	stw	r2,0(r3)
    8c4c:	003fe706 	br	8bec <__d2b+0xc4>
    8c50:	01000804 	movi	r4,32
    8c54:	2089c83a 	sub	r4,r4,r2
    8c58:	1908983a 	sll	r4,r3,r4
    8c5c:	d9400117 	ldw	r5,4(sp)
    8c60:	1886d83a 	srl	r3,r3,r2
    8c64:	2148b03a 	or	r4,r4,r5
    8c68:	99000515 	stw	r4,20(r19)
    8c6c:	d8c00015 	stw	r3,0(sp)
    8c70:	003fca06 	br	8b9c <__d2b+0x74>

00008c74 <__ratio>:
    8c74:	defff904 	addi	sp,sp,-28
    8c78:	dc400315 	stw	r17,12(sp)
    8c7c:	2823883a 	mov	r17,r5
    8c80:	d9400104 	addi	r5,sp,4
    8c84:	dfc00615 	stw	ra,24(sp)
    8c88:	dcc00515 	stw	r19,20(sp)
    8c8c:	dc800415 	stw	r18,16(sp)
    8c90:	2027883a 	mov	r19,r4
    8c94:	dc000215 	stw	r16,8(sp)
    8c98:	0008a1c0 	call	8a1c <__b2d>
    8c9c:	d80b883a 	mov	r5,sp
    8ca0:	8809883a 	mov	r4,r17
    8ca4:	1025883a 	mov	r18,r2
    8ca8:	1821883a 	mov	r16,r3
    8cac:	0008a1c0 	call	8a1c <__b2d>
    8cb0:	8a000417 	ldw	r8,16(r17)
    8cb4:	99000417 	ldw	r4,16(r19)
    8cb8:	d9400117 	ldw	r5,4(sp)
    8cbc:	2209c83a 	sub	r4,r4,r8
    8cc0:	2010917a 	slli	r8,r4,5
    8cc4:	d9000017 	ldw	r4,0(sp)
    8cc8:	2909c83a 	sub	r4,r5,r4
    8ccc:	4109883a 	add	r4,r8,r4
    8cd0:	01000e0e 	bge	zero,r4,8d0c <__ratio+0x98>
    8cd4:	2008953a 	slli	r4,r4,20
    8cd8:	2421883a 	add	r16,r4,r16
    8cdc:	100d883a 	mov	r6,r2
    8ce0:	180f883a 	mov	r7,r3
    8ce4:	9009883a 	mov	r4,r18
    8ce8:	800b883a 	mov	r5,r16
    8cec:	000c9580 	call	c958 <__divdf3>
    8cf0:	dfc00617 	ldw	ra,24(sp)
    8cf4:	dcc00517 	ldw	r19,20(sp)
    8cf8:	dc800417 	ldw	r18,16(sp)
    8cfc:	dc400317 	ldw	r17,12(sp)
    8d00:	dc000217 	ldw	r16,8(sp)
    8d04:	dec00704 	addi	sp,sp,28
    8d08:	f800283a 	ret
    8d0c:	2008953a 	slli	r4,r4,20
    8d10:	1907c83a 	sub	r3,r3,r4
    8d14:	003ff106 	br	8cdc <__ratio+0x68>

00008d18 <_mprec_log10>:
    8d18:	defffe04 	addi	sp,sp,-8
    8d1c:	dc000015 	stw	r16,0(sp)
    8d20:	dfc00115 	stw	ra,4(sp)
    8d24:	008005c4 	movi	r2,23
    8d28:	2021883a 	mov	r16,r4
    8d2c:	11000d0e 	bge	r2,r4,8d64 <_mprec_log10+0x4c>
    8d30:	0005883a 	mov	r2,zero
    8d34:	00cffc34 	movhi	r3,16368
    8d38:	843fffc4 	addi	r16,r16,-1
    8d3c:	000d883a 	mov	r6,zero
    8d40:	01d00934 	movhi	r7,16420
    8d44:	1009883a 	mov	r4,r2
    8d48:	180b883a 	mov	r5,r3
    8d4c:	000d4980 	call	d498 <__muldf3>
    8d50:	803ff91e 	bne	r16,zero,8d38 <_mprec_log10+0x20>
    8d54:	dfc00117 	ldw	ra,4(sp)
    8d58:	dc000017 	ldw	r16,0(sp)
    8d5c:	dec00204 	addi	sp,sp,8
    8d60:	f800283a 	ret
    8d64:	202090fa 	slli	r16,r4,3
    8d68:	00800074 	movhi	r2,1
    8d6c:	1085b904 	addi	r2,r2,5860
    8d70:	1421883a 	add	r16,r2,r16
    8d74:	80800017 	ldw	r2,0(r16)
    8d78:	80c00117 	ldw	r3,4(r16)
    8d7c:	dfc00117 	ldw	ra,4(sp)
    8d80:	dc000017 	ldw	r16,0(sp)
    8d84:	dec00204 	addi	sp,sp,8
    8d88:	f800283a 	ret

00008d8c <__copybits>:
    8d8c:	297fffc4 	addi	r5,r5,-1
    8d90:	280fd17a 	srai	r7,r5,5
    8d94:	30c00417 	ldw	r3,16(r6)
    8d98:	30800504 	addi	r2,r6,20
    8d9c:	39c00044 	addi	r7,r7,1
    8da0:	18c7883a 	add	r3,r3,r3
    8da4:	39cf883a 	add	r7,r7,r7
    8da8:	18c7883a 	add	r3,r3,r3
    8dac:	39cf883a 	add	r7,r7,r7
    8db0:	10c7883a 	add	r3,r2,r3
    8db4:	21cf883a 	add	r7,r4,r7
    8db8:	10c00d2e 	bgeu	r2,r3,8df0 <__copybits+0x64>
    8dbc:	200b883a 	mov	r5,r4
    8dc0:	12000017 	ldw	r8,0(r2)
    8dc4:	29400104 	addi	r5,r5,4
    8dc8:	10800104 	addi	r2,r2,4
    8dcc:	2a3fff15 	stw	r8,-4(r5)
    8dd0:	10fffb36 	bltu	r2,r3,8dc0 <__copybits+0x34>
    8dd4:	1985c83a 	sub	r2,r3,r6
    8dd8:	10bffac4 	addi	r2,r2,-21
    8ddc:	1004d0ba 	srli	r2,r2,2
    8de0:	10800044 	addi	r2,r2,1
    8de4:	1085883a 	add	r2,r2,r2
    8de8:	1085883a 	add	r2,r2,r2
    8dec:	2089883a 	add	r4,r4,r2
    8df0:	21c0032e 	bgeu	r4,r7,8e00 <__copybits+0x74>
    8df4:	20000015 	stw	zero,0(r4)
    8df8:	21000104 	addi	r4,r4,4
    8dfc:	21fffd36 	bltu	r4,r7,8df4 <__copybits+0x68>
    8e00:	f800283a 	ret

00008e04 <__any_on>:
    8e04:	20c00417 	ldw	r3,16(r4)
    8e08:	2805d17a 	srai	r2,r5,5
    8e0c:	21000504 	addi	r4,r4,20
    8e10:	18800d0e 	bge	r3,r2,8e48 <__any_on+0x44>
    8e14:	18c7883a 	add	r3,r3,r3
    8e18:	18c7883a 	add	r3,r3,r3
    8e1c:	20c7883a 	add	r3,r4,r3
    8e20:	20c0192e 	bgeu	r4,r3,8e88 <__any_on+0x84>
    8e24:	18bfff17 	ldw	r2,-4(r3)
    8e28:	18ffff04 	addi	r3,r3,-4
    8e2c:	1000041e 	bne	r2,zero,8e40 <__any_on+0x3c>
    8e30:	20c0142e 	bgeu	r4,r3,8e84 <__any_on+0x80>
    8e34:	18ffff04 	addi	r3,r3,-4
    8e38:	19400017 	ldw	r5,0(r3)
    8e3c:	283ffc26 	beq	r5,zero,8e30 <__any_on+0x2c>
    8e40:	00800044 	movi	r2,1
    8e44:	f800283a 	ret
    8e48:	10c00a0e 	bge	r2,r3,8e74 <__any_on+0x70>
    8e4c:	1085883a 	add	r2,r2,r2
    8e50:	1085883a 	add	r2,r2,r2
    8e54:	294007cc 	andi	r5,r5,31
    8e58:	2087883a 	add	r3,r4,r2
    8e5c:	283ff026 	beq	r5,zero,8e20 <__any_on+0x1c>
    8e60:	19800017 	ldw	r6,0(r3)
    8e64:	3144d83a 	srl	r2,r6,r5
    8e68:	114a983a 	sll	r5,r2,r5
    8e6c:	317ff41e 	bne	r6,r5,8e40 <__any_on+0x3c>
    8e70:	003feb06 	br	8e20 <__any_on+0x1c>
    8e74:	1085883a 	add	r2,r2,r2
    8e78:	1085883a 	add	r2,r2,r2
    8e7c:	2087883a 	add	r3,r4,r2
    8e80:	003fe706 	br	8e20 <__any_on+0x1c>
    8e84:	f800283a 	ret
    8e88:	0005883a 	mov	r2,zero
    8e8c:	f800283a 	ret

00008e90 <_realloc_r>:
    8e90:	defff604 	addi	sp,sp,-40
    8e94:	dc800215 	stw	r18,8(sp)
    8e98:	dfc00915 	stw	ra,36(sp)
    8e9c:	df000815 	stw	fp,32(sp)
    8ea0:	ddc00715 	stw	r23,28(sp)
    8ea4:	dd800615 	stw	r22,24(sp)
    8ea8:	dd400515 	stw	r21,20(sp)
    8eac:	dd000415 	stw	r20,16(sp)
    8eb0:	dcc00315 	stw	r19,12(sp)
    8eb4:	dc400115 	stw	r17,4(sp)
    8eb8:	dc000015 	stw	r16,0(sp)
    8ebc:	3025883a 	mov	r18,r6
    8ec0:	2800b726 	beq	r5,zero,91a0 <_realloc_r+0x310>
    8ec4:	282b883a 	mov	r21,r5
    8ec8:	2029883a 	mov	r20,r4
    8ecc:	000ec900 	call	ec90 <__malloc_lock>
    8ed0:	a8bfff17 	ldw	r2,-4(r21)
    8ed4:	043fff04 	movi	r16,-4
    8ed8:	90c002c4 	addi	r3,r18,11
    8edc:	01000584 	movi	r4,22
    8ee0:	acfffe04 	addi	r19,r21,-8
    8ee4:	1420703a 	and	r16,r2,r16
    8ee8:	20c0332e 	bgeu	r4,r3,8fb8 <_realloc_r+0x128>
    8eec:	047ffe04 	movi	r17,-8
    8ef0:	1c62703a 	and	r17,r3,r17
    8ef4:	8807883a 	mov	r3,r17
    8ef8:	88005816 	blt	r17,zero,905c <_realloc_r+0x1cc>
    8efc:	8c805736 	bltu	r17,r18,905c <_realloc_r+0x1cc>
    8f00:	80c0300e 	bge	r16,r3,8fc4 <_realloc_r+0x134>
    8f04:	07000074 	movhi	fp,1
    8f08:	e7067e04 	addi	fp,fp,6648
    8f0c:	e1c00217 	ldw	r7,8(fp)
    8f10:	9c09883a 	add	r4,r19,r16
    8f14:	22000117 	ldw	r8,4(r4)
    8f18:	21c06326 	beq	r4,r7,90a8 <_realloc_r+0x218>
    8f1c:	017fff84 	movi	r5,-2
    8f20:	414a703a 	and	r5,r8,r5
    8f24:	214b883a 	add	r5,r4,r5
    8f28:	29800117 	ldw	r6,4(r5)
    8f2c:	3180004c 	andi	r6,r6,1
    8f30:	30003f26 	beq	r6,zero,9030 <_realloc_r+0x1a0>
    8f34:	1080004c 	andi	r2,r2,1
    8f38:	10008326 	beq	r2,zero,9148 <_realloc_r+0x2b8>
    8f3c:	900b883a 	mov	r5,r18
    8f40:	a009883a 	mov	r4,r20
    8f44:	0001fa80 	call	1fa8 <_malloc_r>
    8f48:	1025883a 	mov	r18,r2
    8f4c:	10011e26 	beq	r2,zero,93c8 <_realloc_r+0x538>
    8f50:	a93fff17 	ldw	r4,-4(r21)
    8f54:	10fffe04 	addi	r3,r2,-8
    8f58:	00bfff84 	movi	r2,-2
    8f5c:	2084703a 	and	r2,r4,r2
    8f60:	9885883a 	add	r2,r19,r2
    8f64:	1880ee26 	beq	r3,r2,9320 <_realloc_r+0x490>
    8f68:	81bfff04 	addi	r6,r16,-4
    8f6c:	00800904 	movi	r2,36
    8f70:	1180b836 	bltu	r2,r6,9254 <_realloc_r+0x3c4>
    8f74:	00c004c4 	movi	r3,19
    8f78:	19809636 	bltu	r3,r6,91d4 <_realloc_r+0x344>
    8f7c:	9005883a 	mov	r2,r18
    8f80:	a807883a 	mov	r3,r21
    8f84:	19000017 	ldw	r4,0(r3)
    8f88:	11000015 	stw	r4,0(r2)
    8f8c:	19000117 	ldw	r4,4(r3)
    8f90:	11000115 	stw	r4,4(r2)
    8f94:	18c00217 	ldw	r3,8(r3)
    8f98:	10c00215 	stw	r3,8(r2)
    8f9c:	a80b883a 	mov	r5,r21
    8fa0:	a009883a 	mov	r4,r20
    8fa4:	0006df80 	call	6df8 <_free_r>
    8fa8:	a009883a 	mov	r4,r20
    8fac:	000ecb40 	call	ecb4 <__malloc_unlock>
    8fb0:	9005883a 	mov	r2,r18
    8fb4:	00001206 	br	9000 <_realloc_r+0x170>
    8fb8:	00c00404 	movi	r3,16
    8fbc:	1823883a 	mov	r17,r3
    8fc0:	003fce06 	br	8efc <_realloc_r+0x6c>
    8fc4:	a825883a 	mov	r18,r21
    8fc8:	8445c83a 	sub	r2,r16,r17
    8fcc:	00c003c4 	movi	r3,15
    8fd0:	18802636 	bltu	r3,r2,906c <_realloc_r+0x1dc>
    8fd4:	99800117 	ldw	r6,4(r19)
    8fd8:	9c07883a 	add	r3,r19,r16
    8fdc:	3180004c 	andi	r6,r6,1
    8fe0:	3420b03a 	or	r16,r6,r16
    8fe4:	9c000115 	stw	r16,4(r19)
    8fe8:	18800117 	ldw	r2,4(r3)
    8fec:	10800054 	ori	r2,r2,1
    8ff0:	18800115 	stw	r2,4(r3)
    8ff4:	a009883a 	mov	r4,r20
    8ff8:	000ecb40 	call	ecb4 <__malloc_unlock>
    8ffc:	9005883a 	mov	r2,r18
    9000:	dfc00917 	ldw	ra,36(sp)
    9004:	df000817 	ldw	fp,32(sp)
    9008:	ddc00717 	ldw	r23,28(sp)
    900c:	dd800617 	ldw	r22,24(sp)
    9010:	dd400517 	ldw	r21,20(sp)
    9014:	dd000417 	ldw	r20,16(sp)
    9018:	dcc00317 	ldw	r19,12(sp)
    901c:	dc800217 	ldw	r18,8(sp)
    9020:	dc400117 	ldw	r17,4(sp)
    9024:	dc000017 	ldw	r16,0(sp)
    9028:	dec00a04 	addi	sp,sp,40
    902c:	f800283a 	ret
    9030:	017fff04 	movi	r5,-4
    9034:	414a703a 	and	r5,r8,r5
    9038:	814d883a 	add	r6,r16,r5
    903c:	30c01f16 	blt	r6,r3,90bc <_realloc_r+0x22c>
    9040:	20800317 	ldw	r2,12(r4)
    9044:	20c00217 	ldw	r3,8(r4)
    9048:	a825883a 	mov	r18,r21
    904c:	3021883a 	mov	r16,r6
    9050:	18800315 	stw	r2,12(r3)
    9054:	10c00215 	stw	r3,8(r2)
    9058:	003fdb06 	br	8fc8 <_realloc_r+0x138>
    905c:	00800304 	movi	r2,12
    9060:	a0800015 	stw	r2,0(r20)
    9064:	0005883a 	mov	r2,zero
    9068:	003fe506 	br	9000 <_realloc_r+0x170>
    906c:	98c00117 	ldw	r3,4(r19)
    9070:	9c4b883a 	add	r5,r19,r17
    9074:	11000054 	ori	r4,r2,1
    9078:	18c0004c 	andi	r3,r3,1
    907c:	1c62b03a 	or	r17,r3,r17
    9080:	9c400115 	stw	r17,4(r19)
    9084:	29000115 	stw	r4,4(r5)
    9088:	2885883a 	add	r2,r5,r2
    908c:	10c00117 	ldw	r3,4(r2)
    9090:	29400204 	addi	r5,r5,8
    9094:	a009883a 	mov	r4,r20
    9098:	18c00054 	ori	r3,r3,1
    909c:	10c00115 	stw	r3,4(r2)
    90a0:	0006df80 	call	6df8 <_free_r>
    90a4:	003fd306 	br	8ff4 <_realloc_r+0x164>
    90a8:	017fff04 	movi	r5,-4
    90ac:	414a703a 	and	r5,r8,r5
    90b0:	89800404 	addi	r6,r17,16
    90b4:	8151883a 	add	r8,r16,r5
    90b8:	4180590e 	bge	r8,r6,9220 <_realloc_r+0x390>
    90bc:	1080004c 	andi	r2,r2,1
    90c0:	103f9e1e 	bne	r2,zero,8f3c <_realloc_r+0xac>
    90c4:	adbffe17 	ldw	r22,-8(r21)
    90c8:	00bfff04 	movi	r2,-4
    90cc:	9dadc83a 	sub	r22,r19,r22
    90d0:	b1800117 	ldw	r6,4(r22)
    90d4:	3084703a 	and	r2,r6,r2
    90d8:	20002026 	beq	r4,zero,915c <_realloc_r+0x2cc>
    90dc:	80af883a 	add	r23,r16,r2
    90e0:	b96f883a 	add	r23,r23,r5
    90e4:	21c05f26 	beq	r4,r7,9264 <_realloc_r+0x3d4>
    90e8:	b8c01c16 	blt	r23,r3,915c <_realloc_r+0x2cc>
    90ec:	20800317 	ldw	r2,12(r4)
    90f0:	20c00217 	ldw	r3,8(r4)
    90f4:	81bfff04 	addi	r6,r16,-4
    90f8:	01000904 	movi	r4,36
    90fc:	18800315 	stw	r2,12(r3)
    9100:	10c00215 	stw	r3,8(r2)
    9104:	b0c00217 	ldw	r3,8(r22)
    9108:	b0800317 	ldw	r2,12(r22)
    910c:	b4800204 	addi	r18,r22,8
    9110:	18800315 	stw	r2,12(r3)
    9114:	10c00215 	stw	r3,8(r2)
    9118:	21801b36 	bltu	r4,r6,9188 <_realloc_r+0x2f8>
    911c:	008004c4 	movi	r2,19
    9120:	1180352e 	bgeu	r2,r6,91f8 <_realloc_r+0x368>
    9124:	a8800017 	ldw	r2,0(r21)
    9128:	b0800215 	stw	r2,8(r22)
    912c:	a8800117 	ldw	r2,4(r21)
    9130:	b0800315 	stw	r2,12(r22)
    9134:	008006c4 	movi	r2,27
    9138:	11807f36 	bltu	r2,r6,9338 <_realloc_r+0x4a8>
    913c:	b0800404 	addi	r2,r22,16
    9140:	ad400204 	addi	r21,r21,8
    9144:	00002d06 	br	91fc <_realloc_r+0x36c>
    9148:	adbffe17 	ldw	r22,-8(r21)
    914c:	00bfff04 	movi	r2,-4
    9150:	9dadc83a 	sub	r22,r19,r22
    9154:	b1000117 	ldw	r4,4(r22)
    9158:	2084703a 	and	r2,r4,r2
    915c:	b03f7726 	beq	r22,zero,8f3c <_realloc_r+0xac>
    9160:	80af883a 	add	r23,r16,r2
    9164:	b8ff7516 	blt	r23,r3,8f3c <_realloc_r+0xac>
    9168:	b0800317 	ldw	r2,12(r22)
    916c:	b0c00217 	ldw	r3,8(r22)
    9170:	81bfff04 	addi	r6,r16,-4
    9174:	01000904 	movi	r4,36
    9178:	18800315 	stw	r2,12(r3)
    917c:	10c00215 	stw	r3,8(r2)
    9180:	b4800204 	addi	r18,r22,8
    9184:	21bfe52e 	bgeu	r4,r6,911c <_realloc_r+0x28c>
    9188:	a80b883a 	mov	r5,r21
    918c:	9009883a 	mov	r4,r18
    9190:	0007c100 	call	7c10 <memmove>
    9194:	b821883a 	mov	r16,r23
    9198:	b027883a 	mov	r19,r22
    919c:	003f8a06 	br	8fc8 <_realloc_r+0x138>
    91a0:	300b883a 	mov	r5,r6
    91a4:	dfc00917 	ldw	ra,36(sp)
    91a8:	df000817 	ldw	fp,32(sp)
    91ac:	ddc00717 	ldw	r23,28(sp)
    91b0:	dd800617 	ldw	r22,24(sp)
    91b4:	dd400517 	ldw	r21,20(sp)
    91b8:	dd000417 	ldw	r20,16(sp)
    91bc:	dcc00317 	ldw	r19,12(sp)
    91c0:	dc800217 	ldw	r18,8(sp)
    91c4:	dc400117 	ldw	r17,4(sp)
    91c8:	dc000017 	ldw	r16,0(sp)
    91cc:	dec00a04 	addi	sp,sp,40
    91d0:	0001fa81 	jmpi	1fa8 <_malloc_r>
    91d4:	a8c00017 	ldw	r3,0(r21)
    91d8:	90c00015 	stw	r3,0(r18)
    91dc:	a8c00117 	ldw	r3,4(r21)
    91e0:	90c00115 	stw	r3,4(r18)
    91e4:	00c006c4 	movi	r3,27
    91e8:	19804536 	bltu	r3,r6,9300 <_realloc_r+0x470>
    91ec:	90800204 	addi	r2,r18,8
    91f0:	a8c00204 	addi	r3,r21,8
    91f4:	003f6306 	br	8f84 <_realloc_r+0xf4>
    91f8:	9005883a 	mov	r2,r18
    91fc:	a8c00017 	ldw	r3,0(r21)
    9200:	b821883a 	mov	r16,r23
    9204:	b027883a 	mov	r19,r22
    9208:	10c00015 	stw	r3,0(r2)
    920c:	a8c00117 	ldw	r3,4(r21)
    9210:	10c00115 	stw	r3,4(r2)
    9214:	a8c00217 	ldw	r3,8(r21)
    9218:	10c00215 	stw	r3,8(r2)
    921c:	003f6a06 	br	8fc8 <_realloc_r+0x138>
    9220:	9c67883a 	add	r19,r19,r17
    9224:	4445c83a 	sub	r2,r8,r17
    9228:	e4c00215 	stw	r19,8(fp)
    922c:	10800054 	ori	r2,r2,1
    9230:	98800115 	stw	r2,4(r19)
    9234:	a8bfff17 	ldw	r2,-4(r21)
    9238:	a009883a 	mov	r4,r20
    923c:	1080004c 	andi	r2,r2,1
    9240:	1462b03a 	or	r17,r2,r17
    9244:	ac7fff15 	stw	r17,-4(r21)
    9248:	000ecb40 	call	ecb4 <__malloc_unlock>
    924c:	a805883a 	mov	r2,r21
    9250:	003f6b06 	br	9000 <_realloc_r+0x170>
    9254:	a80b883a 	mov	r5,r21
    9258:	9009883a 	mov	r4,r18
    925c:	0007c100 	call	7c10 <memmove>
    9260:	003f4e06 	br	8f9c <_realloc_r+0x10c>
    9264:	89000404 	addi	r4,r17,16
    9268:	b93fbc16 	blt	r23,r4,915c <_realloc_r+0x2cc>
    926c:	b0800317 	ldw	r2,12(r22)
    9270:	b0c00217 	ldw	r3,8(r22)
    9274:	81bfff04 	addi	r6,r16,-4
    9278:	01000904 	movi	r4,36
    927c:	18800315 	stw	r2,12(r3)
    9280:	10c00215 	stw	r3,8(r2)
    9284:	b4800204 	addi	r18,r22,8
    9288:	21804336 	bltu	r4,r6,9398 <_realloc_r+0x508>
    928c:	008004c4 	movi	r2,19
    9290:	11803f2e 	bgeu	r2,r6,9390 <_realloc_r+0x500>
    9294:	a8800017 	ldw	r2,0(r21)
    9298:	b0800215 	stw	r2,8(r22)
    929c:	a8800117 	ldw	r2,4(r21)
    92a0:	b0800315 	stw	r2,12(r22)
    92a4:	008006c4 	movi	r2,27
    92a8:	11803f36 	bltu	r2,r6,93a8 <_realloc_r+0x518>
    92ac:	b0800404 	addi	r2,r22,16
    92b0:	ad400204 	addi	r21,r21,8
    92b4:	a8c00017 	ldw	r3,0(r21)
    92b8:	10c00015 	stw	r3,0(r2)
    92bc:	a8c00117 	ldw	r3,4(r21)
    92c0:	10c00115 	stw	r3,4(r2)
    92c4:	a8c00217 	ldw	r3,8(r21)
    92c8:	10c00215 	stw	r3,8(r2)
    92cc:	b447883a 	add	r3,r22,r17
    92d0:	bc45c83a 	sub	r2,r23,r17
    92d4:	e0c00215 	stw	r3,8(fp)
    92d8:	10800054 	ori	r2,r2,1
    92dc:	18800115 	stw	r2,4(r3)
    92e0:	b0800117 	ldw	r2,4(r22)
    92e4:	a009883a 	mov	r4,r20
    92e8:	1080004c 	andi	r2,r2,1
    92ec:	1462b03a 	or	r17,r2,r17
    92f0:	b4400115 	stw	r17,4(r22)
    92f4:	000ecb40 	call	ecb4 <__malloc_unlock>
    92f8:	9005883a 	mov	r2,r18
    92fc:	003f4006 	br	9000 <_realloc_r+0x170>
    9300:	a8c00217 	ldw	r3,8(r21)
    9304:	90c00215 	stw	r3,8(r18)
    9308:	a8c00317 	ldw	r3,12(r21)
    930c:	90c00315 	stw	r3,12(r18)
    9310:	30801126 	beq	r6,r2,9358 <_realloc_r+0x4c8>
    9314:	90800404 	addi	r2,r18,16
    9318:	a8c00404 	addi	r3,r21,16
    931c:	003f1906 	br	8f84 <_realloc_r+0xf4>
    9320:	90ffff17 	ldw	r3,-4(r18)
    9324:	00bfff04 	movi	r2,-4
    9328:	a825883a 	mov	r18,r21
    932c:	1884703a 	and	r2,r3,r2
    9330:	80a1883a 	add	r16,r16,r2
    9334:	003f2406 	br	8fc8 <_realloc_r+0x138>
    9338:	a8800217 	ldw	r2,8(r21)
    933c:	b0800415 	stw	r2,16(r22)
    9340:	a8800317 	ldw	r2,12(r21)
    9344:	b0800515 	stw	r2,20(r22)
    9348:	31000a26 	beq	r6,r4,9374 <_realloc_r+0x4e4>
    934c:	b0800604 	addi	r2,r22,24
    9350:	ad400404 	addi	r21,r21,16
    9354:	003fa906 	br	91fc <_realloc_r+0x36c>
    9358:	a9000417 	ldw	r4,16(r21)
    935c:	90800604 	addi	r2,r18,24
    9360:	a8c00604 	addi	r3,r21,24
    9364:	91000415 	stw	r4,16(r18)
    9368:	a9000517 	ldw	r4,20(r21)
    936c:	91000515 	stw	r4,20(r18)
    9370:	003f0406 	br	8f84 <_realloc_r+0xf4>
    9374:	a8c00417 	ldw	r3,16(r21)
    9378:	ad400604 	addi	r21,r21,24
    937c:	b0800804 	addi	r2,r22,32
    9380:	b0c00615 	stw	r3,24(r22)
    9384:	a8ffff17 	ldw	r3,-4(r21)
    9388:	b0c00715 	stw	r3,28(r22)
    938c:	003f9b06 	br	91fc <_realloc_r+0x36c>
    9390:	9005883a 	mov	r2,r18
    9394:	003fc706 	br	92b4 <_realloc_r+0x424>
    9398:	a80b883a 	mov	r5,r21
    939c:	9009883a 	mov	r4,r18
    93a0:	0007c100 	call	7c10 <memmove>
    93a4:	003fc906 	br	92cc <_realloc_r+0x43c>
    93a8:	a8800217 	ldw	r2,8(r21)
    93ac:	b0800415 	stw	r2,16(r22)
    93b0:	a8800317 	ldw	r2,12(r21)
    93b4:	b0800515 	stw	r2,20(r22)
    93b8:	31000726 	beq	r6,r4,93d8 <_realloc_r+0x548>
    93bc:	b0800604 	addi	r2,r22,24
    93c0:	ad400404 	addi	r21,r21,16
    93c4:	003fbb06 	br	92b4 <_realloc_r+0x424>
    93c8:	a009883a 	mov	r4,r20
    93cc:	000ecb40 	call	ecb4 <__malloc_unlock>
    93d0:	0005883a 	mov	r2,zero
    93d4:	003f0a06 	br	9000 <_realloc_r+0x170>
    93d8:	a8c00417 	ldw	r3,16(r21)
    93dc:	ad400604 	addi	r21,r21,24
    93e0:	b0800804 	addi	r2,r22,32
    93e4:	b0c00615 	stw	r3,24(r22)
    93e8:	a8ffff17 	ldw	r3,-4(r21)
    93ec:	b0c00715 	stw	r3,28(r22)
    93f0:	003fb006 	br	92b4 <_realloc_r+0x424>

000093f4 <__fpclassifyd>:
    93f4:	00a00034 	movhi	r2,32768
    93f8:	10bfffc4 	addi	r2,r2,-1
    93fc:	2884703a 	and	r2,r5,r2
    9400:	10000726 	beq	r2,zero,9420 <__fpclassifyd+0x2c>
    9404:	00fffc34 	movhi	r3,65520
    9408:	019ff834 	movhi	r6,32736
    940c:	28c7883a 	add	r3,r5,r3
    9410:	31bfffc4 	addi	r6,r6,-1
    9414:	30c00536 	bltu	r6,r3,942c <__fpclassifyd+0x38>
    9418:	00800104 	movi	r2,4
    941c:	f800283a 	ret
    9420:	2000021e 	bne	r4,zero,942c <__fpclassifyd+0x38>
    9424:	00800084 	movi	r2,2
    9428:	f800283a 	ret
    942c:	00dffc34 	movhi	r3,32752
    9430:	019ff834 	movhi	r6,32736
    9434:	28cb883a 	add	r5,r5,r3
    9438:	31bfffc4 	addi	r6,r6,-1
    943c:	317ff62e 	bgeu	r6,r5,9418 <__fpclassifyd+0x24>
    9440:	01400434 	movhi	r5,16
    9444:	297fffc4 	addi	r5,r5,-1
    9448:	28800236 	bltu	r5,r2,9454 <__fpclassifyd+0x60>
    944c:	008000c4 	movi	r2,3
    9450:	f800283a 	ret
    9454:	10c00226 	beq	r2,r3,9460 <__fpclassifyd+0x6c>
    9458:	0005883a 	mov	r2,zero
    945c:	f800283a 	ret
    9460:	2005003a 	cmpeq	r2,r4,zero
    9464:	f800283a 	ret

00009468 <__sread>:
    9468:	defffe04 	addi	sp,sp,-8
    946c:	dc000015 	stw	r16,0(sp)
    9470:	2821883a 	mov	r16,r5
    9474:	2940038f 	ldh	r5,14(r5)
    9478:	dfc00115 	stw	ra,4(sp)
    947c:	000b25c0 	call	b25c <_read_r>
    9480:	10000716 	blt	r2,zero,94a0 <__sread+0x38>
    9484:	80c01417 	ldw	r3,80(r16)
    9488:	1887883a 	add	r3,r3,r2
    948c:	80c01415 	stw	r3,80(r16)
    9490:	dfc00117 	ldw	ra,4(sp)
    9494:	dc000017 	ldw	r16,0(sp)
    9498:	dec00204 	addi	sp,sp,8
    949c:	f800283a 	ret
    94a0:	80c0030b 	ldhu	r3,12(r16)
    94a4:	18fbffcc 	andi	r3,r3,61439
    94a8:	80c0030d 	sth	r3,12(r16)
    94ac:	dfc00117 	ldw	ra,4(sp)
    94b0:	dc000017 	ldw	r16,0(sp)
    94b4:	dec00204 	addi	sp,sp,8
    94b8:	f800283a 	ret

000094bc <__seofread>:
    94bc:	0005883a 	mov	r2,zero
    94c0:	f800283a 	ret

000094c4 <__swrite>:
    94c4:	2880030b 	ldhu	r2,12(r5)
    94c8:	defffb04 	addi	sp,sp,-20
    94cc:	dcc00315 	stw	r19,12(sp)
    94d0:	dc800215 	stw	r18,8(sp)
    94d4:	dc400115 	stw	r17,4(sp)
    94d8:	dc000015 	stw	r16,0(sp)
    94dc:	dfc00415 	stw	ra,16(sp)
    94e0:	10c0400c 	andi	r3,r2,256
    94e4:	2821883a 	mov	r16,r5
    94e8:	2023883a 	mov	r17,r4
    94ec:	3025883a 	mov	r18,r6
    94f0:	3827883a 	mov	r19,r7
    94f4:	18000526 	beq	r3,zero,950c <__swrite+0x48>
    94f8:	2940038f 	ldh	r5,14(r5)
    94fc:	01c00084 	movi	r7,2
    9500:	000d883a 	mov	r6,zero
    9504:	000b1fc0 	call	b1fc <_lseek_r>
    9508:	8080030b 	ldhu	r2,12(r16)
    950c:	8140038f 	ldh	r5,14(r16)
    9510:	10bbffcc 	andi	r2,r2,61439
    9514:	980f883a 	mov	r7,r19
    9518:	900d883a 	mov	r6,r18
    951c:	8809883a 	mov	r4,r17
    9520:	8080030d 	sth	r2,12(r16)
    9524:	dfc00417 	ldw	ra,16(sp)
    9528:	dcc00317 	ldw	r19,12(sp)
    952c:	dc800217 	ldw	r18,8(sp)
    9530:	dc400117 	ldw	r17,4(sp)
    9534:	dc000017 	ldw	r16,0(sp)
    9538:	dec00504 	addi	sp,sp,20
    953c:	000acc81 	jmpi	acc8 <_write_r>

00009540 <__sseek>:
    9540:	defffe04 	addi	sp,sp,-8
    9544:	dc000015 	stw	r16,0(sp)
    9548:	2821883a 	mov	r16,r5
    954c:	2940038f 	ldh	r5,14(r5)
    9550:	dfc00115 	stw	ra,4(sp)
    9554:	000b1fc0 	call	b1fc <_lseek_r>
    9558:	00ffffc4 	movi	r3,-1
    955c:	10c00826 	beq	r2,r3,9580 <__sseek+0x40>
    9560:	80c0030b 	ldhu	r3,12(r16)
    9564:	80801415 	stw	r2,80(r16)
    9568:	18c40014 	ori	r3,r3,4096
    956c:	80c0030d 	sth	r3,12(r16)
    9570:	dfc00117 	ldw	ra,4(sp)
    9574:	dc000017 	ldw	r16,0(sp)
    9578:	dec00204 	addi	sp,sp,8
    957c:	f800283a 	ret
    9580:	80c0030b 	ldhu	r3,12(r16)
    9584:	18fbffcc 	andi	r3,r3,61439
    9588:	80c0030d 	sth	r3,12(r16)
    958c:	dfc00117 	ldw	ra,4(sp)
    9590:	dc000017 	ldw	r16,0(sp)
    9594:	dec00204 	addi	sp,sp,8
    9598:	f800283a 	ret

0000959c <__sclose>:
    959c:	2940038f 	ldh	r5,14(r5)
    95a0:	000ad281 	jmpi	ad28 <_close_r>

000095a4 <strcmp>:
    95a4:	2144b03a 	or	r2,r4,r5
    95a8:	108000cc 	andi	r2,r2,3
    95ac:	1000171e 	bne	r2,zero,960c <strcmp+0x68>
    95b0:	20800017 	ldw	r2,0(r4)
    95b4:	28c00017 	ldw	r3,0(r5)
    95b8:	10c0141e 	bne	r2,r3,960c <strcmp+0x68>
    95bc:	027fbff4 	movhi	r9,65279
    95c0:	4a7fbfc4 	addi	r9,r9,-257
    95c4:	0086303a 	nor	r3,zero,r2
    95c8:	02202074 	movhi	r8,32897
    95cc:	1245883a 	add	r2,r2,r9
    95d0:	42202004 	addi	r8,r8,-32640
    95d4:	10c4703a 	and	r2,r2,r3
    95d8:	1204703a 	and	r2,r2,r8
    95dc:	10000226 	beq	r2,zero,95e8 <strcmp+0x44>
    95e0:	00002306 	br	9670 <strcmp+0xcc>
    95e4:	1000221e 	bne	r2,zero,9670 <strcmp+0xcc>
    95e8:	21000104 	addi	r4,r4,4
    95ec:	20c00017 	ldw	r3,0(r4)
    95f0:	29400104 	addi	r5,r5,4
    95f4:	29800017 	ldw	r6,0(r5)
    95f8:	1a4f883a 	add	r7,r3,r9
    95fc:	00c4303a 	nor	r2,zero,r3
    9600:	3884703a 	and	r2,r7,r2
    9604:	1204703a 	and	r2,r2,r8
    9608:	19bff626 	beq	r3,r6,95e4 <strcmp+0x40>
    960c:	20800003 	ldbu	r2,0(r4)
    9610:	10c03fcc 	andi	r3,r2,255
    9614:	18c0201c 	xori	r3,r3,128
    9618:	18ffe004 	addi	r3,r3,-128
    961c:	18000c26 	beq	r3,zero,9650 <strcmp+0xac>
    9620:	29800007 	ldb	r6,0(r5)
    9624:	19800326 	beq	r3,r6,9634 <strcmp+0x90>
    9628:	00001306 	br	9678 <strcmp+0xd4>
    962c:	29800007 	ldb	r6,0(r5)
    9630:	11800b1e 	bne	r2,r6,9660 <strcmp+0xbc>
    9634:	21000044 	addi	r4,r4,1
    9638:	20c00003 	ldbu	r3,0(r4)
    963c:	29400044 	addi	r5,r5,1
    9640:	18803fcc 	andi	r2,r3,255
    9644:	1080201c 	xori	r2,r2,128
    9648:	10bfe004 	addi	r2,r2,-128
    964c:	103ff71e 	bne	r2,zero,962c <strcmp+0x88>
    9650:	0007883a 	mov	r3,zero
    9654:	28800003 	ldbu	r2,0(r5)
    9658:	1885c83a 	sub	r2,r3,r2
    965c:	f800283a 	ret
    9660:	28800003 	ldbu	r2,0(r5)
    9664:	18c03fcc 	andi	r3,r3,255
    9668:	1885c83a 	sub	r2,r3,r2
    966c:	f800283a 	ret
    9670:	0005883a 	mov	r2,zero
    9674:	f800283a 	ret
    9678:	10c03fcc 	andi	r3,r2,255
    967c:	003ff506 	br	9654 <strcmp+0xb0>

00009680 <__sprint_r.part.0>:
    9680:	28801917 	ldw	r2,100(r5)
    9684:	defff604 	addi	sp,sp,-40
    9688:	dd400515 	stw	r21,20(sp)
    968c:	dfc00915 	stw	ra,36(sp)
    9690:	df000815 	stw	fp,32(sp)
    9694:	ddc00715 	stw	r23,28(sp)
    9698:	dd800615 	stw	r22,24(sp)
    969c:	dd000415 	stw	r20,16(sp)
    96a0:	dcc00315 	stw	r19,12(sp)
    96a4:	dc800215 	stw	r18,8(sp)
    96a8:	dc400115 	stw	r17,4(sp)
    96ac:	dc000015 	stw	r16,0(sp)
    96b0:	1088000c 	andi	r2,r2,8192
    96b4:	302b883a 	mov	r21,r6
    96b8:	10002e26 	beq	r2,zero,9774 <__sprint_r.part.0+0xf4>
    96bc:	30800217 	ldw	r2,8(r6)
    96c0:	35800017 	ldw	r22,0(r6)
    96c4:	10002926 	beq	r2,zero,976c <__sprint_r.part.0+0xec>
    96c8:	2827883a 	mov	r19,r5
    96cc:	2029883a 	mov	r20,r4
    96d0:	b5c00104 	addi	r23,r22,4
    96d4:	04bfffc4 	movi	r18,-1
    96d8:	bc400017 	ldw	r17,0(r23)
    96dc:	b4000017 	ldw	r16,0(r22)
    96e0:	0039883a 	mov	fp,zero
    96e4:	8822d0ba 	srli	r17,r17,2
    96e8:	8800031e 	bne	r17,zero,96f8 <__sprint_r.part.0+0x78>
    96ec:	00001806 	br	9750 <__sprint_r.part.0+0xd0>
    96f0:	84000104 	addi	r16,r16,4
    96f4:	8f001526 	beq	r17,fp,974c <__sprint_r.part.0+0xcc>
    96f8:	81400017 	ldw	r5,0(r16)
    96fc:	980d883a 	mov	r6,r19
    9700:	a009883a 	mov	r4,r20
    9704:	000b0a80 	call	b0a8 <_fputwc_r>
    9708:	e7000044 	addi	fp,fp,1
    970c:	14bff81e 	bne	r2,r18,96f0 <__sprint_r.part.0+0x70>
    9710:	9005883a 	mov	r2,r18
    9714:	a8000215 	stw	zero,8(r21)
    9718:	a8000115 	stw	zero,4(r21)
    971c:	dfc00917 	ldw	ra,36(sp)
    9720:	df000817 	ldw	fp,32(sp)
    9724:	ddc00717 	ldw	r23,28(sp)
    9728:	dd800617 	ldw	r22,24(sp)
    972c:	dd400517 	ldw	r21,20(sp)
    9730:	dd000417 	ldw	r20,16(sp)
    9734:	dcc00317 	ldw	r19,12(sp)
    9738:	dc800217 	ldw	r18,8(sp)
    973c:	dc400117 	ldw	r17,4(sp)
    9740:	dc000017 	ldw	r16,0(sp)
    9744:	dec00a04 	addi	sp,sp,40
    9748:	f800283a 	ret
    974c:	a8800217 	ldw	r2,8(r21)
    9750:	8c63883a 	add	r17,r17,r17
    9754:	8c63883a 	add	r17,r17,r17
    9758:	1445c83a 	sub	r2,r2,r17
    975c:	a8800215 	stw	r2,8(r21)
    9760:	b5800204 	addi	r22,r22,8
    9764:	bdc00204 	addi	r23,r23,8
    9768:	103fdb1e 	bne	r2,zero,96d8 <__sprint_r.part.0+0x58>
    976c:	0005883a 	mov	r2,zero
    9770:	003fe806 	br	9714 <__sprint_r.part.0+0x94>
    9774:	00071080 	call	7108 <__sfvwrite_r>
    9778:	003fe606 	br	9714 <__sprint_r.part.0+0x94>

0000977c <__sprint_r>:
    977c:	30c00217 	ldw	r3,8(r6)
    9780:	18000126 	beq	r3,zero,9788 <__sprint_r+0xc>
    9784:	00096801 	jmpi	9680 <__sprint_r.part.0>
    9788:	30000115 	stw	zero,4(r6)
    978c:	0005883a 	mov	r2,zero
    9790:	f800283a 	ret

00009794 <___vfiprintf_internal_r>:
    9794:	deffc904 	addi	sp,sp,-220
    9798:	df003515 	stw	fp,212(sp)
    979c:	dd003115 	stw	r20,196(sp)
    97a0:	dfc03615 	stw	ra,216(sp)
    97a4:	ddc03415 	stw	r23,208(sp)
    97a8:	dd803315 	stw	r22,204(sp)
    97ac:	dd403215 	stw	r21,200(sp)
    97b0:	dcc03015 	stw	r19,192(sp)
    97b4:	dc802f15 	stw	r18,188(sp)
    97b8:	dc402e15 	stw	r17,184(sp)
    97bc:	dc002d15 	stw	r16,180(sp)
    97c0:	d9002015 	stw	r4,128(sp)
    97c4:	d9c02215 	stw	r7,136(sp)
    97c8:	2829883a 	mov	r20,r5
    97cc:	3039883a 	mov	fp,r6
    97d0:	20000226 	beq	r4,zero,97dc <___vfiprintf_internal_r+0x48>
    97d4:	20800e17 	ldw	r2,56(r4)
    97d8:	1000cf26 	beq	r2,zero,9b18 <___vfiprintf_internal_r+0x384>
    97dc:	a080030b 	ldhu	r2,12(r20)
    97e0:	10c8000c 	andi	r3,r2,8192
    97e4:	1800061e 	bne	r3,zero,9800 <___vfiprintf_internal_r+0x6c>
    97e8:	a1001917 	ldw	r4,100(r20)
    97ec:	00f7ffc4 	movi	r3,-8193
    97f0:	10880014 	ori	r2,r2,8192
    97f4:	20c6703a 	and	r3,r4,r3
    97f8:	a080030d 	sth	r2,12(r20)
    97fc:	a0c01915 	stw	r3,100(r20)
    9800:	10c0020c 	andi	r3,r2,8
    9804:	1800a926 	beq	r3,zero,9aac <___vfiprintf_internal_r+0x318>
    9808:	a0c00417 	ldw	r3,16(r20)
    980c:	1800a726 	beq	r3,zero,9aac <___vfiprintf_internal_r+0x318>
    9810:	1080068c 	andi	r2,r2,26
    9814:	00c00284 	movi	r3,10
    9818:	10c0ac26 	beq	r2,r3,9acc <___vfiprintf_internal_r+0x338>
    981c:	da801a04 	addi	r10,sp,104
    9820:	da801e15 	stw	r10,120(sp)
    9824:	d8801e17 	ldw	r2,120(sp)
    9828:	da8019c4 	addi	r10,sp,103
    982c:	05800074 	movhi	r22,1
    9830:	05c00074 	movhi	r23,1
    9834:	da801f15 	stw	r10,124(sp)
    9838:	1295c83a 	sub	r10,r2,r10
    983c:	b585ef04 	addi	r22,r22,6076
    9840:	bdc5eb04 	addi	r23,r23,6060
    9844:	dec01a15 	stw	sp,104(sp)
    9848:	d8001c15 	stw	zero,112(sp)
    984c:	d8001b15 	stw	zero,108(sp)
    9850:	d8002615 	stw	zero,152(sp)
    9854:	d8002315 	stw	zero,140(sp)
    9858:	da802715 	stw	r10,156(sp)
    985c:	d811883a 	mov	r8,sp
    9860:	dd002115 	stw	r20,132(sp)
    9864:	e021883a 	mov	r16,fp
    9868:	80800007 	ldb	r2,0(r16)
    986c:	1003ea26 	beq	r2,zero,a818 <___vfiprintf_internal_r+0x1084>
    9870:	00c00944 	movi	r3,37
    9874:	8025883a 	mov	r18,r16
    9878:	10c0021e 	bne	r2,r3,9884 <___vfiprintf_internal_r+0xf0>
    987c:	00001606 	br	98d8 <___vfiprintf_internal_r+0x144>
    9880:	10c00326 	beq	r2,r3,9890 <___vfiprintf_internal_r+0xfc>
    9884:	94800044 	addi	r18,r18,1
    9888:	90800007 	ldb	r2,0(r18)
    988c:	103ffc1e 	bne	r2,zero,9880 <___vfiprintf_internal_r+0xec>
    9890:	9423c83a 	sub	r17,r18,r16
    9894:	88001026 	beq	r17,zero,98d8 <___vfiprintf_internal_r+0x144>
    9898:	d8c01c17 	ldw	r3,112(sp)
    989c:	d8801b17 	ldw	r2,108(sp)
    98a0:	44000015 	stw	r16,0(r8)
    98a4:	88c7883a 	add	r3,r17,r3
    98a8:	10800044 	addi	r2,r2,1
    98ac:	44400115 	stw	r17,4(r8)
    98b0:	d8c01c15 	stw	r3,112(sp)
    98b4:	d8801b15 	stw	r2,108(sp)
    98b8:	010001c4 	movi	r4,7
    98bc:	2080760e 	bge	r4,r2,9a98 <___vfiprintf_internal_r+0x304>
    98c0:	1803821e 	bne	r3,zero,a6cc <___vfiprintf_internal_r+0xf38>
    98c4:	da802317 	ldw	r10,140(sp)
    98c8:	d8001b15 	stw	zero,108(sp)
    98cc:	d811883a 	mov	r8,sp
    98d0:	5455883a 	add	r10,r10,r17
    98d4:	da802315 	stw	r10,140(sp)
    98d8:	90800007 	ldb	r2,0(r18)
    98dc:	10044626 	beq	r2,zero,a9f8 <___vfiprintf_internal_r+0x1264>
    98e0:	90c00047 	ldb	r3,1(r18)
    98e4:	94000044 	addi	r16,r18,1
    98e8:	d8001d85 	stb	zero,118(sp)
    98ec:	0009883a 	mov	r4,zero
    98f0:	000f883a 	mov	r7,zero
    98f4:	027fffc4 	movi	r9,-1
    98f8:	0023883a 	mov	r17,zero
    98fc:	0029883a 	mov	r20,zero
    9900:	01401604 	movi	r5,88
    9904:	01800244 	movi	r6,9
    9908:	03400a84 	movi	r13,42
    990c:	03001b04 	movi	r12,108
    9910:	84000044 	addi	r16,r16,1
    9914:	18bff804 	addi	r2,r3,-32
    9918:	28827336 	bltu	r5,r2,a2e8 <___vfiprintf_internal_r+0xb54>
    991c:	100490ba 	slli	r2,r2,2
    9920:	02800074 	movhi	r10,1
    9924:	52a64d04 	addi	r10,r10,-26316
    9928:	1285883a 	add	r2,r2,r10
    992c:	10800017 	ldw	r2,0(r2)
    9930:	1000683a 	jmp	r2
    9934:	0000a01c 	xori	zero,zero,640
    9938:	0000a2e8 	cmpgeui	zero,zero,651
    993c:	0000a2e8 	cmpgeui	zero,zero,651
    9940:	0000a03c 	xorhi	zero,zero,640
    9944:	0000a2e8 	cmpgeui	zero,zero,651
    9948:	0000a2e8 	cmpgeui	zero,zero,651
    994c:	0000a2e8 	cmpgeui	zero,zero,651
    9950:	0000a2e8 	cmpgeui	zero,zero,651
    9954:	0000a2e8 	cmpgeui	zero,zero,651
    9958:	0000a2e8 	cmpgeui	zero,zero,651
    995c:	0000a224 	muli	zero,zero,648
    9960:	0000a240 	call	a24 <i2c_short_write>
    9964:	0000a2e8 	cmpgeui	zero,zero,651
    9968:	00009b28 	cmpgeui	zero,zero,620
    996c:	0000a250 	cmplti	zero,zero,649
    9970:	0000a2e8 	cmpgeui	zero,zero,651
    9974:	0000a048 	cmpgei	zero,zero,641
    9978:	0000a054 	movui	zero,641
    997c:	0000a054 	movui	zero,641
    9980:	0000a054 	movui	zero,641
    9984:	0000a054 	movui	zero,641
    9988:	0000a054 	movui	zero,641
    998c:	0000a054 	movui	zero,641
    9990:	0000a054 	movui	zero,641
    9994:	0000a054 	movui	zero,641
    9998:	0000a054 	movui	zero,641
    999c:	0000a2e8 	cmpgeui	zero,zero,651
    99a0:	0000a2e8 	cmpgeui	zero,zero,651
    99a4:	0000a2e8 	cmpgeui	zero,zero,651
    99a8:	0000a2e8 	cmpgeui	zero,zero,651
    99ac:	0000a2e8 	cmpgeui	zero,zero,651
    99b0:	0000a2e8 	cmpgeui	zero,zero,651
    99b4:	0000a2e8 	cmpgeui	zero,zero,651
    99b8:	0000a2e8 	cmpgeui	zero,zero,651
    99bc:	0000a2e8 	cmpgeui	zero,zero,651
    99c0:	0000a2e8 	cmpgeui	zero,zero,651
    99c4:	0000a080 	call	a08 <i2c_short_read+0x70>
    99c8:	0000a2e8 	cmpgeui	zero,zero,651
    99cc:	0000a2e8 	cmpgeui	zero,zero,651
    99d0:	0000a2e8 	cmpgeui	zero,zero,651
    99d4:	0000a2e8 	cmpgeui	zero,zero,651
    99d8:	0000a2e8 	cmpgeui	zero,zero,651
    99dc:	0000a2e8 	cmpgeui	zero,zero,651
    99e0:	0000a2e8 	cmpgeui	zero,zero,651
    99e4:	0000a2e8 	cmpgeui	zero,zero,651
    99e8:	0000a2e8 	cmpgeui	zero,zero,651
    99ec:	0000a2e8 	cmpgeui	zero,zero,651
    99f0:	0000a0b8 	rdprs	zero,zero,642
    99f4:	0000a2e8 	cmpgeui	zero,zero,651
    99f8:	0000a2e8 	cmpgeui	zero,zero,651
    99fc:	0000a2e8 	cmpgeui	zero,zero,651
    9a00:	0000a2e8 	cmpgeui	zero,zero,651
    9a04:	0000a2e8 	cmpgeui	zero,zero,651
    9a08:	0000a110 	cmplti	zero,zero,644
    9a0c:	0000a2e8 	cmpgeui	zero,zero,651
    9a10:	0000a2e8 	cmpgeui	zero,zero,651
    9a14:	0000a180 	call	a18 <i2c_short_read+0x80>
    9a18:	0000a2e8 	cmpgeui	zero,zero,651
    9a1c:	0000a2e8 	cmpgeui	zero,zero,651
    9a20:	0000a2e8 	cmpgeui	zero,zero,651
    9a24:	0000a2e8 	cmpgeui	zero,zero,651
    9a28:	0000a2e8 	cmpgeui	zero,zero,651
    9a2c:	0000a2e8 	cmpgeui	zero,zero,651
    9a30:	0000a2e8 	cmpgeui	zero,zero,651
    9a34:	0000a2e8 	cmpgeui	zero,zero,651
    9a38:	0000a2e8 	cmpgeui	zero,zero,651
    9a3c:	0000a2e8 	cmpgeui	zero,zero,651
    9a40:	00009f2c 	andhi	zero,zero,636
    9a44:	00009f58 	cmpnei	zero,zero,637
    9a48:	0000a2e8 	cmpgeui	zero,zero,651
    9a4c:	0000a2e8 	cmpgeui	zero,zero,651
    9a50:	0000a2e8 	cmpgeui	zero,zero,651
    9a54:	0000a290 	cmplti	zero,zero,650
    9a58:	00009f58 	cmpnei	zero,zero,637
    9a5c:	0000a2e8 	cmpgeui	zero,zero,651
    9a60:	0000a2e8 	cmpgeui	zero,zero,651
    9a64:	00009dec 	andhi	zero,zero,631
    9a68:	0000a2e8 	cmpgeui	zero,zero,651
    9a6c:	00009dfc 	xorhi	zero,zero,631
    9a70:	00009e38 	rdprs	zero,zero,632
    9a74:	00009b34 	movhi	zero,620
    9a78:	00009de0 	cmpeqi	zero,zero,631
    9a7c:	0000a2e8 	cmpgeui	zero,zero,651
    9a80:	0000a1bc 	xorhi	zero,zero,646
    9a84:	0000a2e8 	cmpgeui	zero,zero,651
    9a88:	0000a214 	movui	zero,648
    9a8c:	0000a2e8 	cmpgeui	zero,zero,651
    9a90:	0000a2e8 	cmpgeui	zero,zero,651
    9a94:	00009ed8 	cmpnei	zero,zero,635
    9a98:	42000204 	addi	r8,r8,8
    9a9c:	da802317 	ldw	r10,140(sp)
    9aa0:	5455883a 	add	r10,r10,r17
    9aa4:	da802315 	stw	r10,140(sp)
    9aa8:	003f8b06 	br	98d8 <___vfiprintf_internal_r+0x144>
    9aac:	d9002017 	ldw	r4,128(sp)
    9ab0:	a00b883a 	mov	r5,r20
    9ab4:	0004cb00 	call	4cb0 <__swsetup_r>
    9ab8:	1003b11e 	bne	r2,zero,a980 <___vfiprintf_internal_r+0x11ec>
    9abc:	a080030b 	ldhu	r2,12(r20)
    9ac0:	00c00284 	movi	r3,10
    9ac4:	1080068c 	andi	r2,r2,26
    9ac8:	10ff541e 	bne	r2,r3,981c <___vfiprintf_internal_r+0x88>
    9acc:	a080038f 	ldh	r2,14(r20)
    9ad0:	103f5216 	blt	r2,zero,981c <___vfiprintf_internal_r+0x88>
    9ad4:	d9c02217 	ldw	r7,136(sp)
    9ad8:	d9002017 	ldw	r4,128(sp)
    9adc:	e00d883a 	mov	r6,fp
    9ae0:	a00b883a 	mov	r5,r20
    9ae4:	000ac0c0 	call	ac0c <__sbprintf>
    9ae8:	dfc03617 	ldw	ra,216(sp)
    9aec:	df003517 	ldw	fp,212(sp)
    9af0:	ddc03417 	ldw	r23,208(sp)
    9af4:	dd803317 	ldw	r22,204(sp)
    9af8:	dd403217 	ldw	r21,200(sp)
    9afc:	dd003117 	ldw	r20,196(sp)
    9b00:	dcc03017 	ldw	r19,192(sp)
    9b04:	dc802f17 	ldw	r18,188(sp)
    9b08:	dc402e17 	ldw	r17,184(sp)
    9b0c:	dc002d17 	ldw	r16,180(sp)
    9b10:	dec03704 	addi	sp,sp,220
    9b14:	f800283a 	ret
    9b18:	0006c840 	call	6c84 <__sinit>
    9b1c:	003f2f06 	br	97dc <___vfiprintf_internal_r+0x48>
    9b20:	0463c83a 	sub	r17,zero,r17
    9b24:	d8802215 	stw	r2,136(sp)
    9b28:	a5000114 	ori	r20,r20,4
    9b2c:	80c00007 	ldb	r3,0(r16)
    9b30:	003f7706 	br	9910 <___vfiprintf_internal_r+0x17c>
    9b34:	00800c04 	movi	r2,48
    9b38:	da802217 	ldw	r10,136(sp)
    9b3c:	d8801d05 	stb	r2,116(sp)
    9b40:	00801e04 	movi	r2,120
    9b44:	d8801d45 	stb	r2,117(sp)
    9b48:	d8001d85 	stb	zero,118(sp)
    9b4c:	50c00104 	addi	r3,r10,4
    9b50:	54800017 	ldw	r18,0(r10)
    9b54:	0027883a 	mov	r19,zero
    9b58:	a0800094 	ori	r2,r20,2
    9b5c:	48030b16 	blt	r9,zero,a78c <___vfiprintf_internal_r+0xff8>
    9b60:	00bfdfc4 	movi	r2,-129
    9b64:	a096703a 	and	r11,r20,r2
    9b68:	d8c02215 	stw	r3,136(sp)
    9b6c:	5d000094 	ori	r20,r11,2
    9b70:	90032b1e 	bne	r18,zero,a820 <___vfiprintf_internal_r+0x108c>
    9b74:	00800074 	movhi	r2,1
    9b78:	10858a04 	addi	r2,r2,5672
    9b7c:	d8802615 	stw	r2,152(sp)
    9b80:	0039883a 	mov	fp,zero
    9b84:	48017b1e 	bne	r9,zero,a174 <___vfiprintf_internal_r+0x9e0>
    9b88:	0013883a 	mov	r9,zero
    9b8c:	0027883a 	mov	r19,zero
    9b90:	dd401a04 	addi	r21,sp,104
    9b94:	4825883a 	mov	r18,r9
    9b98:	4cc0010e 	bge	r9,r19,9ba0 <___vfiprintf_internal_r+0x40c>
    9b9c:	9825883a 	mov	r18,r19
    9ba0:	e7003fcc 	andi	fp,fp,255
    9ba4:	e700201c 	xori	fp,fp,128
    9ba8:	e73fe004 	addi	fp,fp,-128
    9bac:	e0000126 	beq	fp,zero,9bb4 <___vfiprintf_internal_r+0x420>
    9bb0:	94800044 	addi	r18,r18,1
    9bb4:	a380008c 	andi	r14,r20,2
    9bb8:	70000126 	beq	r14,zero,9bc0 <___vfiprintf_internal_r+0x42c>
    9bbc:	94800084 	addi	r18,r18,2
    9bc0:	a700210c 	andi	fp,r20,132
    9bc4:	e001df1e 	bne	fp,zero,a344 <___vfiprintf_internal_r+0xbb0>
    9bc8:	8c87c83a 	sub	r3,r17,r18
    9bcc:	00c1dd0e 	bge	zero,r3,a344 <___vfiprintf_internal_r+0xbb0>
    9bd0:	01c00404 	movi	r7,16
    9bd4:	d8801c17 	ldw	r2,112(sp)
    9bd8:	38c3ad0e 	bge	r7,r3,aa90 <___vfiprintf_internal_r+0x12fc>
    9bdc:	02800074 	movhi	r10,1
    9be0:	5285ef04 	addi	r10,r10,6076
    9be4:	dc002915 	stw	r16,164(sp)
    9be8:	d9801b17 	ldw	r6,108(sp)
    9bec:	da802415 	stw	r10,144(sp)
    9bf0:	03c001c4 	movi	r15,7
    9bf4:	da402515 	stw	r9,148(sp)
    9bf8:	db802815 	stw	r14,160(sp)
    9bfc:	1821883a 	mov	r16,r3
    9c00:	00000506 	br	9c18 <___vfiprintf_internal_r+0x484>
    9c04:	31400084 	addi	r5,r6,2
    9c08:	42000204 	addi	r8,r8,8
    9c0c:	200d883a 	mov	r6,r4
    9c10:	843ffc04 	addi	r16,r16,-16
    9c14:	3c000d0e 	bge	r7,r16,9c4c <___vfiprintf_internal_r+0x4b8>
    9c18:	10800404 	addi	r2,r2,16
    9c1c:	31000044 	addi	r4,r6,1
    9c20:	45800015 	stw	r22,0(r8)
    9c24:	41c00115 	stw	r7,4(r8)
    9c28:	d8801c15 	stw	r2,112(sp)
    9c2c:	d9001b15 	stw	r4,108(sp)
    9c30:	793ff40e 	bge	r15,r4,9c04 <___vfiprintf_internal_r+0x470>
    9c34:	1001b51e 	bne	r2,zero,a30c <___vfiprintf_internal_r+0xb78>
    9c38:	843ffc04 	addi	r16,r16,-16
    9c3c:	000d883a 	mov	r6,zero
    9c40:	01400044 	movi	r5,1
    9c44:	d811883a 	mov	r8,sp
    9c48:	3c3ff316 	blt	r7,r16,9c18 <___vfiprintf_internal_r+0x484>
    9c4c:	8007883a 	mov	r3,r16
    9c50:	da402517 	ldw	r9,148(sp)
    9c54:	db802817 	ldw	r14,160(sp)
    9c58:	dc002917 	ldw	r16,164(sp)
    9c5c:	da802417 	ldw	r10,144(sp)
    9c60:	1885883a 	add	r2,r3,r2
    9c64:	40c00115 	stw	r3,4(r8)
    9c68:	42800015 	stw	r10,0(r8)
    9c6c:	d8801c15 	stw	r2,112(sp)
    9c70:	d9401b15 	stw	r5,108(sp)
    9c74:	00c001c4 	movi	r3,7
    9c78:	19426016 	blt	r3,r5,a5fc <___vfiprintf_internal_r+0xe68>
    9c7c:	d8c01d87 	ldb	r3,118(sp)
    9c80:	42000204 	addi	r8,r8,8
    9c84:	29000044 	addi	r4,r5,1
    9c88:	1801b31e 	bne	r3,zero,a358 <___vfiprintf_internal_r+0xbc4>
    9c8c:	7001c026 	beq	r14,zero,a390 <___vfiprintf_internal_r+0xbfc>
    9c90:	d8c01d04 	addi	r3,sp,116
    9c94:	10800084 	addi	r2,r2,2
    9c98:	40c00015 	stw	r3,0(r8)
    9c9c:	00c00084 	movi	r3,2
    9ca0:	40c00115 	stw	r3,4(r8)
    9ca4:	d8801c15 	stw	r2,112(sp)
    9ca8:	d9001b15 	stw	r4,108(sp)
    9cac:	00c001c4 	movi	r3,7
    9cb0:	1902650e 	bge	r3,r4,a648 <___vfiprintf_internal_r+0xeb4>
    9cb4:	10029a1e 	bne	r2,zero,a720 <___vfiprintf_internal_r+0xf8c>
    9cb8:	00c02004 	movi	r3,128
    9cbc:	01000044 	movi	r4,1
    9cc0:	000b883a 	mov	r5,zero
    9cc4:	d811883a 	mov	r8,sp
    9cc8:	e0c1b31e 	bne	fp,r3,a398 <___vfiprintf_internal_r+0xc04>
    9ccc:	8cb9c83a 	sub	fp,r17,r18
    9cd0:	0701b10e 	bge	zero,fp,a398 <___vfiprintf_internal_r+0xc04>
    9cd4:	01c00404 	movi	r7,16
    9cd8:	3f03890e 	bge	r7,fp,ab00 <___vfiprintf_internal_r+0x136c>
    9cdc:	00c00074 	movhi	r3,1
    9ce0:	18c5eb04 	addi	r3,r3,6060
    9ce4:	d8c02415 	stw	r3,144(sp)
    9ce8:	8007883a 	mov	r3,r16
    9cec:	034001c4 	movi	r13,7
    9cf0:	e021883a 	mov	r16,fp
    9cf4:	da402515 	stw	r9,148(sp)
    9cf8:	1839883a 	mov	fp,r3
    9cfc:	00000506 	br	9d14 <___vfiprintf_internal_r+0x580>
    9d00:	29800084 	addi	r6,r5,2
    9d04:	42000204 	addi	r8,r8,8
    9d08:	180b883a 	mov	r5,r3
    9d0c:	843ffc04 	addi	r16,r16,-16
    9d10:	3c000d0e 	bge	r7,r16,9d48 <___vfiprintf_internal_r+0x5b4>
    9d14:	10800404 	addi	r2,r2,16
    9d18:	28c00044 	addi	r3,r5,1
    9d1c:	45c00015 	stw	r23,0(r8)
    9d20:	41c00115 	stw	r7,4(r8)
    9d24:	d8801c15 	stw	r2,112(sp)
    9d28:	d8c01b15 	stw	r3,108(sp)
    9d2c:	68fff40e 	bge	r13,r3,9d00 <___vfiprintf_internal_r+0x56c>
    9d30:	1002241e 	bne	r2,zero,a5c4 <___vfiprintf_internal_r+0xe30>
    9d34:	843ffc04 	addi	r16,r16,-16
    9d38:	01800044 	movi	r6,1
    9d3c:	000b883a 	mov	r5,zero
    9d40:	d811883a 	mov	r8,sp
    9d44:	3c3ff316 	blt	r7,r16,9d14 <___vfiprintf_internal_r+0x580>
    9d48:	da402517 	ldw	r9,148(sp)
    9d4c:	e007883a 	mov	r3,fp
    9d50:	8039883a 	mov	fp,r16
    9d54:	1821883a 	mov	r16,r3
    9d58:	d8c02417 	ldw	r3,144(sp)
    9d5c:	1705883a 	add	r2,r2,fp
    9d60:	47000115 	stw	fp,4(r8)
    9d64:	40c00015 	stw	r3,0(r8)
    9d68:	d8801c15 	stw	r2,112(sp)
    9d6c:	d9801b15 	stw	r6,108(sp)
    9d70:	00c001c4 	movi	r3,7
    9d74:	19827616 	blt	r3,r6,a750 <___vfiprintf_internal_r+0xfbc>
    9d78:	4cf9c83a 	sub	fp,r9,r19
    9d7c:	42000204 	addi	r8,r8,8
    9d80:	31000044 	addi	r4,r6,1
    9d84:	300b883a 	mov	r5,r6
    9d88:	07018516 	blt	zero,fp,a3a0 <___vfiprintf_internal_r+0xc0c>
    9d8c:	9885883a 	add	r2,r19,r2
    9d90:	45400015 	stw	r21,0(r8)
    9d94:	44c00115 	stw	r19,4(r8)
    9d98:	d8801c15 	stw	r2,112(sp)
    9d9c:	d9001b15 	stw	r4,108(sp)
    9da0:	00c001c4 	movi	r3,7
    9da4:	1901dd0e 	bge	r3,r4,a51c <___vfiprintf_internal_r+0xd88>
    9da8:	1002401e 	bne	r2,zero,a6ac <___vfiprintf_internal_r+0xf18>
    9dac:	d8001b15 	stw	zero,108(sp)
    9db0:	a2c0010c 	andi	r11,r20,4
    9db4:	58000226 	beq	r11,zero,9dc0 <___vfiprintf_internal_r+0x62c>
    9db8:	8ca7c83a 	sub	r19,r17,r18
    9dbc:	04c2f216 	blt	zero,r19,a988 <___vfiprintf_internal_r+0x11f4>
    9dc0:	8c80010e 	bge	r17,r18,9dc8 <___vfiprintf_internal_r+0x634>
    9dc4:	9023883a 	mov	r17,r18
    9dc8:	da802317 	ldw	r10,140(sp)
    9dcc:	5455883a 	add	r10,r10,r17
    9dd0:	da802315 	stw	r10,140(sp)
    9dd4:	d8001b15 	stw	zero,108(sp)
    9dd8:	d811883a 	mov	r8,sp
    9ddc:	003ea206 	br	9868 <___vfiprintf_internal_r+0xd4>
    9de0:	a5000814 	ori	r20,r20,32
    9de4:	80c00007 	ldb	r3,0(r16)
    9de8:	003ec906 	br	9910 <___vfiprintf_internal_r+0x17c>
    9dec:	80c00007 	ldb	r3,0(r16)
    9df0:	1b030926 	beq	r3,r12,aa18 <___vfiprintf_internal_r+0x1284>
    9df4:	a5000414 	ori	r20,r20,16
    9df8:	003ec506 	br	9910 <___vfiprintf_internal_r+0x17c>
    9dfc:	21003fcc 	andi	r4,r4,255
    9e00:	20035e1e 	bne	r4,zero,ab7c <___vfiprintf_internal_r+0x13e8>
    9e04:	a080080c 	andi	r2,r20,32
    9e08:	1002a526 	beq	r2,zero,a8a0 <___vfiprintf_internal_r+0x110c>
    9e0c:	da802217 	ldw	r10,136(sp)
    9e10:	50800017 	ldw	r2,0(r10)
    9e14:	da802317 	ldw	r10,140(sp)
    9e18:	5007d7fa 	srai	r3,r10,31
    9e1c:	da802217 	ldw	r10,136(sp)
    9e20:	10c00115 	stw	r3,4(r2)
    9e24:	52800104 	addi	r10,r10,4
    9e28:	da802215 	stw	r10,136(sp)
    9e2c:	da802317 	ldw	r10,140(sp)
    9e30:	12800015 	stw	r10,0(r2)
    9e34:	003e8c06 	br	9868 <___vfiprintf_internal_r+0xd4>
    9e38:	21003fcc 	andi	r4,r4,255
    9e3c:	2003511e 	bne	r4,zero,ab84 <___vfiprintf_internal_r+0x13f0>
    9e40:	a080080c 	andi	r2,r20,32
    9e44:	1000a126 	beq	r2,zero,a0cc <___vfiprintf_internal_r+0x938>
    9e48:	da802217 	ldw	r10,136(sp)
    9e4c:	d8001d85 	stb	zero,118(sp)
    9e50:	50800204 	addi	r2,r10,8
    9e54:	54800017 	ldw	r18,0(r10)
    9e58:	54c00117 	ldw	r19,4(r10)
    9e5c:	4802b416 	blt	r9,zero,a930 <___vfiprintf_internal_r+0x119c>
    9e60:	013fdfc4 	movi	r4,-129
    9e64:	94c6b03a 	or	r3,r18,r19
    9e68:	d8802215 	stw	r2,136(sp)
    9e6c:	a128703a 	and	r20,r20,r4
    9e70:	1800a226 	beq	r3,zero,a0fc <___vfiprintf_internal_r+0x968>
    9e74:	0039883a 	mov	fp,zero
    9e78:	dd401a04 	addi	r21,sp,104
    9e7c:	9006d0fa 	srli	r3,r18,3
    9e80:	9808977a 	slli	r4,r19,29
    9e84:	9826d0fa 	srli	r19,r19,3
    9e88:	948001cc 	andi	r18,r18,7
    9e8c:	90800c04 	addi	r2,r18,48
    9e90:	ad7fffc4 	addi	r21,r21,-1
    9e94:	20e4b03a 	or	r18,r4,r3
    9e98:	a8800005 	stb	r2,0(r21)
    9e9c:	94c6b03a 	or	r3,r18,r19
    9ea0:	183ff61e 	bne	r3,zero,9e7c <___vfiprintf_internal_r+0x6e8>
    9ea4:	a0c0004c 	andi	r3,r20,1
    9ea8:	18005926 	beq	r3,zero,a010 <___vfiprintf_internal_r+0x87c>
    9eac:	10803fcc 	andi	r2,r2,255
    9eb0:	1080201c 	xori	r2,r2,128
    9eb4:	10bfe004 	addi	r2,r2,-128
    9eb8:	00c00c04 	movi	r3,48
    9ebc:	10c05426 	beq	r2,r3,a010 <___vfiprintf_internal_r+0x87c>
    9ec0:	da801e17 	ldw	r10,120(sp)
    9ec4:	a8bfffc4 	addi	r2,r21,-1
    9ec8:	a8ffffc5 	stb	r3,-1(r21)
    9ecc:	50a7c83a 	sub	r19,r10,r2
    9ed0:	102b883a 	mov	r21,r2
    9ed4:	003f2f06 	br	9b94 <___vfiprintf_internal_r+0x400>
    9ed8:	21003fcc 	andi	r4,r4,255
    9edc:	2003421e 	bne	r4,zero,abe8 <___vfiprintf_internal_r+0x1454>
    9ee0:	00800074 	movhi	r2,1
    9ee4:	10858a04 	addi	r2,r2,5672
    9ee8:	d8802615 	stw	r2,152(sp)
    9eec:	a080080c 	andi	r2,r20,32
    9ef0:	1000aa26 	beq	r2,zero,a19c <___vfiprintf_internal_r+0xa08>
    9ef4:	da802217 	ldw	r10,136(sp)
    9ef8:	54800017 	ldw	r18,0(r10)
    9efc:	54c00117 	ldw	r19,4(r10)
    9f00:	52800204 	addi	r10,r10,8
    9f04:	da802215 	stw	r10,136(sp)
    9f08:	a080004c 	andi	r2,r20,1
    9f0c:	1001d226 	beq	r2,zero,a658 <___vfiprintf_internal_r+0xec4>
    9f10:	94c4b03a 	or	r2,r18,r19
    9f14:	1002351e 	bne	r2,zero,a7ec <___vfiprintf_internal_r+0x1058>
    9f18:	d8001d85 	stb	zero,118(sp)
    9f1c:	48022216 	blt	r9,zero,a7a8 <___vfiprintf_internal_r+0x1014>
    9f20:	00bfdfc4 	movi	r2,-129
    9f24:	a0a8703a 	and	r20,r20,r2
    9f28:	003f1506 	br	9b80 <___vfiprintf_internal_r+0x3ec>
    9f2c:	da802217 	ldw	r10,136(sp)
    9f30:	04800044 	movi	r18,1
    9f34:	d8001d85 	stb	zero,118(sp)
    9f38:	50800017 	ldw	r2,0(r10)
    9f3c:	52800104 	addi	r10,r10,4
    9f40:	da802215 	stw	r10,136(sp)
    9f44:	d8801005 	stb	r2,64(sp)
    9f48:	9027883a 	mov	r19,r18
    9f4c:	dd401004 	addi	r21,sp,64
    9f50:	0013883a 	mov	r9,zero
    9f54:	003f1706 	br	9bb4 <___vfiprintf_internal_r+0x420>
    9f58:	21003fcc 	andi	r4,r4,255
    9f5c:	2003201e 	bne	r4,zero,abe0 <___vfiprintf_internal_r+0x144c>
    9f60:	a080080c 	andi	r2,r20,32
    9f64:	10004b26 	beq	r2,zero,a094 <___vfiprintf_internal_r+0x900>
    9f68:	da802217 	ldw	r10,136(sp)
    9f6c:	50800117 	ldw	r2,4(r10)
    9f70:	54800017 	ldw	r18,0(r10)
    9f74:	52800204 	addi	r10,r10,8
    9f78:	da802215 	stw	r10,136(sp)
    9f7c:	1027883a 	mov	r19,r2
    9f80:	10022c16 	blt	r2,zero,a834 <___vfiprintf_internal_r+0x10a0>
    9f84:	df001d83 	ldbu	fp,118(sp)
    9f88:	48007216 	blt	r9,zero,a154 <___vfiprintf_internal_r+0x9c0>
    9f8c:	00ffdfc4 	movi	r3,-129
    9f90:	94c4b03a 	or	r2,r18,r19
    9f94:	a0e8703a 	and	r20,r20,r3
    9f98:	1000cc26 	beq	r2,zero,a2cc <___vfiprintf_internal_r+0xb38>
    9f9c:	98021026 	beq	r19,zero,a7e0 <___vfiprintf_internal_r+0x104c>
    9fa0:	dc402415 	stw	r17,144(sp)
    9fa4:	dc002515 	stw	r16,148(sp)
    9fa8:	9823883a 	mov	r17,r19
    9fac:	9021883a 	mov	r16,r18
    9fb0:	dd401a04 	addi	r21,sp,104
    9fb4:	4825883a 	mov	r18,r9
    9fb8:	4027883a 	mov	r19,r8
    9fbc:	8009883a 	mov	r4,r16
    9fc0:	880b883a 	mov	r5,r17
    9fc4:	01800284 	movi	r6,10
    9fc8:	000f883a 	mov	r7,zero
    9fcc:	000bb740 	call	bb74 <__umoddi3>
    9fd0:	10800c04 	addi	r2,r2,48
    9fd4:	ad7fffc4 	addi	r21,r21,-1
    9fd8:	8009883a 	mov	r4,r16
    9fdc:	880b883a 	mov	r5,r17
    9fe0:	a8800005 	stb	r2,0(r21)
    9fe4:	01800284 	movi	r6,10
    9fe8:	000f883a 	mov	r7,zero
    9fec:	000b5fc0 	call	b5fc <__udivdi3>
    9ff0:	1021883a 	mov	r16,r2
    9ff4:	10c4b03a 	or	r2,r2,r3
    9ff8:	1823883a 	mov	r17,r3
    9ffc:	103fef1e 	bne	r2,zero,9fbc <___vfiprintf_internal_r+0x828>
    a000:	dc402417 	ldw	r17,144(sp)
    a004:	dc002517 	ldw	r16,148(sp)
    a008:	9013883a 	mov	r9,r18
    a00c:	9811883a 	mov	r8,r19
    a010:	da801e17 	ldw	r10,120(sp)
    a014:	5567c83a 	sub	r19,r10,r21
    a018:	003ede06 	br	9b94 <___vfiprintf_internal_r+0x400>
    a01c:	38803fcc 	andi	r2,r7,255
    a020:	1080201c 	xori	r2,r2,128
    a024:	10bfe004 	addi	r2,r2,-128
    a028:	1002371e 	bne	r2,zero,a908 <___vfiprintf_internal_r+0x1174>
    a02c:	01000044 	movi	r4,1
    a030:	01c00804 	movi	r7,32
    a034:	80c00007 	ldb	r3,0(r16)
    a038:	003e3506 	br	9910 <___vfiprintf_internal_r+0x17c>
    a03c:	a5000054 	ori	r20,r20,1
    a040:	80c00007 	ldb	r3,0(r16)
    a044:	003e3206 	br	9910 <___vfiprintf_internal_r+0x17c>
    a048:	a5002014 	ori	r20,r20,128
    a04c:	80c00007 	ldb	r3,0(r16)
    a050:	003e2f06 	br	9910 <___vfiprintf_internal_r+0x17c>
    a054:	8015883a 	mov	r10,r16
    a058:	0023883a 	mov	r17,zero
    a05c:	18bff404 	addi	r2,r3,-48
    a060:	50c00007 	ldb	r3,0(r10)
    a064:	8c4002a4 	muli	r17,r17,10
    a068:	84000044 	addi	r16,r16,1
    a06c:	8015883a 	mov	r10,r16
    a070:	1463883a 	add	r17,r2,r17
    a074:	18bff404 	addi	r2,r3,-48
    a078:	30bff92e 	bgeu	r6,r2,a060 <___vfiprintf_internal_r+0x8cc>
    a07c:	003e2506 	br	9914 <___vfiprintf_internal_r+0x180>
    a080:	21003fcc 	andi	r4,r4,255
    a084:	2002d41e 	bne	r4,zero,abd8 <___vfiprintf_internal_r+0x1444>
    a088:	a5000414 	ori	r20,r20,16
    a08c:	a080080c 	andi	r2,r20,32
    a090:	103fb51e 	bne	r2,zero,9f68 <___vfiprintf_internal_r+0x7d4>
    a094:	a080040c 	andi	r2,r20,16
    a098:	1001f826 	beq	r2,zero,a87c <___vfiprintf_internal_r+0x10e8>
    a09c:	da802217 	ldw	r10,136(sp)
    a0a0:	54800017 	ldw	r18,0(r10)
    a0a4:	52800104 	addi	r10,r10,4
    a0a8:	da802215 	stw	r10,136(sp)
    a0ac:	9027d7fa 	srai	r19,r18,31
    a0b0:	9805883a 	mov	r2,r19
    a0b4:	003fb206 	br	9f80 <___vfiprintf_internal_r+0x7ec>
    a0b8:	21003fcc 	andi	r4,r4,255
    a0bc:	2002c41e 	bne	r4,zero,abd0 <___vfiprintf_internal_r+0x143c>
    a0c0:	a5000414 	ori	r20,r20,16
    a0c4:	a080080c 	andi	r2,r20,32
    a0c8:	103f5f1e 	bne	r2,zero,9e48 <___vfiprintf_internal_r+0x6b4>
    a0cc:	a080040c 	andi	r2,r20,16
    a0d0:	10020f26 	beq	r2,zero,a910 <___vfiprintf_internal_r+0x117c>
    a0d4:	da802217 	ldw	r10,136(sp)
    a0d8:	d8001d85 	stb	zero,118(sp)
    a0dc:	0027883a 	mov	r19,zero
    a0e0:	50800104 	addi	r2,r10,4
    a0e4:	54800017 	ldw	r18,0(r10)
    a0e8:	48021116 	blt	r9,zero,a930 <___vfiprintf_internal_r+0x119c>
    a0ec:	00ffdfc4 	movi	r3,-129
    a0f0:	d8802215 	stw	r2,136(sp)
    a0f4:	a0e8703a 	and	r20,r20,r3
    a0f8:	903f5e1e 	bne	r18,zero,9e74 <___vfiprintf_internal_r+0x6e0>
    a0fc:	0039883a 	mov	fp,zero
    a100:	4802a626 	beq	r9,zero,ab9c <___vfiprintf_internal_r+0x1408>
    a104:	0025883a 	mov	r18,zero
    a108:	0027883a 	mov	r19,zero
    a10c:	003f5a06 	br	9e78 <___vfiprintf_internal_r+0x6e4>
    a110:	21003fcc 	andi	r4,r4,255
    a114:	20029f1e 	bne	r4,zero,ab94 <___vfiprintf_internal_r+0x1400>
    a118:	a5000414 	ori	r20,r20,16
    a11c:	a080080c 	andi	r2,r20,32
    a120:	10005e1e 	bne	r2,zero,a29c <___vfiprintf_internal_r+0xb08>
    a124:	a080040c 	andi	r2,r20,16
    a128:	1001a21e 	bne	r2,zero,a7b4 <___vfiprintf_internal_r+0x1020>
    a12c:	a080100c 	andi	r2,r20,64
    a130:	d8001d85 	stb	zero,118(sp)
    a134:	da802217 	ldw	r10,136(sp)
    a138:	1002231e 	bne	r2,zero,a9c8 <___vfiprintf_internal_r+0x1234>
    a13c:	50800104 	addi	r2,r10,4
    a140:	54800017 	ldw	r18,0(r10)
    a144:	0027883a 	mov	r19,zero
    a148:	4801a00e 	bge	r9,zero,a7cc <___vfiprintf_internal_r+0x1038>
    a14c:	d8802215 	stw	r2,136(sp)
    a150:	0039883a 	mov	fp,zero
    a154:	94c4b03a 	or	r2,r18,r19
    a158:	103f901e 	bne	r2,zero,9f9c <___vfiprintf_internal_r+0x808>
    a15c:	00800044 	movi	r2,1
    a160:	10803fcc 	andi	r2,r2,255
    a164:	00c00044 	movi	r3,1
    a168:	10c05926 	beq	r2,r3,a2d0 <___vfiprintf_internal_r+0xb3c>
    a16c:	00c00084 	movi	r3,2
    a170:	10ffe41e 	bne	r2,r3,a104 <___vfiprintf_internal_r+0x970>
    a174:	0025883a 	mov	r18,zero
    a178:	0027883a 	mov	r19,zero
    a17c:	00013d06 	br	a674 <___vfiprintf_internal_r+0xee0>
    a180:	21003fcc 	andi	r4,r4,255
    a184:	2002811e 	bne	r4,zero,ab8c <___vfiprintf_internal_r+0x13f8>
    a188:	00800074 	movhi	r2,1
    a18c:	10858504 	addi	r2,r2,5652
    a190:	d8802615 	stw	r2,152(sp)
    a194:	a080080c 	andi	r2,r20,32
    a198:	103f561e 	bne	r2,zero,9ef4 <___vfiprintf_internal_r+0x760>
    a19c:	a080040c 	andi	r2,r20,16
    a1a0:	1001d126 	beq	r2,zero,a8e8 <___vfiprintf_internal_r+0x1154>
    a1a4:	da802217 	ldw	r10,136(sp)
    a1a8:	0027883a 	mov	r19,zero
    a1ac:	54800017 	ldw	r18,0(r10)
    a1b0:	52800104 	addi	r10,r10,4
    a1b4:	da802215 	stw	r10,136(sp)
    a1b8:	003f5306 	br	9f08 <___vfiprintf_internal_r+0x774>
    a1bc:	da802217 	ldw	r10,136(sp)
    a1c0:	d8001d85 	stb	zero,118(sp)
    a1c4:	55400017 	ldw	r21,0(r10)
    a1c8:	50c00104 	addi	r3,r10,4
    a1cc:	a8024226 	beq	r21,zero,aad8 <___vfiprintf_internal_r+0x1344>
    a1d0:	48021816 	blt	r9,zero,aa34 <___vfiprintf_internal_r+0x12a0>
    a1d4:	480d883a 	mov	r6,r9
    a1d8:	000b883a 	mov	r5,zero
    a1dc:	a809883a 	mov	r4,r21
    a1e0:	d8c02a15 	stw	r3,168(sp)
    a1e4:	da002b15 	stw	r8,172(sp)
    a1e8:	da402c15 	stw	r9,176(sp)
    a1ec:	00079e40 	call	79e4 <memchr>
    a1f0:	d8c02a17 	ldw	r3,168(sp)
    a1f4:	da002b17 	ldw	r8,172(sp)
    a1f8:	da402c17 	ldw	r9,176(sp)
    a1fc:	10024826 	beq	r2,zero,ab20 <___vfiprintf_internal_r+0x138c>
    a200:	1567c83a 	sub	r19,r2,r21
    a204:	df001d83 	ldbu	fp,118(sp)
    a208:	d8c02215 	stw	r3,136(sp)
    a20c:	0013883a 	mov	r9,zero
    a210:	003e6006 	br	9b94 <___vfiprintf_internal_r+0x400>
    a214:	21003fcc 	andi	r4,r4,255
    a218:	203fc026 	beq	r4,zero,a11c <___vfiprintf_internal_r+0x988>
    a21c:	d9c01d85 	stb	r7,118(sp)
    a220:	003fbe06 	br	a11c <___vfiprintf_internal_r+0x988>
    a224:	da802217 	ldw	r10,136(sp)
    a228:	54400017 	ldw	r17,0(r10)
    a22c:	50800104 	addi	r2,r10,4
    a230:	883e3b16 	blt	r17,zero,9b20 <___vfiprintf_internal_r+0x38c>
    a234:	d8802215 	stw	r2,136(sp)
    a238:	80c00007 	ldb	r3,0(r16)
    a23c:	003db406 	br	9910 <___vfiprintf_internal_r+0x17c>
    a240:	01000044 	movi	r4,1
    a244:	01c00ac4 	movi	r7,43
    a248:	80c00007 	ldb	r3,0(r16)
    a24c:	003db006 	br	9910 <___vfiprintf_internal_r+0x17c>
    a250:	80c00007 	ldb	r3,0(r16)
    a254:	82800044 	addi	r10,r16,1
    a258:	1b423c26 	beq	r3,r13,ab4c <___vfiprintf_internal_r+0x13b8>
    a25c:	18bff404 	addi	r2,r3,-48
    a260:	0013883a 	mov	r9,zero
    a264:	30822b36 	bltu	r6,r2,ab14 <___vfiprintf_internal_r+0x1380>
    a268:	50c00007 	ldb	r3,0(r10)
    a26c:	4a4002a4 	muli	r9,r9,10
    a270:	54000044 	addi	r16,r10,1
    a274:	8015883a 	mov	r10,r16
    a278:	4893883a 	add	r9,r9,r2
    a27c:	18bff404 	addi	r2,r3,-48
    a280:	30bff92e 	bgeu	r6,r2,a268 <___vfiprintf_internal_r+0xad4>
    a284:	483da30e 	bge	r9,zero,9914 <___vfiprintf_internal_r+0x180>
    a288:	027fffc4 	movi	r9,-1
    a28c:	003da106 	br	9914 <___vfiprintf_internal_r+0x180>
    a290:	a5001014 	ori	r20,r20,64
    a294:	80c00007 	ldb	r3,0(r16)
    a298:	003d9d06 	br	9910 <___vfiprintf_internal_r+0x17c>
    a29c:	da802217 	ldw	r10,136(sp)
    a2a0:	d8001d85 	stb	zero,118(sp)
    a2a4:	50c00204 	addi	r3,r10,8
    a2a8:	54800017 	ldw	r18,0(r10)
    a2ac:	54c00117 	ldw	r19,4(r10)
    a2b0:	4801ca16 	blt	r9,zero,a9dc <___vfiprintf_internal_r+0x1248>
    a2b4:	013fdfc4 	movi	r4,-129
    a2b8:	94c4b03a 	or	r2,r18,r19
    a2bc:	d8c02215 	stw	r3,136(sp)
    a2c0:	a128703a 	and	r20,r20,r4
    a2c4:	0039883a 	mov	fp,zero
    a2c8:	103f341e 	bne	r2,zero,9f9c <___vfiprintf_internal_r+0x808>
    a2cc:	483e2e26 	beq	r9,zero,9b88 <___vfiprintf_internal_r+0x3f4>
    a2d0:	0025883a 	mov	r18,zero
    a2d4:	94800c04 	addi	r18,r18,48
    a2d8:	dc8019c5 	stb	r18,103(sp)
    a2dc:	dcc02717 	ldw	r19,156(sp)
    a2e0:	dd4019c4 	addi	r21,sp,103
    a2e4:	003e2b06 	br	9b94 <___vfiprintf_internal_r+0x400>
    a2e8:	21003fcc 	andi	r4,r4,255
    a2ec:	2002361e 	bne	r4,zero,abc8 <___vfiprintf_internal_r+0x1434>
    a2f0:	1801c126 	beq	r3,zero,a9f8 <___vfiprintf_internal_r+0x1264>
    a2f4:	04800044 	movi	r18,1
    a2f8:	d8c01005 	stb	r3,64(sp)
    a2fc:	d8001d85 	stb	zero,118(sp)
    a300:	9027883a 	mov	r19,r18
    a304:	dd401004 	addi	r21,sp,64
    a308:	003f1106 	br	9f50 <___vfiprintf_internal_r+0x7bc>
    a30c:	d9402117 	ldw	r5,132(sp)
    a310:	d9002017 	ldw	r4,128(sp)
    a314:	d9801a04 	addi	r6,sp,104
    a318:	d9c02b15 	stw	r7,172(sp)
    a31c:	dbc02a15 	stw	r15,168(sp)
    a320:	00096800 	call	9680 <__sprint_r.part.0>
    a324:	d9c02b17 	ldw	r7,172(sp)
    a328:	dbc02a17 	ldw	r15,168(sp)
    a32c:	10006d1e 	bne	r2,zero,a4e4 <___vfiprintf_internal_r+0xd50>
    a330:	d9801b17 	ldw	r6,108(sp)
    a334:	d8801c17 	ldw	r2,112(sp)
    a338:	d811883a 	mov	r8,sp
    a33c:	31400044 	addi	r5,r6,1
    a340:	003e3306 	br	9c10 <___vfiprintf_internal_r+0x47c>
    a344:	d9401b17 	ldw	r5,108(sp)
    a348:	d8801c17 	ldw	r2,112(sp)
    a34c:	29000044 	addi	r4,r5,1
    a350:	d8c01d87 	ldb	r3,118(sp)
    a354:	183e4d26 	beq	r3,zero,9c8c <___vfiprintf_internal_r+0x4f8>
    a358:	00c00044 	movi	r3,1
    a35c:	d9401d84 	addi	r5,sp,118
    a360:	10c5883a 	add	r2,r2,r3
    a364:	41400015 	stw	r5,0(r8)
    a368:	40c00115 	stw	r3,4(r8)
    a36c:	d8801c15 	stw	r2,112(sp)
    a370:	d9001b15 	stw	r4,108(sp)
    a374:	014001c4 	movi	r5,7
    a378:	2900a90e 	bge	r5,r4,a620 <___vfiprintf_internal_r+0xe8c>
    a37c:	1000da1e 	bne	r2,zero,a6e8 <___vfiprintf_internal_r+0xf54>
    a380:	7000ab1e 	bne	r14,zero,a630 <___vfiprintf_internal_r+0xe9c>
    a384:	000b883a 	mov	r5,zero
    a388:	1809883a 	mov	r4,r3
    a38c:	d811883a 	mov	r8,sp
    a390:	00c02004 	movi	r3,128
    a394:	e0fe4d26 	beq	fp,r3,9ccc <___vfiprintf_internal_r+0x538>
    a398:	4cf9c83a 	sub	fp,r9,r19
    a39c:	073e7b0e 	bge	zero,fp,9d8c <___vfiprintf_internal_r+0x5f8>
    a3a0:	01c00404 	movi	r7,16
    a3a4:	3f01900e 	bge	r7,fp,a9e8 <___vfiprintf_internal_r+0x1254>
    a3a8:	00c00074 	movhi	r3,1
    a3ac:	18c5eb04 	addi	r3,r3,6060
    a3b0:	d8c02415 	stw	r3,144(sp)
    a3b4:	034001c4 	movi	r13,7
    a3b8:	00000506 	br	a3d0 <___vfiprintf_internal_r+0xc3c>
    a3bc:	29000084 	addi	r4,r5,2
    a3c0:	42000204 	addi	r8,r8,8
    a3c4:	180b883a 	mov	r5,r3
    a3c8:	e73ffc04 	addi	fp,fp,-16
    a3cc:	3f000d0e 	bge	r7,fp,a404 <___vfiprintf_internal_r+0xc70>
    a3d0:	10800404 	addi	r2,r2,16
    a3d4:	28c00044 	addi	r3,r5,1
    a3d8:	45c00015 	stw	r23,0(r8)
    a3dc:	41c00115 	stw	r7,4(r8)
    a3e0:	d8801c15 	stw	r2,112(sp)
    a3e4:	d8c01b15 	stw	r3,108(sp)
    a3e8:	68fff40e 	bge	r13,r3,a3bc <___vfiprintf_internal_r+0xc28>
    a3ec:	1000101e 	bne	r2,zero,a430 <___vfiprintf_internal_r+0xc9c>
    a3f0:	e73ffc04 	addi	fp,fp,-16
    a3f4:	01000044 	movi	r4,1
    a3f8:	000b883a 	mov	r5,zero
    a3fc:	d811883a 	mov	r8,sp
    a400:	3f3ff316 	blt	r7,fp,a3d0 <___vfiprintf_internal_r+0xc3c>
    a404:	da802417 	ldw	r10,144(sp)
    a408:	1705883a 	add	r2,r2,fp
    a40c:	47000115 	stw	fp,4(r8)
    a410:	42800015 	stw	r10,0(r8)
    a414:	d8801c15 	stw	r2,112(sp)
    a418:	d9001b15 	stw	r4,108(sp)
    a41c:	00c001c4 	movi	r3,7
    a420:	19003616 	blt	r3,r4,a4fc <___vfiprintf_internal_r+0xd68>
    a424:	42000204 	addi	r8,r8,8
    a428:	21000044 	addi	r4,r4,1
    a42c:	003e5706 	br	9d8c <___vfiprintf_internal_r+0x5f8>
    a430:	d9402117 	ldw	r5,132(sp)
    a434:	d9002017 	ldw	r4,128(sp)
    a438:	d9801a04 	addi	r6,sp,104
    a43c:	d9c02b15 	stw	r7,172(sp)
    a440:	db402a15 	stw	r13,168(sp)
    a444:	00096800 	call	9680 <__sprint_r.part.0>
    a448:	d9c02b17 	ldw	r7,172(sp)
    a44c:	db402a17 	ldw	r13,168(sp)
    a450:	1000241e 	bne	r2,zero,a4e4 <___vfiprintf_internal_r+0xd50>
    a454:	d9401b17 	ldw	r5,108(sp)
    a458:	d8801c17 	ldw	r2,112(sp)
    a45c:	d811883a 	mov	r8,sp
    a460:	29000044 	addi	r4,r5,1
    a464:	003fd806 	br	a3c8 <___vfiprintf_internal_r+0xc34>
    a468:	d9401b17 	ldw	r5,108(sp)
    a46c:	00c00074 	movhi	r3,1
    a470:	18c5ef04 	addi	r3,r3,6076
    a474:	d8c02415 	stw	r3,144(sp)
    a478:	29400044 	addi	r5,r5,1
    a47c:	d8c02417 	ldw	r3,144(sp)
    a480:	14c5883a 	add	r2,r2,r19
    a484:	44c00115 	stw	r19,4(r8)
    a488:	40c00015 	stw	r3,0(r8)
    a48c:	d8801c15 	stw	r2,112(sp)
    a490:	d9401b15 	stw	r5,108(sp)
    a494:	00c001c4 	movi	r3,7
    a498:	1940070e 	bge	r3,r5,a4b8 <___vfiprintf_internal_r+0xd24>
    a49c:	103e4826 	beq	r2,zero,9dc0 <___vfiprintf_internal_r+0x62c>
    a4a0:	d9402117 	ldw	r5,132(sp)
    a4a4:	d9002017 	ldw	r4,128(sp)
    a4a8:	d9801a04 	addi	r6,sp,104
    a4ac:	00096800 	call	9680 <__sprint_r.part.0>
    a4b0:	10000c1e 	bne	r2,zero,a4e4 <___vfiprintf_internal_r+0xd50>
    a4b4:	d8801c17 	ldw	r2,112(sp)
    a4b8:	8c80010e 	bge	r17,r18,a4c0 <___vfiprintf_internal_r+0xd2c>
    a4bc:	9023883a 	mov	r17,r18
    a4c0:	da802317 	ldw	r10,140(sp)
    a4c4:	5455883a 	add	r10,r10,r17
    a4c8:	da802315 	stw	r10,140(sp)
    a4cc:	103e4126 	beq	r2,zero,9dd4 <___vfiprintf_internal_r+0x640>
    a4d0:	d9402117 	ldw	r5,132(sp)
    a4d4:	d9002017 	ldw	r4,128(sp)
    a4d8:	d9801a04 	addi	r6,sp,104
    a4dc:	00096800 	call	9680 <__sprint_r.part.0>
    a4e0:	103e3c26 	beq	r2,zero,9dd4 <___vfiprintf_internal_r+0x640>
    a4e4:	dd002117 	ldw	r20,132(sp)
    a4e8:	a080030b 	ldhu	r2,12(r20)
    a4ec:	1080100c 	andi	r2,r2,64
    a4f0:	1001231e 	bne	r2,zero,a980 <___vfiprintf_internal_r+0x11ec>
    a4f4:	d8802317 	ldw	r2,140(sp)
    a4f8:	003d7b06 	br	9ae8 <___vfiprintf_internal_r+0x354>
    a4fc:	1000991e 	bne	r2,zero,a764 <___vfiprintf_internal_r+0xfd0>
    a500:	00c00044 	movi	r3,1
    a504:	9805883a 	mov	r2,r19
    a508:	dd400015 	stw	r21,0(sp)
    a50c:	dcc00115 	stw	r19,4(sp)
    a510:	dcc01c15 	stw	r19,112(sp)
    a514:	d8c01b15 	stw	r3,108(sp)
    a518:	d811883a 	mov	r8,sp
    a51c:	42000204 	addi	r8,r8,8
    a520:	a2c0010c 	andi	r11,r20,4
    a524:	583fe426 	beq	r11,zero,a4b8 <___vfiprintf_internal_r+0xd24>
    a528:	8ca7c83a 	sub	r19,r17,r18
    a52c:	04ffe20e 	bge	zero,r19,a4b8 <___vfiprintf_internal_r+0xd24>
    a530:	01c00404 	movi	r7,16
    a534:	3cffcc0e 	bge	r7,r19,a468 <___vfiprintf_internal_r+0xcd4>
    a538:	02800074 	movhi	r10,1
    a53c:	5285ef04 	addi	r10,r10,6076
    a540:	d9001b17 	ldw	r4,108(sp)
    a544:	da802415 	stw	r10,144(sp)
    a548:	382b883a 	mov	r21,r7
    a54c:	050001c4 	movi	r20,7
    a550:	df002017 	ldw	fp,128(sp)
    a554:	00000506 	br	a56c <___vfiprintf_internal_r+0xdd8>
    a558:	21400084 	addi	r5,r4,2
    a55c:	42000204 	addi	r8,r8,8
    a560:	1809883a 	mov	r4,r3
    a564:	9cfffc04 	addi	r19,r19,-16
    a568:	acffc40e 	bge	r21,r19,a47c <___vfiprintf_internal_r+0xce8>
    a56c:	10800404 	addi	r2,r2,16
    a570:	20c00044 	addi	r3,r4,1
    a574:	45800015 	stw	r22,0(r8)
    a578:	45400115 	stw	r21,4(r8)
    a57c:	d8801c15 	stw	r2,112(sp)
    a580:	d8c01b15 	stw	r3,108(sp)
    a584:	a0fff40e 	bge	r20,r3,a558 <___vfiprintf_internal_r+0xdc4>
    a588:	1000041e 	bne	r2,zero,a59c <___vfiprintf_internal_r+0xe08>
    a58c:	01400044 	movi	r5,1
    a590:	0009883a 	mov	r4,zero
    a594:	d811883a 	mov	r8,sp
    a598:	003ff206 	br	a564 <___vfiprintf_internal_r+0xdd0>
    a59c:	d9402117 	ldw	r5,132(sp)
    a5a0:	d9801a04 	addi	r6,sp,104
    a5a4:	e009883a 	mov	r4,fp
    a5a8:	00096800 	call	9680 <__sprint_r.part.0>
    a5ac:	103fcd1e 	bne	r2,zero,a4e4 <___vfiprintf_internal_r+0xd50>
    a5b0:	d9001b17 	ldw	r4,108(sp)
    a5b4:	d8801c17 	ldw	r2,112(sp)
    a5b8:	d811883a 	mov	r8,sp
    a5bc:	21400044 	addi	r5,r4,1
    a5c0:	003fe806 	br	a564 <___vfiprintf_internal_r+0xdd0>
    a5c4:	d9402117 	ldw	r5,132(sp)
    a5c8:	d9002017 	ldw	r4,128(sp)
    a5cc:	d9801a04 	addi	r6,sp,104
    a5d0:	d9c02b15 	stw	r7,172(sp)
    a5d4:	db402a15 	stw	r13,168(sp)
    a5d8:	00096800 	call	9680 <__sprint_r.part.0>
    a5dc:	d9c02b17 	ldw	r7,172(sp)
    a5e0:	db402a17 	ldw	r13,168(sp)
    a5e4:	103fbf1e 	bne	r2,zero,a4e4 <___vfiprintf_internal_r+0xd50>
    a5e8:	d9401b17 	ldw	r5,108(sp)
    a5ec:	d8801c17 	ldw	r2,112(sp)
    a5f0:	d811883a 	mov	r8,sp
    a5f4:	29800044 	addi	r6,r5,1
    a5f8:	003dc406 	br	9d0c <___vfiprintf_internal_r+0x578>
    a5fc:	1000d21e 	bne	r2,zero,a948 <___vfiprintf_internal_r+0x11b4>
    a600:	d8c01d87 	ldb	r3,118(sp)
    a604:	18009526 	beq	r3,zero,a85c <___vfiprintf_internal_r+0x10c8>
    a608:	00800044 	movi	r2,1
    a60c:	d8c01d84 	addi	r3,sp,118
    a610:	1009883a 	mov	r4,r2
    a614:	d8c00015 	stw	r3,0(sp)
    a618:	d8800115 	stw	r2,4(sp)
    a61c:	d811883a 	mov	r8,sp
    a620:	200b883a 	mov	r5,r4
    a624:	42000204 	addi	r8,r8,8
    a628:	21000044 	addi	r4,r4,1
    a62c:	003d9706 	br	9c8c <___vfiprintf_internal_r+0x4f8>
    a630:	d9001d04 	addi	r4,sp,116
    a634:	00800084 	movi	r2,2
    a638:	d9000015 	stw	r4,0(sp)
    a63c:	d8800115 	stw	r2,4(sp)
    a640:	1809883a 	mov	r4,r3
    a644:	d811883a 	mov	r8,sp
    a648:	200b883a 	mov	r5,r4
    a64c:	42000204 	addi	r8,r8,8
    a650:	21000044 	addi	r4,r4,1
    a654:	003f4e06 	br	a390 <___vfiprintf_internal_r+0xbfc>
    a658:	d8001d85 	stb	zero,118(sp)
    a65c:	48005016 	blt	r9,zero,a7a0 <___vfiprintf_internal_r+0x100c>
    a660:	00ffdfc4 	movi	r3,-129
    a664:	94c4b03a 	or	r2,r18,r19
    a668:	a0e8703a 	and	r20,r20,r3
    a66c:	103d4426 	beq	r2,zero,9b80 <___vfiprintf_internal_r+0x3ec>
    a670:	0039883a 	mov	fp,zero
    a674:	d9002617 	ldw	r4,152(sp)
    a678:	dd401a04 	addi	r21,sp,104
    a67c:	908003cc 	andi	r2,r18,15
    a680:	9806973a 	slli	r3,r19,28
    a684:	2085883a 	add	r2,r4,r2
    a688:	9024d13a 	srli	r18,r18,4
    a68c:	10800003 	ldbu	r2,0(r2)
    a690:	9826d13a 	srli	r19,r19,4
    a694:	ad7fffc4 	addi	r21,r21,-1
    a698:	1ca4b03a 	or	r18,r3,r18
    a69c:	a8800005 	stb	r2,0(r21)
    a6a0:	94c4b03a 	or	r2,r18,r19
    a6a4:	103ff51e 	bne	r2,zero,a67c <___vfiprintf_internal_r+0xee8>
    a6a8:	003e5906 	br	a010 <___vfiprintf_internal_r+0x87c>
    a6ac:	d9402117 	ldw	r5,132(sp)
    a6b0:	d9002017 	ldw	r4,128(sp)
    a6b4:	d9801a04 	addi	r6,sp,104
    a6b8:	00096800 	call	9680 <__sprint_r.part.0>
    a6bc:	103f891e 	bne	r2,zero,a4e4 <___vfiprintf_internal_r+0xd50>
    a6c0:	d8801c17 	ldw	r2,112(sp)
    a6c4:	d811883a 	mov	r8,sp
    a6c8:	003f9506 	br	a520 <___vfiprintf_internal_r+0xd8c>
    a6cc:	d9402117 	ldw	r5,132(sp)
    a6d0:	d9002017 	ldw	r4,128(sp)
    a6d4:	d9801a04 	addi	r6,sp,104
    a6d8:	00096800 	call	9680 <__sprint_r.part.0>
    a6dc:	103f811e 	bne	r2,zero,a4e4 <___vfiprintf_internal_r+0xd50>
    a6e0:	d811883a 	mov	r8,sp
    a6e4:	003ced06 	br	9a9c <___vfiprintf_internal_r+0x308>
    a6e8:	d9402117 	ldw	r5,132(sp)
    a6ec:	d9002017 	ldw	r4,128(sp)
    a6f0:	d9801a04 	addi	r6,sp,104
    a6f4:	da402c15 	stw	r9,176(sp)
    a6f8:	db802a15 	stw	r14,168(sp)
    a6fc:	00096800 	call	9680 <__sprint_r.part.0>
    a700:	da402c17 	ldw	r9,176(sp)
    a704:	db802a17 	ldw	r14,168(sp)
    a708:	103f761e 	bne	r2,zero,a4e4 <___vfiprintf_internal_r+0xd50>
    a70c:	d9401b17 	ldw	r5,108(sp)
    a710:	d8801c17 	ldw	r2,112(sp)
    a714:	d811883a 	mov	r8,sp
    a718:	29000044 	addi	r4,r5,1
    a71c:	003d5b06 	br	9c8c <___vfiprintf_internal_r+0x4f8>
    a720:	d9402117 	ldw	r5,132(sp)
    a724:	d9002017 	ldw	r4,128(sp)
    a728:	d9801a04 	addi	r6,sp,104
    a72c:	da402c15 	stw	r9,176(sp)
    a730:	00096800 	call	9680 <__sprint_r.part.0>
    a734:	da402c17 	ldw	r9,176(sp)
    a738:	103f6a1e 	bne	r2,zero,a4e4 <___vfiprintf_internal_r+0xd50>
    a73c:	d9401b17 	ldw	r5,108(sp)
    a740:	d8801c17 	ldw	r2,112(sp)
    a744:	d811883a 	mov	r8,sp
    a748:	29000044 	addi	r4,r5,1
    a74c:	003f1006 	br	a390 <___vfiprintf_internal_r+0xbfc>
    a750:	1000c31e 	bne	r2,zero,aa60 <___vfiprintf_internal_r+0x12cc>
    a754:	01000044 	movi	r4,1
    a758:	000b883a 	mov	r5,zero
    a75c:	d811883a 	mov	r8,sp
    a760:	003f0d06 	br	a398 <___vfiprintf_internal_r+0xc04>
    a764:	d9402117 	ldw	r5,132(sp)
    a768:	d9002017 	ldw	r4,128(sp)
    a76c:	d9801a04 	addi	r6,sp,104
    a770:	00096800 	call	9680 <__sprint_r.part.0>
    a774:	103f5b1e 	bne	r2,zero,a4e4 <___vfiprintf_internal_r+0xd50>
    a778:	d9001b17 	ldw	r4,108(sp)
    a77c:	d8801c17 	ldw	r2,112(sp)
    a780:	d811883a 	mov	r8,sp
    a784:	21000044 	addi	r4,r4,1
    a788:	003d8006 	br	9d8c <___vfiprintf_internal_r+0x5f8>
    a78c:	01000074 	movhi	r4,1
    a790:	21058a04 	addi	r4,r4,5672
    a794:	d9002615 	stw	r4,152(sp)
    a798:	d8c02215 	stw	r3,136(sp)
    a79c:	1029883a 	mov	r20,r2
    a7a0:	94c4b03a 	or	r2,r18,r19
    a7a4:	103fb21e 	bne	r2,zero,a670 <___vfiprintf_internal_r+0xedc>
    a7a8:	0039883a 	mov	fp,zero
    a7ac:	00800084 	movi	r2,2
    a7b0:	003e6b06 	br	a160 <___vfiprintf_internal_r+0x9cc>
    a7b4:	da802217 	ldw	r10,136(sp)
    a7b8:	d8001d85 	stb	zero,118(sp)
    a7bc:	0027883a 	mov	r19,zero
    a7c0:	50800104 	addi	r2,r10,4
    a7c4:	54800017 	ldw	r18,0(r10)
    a7c8:	483e6016 	blt	r9,zero,a14c <___vfiprintf_internal_r+0x9b8>
    a7cc:	00ffdfc4 	movi	r3,-129
    a7d0:	d8802215 	stw	r2,136(sp)
    a7d4:	a0e8703a 	and	r20,r20,r3
    a7d8:	0039883a 	mov	fp,zero
    a7dc:	903ebb26 	beq	r18,zero,a2cc <___vfiprintf_internal_r+0xb38>
    a7e0:	00800244 	movi	r2,9
    a7e4:	14bdee36 	bltu	r2,r18,9fa0 <___vfiprintf_internal_r+0x80c>
    a7e8:	003eba06 	br	a2d4 <___vfiprintf_internal_r+0xb40>
    a7ec:	00800c04 	movi	r2,48
    a7f0:	d8c01d45 	stb	r3,117(sp)
    a7f4:	d8801d05 	stb	r2,116(sp)
    a7f8:	d8001d85 	stb	zero,118(sp)
    a7fc:	a0c00094 	ori	r3,r20,2
    a800:	4800a916 	blt	r9,zero,aaa8 <___vfiprintf_internal_r+0x1314>
    a804:	00bfdfc4 	movi	r2,-129
    a808:	a096703a 	and	r11,r20,r2
    a80c:	5d000094 	ori	r20,r11,2
    a810:	0039883a 	mov	fp,zero
    a814:	003f9706 	br	a674 <___vfiprintf_internal_r+0xee0>
    a818:	8025883a 	mov	r18,r16
    a81c:	003c2e06 	br	98d8 <___vfiprintf_internal_r+0x144>
    a820:	00800074 	movhi	r2,1
    a824:	10858a04 	addi	r2,r2,5672
    a828:	0039883a 	mov	fp,zero
    a82c:	d8802615 	stw	r2,152(sp)
    a830:	003f9006 	br	a674 <___vfiprintf_internal_r+0xee0>
    a834:	04a5c83a 	sub	r18,zero,r18
    a838:	07000b44 	movi	fp,45
    a83c:	9004c03a 	cmpne	r2,r18,zero
    a840:	04e7c83a 	sub	r19,zero,r19
    a844:	df001d85 	stb	fp,118(sp)
    a848:	98a7c83a 	sub	r19,r19,r2
    a84c:	48009f16 	blt	r9,zero,aacc <___vfiprintf_internal_r+0x1338>
    a850:	00bfdfc4 	movi	r2,-129
    a854:	a0a8703a 	and	r20,r20,r2
    a858:	003dd006 	br	9f9c <___vfiprintf_internal_r+0x808>
    a85c:	70004c26 	beq	r14,zero,a990 <___vfiprintf_internal_r+0x11fc>
    a860:	00800084 	movi	r2,2
    a864:	d8c01d04 	addi	r3,sp,116
    a868:	d8c00015 	stw	r3,0(sp)
    a86c:	d8800115 	stw	r2,4(sp)
    a870:	01000044 	movi	r4,1
    a874:	d811883a 	mov	r8,sp
    a878:	003f7306 	br	a648 <___vfiprintf_internal_r+0xeb4>
    a87c:	a080100c 	andi	r2,r20,64
    a880:	da802217 	ldw	r10,136(sp)
    a884:	103e0626 	beq	r2,zero,a0a0 <___vfiprintf_internal_r+0x90c>
    a888:	5480000f 	ldh	r18,0(r10)
    a88c:	52800104 	addi	r10,r10,4
    a890:	da802215 	stw	r10,136(sp)
    a894:	9027d7fa 	srai	r19,r18,31
    a898:	9805883a 	mov	r2,r19
    a89c:	003db806 	br	9f80 <___vfiprintf_internal_r+0x7ec>
    a8a0:	a080040c 	andi	r2,r20,16
    a8a4:	1000091e 	bne	r2,zero,a8cc <___vfiprintf_internal_r+0x1138>
    a8a8:	a2c0100c 	andi	r11,r20,64
    a8ac:	58000726 	beq	r11,zero,a8cc <___vfiprintf_internal_r+0x1138>
    a8b0:	da802217 	ldw	r10,136(sp)
    a8b4:	50800017 	ldw	r2,0(r10)
    a8b8:	52800104 	addi	r10,r10,4
    a8bc:	da802215 	stw	r10,136(sp)
    a8c0:	da802317 	ldw	r10,140(sp)
    a8c4:	1280000d 	sth	r10,0(r2)
    a8c8:	003be706 	br	9868 <___vfiprintf_internal_r+0xd4>
    a8cc:	da802217 	ldw	r10,136(sp)
    a8d0:	50800017 	ldw	r2,0(r10)
    a8d4:	52800104 	addi	r10,r10,4
    a8d8:	da802215 	stw	r10,136(sp)
    a8dc:	da802317 	ldw	r10,140(sp)
    a8e0:	12800015 	stw	r10,0(r2)
    a8e4:	003be006 	br	9868 <___vfiprintf_internal_r+0xd4>
    a8e8:	a080100c 	andi	r2,r20,64
    a8ec:	da802217 	ldw	r10,136(sp)
    a8f0:	10003026 	beq	r2,zero,a9b4 <___vfiprintf_internal_r+0x1220>
    a8f4:	5480000b 	ldhu	r18,0(r10)
    a8f8:	52800104 	addi	r10,r10,4
    a8fc:	0027883a 	mov	r19,zero
    a900:	da802215 	stw	r10,136(sp)
    a904:	003d8006 	br	9f08 <___vfiprintf_internal_r+0x774>
    a908:	80c00007 	ldb	r3,0(r16)
    a90c:	003c0006 	br	9910 <___vfiprintf_internal_r+0x17c>
    a910:	a080100c 	andi	r2,r20,64
    a914:	d8001d85 	stb	zero,118(sp)
    a918:	da802217 	ldw	r10,136(sp)
    a91c:	1000201e 	bne	r2,zero,a9a0 <___vfiprintf_internal_r+0x120c>
    a920:	50800104 	addi	r2,r10,4
    a924:	54800017 	ldw	r18,0(r10)
    a928:	0027883a 	mov	r19,zero
    a92c:	483def0e 	bge	r9,zero,a0ec <___vfiprintf_internal_r+0x958>
    a930:	94c6b03a 	or	r3,r18,r19
    a934:	d8802215 	stw	r2,136(sp)
    a938:	183d4e1e 	bne	r3,zero,9e74 <___vfiprintf_internal_r+0x6e0>
    a93c:	0039883a 	mov	fp,zero
    a940:	0005883a 	mov	r2,zero
    a944:	003e0606 	br	a160 <___vfiprintf_internal_r+0x9cc>
    a948:	d9402117 	ldw	r5,132(sp)
    a94c:	d9002017 	ldw	r4,128(sp)
    a950:	d9801a04 	addi	r6,sp,104
    a954:	da402c15 	stw	r9,176(sp)
    a958:	db802a15 	stw	r14,168(sp)
    a95c:	00096800 	call	9680 <__sprint_r.part.0>
    a960:	da402c17 	ldw	r9,176(sp)
    a964:	db802a17 	ldw	r14,168(sp)
    a968:	103ede1e 	bne	r2,zero,a4e4 <___vfiprintf_internal_r+0xd50>
    a96c:	d9401b17 	ldw	r5,108(sp)
    a970:	d8801c17 	ldw	r2,112(sp)
    a974:	d811883a 	mov	r8,sp
    a978:	29000044 	addi	r4,r5,1
    a97c:	003e7406 	br	a350 <___vfiprintf_internal_r+0xbbc>
    a980:	00bfffc4 	movi	r2,-1
    a984:	003c5806 	br	9ae8 <___vfiprintf_internal_r+0x354>
    a988:	d811883a 	mov	r8,sp
    a98c:	003ee806 	br	a530 <___vfiprintf_internal_r+0xd9c>
    a990:	000b883a 	mov	r5,zero
    a994:	01000044 	movi	r4,1
    a998:	d811883a 	mov	r8,sp
    a99c:	003e7c06 	br	a390 <___vfiprintf_internal_r+0xbfc>
    a9a0:	50800104 	addi	r2,r10,4
    a9a4:	5480000b 	ldhu	r18,0(r10)
    a9a8:	0027883a 	mov	r19,zero
    a9ac:	483dcf0e 	bge	r9,zero,a0ec <___vfiprintf_internal_r+0x958>
    a9b0:	003fdf06 	br	a930 <___vfiprintf_internal_r+0x119c>
    a9b4:	54800017 	ldw	r18,0(r10)
    a9b8:	52800104 	addi	r10,r10,4
    a9bc:	0027883a 	mov	r19,zero
    a9c0:	da802215 	stw	r10,136(sp)
    a9c4:	003d5006 	br	9f08 <___vfiprintf_internal_r+0x774>
    a9c8:	50800104 	addi	r2,r10,4
    a9cc:	5480000b 	ldhu	r18,0(r10)
    a9d0:	0027883a 	mov	r19,zero
    a9d4:	483f7d0e 	bge	r9,zero,a7cc <___vfiprintf_internal_r+0x1038>
    a9d8:	003ddc06 	br	a14c <___vfiprintf_internal_r+0x9b8>
    a9dc:	d8c02215 	stw	r3,136(sp)
    a9e0:	0039883a 	mov	fp,zero
    a9e4:	003ddb06 	br	a154 <___vfiprintf_internal_r+0x9c0>
    a9e8:	02800074 	movhi	r10,1
    a9ec:	5285eb04 	addi	r10,r10,6060
    a9f0:	da802415 	stw	r10,144(sp)
    a9f4:	003e8306 	br	a404 <___vfiprintf_internal_r+0xc70>
    a9f8:	d8801c17 	ldw	r2,112(sp)
    a9fc:	dd002117 	ldw	r20,132(sp)
    aa00:	103eb926 	beq	r2,zero,a4e8 <___vfiprintf_internal_r+0xd54>
    aa04:	d9002017 	ldw	r4,128(sp)
    aa08:	d9801a04 	addi	r6,sp,104
    aa0c:	a00b883a 	mov	r5,r20
    aa10:	00096800 	call	9680 <__sprint_r.part.0>
    aa14:	003eb406 	br	a4e8 <___vfiprintf_internal_r+0xd54>
    aa18:	80c00043 	ldbu	r3,1(r16)
    aa1c:	a5000814 	ori	r20,r20,32
    aa20:	84000044 	addi	r16,r16,1
    aa24:	18c03fcc 	andi	r3,r3,255
    aa28:	18c0201c 	xori	r3,r3,128
    aa2c:	18ffe004 	addi	r3,r3,-128
    aa30:	003bb706 	br	9910 <___vfiprintf_internal_r+0x17c>
    aa34:	a809883a 	mov	r4,r21
    aa38:	d8c02a15 	stw	r3,168(sp)
    aa3c:	da002b15 	stw	r8,172(sp)
    aa40:	00029480 	call	2948 <strlen>
    aa44:	d8c02a17 	ldw	r3,168(sp)
    aa48:	1027883a 	mov	r19,r2
    aa4c:	df001d83 	ldbu	fp,118(sp)
    aa50:	d8c02215 	stw	r3,136(sp)
    aa54:	0013883a 	mov	r9,zero
    aa58:	da002b17 	ldw	r8,172(sp)
    aa5c:	003c4d06 	br	9b94 <___vfiprintf_internal_r+0x400>
    aa60:	d9402117 	ldw	r5,132(sp)
    aa64:	d9002017 	ldw	r4,128(sp)
    aa68:	d9801a04 	addi	r6,sp,104
    aa6c:	da402c15 	stw	r9,176(sp)
    aa70:	00096800 	call	9680 <__sprint_r.part.0>
    aa74:	da402c17 	ldw	r9,176(sp)
    aa78:	103e9a1e 	bne	r2,zero,a4e4 <___vfiprintf_internal_r+0xd50>
    aa7c:	d9401b17 	ldw	r5,108(sp)
    aa80:	d8801c17 	ldw	r2,112(sp)
    aa84:	d811883a 	mov	r8,sp
    aa88:	29000044 	addi	r4,r5,1
    aa8c:	003e4206 	br	a398 <___vfiprintf_internal_r+0xc04>
    aa90:	d9401b17 	ldw	r5,108(sp)
    aa94:	01000074 	movhi	r4,1
    aa98:	2105ef04 	addi	r4,r4,6076
    aa9c:	d9002415 	stw	r4,144(sp)
    aaa0:	29400044 	addi	r5,r5,1
    aaa4:	003c6d06 	br	9c5c <___vfiprintf_internal_r+0x4c8>
    aaa8:	0039883a 	mov	fp,zero
    aaac:	00800084 	movi	r2,2
    aab0:	10803fcc 	andi	r2,r2,255
    aab4:	01000044 	movi	r4,1
    aab8:	11001e26 	beq	r2,r4,ab34 <___vfiprintf_internal_r+0x13a0>
    aabc:	01000084 	movi	r4,2
    aac0:	11001e1e 	bne	r2,r4,ab3c <___vfiprintf_internal_r+0x13a8>
    aac4:	1829883a 	mov	r20,r3
    aac8:	003eea06 	br	a674 <___vfiprintf_internal_r+0xee0>
    aacc:	a007883a 	mov	r3,r20
    aad0:	00800044 	movi	r2,1
    aad4:	003ff606 	br	aab0 <___vfiprintf_internal_r+0x131c>
    aad8:	00800184 	movi	r2,6
    aadc:	1240012e 	bgeu	r2,r9,aae4 <___vfiprintf_internal_r+0x1350>
    aae0:	1013883a 	mov	r9,r2
    aae4:	4827883a 	mov	r19,r9
    aae8:	4825883a 	mov	r18,r9
    aaec:	48001516 	blt	r9,zero,ab44 <___vfiprintf_internal_r+0x13b0>
    aaf0:	05400074 	movhi	r21,1
    aaf4:	d8c02215 	stw	r3,136(sp)
    aaf8:	ad458f04 	addi	r21,r21,5692
    aafc:	003d1406 	br	9f50 <___vfiprintf_internal_r+0x7bc>
    ab00:	02800074 	movhi	r10,1
    ab04:	5285eb04 	addi	r10,r10,6060
    ab08:	da802415 	stw	r10,144(sp)
    ab0c:	200d883a 	mov	r6,r4
    ab10:	003c9106 	br	9d58 <___vfiprintf_internal_r+0x5c4>
    ab14:	5021883a 	mov	r16,r10
    ab18:	0013883a 	mov	r9,zero
    ab1c:	003b7d06 	br	9914 <___vfiprintf_internal_r+0x180>
    ab20:	4827883a 	mov	r19,r9
    ab24:	df001d83 	ldbu	fp,118(sp)
    ab28:	d8c02215 	stw	r3,136(sp)
    ab2c:	0013883a 	mov	r9,zero
    ab30:	003c1806 	br	9b94 <___vfiprintf_internal_r+0x400>
    ab34:	1829883a 	mov	r20,r3
    ab38:	003d1806 	br	9f9c <___vfiprintf_internal_r+0x808>
    ab3c:	1829883a 	mov	r20,r3
    ab40:	003ccd06 	br	9e78 <___vfiprintf_internal_r+0x6e4>
    ab44:	0025883a 	mov	r18,zero
    ab48:	003fe906 	br	aaf0 <___vfiprintf_internal_r+0x135c>
    ab4c:	d8802217 	ldw	r2,136(sp)
    ab50:	80c00043 	ldbu	r3,1(r16)
    ab54:	5021883a 	mov	r16,r10
    ab58:	12400017 	ldw	r9,0(r2)
    ab5c:	10800104 	addi	r2,r2,4
    ab60:	d8802215 	stw	r2,136(sp)
    ab64:	483faf0e 	bge	r9,zero,aa24 <___vfiprintf_internal_r+0x1290>
    ab68:	18c03fcc 	andi	r3,r3,255
    ab6c:	18c0201c 	xori	r3,r3,128
    ab70:	027fffc4 	movi	r9,-1
    ab74:	18ffe004 	addi	r3,r3,-128
    ab78:	003b6506 	br	9910 <___vfiprintf_internal_r+0x17c>
    ab7c:	d9c01d85 	stb	r7,118(sp)
    ab80:	003ca006 	br	9e04 <___vfiprintf_internal_r+0x670>
    ab84:	d9c01d85 	stb	r7,118(sp)
    ab88:	003cad06 	br	9e40 <___vfiprintf_internal_r+0x6ac>
    ab8c:	d9c01d85 	stb	r7,118(sp)
    ab90:	003d7d06 	br	a188 <___vfiprintf_internal_r+0x9f4>
    ab94:	d9c01d85 	stb	r7,118(sp)
    ab98:	003d5f06 	br	a118 <___vfiprintf_internal_r+0x984>
    ab9c:	a080004c 	andi	r2,r20,1
    aba0:	0039883a 	mov	fp,zero
    aba4:	10000526 	beq	r2,zero,abbc <___vfiprintf_internal_r+0x1428>
    aba8:	00800c04 	movi	r2,48
    abac:	d88019c5 	stb	r2,103(sp)
    abb0:	dcc02717 	ldw	r19,156(sp)
    abb4:	dd4019c4 	addi	r21,sp,103
    abb8:	003bf606 	br	9b94 <___vfiprintf_internal_r+0x400>
    abbc:	0027883a 	mov	r19,zero
    abc0:	dd401a04 	addi	r21,sp,104
    abc4:	003bf306 	br	9b94 <___vfiprintf_internal_r+0x400>
    abc8:	d9c01d85 	stb	r7,118(sp)
    abcc:	003dc806 	br	a2f0 <___vfiprintf_internal_r+0xb5c>
    abd0:	d9c01d85 	stb	r7,118(sp)
    abd4:	003d3a06 	br	a0c0 <___vfiprintf_internal_r+0x92c>
    abd8:	d9c01d85 	stb	r7,118(sp)
    abdc:	003d2a06 	br	a088 <___vfiprintf_internal_r+0x8f4>
    abe0:	d9c01d85 	stb	r7,118(sp)
    abe4:	003cde06 	br	9f60 <___vfiprintf_internal_r+0x7cc>
    abe8:	d9c01d85 	stb	r7,118(sp)
    abec:	003cbc06 	br	9ee0 <___vfiprintf_internal_r+0x74c>

0000abf0 <__vfiprintf_internal>:
    abf0:	00800074 	movhi	r2,1
    abf4:	108d2c04 	addi	r2,r2,13488
    abf8:	300f883a 	mov	r7,r6
    abfc:	280d883a 	mov	r6,r5
    ac00:	200b883a 	mov	r5,r4
    ac04:	11000017 	ldw	r4,0(r2)
    ac08:	00097941 	jmpi	9794 <___vfiprintf_internal_r>

0000ac0c <__sbprintf>:
    ac0c:	2880030b 	ldhu	r2,12(r5)
    ac10:	2ac01917 	ldw	r11,100(r5)
    ac14:	2a80038b 	ldhu	r10,14(r5)
    ac18:	2a400717 	ldw	r9,28(r5)
    ac1c:	2a000917 	ldw	r8,36(r5)
    ac20:	defee204 	addi	sp,sp,-1144
    ac24:	00c10004 	movi	r3,1024
    ac28:	dc011a15 	stw	r16,1128(sp)
    ac2c:	10bfff4c 	andi	r2,r2,65533
    ac30:	2821883a 	mov	r16,r5
    ac34:	d8cb883a 	add	r5,sp,r3
    ac38:	dc811c15 	stw	r18,1136(sp)
    ac3c:	dc411b15 	stw	r17,1132(sp)
    ac40:	dfc11d15 	stw	ra,1140(sp)
    ac44:	2025883a 	mov	r18,r4
    ac48:	d881030d 	sth	r2,1036(sp)
    ac4c:	dac11915 	stw	r11,1124(sp)
    ac50:	da81038d 	sth	r10,1038(sp)
    ac54:	da410715 	stw	r9,1052(sp)
    ac58:	da010915 	stw	r8,1060(sp)
    ac5c:	dec10015 	stw	sp,1024(sp)
    ac60:	dec10415 	stw	sp,1040(sp)
    ac64:	d8c10215 	stw	r3,1032(sp)
    ac68:	d8c10515 	stw	r3,1044(sp)
    ac6c:	d8010615 	stw	zero,1048(sp)
    ac70:	00097940 	call	9794 <___vfiprintf_internal_r>
    ac74:	1023883a 	mov	r17,r2
    ac78:	10000416 	blt	r2,zero,ac8c <__sbprintf+0x80>
    ac7c:	d9410004 	addi	r5,sp,1024
    ac80:	9009883a 	mov	r4,r18
    ac84:	00068a80 	call	68a8 <_fflush_r>
    ac88:	10000d1e 	bne	r2,zero,acc0 <__sbprintf+0xb4>
    ac8c:	d881030b 	ldhu	r2,1036(sp)
    ac90:	1080100c 	andi	r2,r2,64
    ac94:	10000326 	beq	r2,zero,aca4 <__sbprintf+0x98>
    ac98:	8080030b 	ldhu	r2,12(r16)
    ac9c:	10801014 	ori	r2,r2,64
    aca0:	8080030d 	sth	r2,12(r16)
    aca4:	8805883a 	mov	r2,r17
    aca8:	dfc11d17 	ldw	ra,1140(sp)
    acac:	dc811c17 	ldw	r18,1136(sp)
    acb0:	dc411b17 	ldw	r17,1132(sp)
    acb4:	dc011a17 	ldw	r16,1128(sp)
    acb8:	dec11e04 	addi	sp,sp,1144
    acbc:	f800283a 	ret
    acc0:	047fffc4 	movi	r17,-1
    acc4:	003ff106 	br	ac8c <__sbprintf+0x80>

0000acc8 <_write_r>:
    acc8:	defffd04 	addi	sp,sp,-12
    accc:	2805883a 	mov	r2,r5
    acd0:	dc000015 	stw	r16,0(sp)
    acd4:	04000074 	movhi	r16,1
    acd8:	dc400115 	stw	r17,4(sp)
    acdc:	300b883a 	mov	r5,r6
    ace0:	84144d04 	addi	r16,r16,20788
    ace4:	2023883a 	mov	r17,r4
    ace8:	380d883a 	mov	r6,r7
    acec:	1009883a 	mov	r4,r2
    acf0:	dfc00215 	stw	ra,8(sp)
    acf4:	80000015 	stw	zero,0(r16)
    acf8:	000ef900 	call	ef90 <write>
    acfc:	00ffffc4 	movi	r3,-1
    ad00:	10c00526 	beq	r2,r3,ad18 <_write_r+0x50>
    ad04:	dfc00217 	ldw	ra,8(sp)
    ad08:	dc400117 	ldw	r17,4(sp)
    ad0c:	dc000017 	ldw	r16,0(sp)
    ad10:	dec00304 	addi	sp,sp,12
    ad14:	f800283a 	ret
    ad18:	80c00017 	ldw	r3,0(r16)
    ad1c:	183ff926 	beq	r3,zero,ad04 <_write_r+0x3c>
    ad20:	88c00015 	stw	r3,0(r17)
    ad24:	003ff706 	br	ad04 <_write_r+0x3c>

0000ad28 <_close_r>:
    ad28:	defffd04 	addi	sp,sp,-12
    ad2c:	dc000015 	stw	r16,0(sp)
    ad30:	04000074 	movhi	r16,1
    ad34:	dc400115 	stw	r17,4(sp)
    ad38:	84144d04 	addi	r16,r16,20788
    ad3c:	2023883a 	mov	r17,r4
    ad40:	2809883a 	mov	r4,r5
    ad44:	dfc00215 	stw	ra,8(sp)
    ad48:	80000015 	stw	zero,0(r16)
    ad4c:	000e7500 	call	e750 <close>
    ad50:	00ffffc4 	movi	r3,-1
    ad54:	10c00526 	beq	r2,r3,ad6c <_close_r+0x44>
    ad58:	dfc00217 	ldw	ra,8(sp)
    ad5c:	dc400117 	ldw	r17,4(sp)
    ad60:	dc000017 	ldw	r16,0(sp)
    ad64:	dec00304 	addi	sp,sp,12
    ad68:	f800283a 	ret
    ad6c:	80c00017 	ldw	r3,0(r16)
    ad70:	183ff926 	beq	r3,zero,ad58 <_close_r+0x30>
    ad74:	88c00015 	stw	r3,0(r17)
    ad78:	003ff706 	br	ad58 <_close_r+0x30>

0000ad7c <_calloc_r>:
    ad7c:	298b383a 	mul	r5,r5,r6
    ad80:	defffe04 	addi	sp,sp,-8
    ad84:	dfc00115 	stw	ra,4(sp)
    ad88:	dc000015 	stw	r16,0(sp)
    ad8c:	0001fa80 	call	1fa8 <_malloc_r>
    ad90:	10002926 	beq	r2,zero,ae38 <_calloc_r+0xbc>
    ad94:	11bfff17 	ldw	r6,-4(r2)
    ad98:	1021883a 	mov	r16,r2
    ad9c:	00bfff04 	movi	r2,-4
    ada0:	308c703a 	and	r6,r6,r2
    ada4:	00c00904 	movi	r3,36
    ada8:	308d883a 	add	r6,r6,r2
    adac:	19801636 	bltu	r3,r6,ae08 <_calloc_r+0x8c>
    adb0:	008004c4 	movi	r2,19
    adb4:	11800b2e 	bgeu	r2,r6,ade4 <_calloc_r+0x68>
    adb8:	80000015 	stw	zero,0(r16)
    adbc:	80000115 	stw	zero,4(r16)
    adc0:	008006c4 	movi	r2,27
    adc4:	11801a2e 	bgeu	r2,r6,ae30 <_calloc_r+0xb4>
    adc8:	80000215 	stw	zero,8(r16)
    adcc:	80000315 	stw	zero,12(r16)
    add0:	30c0151e 	bne	r6,r3,ae28 <_calloc_r+0xac>
    add4:	80000415 	stw	zero,16(r16)
    add8:	80800604 	addi	r2,r16,24
    addc:	80000515 	stw	zero,20(r16)
    ade0:	00000106 	br	ade8 <_calloc_r+0x6c>
    ade4:	8005883a 	mov	r2,r16
    ade8:	10000015 	stw	zero,0(r2)
    adec:	10000115 	stw	zero,4(r2)
    adf0:	10000215 	stw	zero,8(r2)
    adf4:	8005883a 	mov	r2,r16
    adf8:	dfc00117 	ldw	ra,4(sp)
    adfc:	dc000017 	ldw	r16,0(sp)
    ae00:	dec00204 	addi	sp,sp,8
    ae04:	f800283a 	ret
    ae08:	000b883a 	mov	r5,zero
    ae0c:	8009883a 	mov	r4,r16
    ae10:	0007d6c0 	call	7d6c <memset>
    ae14:	8005883a 	mov	r2,r16
    ae18:	dfc00117 	ldw	ra,4(sp)
    ae1c:	dc000017 	ldw	r16,0(sp)
    ae20:	dec00204 	addi	sp,sp,8
    ae24:	f800283a 	ret
    ae28:	80800404 	addi	r2,r16,16
    ae2c:	003fee06 	br	ade8 <_calloc_r+0x6c>
    ae30:	80800204 	addi	r2,r16,8
    ae34:	003fec06 	br	ade8 <_calloc_r+0x6c>
    ae38:	0005883a 	mov	r2,zero
    ae3c:	003fee06 	br	adf8 <_calloc_r+0x7c>

0000ae40 <_fclose_r>:
    ae40:	28003926 	beq	r5,zero,af28 <_fclose_r+0xe8>
    ae44:	defffc04 	addi	sp,sp,-16
    ae48:	dc400115 	stw	r17,4(sp)
    ae4c:	dc000015 	stw	r16,0(sp)
    ae50:	dfc00315 	stw	ra,12(sp)
    ae54:	dc800215 	stw	r18,8(sp)
    ae58:	2023883a 	mov	r17,r4
    ae5c:	2821883a 	mov	r16,r5
    ae60:	20000226 	beq	r4,zero,ae6c <_fclose_r+0x2c>
    ae64:	20800e17 	ldw	r2,56(r4)
    ae68:	10002726 	beq	r2,zero,af08 <_fclose_r+0xc8>
    ae6c:	8080030f 	ldh	r2,12(r16)
    ae70:	1000071e 	bne	r2,zero,ae90 <_fclose_r+0x50>
    ae74:	0005883a 	mov	r2,zero
    ae78:	dfc00317 	ldw	ra,12(sp)
    ae7c:	dc800217 	ldw	r18,8(sp)
    ae80:	dc400117 	ldw	r17,4(sp)
    ae84:	dc000017 	ldw	r16,0(sp)
    ae88:	dec00404 	addi	sp,sp,16
    ae8c:	f800283a 	ret
    ae90:	800b883a 	mov	r5,r16
    ae94:	8809883a 	mov	r4,r17
    ae98:	000668c0 	call	668c <__sflush_r>
    ae9c:	1025883a 	mov	r18,r2
    aea0:	80800b17 	ldw	r2,44(r16)
    aea4:	10000426 	beq	r2,zero,aeb8 <_fclose_r+0x78>
    aea8:	81400717 	ldw	r5,28(r16)
    aeac:	8809883a 	mov	r4,r17
    aeb0:	103ee83a 	callr	r2
    aeb4:	10001616 	blt	r2,zero,af10 <_fclose_r+0xd0>
    aeb8:	8080030b 	ldhu	r2,12(r16)
    aebc:	1080200c 	andi	r2,r2,128
    aec0:	1000151e 	bne	r2,zero,af18 <_fclose_r+0xd8>
    aec4:	81400c17 	ldw	r5,48(r16)
    aec8:	28000526 	beq	r5,zero,aee0 <_fclose_r+0xa0>
    aecc:	80801004 	addi	r2,r16,64
    aed0:	28800226 	beq	r5,r2,aedc <_fclose_r+0x9c>
    aed4:	8809883a 	mov	r4,r17
    aed8:	0006df80 	call	6df8 <_free_r>
    aedc:	80000c15 	stw	zero,48(r16)
    aee0:	81401117 	ldw	r5,68(r16)
    aee4:	28000326 	beq	r5,zero,aef4 <_fclose_r+0xb4>
    aee8:	8809883a 	mov	r4,r17
    aeec:	0006df80 	call	6df8 <_free_r>
    aef0:	80001115 	stw	zero,68(r16)
    aef4:	0006c940 	call	6c94 <__sfp_lock_acquire>
    aef8:	8000030d 	sth	zero,12(r16)
    aefc:	0006c980 	call	6c98 <__sfp_lock_release>
    af00:	9005883a 	mov	r2,r18
    af04:	003fdc06 	br	ae78 <_fclose_r+0x38>
    af08:	0006c840 	call	6c84 <__sinit>
    af0c:	003fd706 	br	ae6c <_fclose_r+0x2c>
    af10:	04bfffc4 	movi	r18,-1
    af14:	003fe806 	br	aeb8 <_fclose_r+0x78>
    af18:	81400417 	ldw	r5,16(r16)
    af1c:	8809883a 	mov	r4,r17
    af20:	0006df80 	call	6df8 <_free_r>
    af24:	003fe706 	br	aec4 <_fclose_r+0x84>
    af28:	0005883a 	mov	r2,zero
    af2c:	f800283a 	ret

0000af30 <fclose>:
    af30:	00800074 	movhi	r2,1
    af34:	108d2c04 	addi	r2,r2,13488
    af38:	200b883a 	mov	r5,r4
    af3c:	11000017 	ldw	r4,0(r2)
    af40:	000ae401 	jmpi	ae40 <_fclose_r>

0000af44 <__fputwc>:
    af44:	defff804 	addi	sp,sp,-32
    af48:	dcc00415 	stw	r19,16(sp)
    af4c:	dc800315 	stw	r18,12(sp)
    af50:	dc000115 	stw	r16,4(sp)
    af54:	dfc00715 	stw	ra,28(sp)
    af58:	dd400615 	stw	r21,24(sp)
    af5c:	dd000515 	stw	r20,20(sp)
    af60:	dc400215 	stw	r17,8(sp)
    af64:	2027883a 	mov	r19,r4
    af68:	2825883a 	mov	r18,r5
    af6c:	3021883a 	mov	r16,r6
    af70:	00077d40 	call	77d4 <__locale_mb_cur_max>
    af74:	00c00044 	movi	r3,1
    af78:	10c03e26 	beq	r2,r3,b074 <__fputwc+0x130>
    af7c:	81c01704 	addi	r7,r16,92
    af80:	900d883a 	mov	r6,r18
    af84:	d80b883a 	mov	r5,sp
    af88:	9809883a 	mov	r4,r19
    af8c:	000b4140 	call	b414 <_wcrtomb_r>
    af90:	1029883a 	mov	r20,r2
    af94:	00bfffc4 	movi	r2,-1
    af98:	a0802026 	beq	r20,r2,b01c <__fputwc+0xd8>
    af9c:	d9400003 	ldbu	r5,0(sp)
    afa0:	a0001c26 	beq	r20,zero,b014 <__fputwc+0xd0>
    afa4:	0023883a 	mov	r17,zero
    afa8:	05400284 	movi	r21,10
    afac:	00000906 	br	afd4 <__fputwc+0x90>
    afb0:	80800017 	ldw	r2,0(r16)
    afb4:	11400005 	stb	r5,0(r2)
    afb8:	80c00017 	ldw	r3,0(r16)
    afbc:	18c00044 	addi	r3,r3,1
    afc0:	80c00015 	stw	r3,0(r16)
    afc4:	8c400044 	addi	r17,r17,1
    afc8:	dc45883a 	add	r2,sp,r17
    afcc:	8d00112e 	bgeu	r17,r20,b014 <__fputwc+0xd0>
    afd0:	11400003 	ldbu	r5,0(r2)
    afd4:	80c00217 	ldw	r3,8(r16)
    afd8:	18ffffc4 	addi	r3,r3,-1
    afdc:	80c00215 	stw	r3,8(r16)
    afe0:	183ff30e 	bge	r3,zero,afb0 <__fputwc+0x6c>
    afe4:	80800617 	ldw	r2,24(r16)
    afe8:	18801916 	blt	r3,r2,b050 <__fputwc+0x10c>
    afec:	80800017 	ldw	r2,0(r16)
    aff0:	11400005 	stb	r5,0(r2)
    aff4:	80800017 	ldw	r2,0(r16)
    aff8:	10c00003 	ldbu	r3,0(r2)
    affc:	10800044 	addi	r2,r2,1
    b000:	1d402326 	beq	r3,r21,b090 <__fputwc+0x14c>
    b004:	80800015 	stw	r2,0(r16)
    b008:	8c400044 	addi	r17,r17,1
    b00c:	dc45883a 	add	r2,sp,r17
    b010:	8d3fef36 	bltu	r17,r20,afd0 <__fputwc+0x8c>
    b014:	9005883a 	mov	r2,r18
    b018:	00000406 	br	b02c <__fputwc+0xe8>
    b01c:	80c0030b 	ldhu	r3,12(r16)
    b020:	a005883a 	mov	r2,r20
    b024:	18c01014 	ori	r3,r3,64
    b028:	80c0030d 	sth	r3,12(r16)
    b02c:	dfc00717 	ldw	ra,28(sp)
    b030:	dd400617 	ldw	r21,24(sp)
    b034:	dd000517 	ldw	r20,20(sp)
    b038:	dcc00417 	ldw	r19,16(sp)
    b03c:	dc800317 	ldw	r18,12(sp)
    b040:	dc400217 	ldw	r17,8(sp)
    b044:	dc000117 	ldw	r16,4(sp)
    b048:	dec00804 	addi	sp,sp,32
    b04c:	f800283a 	ret
    b050:	800d883a 	mov	r6,r16
    b054:	29403fcc 	andi	r5,r5,255
    b058:	9809883a 	mov	r4,r19
    b05c:	000b2bc0 	call	b2bc <__swbuf_r>
    b060:	10bfffe0 	cmpeqi	r2,r2,-1
    b064:	10803fcc 	andi	r2,r2,255
    b068:	103fd626 	beq	r2,zero,afc4 <__fputwc+0x80>
    b06c:	00bfffc4 	movi	r2,-1
    b070:	003fee06 	br	b02c <__fputwc+0xe8>
    b074:	90ffffc4 	addi	r3,r18,-1
    b078:	01003f84 	movi	r4,254
    b07c:	20ffbf36 	bltu	r4,r3,af7c <__fputwc+0x38>
    b080:	900b883a 	mov	r5,r18
    b084:	dc800005 	stb	r18,0(sp)
    b088:	1029883a 	mov	r20,r2
    b08c:	003fc506 	br	afa4 <__fputwc+0x60>
    b090:	800d883a 	mov	r6,r16
    b094:	a80b883a 	mov	r5,r21
    b098:	9809883a 	mov	r4,r19
    b09c:	000b2bc0 	call	b2bc <__swbuf_r>
    b0a0:	10bfffe0 	cmpeqi	r2,r2,-1
    b0a4:	003fef06 	br	b064 <__fputwc+0x120>

0000b0a8 <_fputwc_r>:
    b0a8:	3080030b 	ldhu	r2,12(r6)
    b0ac:	10c8000c 	andi	r3,r2,8192
    b0b0:	1800051e 	bne	r3,zero,b0c8 <_fputwc_r+0x20>
    b0b4:	30c01917 	ldw	r3,100(r6)
    b0b8:	10880014 	ori	r2,r2,8192
    b0bc:	3080030d 	sth	r2,12(r6)
    b0c0:	18880014 	ori	r2,r3,8192
    b0c4:	30801915 	stw	r2,100(r6)
    b0c8:	000af441 	jmpi	af44 <__fputwc>

0000b0cc <fputwc>:
    b0cc:	00800074 	movhi	r2,1
    b0d0:	defffc04 	addi	sp,sp,-16
    b0d4:	108d2c04 	addi	r2,r2,13488
    b0d8:	dc000115 	stw	r16,4(sp)
    b0dc:	14000017 	ldw	r16,0(r2)
    b0e0:	dc400215 	stw	r17,8(sp)
    b0e4:	dfc00315 	stw	ra,12(sp)
    b0e8:	2023883a 	mov	r17,r4
    b0ec:	80000226 	beq	r16,zero,b0f8 <fputwc+0x2c>
    b0f0:	80800e17 	ldw	r2,56(r16)
    b0f4:	10001026 	beq	r2,zero,b138 <fputwc+0x6c>
    b0f8:	2880030b 	ldhu	r2,12(r5)
    b0fc:	10c8000c 	andi	r3,r2,8192
    b100:	1800051e 	bne	r3,zero,b118 <fputwc+0x4c>
    b104:	28c01917 	ldw	r3,100(r5)
    b108:	10880014 	ori	r2,r2,8192
    b10c:	2880030d 	sth	r2,12(r5)
    b110:	18880014 	ori	r2,r3,8192
    b114:	28801915 	stw	r2,100(r5)
    b118:	280d883a 	mov	r6,r5
    b11c:	8009883a 	mov	r4,r16
    b120:	880b883a 	mov	r5,r17
    b124:	dfc00317 	ldw	ra,12(sp)
    b128:	dc400217 	ldw	r17,8(sp)
    b12c:	dc000117 	ldw	r16,4(sp)
    b130:	dec00404 	addi	sp,sp,16
    b134:	000af441 	jmpi	af44 <__fputwc>
    b138:	8009883a 	mov	r4,r16
    b13c:	d9400015 	stw	r5,0(sp)
    b140:	0006c840 	call	6c84 <__sinit>
    b144:	d9400017 	ldw	r5,0(sp)
    b148:	003feb06 	br	b0f8 <fputwc+0x2c>

0000b14c <_fstat_r>:
    b14c:	defffd04 	addi	sp,sp,-12
    b150:	2805883a 	mov	r2,r5
    b154:	dc000015 	stw	r16,0(sp)
    b158:	04000074 	movhi	r16,1
    b15c:	dc400115 	stw	r17,4(sp)
    b160:	84144d04 	addi	r16,r16,20788
    b164:	2023883a 	mov	r17,r4
    b168:	300b883a 	mov	r5,r6
    b16c:	1009883a 	mov	r4,r2
    b170:	dfc00215 	stw	ra,8(sp)
    b174:	80000015 	stw	zero,0(r16)
    b178:	000e8880 	call	e888 <fstat>
    b17c:	00ffffc4 	movi	r3,-1
    b180:	10c00526 	beq	r2,r3,b198 <_fstat_r+0x4c>
    b184:	dfc00217 	ldw	ra,8(sp)
    b188:	dc400117 	ldw	r17,4(sp)
    b18c:	dc000017 	ldw	r16,0(sp)
    b190:	dec00304 	addi	sp,sp,12
    b194:	f800283a 	ret
    b198:	80c00017 	ldw	r3,0(r16)
    b19c:	183ff926 	beq	r3,zero,b184 <_fstat_r+0x38>
    b1a0:	88c00015 	stw	r3,0(r17)
    b1a4:	003ff706 	br	b184 <_fstat_r+0x38>

0000b1a8 <_isatty_r>:
    b1a8:	defffd04 	addi	sp,sp,-12
    b1ac:	dc000015 	stw	r16,0(sp)
    b1b0:	04000074 	movhi	r16,1
    b1b4:	dc400115 	stw	r17,4(sp)
    b1b8:	84144d04 	addi	r16,r16,20788
    b1bc:	2023883a 	mov	r17,r4
    b1c0:	2809883a 	mov	r4,r5
    b1c4:	dfc00215 	stw	ra,8(sp)
    b1c8:	80000015 	stw	zero,0(r16)
    b1cc:	000e9740 	call	e974 <isatty>
    b1d0:	00ffffc4 	movi	r3,-1
    b1d4:	10c00526 	beq	r2,r3,b1ec <_isatty_r+0x44>
    b1d8:	dfc00217 	ldw	ra,8(sp)
    b1dc:	dc400117 	ldw	r17,4(sp)
    b1e0:	dc000017 	ldw	r16,0(sp)
    b1e4:	dec00304 	addi	sp,sp,12
    b1e8:	f800283a 	ret
    b1ec:	80c00017 	ldw	r3,0(r16)
    b1f0:	183ff926 	beq	r3,zero,b1d8 <_isatty_r+0x30>
    b1f4:	88c00015 	stw	r3,0(r17)
    b1f8:	003ff706 	br	b1d8 <_isatty_r+0x30>

0000b1fc <_lseek_r>:
    b1fc:	defffd04 	addi	sp,sp,-12
    b200:	2805883a 	mov	r2,r5
    b204:	dc000015 	stw	r16,0(sp)
    b208:	04000074 	movhi	r16,1
    b20c:	dc400115 	stw	r17,4(sp)
    b210:	300b883a 	mov	r5,r6
    b214:	84144d04 	addi	r16,r16,20788
    b218:	2023883a 	mov	r17,r4
    b21c:	380d883a 	mov	r6,r7
    b220:	1009883a 	mov	r4,r2
    b224:	dfc00215 	stw	ra,8(sp)
    b228:	80000015 	stw	zero,0(r16)
    b22c:	000eb400 	call	eb40 <lseek>
    b230:	00ffffc4 	movi	r3,-1
    b234:	10c00526 	beq	r2,r3,b24c <_lseek_r+0x50>
    b238:	dfc00217 	ldw	ra,8(sp)
    b23c:	dc400117 	ldw	r17,4(sp)
    b240:	dc000017 	ldw	r16,0(sp)
    b244:	dec00304 	addi	sp,sp,12
    b248:	f800283a 	ret
    b24c:	80c00017 	ldw	r3,0(r16)
    b250:	183ff926 	beq	r3,zero,b238 <_lseek_r+0x3c>
    b254:	88c00015 	stw	r3,0(r17)
    b258:	003ff706 	br	b238 <_lseek_r+0x3c>

0000b25c <_read_r>:
    b25c:	defffd04 	addi	sp,sp,-12
    b260:	2805883a 	mov	r2,r5
    b264:	dc000015 	stw	r16,0(sp)
    b268:	04000074 	movhi	r16,1
    b26c:	dc400115 	stw	r17,4(sp)
    b270:	300b883a 	mov	r5,r6
    b274:	84144d04 	addi	r16,r16,20788
    b278:	2023883a 	mov	r17,r4
    b27c:	380d883a 	mov	r6,r7
    b280:	1009883a 	mov	r4,r2
    b284:	dfc00215 	stw	ra,8(sp)
    b288:	80000015 	stw	zero,0(r16)
    b28c:	000ed140 	call	ed14 <read>
    b290:	00ffffc4 	movi	r3,-1
    b294:	10c00526 	beq	r2,r3,b2ac <_read_r+0x50>
    b298:	dfc00217 	ldw	ra,8(sp)
    b29c:	dc400117 	ldw	r17,4(sp)
    b2a0:	dc000017 	ldw	r16,0(sp)
    b2a4:	dec00304 	addi	sp,sp,12
    b2a8:	f800283a 	ret
    b2ac:	80c00017 	ldw	r3,0(r16)
    b2b0:	183ff926 	beq	r3,zero,b298 <_read_r+0x3c>
    b2b4:	88c00015 	stw	r3,0(r17)
    b2b8:	003ff706 	br	b298 <_read_r+0x3c>

0000b2bc <__swbuf_r>:
    b2bc:	defffb04 	addi	sp,sp,-20
    b2c0:	dcc00315 	stw	r19,12(sp)
    b2c4:	dc800215 	stw	r18,8(sp)
    b2c8:	dc000015 	stw	r16,0(sp)
    b2cc:	dfc00415 	stw	ra,16(sp)
    b2d0:	dc400115 	stw	r17,4(sp)
    b2d4:	2025883a 	mov	r18,r4
    b2d8:	2827883a 	mov	r19,r5
    b2dc:	3021883a 	mov	r16,r6
    b2e0:	20000226 	beq	r4,zero,b2ec <__swbuf_r+0x30>
    b2e4:	20800e17 	ldw	r2,56(r4)
    b2e8:	10004226 	beq	r2,zero,b3f4 <__swbuf_r+0x138>
    b2ec:	80800617 	ldw	r2,24(r16)
    b2f0:	8100030b 	ldhu	r4,12(r16)
    b2f4:	80800215 	stw	r2,8(r16)
    b2f8:	2080020c 	andi	r2,r4,8
    b2fc:	10003626 	beq	r2,zero,b3d8 <__swbuf_r+0x11c>
    b300:	80c00417 	ldw	r3,16(r16)
    b304:	18003426 	beq	r3,zero,b3d8 <__swbuf_r+0x11c>
    b308:	2088000c 	andi	r2,r4,8192
    b30c:	9c403fcc 	andi	r17,r19,255
    b310:	10001a26 	beq	r2,zero,b37c <__swbuf_r+0xc0>
    b314:	80800017 	ldw	r2,0(r16)
    b318:	81000517 	ldw	r4,20(r16)
    b31c:	10c7c83a 	sub	r3,r2,r3
    b320:	1900200e 	bge	r3,r4,b3a4 <__swbuf_r+0xe8>
    b324:	18c00044 	addi	r3,r3,1
    b328:	81000217 	ldw	r4,8(r16)
    b32c:	11400044 	addi	r5,r2,1
    b330:	81400015 	stw	r5,0(r16)
    b334:	213fffc4 	addi	r4,r4,-1
    b338:	81000215 	stw	r4,8(r16)
    b33c:	14c00005 	stb	r19,0(r2)
    b340:	80800517 	ldw	r2,20(r16)
    b344:	10c01e26 	beq	r2,r3,b3c0 <__swbuf_r+0x104>
    b348:	8080030b 	ldhu	r2,12(r16)
    b34c:	1080004c 	andi	r2,r2,1
    b350:	10000226 	beq	r2,zero,b35c <__swbuf_r+0xa0>
    b354:	00800284 	movi	r2,10
    b358:	88801926 	beq	r17,r2,b3c0 <__swbuf_r+0x104>
    b35c:	8805883a 	mov	r2,r17
    b360:	dfc00417 	ldw	ra,16(sp)
    b364:	dcc00317 	ldw	r19,12(sp)
    b368:	dc800217 	ldw	r18,8(sp)
    b36c:	dc400117 	ldw	r17,4(sp)
    b370:	dc000017 	ldw	r16,0(sp)
    b374:	dec00504 	addi	sp,sp,20
    b378:	f800283a 	ret
    b37c:	81401917 	ldw	r5,100(r16)
    b380:	00b7ffc4 	movi	r2,-8193
    b384:	21080014 	ori	r4,r4,8192
    b388:	2884703a 	and	r2,r5,r2
    b38c:	80801915 	stw	r2,100(r16)
    b390:	80800017 	ldw	r2,0(r16)
    b394:	8100030d 	sth	r4,12(r16)
    b398:	81000517 	ldw	r4,20(r16)
    b39c:	10c7c83a 	sub	r3,r2,r3
    b3a0:	193fe016 	blt	r3,r4,b324 <__swbuf_r+0x68>
    b3a4:	800b883a 	mov	r5,r16
    b3a8:	9009883a 	mov	r4,r18
    b3ac:	00068a80 	call	68a8 <_fflush_r>
    b3b0:	1000071e 	bne	r2,zero,b3d0 <__swbuf_r+0x114>
    b3b4:	80800017 	ldw	r2,0(r16)
    b3b8:	00c00044 	movi	r3,1
    b3bc:	003fda06 	br	b328 <__swbuf_r+0x6c>
    b3c0:	800b883a 	mov	r5,r16
    b3c4:	9009883a 	mov	r4,r18
    b3c8:	00068a80 	call	68a8 <_fflush_r>
    b3cc:	103fe326 	beq	r2,zero,b35c <__swbuf_r+0xa0>
    b3d0:	00bfffc4 	movi	r2,-1
    b3d4:	003fe206 	br	b360 <__swbuf_r+0xa4>
    b3d8:	800b883a 	mov	r5,r16
    b3dc:	9009883a 	mov	r4,r18
    b3e0:	0004cb00 	call	4cb0 <__swsetup_r>
    b3e4:	103ffa1e 	bne	r2,zero,b3d0 <__swbuf_r+0x114>
    b3e8:	8100030b 	ldhu	r4,12(r16)
    b3ec:	80c00417 	ldw	r3,16(r16)
    b3f0:	003fc506 	br	b308 <__swbuf_r+0x4c>
    b3f4:	0006c840 	call	6c84 <__sinit>
    b3f8:	003fbc06 	br	b2ec <__swbuf_r+0x30>

0000b3fc <__swbuf>:
    b3fc:	00800074 	movhi	r2,1
    b400:	108d2c04 	addi	r2,r2,13488
    b404:	280d883a 	mov	r6,r5
    b408:	200b883a 	mov	r5,r4
    b40c:	11000017 	ldw	r4,0(r2)
    b410:	000b2bc1 	jmpi	b2bc <__swbuf_r>

0000b414 <_wcrtomb_r>:
    b414:	defff604 	addi	sp,sp,-40
    b418:	00800074 	movhi	r2,1
    b41c:	dc800815 	stw	r18,32(sp)
    b420:	dc400715 	stw	r17,28(sp)
    b424:	dc000615 	stw	r16,24(sp)
    b428:	108d2e04 	addi	r2,r2,13496
    b42c:	dfc00915 	stw	ra,36(sp)
    b430:	2021883a 	mov	r16,r4
    b434:	3823883a 	mov	r17,r7
    b438:	14800017 	ldw	r18,0(r2)
    b43c:	28001426 	beq	r5,zero,b490 <_wcrtomb_r+0x7c>
    b440:	d9400415 	stw	r5,16(sp)
    b444:	d9800515 	stw	r6,20(sp)
    b448:	00077c80 	call	77c8 <__locale_charset>
    b44c:	d9800517 	ldw	r6,20(sp)
    b450:	d9400417 	ldw	r5,16(sp)
    b454:	100f883a 	mov	r7,r2
    b458:	dc400015 	stw	r17,0(sp)
    b45c:	8009883a 	mov	r4,r16
    b460:	903ee83a 	callr	r18
    b464:	00ffffc4 	movi	r3,-1
    b468:	10c0031e 	bne	r2,r3,b478 <_wcrtomb_r+0x64>
    b46c:	88000015 	stw	zero,0(r17)
    b470:	00c02284 	movi	r3,138
    b474:	80c00015 	stw	r3,0(r16)
    b478:	dfc00917 	ldw	ra,36(sp)
    b47c:	dc800817 	ldw	r18,32(sp)
    b480:	dc400717 	ldw	r17,28(sp)
    b484:	dc000617 	ldw	r16,24(sp)
    b488:	dec00a04 	addi	sp,sp,40
    b48c:	f800283a 	ret
    b490:	00077c80 	call	77c8 <__locale_charset>
    b494:	100f883a 	mov	r7,r2
    b498:	dc400015 	stw	r17,0(sp)
    b49c:	000d883a 	mov	r6,zero
    b4a0:	d9400104 	addi	r5,sp,4
    b4a4:	8009883a 	mov	r4,r16
    b4a8:	903ee83a 	callr	r18
    b4ac:	003fed06 	br	b464 <_wcrtomb_r+0x50>

0000b4b0 <wcrtomb>:
    b4b0:	defff604 	addi	sp,sp,-40
    b4b4:	00800074 	movhi	r2,1
    b4b8:	dc800615 	stw	r18,24(sp)
    b4bc:	dc400515 	stw	r17,20(sp)
    b4c0:	108d2c04 	addi	r2,r2,13488
    b4c4:	dfc00915 	stw	ra,36(sp)
    b4c8:	dd000815 	stw	r20,32(sp)
    b4cc:	dcc00715 	stw	r19,28(sp)
    b4d0:	dc000415 	stw	r16,16(sp)
    b4d4:	3025883a 	mov	r18,r6
    b4d8:	14400017 	ldw	r17,0(r2)
    b4dc:	20001926 	beq	r4,zero,b544 <wcrtomb+0x94>
    b4e0:	00800074 	movhi	r2,1
    b4e4:	108d2e04 	addi	r2,r2,13496
    b4e8:	15000017 	ldw	r20,0(r2)
    b4ec:	2021883a 	mov	r16,r4
    b4f0:	2827883a 	mov	r19,r5
    b4f4:	00077c80 	call	77c8 <__locale_charset>
    b4f8:	100f883a 	mov	r7,r2
    b4fc:	dc800015 	stw	r18,0(sp)
    b500:	980d883a 	mov	r6,r19
    b504:	800b883a 	mov	r5,r16
    b508:	8809883a 	mov	r4,r17
    b50c:	a03ee83a 	callr	r20
    b510:	00ffffc4 	movi	r3,-1
    b514:	10c0031e 	bne	r2,r3,b524 <wcrtomb+0x74>
    b518:	90000015 	stw	zero,0(r18)
    b51c:	00c02284 	movi	r3,138
    b520:	88c00015 	stw	r3,0(r17)
    b524:	dfc00917 	ldw	ra,36(sp)
    b528:	dd000817 	ldw	r20,32(sp)
    b52c:	dcc00717 	ldw	r19,28(sp)
    b530:	dc800617 	ldw	r18,24(sp)
    b534:	dc400517 	ldw	r17,20(sp)
    b538:	dc000417 	ldw	r16,16(sp)
    b53c:	dec00a04 	addi	sp,sp,40
    b540:	f800283a 	ret
    b544:	00800074 	movhi	r2,1
    b548:	108d2e04 	addi	r2,r2,13496
    b54c:	14000017 	ldw	r16,0(r2)
    b550:	00077c80 	call	77c8 <__locale_charset>
    b554:	100f883a 	mov	r7,r2
    b558:	dc800015 	stw	r18,0(sp)
    b55c:	000d883a 	mov	r6,zero
    b560:	d9400104 	addi	r5,sp,4
    b564:	8809883a 	mov	r4,r17
    b568:	803ee83a 	callr	r16
    b56c:	003fe806 	br	b510 <wcrtomb+0x60>

0000b570 <__ascii_wctomb>:
    b570:	28000526 	beq	r5,zero,b588 <__ascii_wctomb+0x18>
    b574:	00803fc4 	movi	r2,255
    b578:	11800536 	bltu	r2,r6,b590 <__ascii_wctomb+0x20>
    b57c:	29800005 	stb	r6,0(r5)
    b580:	00800044 	movi	r2,1
    b584:	f800283a 	ret
    b588:	0005883a 	mov	r2,zero
    b58c:	f800283a 	ret
    b590:	00802284 	movi	r2,138
    b594:	20800015 	stw	r2,0(r4)
    b598:	00bfffc4 	movi	r2,-1
    b59c:	f800283a 	ret

0000b5a0 <_wctomb_r>:
    b5a0:	00800074 	movhi	r2,1
    b5a4:	defff904 	addi	sp,sp,-28
    b5a8:	108d2e04 	addi	r2,r2,13496
    b5ac:	dfc00615 	stw	ra,24(sp)
    b5b0:	dc400515 	stw	r17,20(sp)
    b5b4:	dc000415 	stw	r16,16(sp)
    b5b8:	3823883a 	mov	r17,r7
    b5bc:	14000017 	ldw	r16,0(r2)
    b5c0:	d9000115 	stw	r4,4(sp)
    b5c4:	d9400215 	stw	r5,8(sp)
    b5c8:	d9800315 	stw	r6,12(sp)
    b5cc:	00077c80 	call	77c8 <__locale_charset>
    b5d0:	d9800317 	ldw	r6,12(sp)
    b5d4:	d9400217 	ldw	r5,8(sp)
    b5d8:	d9000117 	ldw	r4,4(sp)
    b5dc:	100f883a 	mov	r7,r2
    b5e0:	dc400015 	stw	r17,0(sp)
    b5e4:	803ee83a 	callr	r16
    b5e8:	dfc00617 	ldw	ra,24(sp)
    b5ec:	dc400517 	ldw	r17,20(sp)
    b5f0:	dc000417 	ldw	r16,16(sp)
    b5f4:	dec00704 	addi	sp,sp,28
    b5f8:	f800283a 	ret

0000b5fc <__udivdi3>:
    b5fc:	defff504 	addi	sp,sp,-44
    b600:	dcc00415 	stw	r19,16(sp)
    b604:	dc000115 	stw	r16,4(sp)
    b608:	dfc00a15 	stw	ra,40(sp)
    b60c:	df000915 	stw	fp,36(sp)
    b610:	ddc00815 	stw	r23,32(sp)
    b614:	dd800715 	stw	r22,28(sp)
    b618:	dd400615 	stw	r21,24(sp)
    b61c:	dd000515 	stw	r20,20(sp)
    b620:	dc800315 	stw	r18,12(sp)
    b624:	dc400215 	stw	r17,8(sp)
    b628:	2027883a 	mov	r19,r4
    b62c:	2821883a 	mov	r16,r5
    b630:	3800411e 	bne	r7,zero,b738 <__udivdi3+0x13c>
    b634:	3023883a 	mov	r17,r6
    b638:	2025883a 	mov	r18,r4
    b63c:	2980522e 	bgeu	r5,r6,b788 <__udivdi3+0x18c>
    b640:	00bfffd4 	movui	r2,65535
    b644:	282d883a 	mov	r22,r5
    b648:	1180a836 	bltu	r2,r6,b8ec <__udivdi3+0x2f0>
    b64c:	00803fc4 	movi	r2,255
    b650:	1185803a 	cmpltu	r2,r2,r6
    b654:	100490fa 	slli	r2,r2,3
    b658:	3086d83a 	srl	r3,r6,r2
    b65c:	01000074 	movhi	r4,1
    b660:	2105f304 	addi	r4,r4,6092
    b664:	20c7883a 	add	r3,r4,r3
    b668:	18c00003 	ldbu	r3,0(r3)
    b66c:	1885883a 	add	r2,r3,r2
    b670:	00c00804 	movi	r3,32
    b674:	1887c83a 	sub	r3,r3,r2
    b678:	18000526 	beq	r3,zero,b690 <__udivdi3+0x94>
    b67c:	80e0983a 	sll	r16,r16,r3
    b680:	9884d83a 	srl	r2,r19,r2
    b684:	30e2983a 	sll	r17,r6,r3
    b688:	98e4983a 	sll	r18,r19,r3
    b68c:	142cb03a 	or	r22,r2,r16
    b690:	882ad43a 	srli	r21,r17,16
    b694:	b009883a 	mov	r4,r22
    b698:	8d3fffcc 	andi	r20,r17,65535
    b69c:	a80b883a 	mov	r5,r21
    b6a0:	0001f280 	call	1f28 <__umodsi3>
    b6a4:	b009883a 	mov	r4,r22
    b6a8:	a80b883a 	mov	r5,r21
    b6ac:	1027883a 	mov	r19,r2
    b6b0:	0001ec40 	call	1ec4 <__udivsi3>
    b6b4:	102d883a 	mov	r22,r2
    b6b8:	9826943a 	slli	r19,r19,16
    b6bc:	9004d43a 	srli	r2,r18,16
    b6c0:	a5a1383a 	mul	r16,r20,r22
    b6c4:	14c4b03a 	or	r2,r2,r19
    b6c8:	1400052e 	bgeu	r2,r16,b6e0 <__udivdi3+0xe4>
    b6cc:	1445883a 	add	r2,r2,r17
    b6d0:	b0ffffc4 	addi	r3,r22,-1
    b6d4:	14400136 	bltu	r2,r17,b6dc <__udivdi3+0xe0>
    b6d8:	14012336 	bltu	r2,r16,bb68 <__udivdi3+0x56c>
    b6dc:	182d883a 	mov	r22,r3
    b6e0:	1421c83a 	sub	r16,r2,r16
    b6e4:	a80b883a 	mov	r5,r21
    b6e8:	8009883a 	mov	r4,r16
    b6ec:	0001f280 	call	1f28 <__umodsi3>
    b6f0:	1027883a 	mov	r19,r2
    b6f4:	a80b883a 	mov	r5,r21
    b6f8:	8009883a 	mov	r4,r16
    b6fc:	0001ec40 	call	1ec4 <__udivsi3>
    b700:	9826943a 	slli	r19,r19,16
    b704:	a0a9383a 	mul	r20,r20,r2
    b708:	94bfffcc 	andi	r18,r18,65535
    b70c:	94e4b03a 	or	r18,r18,r19
    b710:	9500052e 	bgeu	r18,r20,b728 <__udivdi3+0x12c>
    b714:	8ca5883a 	add	r18,r17,r18
    b718:	10ffffc4 	addi	r3,r2,-1
    b71c:	9440f136 	bltu	r18,r17,bae4 <__udivdi3+0x4e8>
    b720:	9500f02e 	bgeu	r18,r20,bae4 <__udivdi3+0x4e8>
    b724:	10bfff84 	addi	r2,r2,-2
    b728:	b00c943a 	slli	r6,r22,16
    b72c:	0007883a 	mov	r3,zero
    b730:	3084b03a 	or	r2,r6,r2
    b734:	00005906 	br	b89c <__udivdi3+0x2a0>
    b738:	29c05636 	bltu	r5,r7,b894 <__udivdi3+0x298>
    b73c:	00bfffd4 	movui	r2,65535
    b740:	11c0622e 	bgeu	r2,r7,b8cc <__udivdi3+0x2d0>
    b744:	00804034 	movhi	r2,256
    b748:	10bfffc4 	addi	r2,r2,-1
    b74c:	11c0ee36 	bltu	r2,r7,bb08 <__udivdi3+0x50c>
    b750:	00800404 	movi	r2,16
    b754:	3886d83a 	srl	r3,r7,r2
    b758:	01000074 	movhi	r4,1
    b75c:	2105f304 	addi	r4,r4,6092
    b760:	20c7883a 	add	r3,r4,r3
    b764:	18c00003 	ldbu	r3,0(r3)
    b768:	05400804 	movi	r21,32
    b76c:	1885883a 	add	r2,r3,r2
    b770:	a8abc83a 	sub	r21,r21,r2
    b774:	a800621e 	bne	r21,zero,b900 <__udivdi3+0x304>
    b778:	3c00e936 	bltu	r7,r16,bb20 <__udivdi3+0x524>
    b77c:	9985403a 	cmpgeu	r2,r19,r6
    b780:	0007883a 	mov	r3,zero
    b784:	00004506 	br	b89c <__udivdi3+0x2a0>
    b788:	3000041e 	bne	r6,zero,b79c <__udivdi3+0x1a0>
    b78c:	000b883a 	mov	r5,zero
    b790:	01000044 	movi	r4,1
    b794:	0001ec40 	call	1ec4 <__udivsi3>
    b798:	1023883a 	mov	r17,r2
    b79c:	00bfffd4 	movui	r2,65535
    b7a0:	14404e2e 	bgeu	r2,r17,b8dc <__udivdi3+0x2e0>
    b7a4:	00804034 	movhi	r2,256
    b7a8:	10bfffc4 	addi	r2,r2,-1
    b7ac:	1440d836 	bltu	r2,r17,bb10 <__udivdi3+0x514>
    b7b0:	00800404 	movi	r2,16
    b7b4:	8886d83a 	srl	r3,r17,r2
    b7b8:	01000074 	movhi	r4,1
    b7bc:	2105f304 	addi	r4,r4,6092
    b7c0:	20c7883a 	add	r3,r4,r3
    b7c4:	18c00003 	ldbu	r3,0(r3)
    b7c8:	1885883a 	add	r2,r3,r2
    b7cc:	00c00804 	movi	r3,32
    b7d0:	1887c83a 	sub	r3,r3,r2
    b7d4:	18008f1e 	bne	r3,zero,ba14 <__udivdi3+0x418>
    b7d8:	882ad43a 	srli	r21,r17,16
    b7dc:	8461c83a 	sub	r16,r16,r17
    b7e0:	8d3fffcc 	andi	r20,r17,65535
    b7e4:	00c00044 	movi	r3,1
    b7e8:	8009883a 	mov	r4,r16
    b7ec:	a80b883a 	mov	r5,r21
    b7f0:	d8c00015 	stw	r3,0(sp)
    b7f4:	0001f280 	call	1f28 <__umodsi3>
    b7f8:	8009883a 	mov	r4,r16
    b7fc:	a80b883a 	mov	r5,r21
    b800:	1027883a 	mov	r19,r2
    b804:	0001ec40 	call	1ec4 <__udivsi3>
    b808:	9826943a 	slli	r19,r19,16
    b80c:	9008d43a 	srli	r4,r18,16
    b810:	1521383a 	mul	r16,r2,r20
    b814:	102d883a 	mov	r22,r2
    b818:	24c8b03a 	or	r4,r4,r19
    b81c:	d8c00017 	ldw	r3,0(sp)
    b820:	2400052e 	bgeu	r4,r16,b838 <__udivdi3+0x23c>
    b824:	2449883a 	add	r4,r4,r17
    b828:	b0bfffc4 	addi	r2,r22,-1
    b82c:	24400136 	bltu	r4,r17,b834 <__udivdi3+0x238>
    b830:	2400ca36 	bltu	r4,r16,bb5c <__udivdi3+0x560>
    b834:	102d883a 	mov	r22,r2
    b838:	2421c83a 	sub	r16,r4,r16
    b83c:	a80b883a 	mov	r5,r21
    b840:	8009883a 	mov	r4,r16
    b844:	d8c00015 	stw	r3,0(sp)
    b848:	0001f280 	call	1f28 <__umodsi3>
    b84c:	1027883a 	mov	r19,r2
    b850:	a80b883a 	mov	r5,r21
    b854:	8009883a 	mov	r4,r16
    b858:	0001ec40 	call	1ec4 <__udivsi3>
    b85c:	9826943a 	slli	r19,r19,16
    b860:	1529383a 	mul	r20,r2,r20
    b864:	94bfffcc 	andi	r18,r18,65535
    b868:	94e4b03a 	or	r18,r18,r19
    b86c:	d8c00017 	ldw	r3,0(sp)
    b870:	9500052e 	bgeu	r18,r20,b888 <__udivdi3+0x28c>
    b874:	8ca5883a 	add	r18,r17,r18
    b878:	113fffc4 	addi	r4,r2,-1
    b87c:	94409736 	bltu	r18,r17,badc <__udivdi3+0x4e0>
    b880:	9500962e 	bgeu	r18,r20,badc <__udivdi3+0x4e0>
    b884:	10bfff84 	addi	r2,r2,-2
    b888:	b00c943a 	slli	r6,r22,16
    b88c:	3084b03a 	or	r2,r6,r2
    b890:	00000206 	br	b89c <__udivdi3+0x2a0>
    b894:	0007883a 	mov	r3,zero
    b898:	0005883a 	mov	r2,zero
    b89c:	dfc00a17 	ldw	ra,40(sp)
    b8a0:	df000917 	ldw	fp,36(sp)
    b8a4:	ddc00817 	ldw	r23,32(sp)
    b8a8:	dd800717 	ldw	r22,28(sp)
    b8ac:	dd400617 	ldw	r21,24(sp)
    b8b0:	dd000517 	ldw	r20,20(sp)
    b8b4:	dcc00417 	ldw	r19,16(sp)
    b8b8:	dc800317 	ldw	r18,12(sp)
    b8bc:	dc400217 	ldw	r17,8(sp)
    b8c0:	dc000117 	ldw	r16,4(sp)
    b8c4:	dec00b04 	addi	sp,sp,44
    b8c8:	f800283a 	ret
    b8cc:	00803fc4 	movi	r2,255
    b8d0:	11c5803a 	cmpltu	r2,r2,r7
    b8d4:	100490fa 	slli	r2,r2,3
    b8d8:	003f9e06 	br	b754 <__udivdi3+0x158>
    b8dc:	00803fc4 	movi	r2,255
    b8e0:	1445803a 	cmpltu	r2,r2,r17
    b8e4:	100490fa 	slli	r2,r2,3
    b8e8:	003fb206 	br	b7b4 <__udivdi3+0x1b8>
    b8ec:	00804034 	movhi	r2,256
    b8f0:	10bfffc4 	addi	r2,r2,-1
    b8f4:	11808836 	bltu	r2,r6,bb18 <__udivdi3+0x51c>
    b8f8:	00800404 	movi	r2,16
    b8fc:	003f5606 	br	b658 <__udivdi3+0x5c>
    b900:	30aed83a 	srl	r23,r6,r2
    b904:	3d4e983a 	sll	r7,r7,r21
    b908:	80acd83a 	srl	r22,r16,r2
    b90c:	9884d83a 	srl	r2,r19,r2
    b910:	3deeb03a 	or	r23,r7,r23
    b914:	b824d43a 	srli	r18,r23,16
    b918:	8560983a 	sll	r16,r16,r21
    b91c:	b009883a 	mov	r4,r22
    b920:	900b883a 	mov	r5,r18
    b924:	3568983a 	sll	r20,r6,r21
    b928:	1420b03a 	or	r16,r2,r16
    b92c:	0001f280 	call	1f28 <__umodsi3>
    b930:	b009883a 	mov	r4,r22
    b934:	900b883a 	mov	r5,r18
    b938:	1023883a 	mov	r17,r2
    b93c:	0001ec40 	call	1ec4 <__udivsi3>
    b940:	8808943a 	slli	r4,r17,16
    b944:	bf3fffcc 	andi	fp,r23,65535
    b948:	8006d43a 	srli	r3,r16,16
    b94c:	e0a3383a 	mul	r17,fp,r2
    b950:	100d883a 	mov	r6,r2
    b954:	1906b03a 	or	r3,r3,r4
    b958:	1c40042e 	bgeu	r3,r17,b96c <__udivdi3+0x370>
    b95c:	1dc7883a 	add	r3,r3,r23
    b960:	10bfffc4 	addi	r2,r2,-1
    b964:	1dc0752e 	bgeu	r3,r23,bb3c <__udivdi3+0x540>
    b968:	100d883a 	mov	r6,r2
    b96c:	1c63c83a 	sub	r17,r3,r17
    b970:	900b883a 	mov	r5,r18
    b974:	8809883a 	mov	r4,r17
    b978:	d9800015 	stw	r6,0(sp)
    b97c:	0001f280 	call	1f28 <__umodsi3>
    b980:	102d883a 	mov	r22,r2
    b984:	8809883a 	mov	r4,r17
    b988:	900b883a 	mov	r5,r18
    b98c:	0001ec40 	call	1ec4 <__udivsi3>
    b990:	b02c943a 	slli	r22,r22,16
    b994:	e089383a 	mul	r4,fp,r2
    b998:	843fffcc 	andi	r16,r16,65535
    b99c:	85a0b03a 	or	r16,r16,r22
    b9a0:	d9800017 	ldw	r6,0(sp)
    b9a4:	8100042e 	bgeu	r16,r4,b9b8 <__udivdi3+0x3bc>
    b9a8:	85e1883a 	add	r16,r16,r23
    b9ac:	10ffffc4 	addi	r3,r2,-1
    b9b0:	85c05e2e 	bgeu	r16,r23,bb2c <__udivdi3+0x530>
    b9b4:	1805883a 	mov	r2,r3
    b9b8:	300c943a 	slli	r6,r6,16
    b9bc:	a17fffcc 	andi	r5,r20,65535
    b9c0:	a028d43a 	srli	r20,r20,16
    b9c4:	3084b03a 	or	r2,r6,r2
    b9c8:	10ffffcc 	andi	r3,r2,65535
    b9cc:	100cd43a 	srli	r6,r2,16
    b9d0:	194f383a 	mul	r7,r3,r5
    b9d4:	1d07383a 	mul	r3,r3,r20
    b9d8:	314b383a 	mul	r5,r6,r5
    b9dc:	3810d43a 	srli	r8,r7,16
    b9e0:	8121c83a 	sub	r16,r16,r4
    b9e4:	1947883a 	add	r3,r3,r5
    b9e8:	40c7883a 	add	r3,r8,r3
    b9ec:	350d383a 	mul	r6,r6,r20
    b9f0:	1940022e 	bgeu	r3,r5,b9fc <__udivdi3+0x400>
    b9f4:	01000074 	movhi	r4,1
    b9f8:	310d883a 	add	r6,r6,r4
    b9fc:	1828d43a 	srli	r20,r3,16
    ba00:	a18d883a 	add	r6,r20,r6
    ba04:	81803e36 	bltu	r16,r6,bb00 <__udivdi3+0x504>
    ba08:	81803826 	beq	r16,r6,baec <__udivdi3+0x4f0>
    ba0c:	0007883a 	mov	r3,zero
    ba10:	003fa206 	br	b89c <__udivdi3+0x2a0>
    ba14:	88e2983a 	sll	r17,r17,r3
    ba18:	80a8d83a 	srl	r20,r16,r2
    ba1c:	80e0983a 	sll	r16,r16,r3
    ba20:	882ad43a 	srli	r21,r17,16
    ba24:	9884d83a 	srl	r2,r19,r2
    ba28:	a009883a 	mov	r4,r20
    ba2c:	a80b883a 	mov	r5,r21
    ba30:	142eb03a 	or	r23,r2,r16
    ba34:	98e4983a 	sll	r18,r19,r3
    ba38:	0001f280 	call	1f28 <__umodsi3>
    ba3c:	a009883a 	mov	r4,r20
    ba40:	a80b883a 	mov	r5,r21
    ba44:	1021883a 	mov	r16,r2
    ba48:	0001ec40 	call	1ec4 <__udivsi3>
    ba4c:	1039883a 	mov	fp,r2
    ba50:	8d3fffcc 	andi	r20,r17,65535
    ba54:	8020943a 	slli	r16,r16,16
    ba58:	b804d43a 	srli	r2,r23,16
    ba5c:	a72d383a 	mul	r22,r20,fp
    ba60:	1404b03a 	or	r2,r2,r16
    ba64:	1580062e 	bgeu	r2,r22,ba80 <__udivdi3+0x484>
    ba68:	1445883a 	add	r2,r2,r17
    ba6c:	e0ffffc4 	addi	r3,fp,-1
    ba70:	14403836 	bltu	r2,r17,bb54 <__udivdi3+0x558>
    ba74:	1580372e 	bgeu	r2,r22,bb54 <__udivdi3+0x558>
    ba78:	e73fff84 	addi	fp,fp,-2
    ba7c:	1445883a 	add	r2,r2,r17
    ba80:	15adc83a 	sub	r22,r2,r22
    ba84:	a80b883a 	mov	r5,r21
    ba88:	b009883a 	mov	r4,r22
    ba8c:	0001f280 	call	1f28 <__umodsi3>
    ba90:	1027883a 	mov	r19,r2
    ba94:	b009883a 	mov	r4,r22
    ba98:	a80b883a 	mov	r5,r21
    ba9c:	0001ec40 	call	1ec4 <__udivsi3>
    baa0:	9826943a 	slli	r19,r19,16
    baa4:	a0a1383a 	mul	r16,r20,r2
    baa8:	b93fffcc 	andi	r4,r23,65535
    baac:	24c8b03a 	or	r4,r4,r19
    bab0:	2400062e 	bgeu	r4,r16,bacc <__udivdi3+0x4d0>
    bab4:	2449883a 	add	r4,r4,r17
    bab8:	10ffffc4 	addi	r3,r2,-1
    babc:	24402336 	bltu	r4,r17,bb4c <__udivdi3+0x550>
    bac0:	2400222e 	bgeu	r4,r16,bb4c <__udivdi3+0x550>
    bac4:	10bfff84 	addi	r2,r2,-2
    bac8:	2449883a 	add	r4,r4,r17
    bacc:	e038943a 	slli	fp,fp,16
    bad0:	2421c83a 	sub	r16,r4,r16
    bad4:	e086b03a 	or	r3,fp,r2
    bad8:	003f4306 	br	b7e8 <__udivdi3+0x1ec>
    badc:	2005883a 	mov	r2,r4
    bae0:	003f6906 	br	b888 <__udivdi3+0x28c>
    bae4:	1805883a 	mov	r2,r3
    bae8:	003f0f06 	br	b728 <__udivdi3+0x12c>
    baec:	1806943a 	slli	r3,r3,16
    baf0:	9d66983a 	sll	r19,r19,r21
    baf4:	39ffffcc 	andi	r7,r7,65535
    baf8:	19c7883a 	add	r3,r3,r7
    bafc:	98ffc32e 	bgeu	r19,r3,ba0c <__udivdi3+0x410>
    bb00:	10bfffc4 	addi	r2,r2,-1
    bb04:	003fc106 	br	ba0c <__udivdi3+0x410>
    bb08:	00800604 	movi	r2,24
    bb0c:	003f1106 	br	b754 <__udivdi3+0x158>
    bb10:	00800604 	movi	r2,24
    bb14:	003f2706 	br	b7b4 <__udivdi3+0x1b8>
    bb18:	00800604 	movi	r2,24
    bb1c:	003ece06 	br	b658 <__udivdi3+0x5c>
    bb20:	0007883a 	mov	r3,zero
    bb24:	00800044 	movi	r2,1
    bb28:	003f5c06 	br	b89c <__udivdi3+0x2a0>
    bb2c:	813fa12e 	bgeu	r16,r4,b9b4 <__udivdi3+0x3b8>
    bb30:	10bfff84 	addi	r2,r2,-2
    bb34:	85e1883a 	add	r16,r16,r23
    bb38:	003f9f06 	br	b9b8 <__udivdi3+0x3bc>
    bb3c:	1c7f8a2e 	bgeu	r3,r17,b968 <__udivdi3+0x36c>
    bb40:	31bfff84 	addi	r6,r6,-2
    bb44:	1dc7883a 	add	r3,r3,r23
    bb48:	003f8806 	br	b96c <__udivdi3+0x370>
    bb4c:	1805883a 	mov	r2,r3
    bb50:	003fde06 	br	bacc <__udivdi3+0x4d0>
    bb54:	1839883a 	mov	fp,r3
    bb58:	003fc906 	br	ba80 <__udivdi3+0x484>
    bb5c:	b5bfff84 	addi	r22,r22,-2
    bb60:	2449883a 	add	r4,r4,r17
    bb64:	003f3406 	br	b838 <__udivdi3+0x23c>
    bb68:	b5bfff84 	addi	r22,r22,-2
    bb6c:	1445883a 	add	r2,r2,r17
    bb70:	003edb06 	br	b6e0 <__udivdi3+0xe4>

0000bb74 <__umoddi3>:
    bb74:	defff404 	addi	sp,sp,-48
    bb78:	df000a15 	stw	fp,40(sp)
    bb7c:	dc400315 	stw	r17,12(sp)
    bb80:	dc000215 	stw	r16,8(sp)
    bb84:	dfc00b15 	stw	ra,44(sp)
    bb88:	ddc00915 	stw	r23,36(sp)
    bb8c:	dd800815 	stw	r22,32(sp)
    bb90:	dd400715 	stw	r21,28(sp)
    bb94:	dd000615 	stw	r20,24(sp)
    bb98:	dcc00515 	stw	r19,20(sp)
    bb9c:	dc800415 	stw	r18,16(sp)
    bba0:	2021883a 	mov	r16,r4
    bba4:	2823883a 	mov	r17,r5
    bba8:	2839883a 	mov	fp,r5
    bbac:	38003c1e 	bne	r7,zero,bca0 <__umoddi3+0x12c>
    bbb0:	3027883a 	mov	r19,r6
    bbb4:	2029883a 	mov	r20,r4
    bbb8:	2980512e 	bgeu	r5,r6,bd00 <__umoddi3+0x18c>
    bbbc:	00bfffd4 	movui	r2,65535
    bbc0:	11809a36 	bltu	r2,r6,be2c <__umoddi3+0x2b8>
    bbc4:	01003fc4 	movi	r4,255
    bbc8:	2189803a 	cmpltu	r4,r4,r6
    bbcc:	200890fa 	slli	r4,r4,3
    bbd0:	3104d83a 	srl	r2,r6,r4
    bbd4:	00c00074 	movhi	r3,1
    bbd8:	18c5f304 	addi	r3,r3,6092
    bbdc:	1885883a 	add	r2,r3,r2
    bbe0:	10c00003 	ldbu	r3,0(r2)
    bbe4:	00800804 	movi	r2,32
    bbe8:	1909883a 	add	r4,r3,r4
    bbec:	1125c83a 	sub	r18,r2,r4
    bbf0:	90000526 	beq	r18,zero,bc08 <__umoddi3+0x94>
    bbf4:	8ca2983a 	sll	r17,r17,r18
    bbf8:	8108d83a 	srl	r4,r16,r4
    bbfc:	34a6983a 	sll	r19,r6,r18
    bc00:	84a8983a 	sll	r20,r16,r18
    bc04:	2478b03a 	or	fp,r4,r17
    bc08:	982ed43a 	srli	r23,r19,16
    bc0c:	e009883a 	mov	r4,fp
    bc10:	9dbfffcc 	andi	r22,r19,65535
    bc14:	b80b883a 	mov	r5,r23
    bc18:	0001f280 	call	1f28 <__umodsi3>
    bc1c:	e009883a 	mov	r4,fp
    bc20:	b80b883a 	mov	r5,r23
    bc24:	102b883a 	mov	r21,r2
    bc28:	0001ec40 	call	1ec4 <__udivsi3>
    bc2c:	a806943a 	slli	r3,r21,16
    bc30:	a008d43a 	srli	r4,r20,16
    bc34:	b085383a 	mul	r2,r22,r2
    bc38:	20c8b03a 	or	r4,r4,r3
    bc3c:	2080032e 	bgeu	r4,r2,bc4c <__umoddi3+0xd8>
    bc40:	24c9883a 	add	r4,r4,r19
    bc44:	24c00136 	bltu	r4,r19,bc4c <__umoddi3+0xd8>
    bc48:	20811036 	bltu	r4,r2,c08c <__umoddi3+0x518>
    bc4c:	20abc83a 	sub	r21,r4,r2
    bc50:	b80b883a 	mov	r5,r23
    bc54:	a809883a 	mov	r4,r21
    bc58:	0001f280 	call	1f28 <__umodsi3>
    bc5c:	1023883a 	mov	r17,r2
    bc60:	b80b883a 	mov	r5,r23
    bc64:	a809883a 	mov	r4,r21
    bc68:	0001ec40 	call	1ec4 <__udivsi3>
    bc6c:	8822943a 	slli	r17,r17,16
    bc70:	b085383a 	mul	r2,r22,r2
    bc74:	a0ffffcc 	andi	r3,r20,65535
    bc78:	1c46b03a 	or	r3,r3,r17
    bc7c:	1880042e 	bgeu	r3,r2,bc90 <__umoddi3+0x11c>
    bc80:	1cc7883a 	add	r3,r3,r19
    bc84:	1cc00236 	bltu	r3,r19,bc90 <__umoddi3+0x11c>
    bc88:	1880012e 	bgeu	r3,r2,bc90 <__umoddi3+0x11c>
    bc8c:	1cc7883a 	add	r3,r3,r19
    bc90:	1885c83a 	sub	r2,r3,r2
    bc94:	1484d83a 	srl	r2,r2,r18
    bc98:	0007883a 	mov	r3,zero
    bc9c:	00004f06 	br	bddc <__umoddi3+0x268>
    bca0:	29c04c36 	bltu	r5,r7,bdd4 <__umoddi3+0x260>
    bca4:	00bfffd4 	movui	r2,65535
    bca8:	11c0582e 	bgeu	r2,r7,be0c <__umoddi3+0x298>
    bcac:	00804034 	movhi	r2,256
    bcb0:	10bfffc4 	addi	r2,r2,-1
    bcb4:	11c0e736 	bltu	r2,r7,c054 <__umoddi3+0x4e0>
    bcb8:	01000404 	movi	r4,16
    bcbc:	3904d83a 	srl	r2,r7,r4
    bcc0:	00c00074 	movhi	r3,1
    bcc4:	18c5f304 	addi	r3,r3,6092
    bcc8:	1885883a 	add	r2,r3,r2
    bccc:	14c00003 	ldbu	r19,0(r2)
    bcd0:	00c00804 	movi	r3,32
    bcd4:	9927883a 	add	r19,r19,r4
    bcd8:	1ce9c83a 	sub	r20,r3,r19
    bcdc:	a000581e 	bne	r20,zero,be40 <__umoddi3+0x2cc>
    bce0:	3c400136 	bltu	r7,r17,bce8 <__umoddi3+0x174>
    bce4:	8180eb36 	bltu	r16,r6,c094 <__umoddi3+0x520>
    bce8:	8185c83a 	sub	r2,r16,r6
    bcec:	89e3c83a 	sub	r17,r17,r7
    bcf0:	8089803a 	cmpltu	r4,r16,r2
    bcf4:	8939c83a 	sub	fp,r17,r4
    bcf8:	e007883a 	mov	r3,fp
    bcfc:	00003706 	br	bddc <__umoddi3+0x268>
    bd00:	3000041e 	bne	r6,zero,bd14 <__umoddi3+0x1a0>
    bd04:	000b883a 	mov	r5,zero
    bd08:	01000044 	movi	r4,1
    bd0c:	0001ec40 	call	1ec4 <__udivsi3>
    bd10:	1027883a 	mov	r19,r2
    bd14:	00bfffd4 	movui	r2,65535
    bd18:	14c0402e 	bgeu	r2,r19,be1c <__umoddi3+0x2a8>
    bd1c:	00804034 	movhi	r2,256
    bd20:	10bfffc4 	addi	r2,r2,-1
    bd24:	14c0cd36 	bltu	r2,r19,c05c <__umoddi3+0x4e8>
    bd28:	00800404 	movi	r2,16
    bd2c:	9886d83a 	srl	r3,r19,r2
    bd30:	01000074 	movhi	r4,1
    bd34:	2105f304 	addi	r4,r4,6092
    bd38:	20c7883a 	add	r3,r4,r3
    bd3c:	18c00003 	ldbu	r3,0(r3)
    bd40:	1887883a 	add	r3,r3,r2
    bd44:	00800804 	movi	r2,32
    bd48:	10e5c83a 	sub	r18,r2,r3
    bd4c:	9000901e 	bne	r18,zero,bf90 <__umoddi3+0x41c>
    bd50:	982cd43a 	srli	r22,r19,16
    bd54:	8ce3c83a 	sub	r17,r17,r19
    bd58:	9d7fffcc 	andi	r21,r19,65535
    bd5c:	b00b883a 	mov	r5,r22
    bd60:	8809883a 	mov	r4,r17
    bd64:	0001f280 	call	1f28 <__umodsi3>
    bd68:	8809883a 	mov	r4,r17
    bd6c:	b00b883a 	mov	r5,r22
    bd70:	1021883a 	mov	r16,r2
    bd74:	0001ec40 	call	1ec4 <__udivsi3>
    bd78:	8006943a 	slli	r3,r16,16
    bd7c:	a008d43a 	srli	r4,r20,16
    bd80:	1545383a 	mul	r2,r2,r21
    bd84:	20c8b03a 	or	r4,r4,r3
    bd88:	2080042e 	bgeu	r4,r2,bd9c <__umoddi3+0x228>
    bd8c:	24c9883a 	add	r4,r4,r19
    bd90:	24c00236 	bltu	r4,r19,bd9c <__umoddi3+0x228>
    bd94:	2080012e 	bgeu	r4,r2,bd9c <__umoddi3+0x228>
    bd98:	24c9883a 	add	r4,r4,r19
    bd9c:	20a1c83a 	sub	r16,r4,r2
    bda0:	b00b883a 	mov	r5,r22
    bda4:	8009883a 	mov	r4,r16
    bda8:	0001f280 	call	1f28 <__umodsi3>
    bdac:	1023883a 	mov	r17,r2
    bdb0:	b00b883a 	mov	r5,r22
    bdb4:	8009883a 	mov	r4,r16
    bdb8:	0001ec40 	call	1ec4 <__udivsi3>
    bdbc:	8822943a 	slli	r17,r17,16
    bdc0:	1545383a 	mul	r2,r2,r21
    bdc4:	a53fffcc 	andi	r20,r20,65535
    bdc8:	a446b03a 	or	r3,r20,r17
    bdcc:	18bfb02e 	bgeu	r3,r2,bc90 <__umoddi3+0x11c>
    bdd0:	003fab06 	br	bc80 <__umoddi3+0x10c>
    bdd4:	2005883a 	mov	r2,r4
    bdd8:	2807883a 	mov	r3,r5
    bddc:	dfc00b17 	ldw	ra,44(sp)
    bde0:	df000a17 	ldw	fp,40(sp)
    bde4:	ddc00917 	ldw	r23,36(sp)
    bde8:	dd800817 	ldw	r22,32(sp)
    bdec:	dd400717 	ldw	r21,28(sp)
    bdf0:	dd000617 	ldw	r20,24(sp)
    bdf4:	dcc00517 	ldw	r19,20(sp)
    bdf8:	dc800417 	ldw	r18,16(sp)
    bdfc:	dc400317 	ldw	r17,12(sp)
    be00:	dc000217 	ldw	r16,8(sp)
    be04:	dec00c04 	addi	sp,sp,48
    be08:	f800283a 	ret
    be0c:	04c03fc4 	movi	r19,255
    be10:	99c9803a 	cmpltu	r4,r19,r7
    be14:	200890fa 	slli	r4,r4,3
    be18:	003fa806 	br	bcbc <__umoddi3+0x148>
    be1c:	00803fc4 	movi	r2,255
    be20:	14c5803a 	cmpltu	r2,r2,r19
    be24:	100490fa 	slli	r2,r2,3
    be28:	003fc006 	br	bd2c <__umoddi3+0x1b8>
    be2c:	00804034 	movhi	r2,256
    be30:	10bfffc4 	addi	r2,r2,-1
    be34:	11808b36 	bltu	r2,r6,c064 <__umoddi3+0x4f0>
    be38:	01000404 	movi	r4,16
    be3c:	003f6406 	br	bbd0 <__umoddi3+0x5c>
    be40:	34c4d83a 	srl	r2,r6,r19
    be44:	3d0e983a 	sll	r7,r7,r20
    be48:	8cf8d83a 	srl	fp,r17,r19
    be4c:	8d10983a 	sll	r8,r17,r20
    be50:	38aab03a 	or	r21,r7,r2
    be54:	a82cd43a 	srli	r22,r21,16
    be58:	84e2d83a 	srl	r17,r16,r19
    be5c:	e009883a 	mov	r4,fp
    be60:	b00b883a 	mov	r5,r22
    be64:	8a22b03a 	or	r17,r17,r8
    be68:	3524983a 	sll	r18,r6,r20
    be6c:	0001f280 	call	1f28 <__umodsi3>
    be70:	e009883a 	mov	r4,fp
    be74:	b00b883a 	mov	r5,r22
    be78:	102f883a 	mov	r23,r2
    be7c:	0001ec40 	call	1ec4 <__udivsi3>
    be80:	100d883a 	mov	r6,r2
    be84:	b808943a 	slli	r4,r23,16
    be88:	aa3fffcc 	andi	r8,r21,65535
    be8c:	8804d43a 	srli	r2,r17,16
    be90:	41af383a 	mul	r23,r8,r6
    be94:	8520983a 	sll	r16,r16,r20
    be98:	1104b03a 	or	r2,r2,r4
    be9c:	15c0042e 	bgeu	r2,r23,beb0 <__umoddi3+0x33c>
    bea0:	1545883a 	add	r2,r2,r21
    bea4:	30ffffc4 	addi	r3,r6,-1
    bea8:	1540742e 	bgeu	r2,r21,c07c <__umoddi3+0x508>
    beac:	180d883a 	mov	r6,r3
    beb0:	15efc83a 	sub	r23,r2,r23
    beb4:	b00b883a 	mov	r5,r22
    beb8:	b809883a 	mov	r4,r23
    bebc:	d9800115 	stw	r6,4(sp)
    bec0:	da000015 	stw	r8,0(sp)
    bec4:	0001f280 	call	1f28 <__umodsi3>
    bec8:	b00b883a 	mov	r5,r22
    becc:	b809883a 	mov	r4,r23
    bed0:	1039883a 	mov	fp,r2
    bed4:	0001ec40 	call	1ec4 <__udivsi3>
    bed8:	da000017 	ldw	r8,0(sp)
    bedc:	e038943a 	slli	fp,fp,16
    bee0:	100b883a 	mov	r5,r2
    bee4:	4089383a 	mul	r4,r8,r2
    bee8:	8a3fffcc 	andi	r8,r17,65535
    beec:	4710b03a 	or	r8,r8,fp
    bef0:	d9800117 	ldw	r6,4(sp)
    bef4:	4100042e 	bgeu	r8,r4,bf08 <__umoddi3+0x394>
    bef8:	4551883a 	add	r8,r8,r21
    befc:	10bfffc4 	addi	r2,r2,-1
    bf00:	45405a2e 	bgeu	r8,r21,c06c <__umoddi3+0x4f8>
    bf04:	100b883a 	mov	r5,r2
    bf08:	300c943a 	slli	r6,r6,16
    bf0c:	91ffffcc 	andi	r7,r18,65535
    bf10:	9004d43a 	srli	r2,r18,16
    bf14:	314cb03a 	or	r6,r6,r5
    bf18:	317fffcc 	andi	r5,r6,65535
    bf1c:	300cd43a 	srli	r6,r6,16
    bf20:	29d3383a 	mul	r9,r5,r7
    bf24:	288b383a 	mul	r5,r5,r2
    bf28:	31cf383a 	mul	r7,r6,r7
    bf2c:	4806d43a 	srli	r3,r9,16
    bf30:	4111c83a 	sub	r8,r8,r4
    bf34:	29cb883a 	add	r5,r5,r7
    bf38:	194b883a 	add	r5,r3,r5
    bf3c:	3085383a 	mul	r2,r6,r2
    bf40:	29c0022e 	bgeu	r5,r7,bf4c <__umoddi3+0x3d8>
    bf44:	00c00074 	movhi	r3,1
    bf48:	10c5883a 	add	r2,r2,r3
    bf4c:	2808d43a 	srli	r4,r5,16
    bf50:	280a943a 	slli	r5,r5,16
    bf54:	4a7fffcc 	andi	r9,r9,65535
    bf58:	2085883a 	add	r2,r4,r2
    bf5c:	2a4b883a 	add	r5,r5,r9
    bf60:	40803636 	bltu	r8,r2,c03c <__umoddi3+0x4c8>
    bf64:	40804d26 	beq	r8,r2,c09c <__umoddi3+0x528>
    bf68:	4089c83a 	sub	r4,r8,r2
    bf6c:	280f883a 	mov	r7,r5
    bf70:	81cfc83a 	sub	r7,r16,r7
    bf74:	81c7803a 	cmpltu	r3,r16,r7
    bf78:	20c7c83a 	sub	r3,r4,r3
    bf7c:	1cc4983a 	sll	r2,r3,r19
    bf80:	3d0ed83a 	srl	r7,r7,r20
    bf84:	1d06d83a 	srl	r3,r3,r20
    bf88:	11c4b03a 	or	r2,r2,r7
    bf8c:	003f9306 	br	bddc <__umoddi3+0x268>
    bf90:	9ca6983a 	sll	r19,r19,r18
    bf94:	88e8d83a 	srl	r20,r17,r3
    bf98:	80c4d83a 	srl	r2,r16,r3
    bf9c:	982cd43a 	srli	r22,r19,16
    bfa0:	8ca2983a 	sll	r17,r17,r18
    bfa4:	a009883a 	mov	r4,r20
    bfa8:	b00b883a 	mov	r5,r22
    bfac:	1478b03a 	or	fp,r2,r17
    bfb0:	0001f280 	call	1f28 <__umodsi3>
    bfb4:	a009883a 	mov	r4,r20
    bfb8:	b00b883a 	mov	r5,r22
    bfbc:	1023883a 	mov	r17,r2
    bfc0:	0001ec40 	call	1ec4 <__udivsi3>
    bfc4:	9d7fffcc 	andi	r21,r19,65535
    bfc8:	880a943a 	slli	r5,r17,16
    bfcc:	e008d43a 	srli	r4,fp,16
    bfd0:	a885383a 	mul	r2,r21,r2
    bfd4:	84a8983a 	sll	r20,r16,r18
    bfd8:	2148b03a 	or	r4,r4,r5
    bfdc:	2080042e 	bgeu	r4,r2,bff0 <__umoddi3+0x47c>
    bfe0:	24c9883a 	add	r4,r4,r19
    bfe4:	24c00236 	bltu	r4,r19,bff0 <__umoddi3+0x47c>
    bfe8:	2080012e 	bgeu	r4,r2,bff0 <__umoddi3+0x47c>
    bfec:	24c9883a 	add	r4,r4,r19
    bff0:	20a3c83a 	sub	r17,r4,r2
    bff4:	b00b883a 	mov	r5,r22
    bff8:	8809883a 	mov	r4,r17
    bffc:	0001f280 	call	1f28 <__umodsi3>
    c000:	102f883a 	mov	r23,r2
    c004:	8809883a 	mov	r4,r17
    c008:	b00b883a 	mov	r5,r22
    c00c:	0001ec40 	call	1ec4 <__udivsi3>
    c010:	b82e943a 	slli	r23,r23,16
    c014:	a885383a 	mul	r2,r21,r2
    c018:	e13fffcc 	andi	r4,fp,65535
    c01c:	25c8b03a 	or	r4,r4,r23
    c020:	2080042e 	bgeu	r4,r2,c034 <__umoddi3+0x4c0>
    c024:	24c9883a 	add	r4,r4,r19
    c028:	24c00236 	bltu	r4,r19,c034 <__umoddi3+0x4c0>
    c02c:	2080012e 	bgeu	r4,r2,c034 <__umoddi3+0x4c0>
    c030:	24c9883a 	add	r4,r4,r19
    c034:	20a3c83a 	sub	r17,r4,r2
    c038:	003f4806 	br	bd5c <__umoddi3+0x1e8>
    c03c:	2c8fc83a 	sub	r7,r5,r18
    c040:	1545c83a 	sub	r2,r2,r21
    c044:	29cb803a 	cmpltu	r5,r5,r7
    c048:	1145c83a 	sub	r2,r2,r5
    c04c:	4089c83a 	sub	r4,r8,r2
    c050:	003fc706 	br	bf70 <__umoddi3+0x3fc>
    c054:	01000604 	movi	r4,24
    c058:	003f1806 	br	bcbc <__umoddi3+0x148>
    c05c:	00800604 	movi	r2,24
    c060:	003f3206 	br	bd2c <__umoddi3+0x1b8>
    c064:	01000604 	movi	r4,24
    c068:	003ed906 	br	bbd0 <__umoddi3+0x5c>
    c06c:	413fa52e 	bgeu	r8,r4,bf04 <__umoddi3+0x390>
    c070:	297fff84 	addi	r5,r5,-2
    c074:	4551883a 	add	r8,r8,r21
    c078:	003fa306 	br	bf08 <__umoddi3+0x394>
    c07c:	15ff8b2e 	bgeu	r2,r23,beac <__umoddi3+0x338>
    c080:	31bfff84 	addi	r6,r6,-2
    c084:	1545883a 	add	r2,r2,r21
    c088:	003f8906 	br	beb0 <__umoddi3+0x33c>
    c08c:	24c9883a 	add	r4,r4,r19
    c090:	003eee06 	br	bc4c <__umoddi3+0xd8>
    c094:	8005883a 	mov	r2,r16
    c098:	003f1706 	br	bcf8 <__umoddi3+0x184>
    c09c:	817fe736 	bltu	r16,r5,c03c <__umoddi3+0x4c8>
    c0a0:	280f883a 	mov	r7,r5
    c0a4:	0009883a 	mov	r4,zero
    c0a8:	003fb106 	br	bf70 <__umoddi3+0x3fc>

0000c0ac <__adddf3>:
    c0ac:	02c00434 	movhi	r11,16
    c0b0:	5affffc4 	addi	r11,r11,-1
    c0b4:	2806d7fa 	srli	r3,r5,31
    c0b8:	2ad4703a 	and	r10,r5,r11
    c0bc:	3ad2703a 	and	r9,r7,r11
    c0c0:	3804d53a 	srli	r2,r7,20
    c0c4:	3018d77a 	srli	r12,r6,29
    c0c8:	280ad53a 	srli	r5,r5,20
    c0cc:	501490fa 	slli	r10,r10,3
    c0d0:	2010d77a 	srli	r8,r4,29
    c0d4:	481290fa 	slli	r9,r9,3
    c0d8:	380ed7fa 	srli	r7,r7,31
    c0dc:	defffb04 	addi	sp,sp,-20
    c0e0:	dc800215 	stw	r18,8(sp)
    c0e4:	dc400115 	stw	r17,4(sp)
    c0e8:	dc000015 	stw	r16,0(sp)
    c0ec:	dfc00415 	stw	ra,16(sp)
    c0f0:	dcc00315 	stw	r19,12(sp)
    c0f4:	1c803fcc 	andi	r18,r3,255
    c0f8:	2c01ffcc 	andi	r16,r5,2047
    c0fc:	5210b03a 	or	r8,r10,r8
    c100:	202290fa 	slli	r17,r4,3
    c104:	1081ffcc 	andi	r2,r2,2047
    c108:	4b12b03a 	or	r9,r9,r12
    c10c:	300c90fa 	slli	r6,r6,3
    c110:	91c07526 	beq	r18,r7,c2e8 <__adddf3+0x23c>
    c114:	8087c83a 	sub	r3,r16,r2
    c118:	00c0ab0e 	bge	zero,r3,c3c8 <__adddf3+0x31c>
    c11c:	10002a1e 	bne	r2,zero,c1c8 <__adddf3+0x11c>
    c120:	4984b03a 	or	r2,r9,r6
    c124:	1000961e 	bne	r2,zero,c380 <__adddf3+0x2d4>
    c128:	888001cc 	andi	r2,r17,7
    c12c:	10000726 	beq	r2,zero,c14c <__adddf3+0xa0>
    c130:	888003cc 	andi	r2,r17,15
    c134:	00c00104 	movi	r3,4
    c138:	10c00426 	beq	r2,r3,c14c <__adddf3+0xa0>
    c13c:	88c7883a 	add	r3,r17,r3
    c140:	1c63803a 	cmpltu	r17,r3,r17
    c144:	4451883a 	add	r8,r8,r17
    c148:	1823883a 	mov	r17,r3
    c14c:	4080202c 	andhi	r2,r8,128
    c150:	10005926 	beq	r2,zero,c2b8 <__adddf3+0x20c>
    c154:	84000044 	addi	r16,r16,1
    c158:	0081ffc4 	movi	r2,2047
    c15c:	8080ba26 	beq	r16,r2,c448 <__adddf3+0x39c>
    c160:	00bfe034 	movhi	r2,65408
    c164:	10bfffc4 	addi	r2,r2,-1
    c168:	4090703a 	and	r8,r8,r2
    c16c:	4004977a 	slli	r2,r8,29
    c170:	4010927a 	slli	r8,r8,9
    c174:	8822d0fa 	srli	r17,r17,3
    c178:	8401ffcc 	andi	r16,r16,2047
    c17c:	4010d33a 	srli	r8,r8,12
    c180:	9007883a 	mov	r3,r18
    c184:	1444b03a 	or	r2,r2,r17
    c188:	8401ffcc 	andi	r16,r16,2047
    c18c:	8020953a 	slli	r16,r16,20
    c190:	18c03fcc 	andi	r3,r3,255
    c194:	01000434 	movhi	r4,16
    c198:	213fffc4 	addi	r4,r4,-1
    c19c:	180697fa 	slli	r3,r3,31
    c1a0:	4110703a 	and	r8,r8,r4
    c1a4:	4410b03a 	or	r8,r8,r16
    c1a8:	40c6b03a 	or	r3,r8,r3
    c1ac:	dfc00417 	ldw	ra,16(sp)
    c1b0:	dcc00317 	ldw	r19,12(sp)
    c1b4:	dc800217 	ldw	r18,8(sp)
    c1b8:	dc400117 	ldw	r17,4(sp)
    c1bc:	dc000017 	ldw	r16,0(sp)
    c1c0:	dec00504 	addi	sp,sp,20
    c1c4:	f800283a 	ret
    c1c8:	0081ffc4 	movi	r2,2047
    c1cc:	80bfd626 	beq	r16,r2,c128 <__adddf3+0x7c>
    c1d0:	4a402034 	orhi	r9,r9,128
    c1d4:	00800e04 	movi	r2,56
    c1d8:	10c09f16 	blt	r2,r3,c458 <__adddf3+0x3ac>
    c1dc:	008007c4 	movi	r2,31
    c1e0:	10c0c216 	blt	r2,r3,c4ec <__adddf3+0x440>
    c1e4:	00800804 	movi	r2,32
    c1e8:	10c5c83a 	sub	r2,r2,r3
    c1ec:	488a983a 	sll	r5,r9,r2
    c1f0:	30c8d83a 	srl	r4,r6,r3
    c1f4:	3084983a 	sll	r2,r6,r2
    c1f8:	48c6d83a 	srl	r3,r9,r3
    c1fc:	290cb03a 	or	r6,r5,r4
    c200:	1004c03a 	cmpne	r2,r2,zero
    c204:	308cb03a 	or	r6,r6,r2
    c208:	898dc83a 	sub	r6,r17,r6
    c20c:	89a3803a 	cmpltu	r17,r17,r6
    c210:	40d1c83a 	sub	r8,r8,r3
    c214:	4451c83a 	sub	r8,r8,r17
    c218:	3023883a 	mov	r17,r6
    c21c:	4080202c 	andhi	r2,r8,128
    c220:	10002326 	beq	r2,zero,c2b0 <__adddf3+0x204>
    c224:	04c02034 	movhi	r19,128
    c228:	9cffffc4 	addi	r19,r19,-1
    c22c:	44e6703a 	and	r19,r8,r19
    c230:	98007626 	beq	r19,zero,c40c <__adddf3+0x360>
    c234:	9809883a 	mov	r4,r19
    c238:	000e6b00 	call	e6b0 <__clzsi2>
    c23c:	10fffe04 	addi	r3,r2,-8
    c240:	010007c4 	movi	r4,31
    c244:	20c07716 	blt	r4,r3,c424 <__adddf3+0x378>
    c248:	00800804 	movi	r2,32
    c24c:	10c5c83a 	sub	r2,r2,r3
    c250:	8884d83a 	srl	r2,r17,r2
    c254:	98d0983a 	sll	r8,r19,r3
    c258:	88e2983a 	sll	r17,r17,r3
    c25c:	1204b03a 	or	r2,r2,r8
    c260:	1c007416 	blt	r3,r16,c434 <__adddf3+0x388>
    c264:	1c21c83a 	sub	r16,r3,r16
    c268:	82000044 	addi	r8,r16,1
    c26c:	00c007c4 	movi	r3,31
    c270:	1a009116 	blt	r3,r8,c4b8 <__adddf3+0x40c>
    c274:	00c00804 	movi	r3,32
    c278:	1a07c83a 	sub	r3,r3,r8
    c27c:	8a08d83a 	srl	r4,r17,r8
    c280:	88e2983a 	sll	r17,r17,r3
    c284:	10c6983a 	sll	r3,r2,r3
    c288:	1210d83a 	srl	r8,r2,r8
    c28c:	8804c03a 	cmpne	r2,r17,zero
    c290:	1906b03a 	or	r3,r3,r4
    c294:	18a2b03a 	or	r17,r3,r2
    c298:	0021883a 	mov	r16,zero
    c29c:	003fa206 	br	c128 <__adddf3+0x7c>
    c2a0:	1890b03a 	or	r8,r3,r2
    c2a4:	40017d26 	beq	r8,zero,c89c <__adddf3+0x7f0>
    c2a8:	1011883a 	mov	r8,r2
    c2ac:	1823883a 	mov	r17,r3
    c2b0:	888001cc 	andi	r2,r17,7
    c2b4:	103f9e1e 	bne	r2,zero,c130 <__adddf3+0x84>
    c2b8:	4004977a 	slli	r2,r8,29
    c2bc:	8822d0fa 	srli	r17,r17,3
    c2c0:	4010d0fa 	srli	r8,r8,3
    c2c4:	9007883a 	mov	r3,r18
    c2c8:	1444b03a 	or	r2,r2,r17
    c2cc:	0101ffc4 	movi	r4,2047
    c2d0:	81002426 	beq	r16,r4,c364 <__adddf3+0x2b8>
    c2d4:	8120703a 	and	r16,r16,r4
    c2d8:	01000434 	movhi	r4,16
    c2dc:	213fffc4 	addi	r4,r4,-1
    c2e0:	4110703a 	and	r8,r8,r4
    c2e4:	003fa806 	br	c188 <__adddf3+0xdc>
    c2e8:	8089c83a 	sub	r4,r16,r2
    c2ec:	01005e0e 	bge	zero,r4,c468 <__adddf3+0x3bc>
    c2f0:	10002b26 	beq	r2,zero,c3a0 <__adddf3+0x2f4>
    c2f4:	0081ffc4 	movi	r2,2047
    c2f8:	80bf8b26 	beq	r16,r2,c128 <__adddf3+0x7c>
    c2fc:	4a402034 	orhi	r9,r9,128
    c300:	00800e04 	movi	r2,56
    c304:	1100a40e 	bge	r2,r4,c598 <__adddf3+0x4ec>
    c308:	498cb03a 	or	r6,r9,r6
    c30c:	300ac03a 	cmpne	r5,r6,zero
    c310:	0013883a 	mov	r9,zero
    c314:	2c4b883a 	add	r5,r5,r17
    c318:	2c63803a 	cmpltu	r17,r5,r17
    c31c:	4a11883a 	add	r8,r9,r8
    c320:	8a11883a 	add	r8,r17,r8
    c324:	2823883a 	mov	r17,r5
    c328:	4080202c 	andhi	r2,r8,128
    c32c:	103fe026 	beq	r2,zero,c2b0 <__adddf3+0x204>
    c330:	84000044 	addi	r16,r16,1
    c334:	0081ffc4 	movi	r2,2047
    c338:	8080d226 	beq	r16,r2,c684 <__adddf3+0x5d8>
    c33c:	00bfe034 	movhi	r2,65408
    c340:	10bfffc4 	addi	r2,r2,-1
    c344:	4090703a 	and	r8,r8,r2
    c348:	880ad07a 	srli	r5,r17,1
    c34c:	400897fa 	slli	r4,r8,31
    c350:	88c0004c 	andi	r3,r17,1
    c354:	28e2b03a 	or	r17,r5,r3
    c358:	4010d07a 	srli	r8,r8,1
    c35c:	2462b03a 	or	r17,r4,r17
    c360:	003f7106 	br	c128 <__adddf3+0x7c>
    c364:	4088b03a 	or	r4,r8,r2
    c368:	20014526 	beq	r4,zero,c880 <__adddf3+0x7d4>
    c36c:	01000434 	movhi	r4,16
    c370:	42000234 	orhi	r8,r8,8
    c374:	213fffc4 	addi	r4,r4,-1
    c378:	4110703a 	and	r8,r8,r4
    c37c:	003f8206 	br	c188 <__adddf3+0xdc>
    c380:	18ffffc4 	addi	r3,r3,-1
    c384:	1800491e 	bne	r3,zero,c4ac <__adddf3+0x400>
    c388:	898bc83a 	sub	r5,r17,r6
    c38c:	8963803a 	cmpltu	r17,r17,r5
    c390:	4251c83a 	sub	r8,r8,r9
    c394:	4451c83a 	sub	r8,r8,r17
    c398:	2823883a 	mov	r17,r5
    c39c:	003f9f06 	br	c21c <__adddf3+0x170>
    c3a0:	4984b03a 	or	r2,r9,r6
    c3a4:	103f6026 	beq	r2,zero,c128 <__adddf3+0x7c>
    c3a8:	213fffc4 	addi	r4,r4,-1
    c3ac:	2000931e 	bne	r4,zero,c5fc <__adddf3+0x550>
    c3b0:	898d883a 	add	r6,r17,r6
    c3b4:	3463803a 	cmpltu	r17,r6,r17
    c3b8:	4251883a 	add	r8,r8,r9
    c3bc:	8a11883a 	add	r8,r17,r8
    c3c0:	3023883a 	mov	r17,r6
    c3c4:	003fd806 	br	c328 <__adddf3+0x27c>
    c3c8:	1800541e 	bne	r3,zero,c51c <__adddf3+0x470>
    c3cc:	80800044 	addi	r2,r16,1
    c3d0:	1081ffcc 	andi	r2,r2,2047
    c3d4:	00c00044 	movi	r3,1
    c3d8:	1880a00e 	bge	r3,r2,c65c <__adddf3+0x5b0>
    c3dc:	8989c83a 	sub	r4,r17,r6
    c3e0:	8905803a 	cmpltu	r2,r17,r4
    c3e4:	4267c83a 	sub	r19,r8,r9
    c3e8:	98a7c83a 	sub	r19,r19,r2
    c3ec:	9880202c 	andhi	r2,r19,128
    c3f0:	10006326 	beq	r2,zero,c580 <__adddf3+0x4d4>
    c3f4:	3463c83a 	sub	r17,r6,r17
    c3f8:	4a07c83a 	sub	r3,r9,r8
    c3fc:	344d803a 	cmpltu	r6,r6,r17
    c400:	19a7c83a 	sub	r19,r3,r6
    c404:	3825883a 	mov	r18,r7
    c408:	983f8a1e 	bne	r19,zero,c234 <__adddf3+0x188>
    c40c:	8809883a 	mov	r4,r17
    c410:	000e6b00 	call	e6b0 <__clzsi2>
    c414:	10800804 	addi	r2,r2,32
    c418:	10fffe04 	addi	r3,r2,-8
    c41c:	010007c4 	movi	r4,31
    c420:	20ff890e 	bge	r4,r3,c248 <__adddf3+0x19c>
    c424:	10bff604 	addi	r2,r2,-40
    c428:	8884983a 	sll	r2,r17,r2
    c42c:	0023883a 	mov	r17,zero
    c430:	1c3f8c0e 	bge	r3,r16,c264 <__adddf3+0x1b8>
    c434:	023fe034 	movhi	r8,65408
    c438:	423fffc4 	addi	r8,r8,-1
    c43c:	80e1c83a 	sub	r16,r16,r3
    c440:	1210703a 	and	r8,r2,r8
    c444:	003f3806 	br	c128 <__adddf3+0x7c>
    c448:	9007883a 	mov	r3,r18
    c44c:	0011883a 	mov	r8,zero
    c450:	0005883a 	mov	r2,zero
    c454:	003f4c06 	br	c188 <__adddf3+0xdc>
    c458:	498cb03a 	or	r6,r9,r6
    c45c:	300cc03a 	cmpne	r6,r6,zero
    c460:	0007883a 	mov	r3,zero
    c464:	003f6806 	br	c208 <__adddf3+0x15c>
    c468:	20009c1e 	bne	r4,zero,c6dc <__adddf3+0x630>
    c46c:	80800044 	addi	r2,r16,1
    c470:	1141ffcc 	andi	r5,r2,2047
    c474:	01000044 	movi	r4,1
    c478:	2140670e 	bge	r4,r5,c618 <__adddf3+0x56c>
    c47c:	0101ffc4 	movi	r4,2047
    c480:	11007f26 	beq	r2,r4,c680 <__adddf3+0x5d4>
    c484:	898d883a 	add	r6,r17,r6
    c488:	4247883a 	add	r3,r8,r9
    c48c:	3451803a 	cmpltu	r8,r6,r17
    c490:	40d1883a 	add	r8,r8,r3
    c494:	402297fa 	slli	r17,r8,31
    c498:	300cd07a 	srli	r6,r6,1
    c49c:	4010d07a 	srli	r8,r8,1
    c4a0:	1021883a 	mov	r16,r2
    c4a4:	89a2b03a 	or	r17,r17,r6
    c4a8:	003f1f06 	br	c128 <__adddf3+0x7c>
    c4ac:	0081ffc4 	movi	r2,2047
    c4b0:	80bf481e 	bne	r16,r2,c1d4 <__adddf3+0x128>
    c4b4:	003f1c06 	br	c128 <__adddf3+0x7c>
    c4b8:	843ff844 	addi	r16,r16,-31
    c4bc:	01000804 	movi	r4,32
    c4c0:	1406d83a 	srl	r3,r2,r16
    c4c4:	41005026 	beq	r8,r4,c608 <__adddf3+0x55c>
    c4c8:	01001004 	movi	r4,64
    c4cc:	2211c83a 	sub	r8,r4,r8
    c4d0:	1204983a 	sll	r2,r2,r8
    c4d4:	88a2b03a 	or	r17,r17,r2
    c4d8:	8822c03a 	cmpne	r17,r17,zero
    c4dc:	1c62b03a 	or	r17,r3,r17
    c4e0:	0011883a 	mov	r8,zero
    c4e4:	0021883a 	mov	r16,zero
    c4e8:	003f7106 	br	c2b0 <__adddf3+0x204>
    c4ec:	193ff804 	addi	r4,r3,-32
    c4f0:	00800804 	movi	r2,32
    c4f4:	4908d83a 	srl	r4,r9,r4
    c4f8:	18804526 	beq	r3,r2,c610 <__adddf3+0x564>
    c4fc:	00801004 	movi	r2,64
    c500:	10c5c83a 	sub	r2,r2,r3
    c504:	4886983a 	sll	r3,r9,r2
    c508:	198cb03a 	or	r6,r3,r6
    c50c:	300cc03a 	cmpne	r6,r6,zero
    c510:	218cb03a 	or	r6,r4,r6
    c514:	0007883a 	mov	r3,zero
    c518:	003f3b06 	br	c208 <__adddf3+0x15c>
    c51c:	80002a26 	beq	r16,zero,c5c8 <__adddf3+0x51c>
    c520:	0101ffc4 	movi	r4,2047
    c524:	11006826 	beq	r2,r4,c6c8 <__adddf3+0x61c>
    c528:	00c7c83a 	sub	r3,zero,r3
    c52c:	42002034 	orhi	r8,r8,128
    c530:	01000e04 	movi	r4,56
    c534:	20c07c16 	blt	r4,r3,c728 <__adddf3+0x67c>
    c538:	010007c4 	movi	r4,31
    c53c:	20c0da16 	blt	r4,r3,c8a8 <__adddf3+0x7fc>
    c540:	01000804 	movi	r4,32
    c544:	20c9c83a 	sub	r4,r4,r3
    c548:	4114983a 	sll	r10,r8,r4
    c54c:	88cad83a 	srl	r5,r17,r3
    c550:	8908983a 	sll	r4,r17,r4
    c554:	40c6d83a 	srl	r3,r8,r3
    c558:	5162b03a 	or	r17,r10,r5
    c55c:	2008c03a 	cmpne	r4,r4,zero
    c560:	8922b03a 	or	r17,r17,r4
    c564:	3463c83a 	sub	r17,r6,r17
    c568:	48c7c83a 	sub	r3,r9,r3
    c56c:	344d803a 	cmpltu	r6,r6,r17
    c570:	1991c83a 	sub	r8,r3,r6
    c574:	1021883a 	mov	r16,r2
    c578:	3825883a 	mov	r18,r7
    c57c:	003f2706 	br	c21c <__adddf3+0x170>
    c580:	24d0b03a 	or	r8,r4,r19
    c584:	40001b1e 	bne	r8,zero,c5f4 <__adddf3+0x548>
    c588:	0005883a 	mov	r2,zero
    c58c:	0007883a 	mov	r3,zero
    c590:	0021883a 	mov	r16,zero
    c594:	003f4d06 	br	c2cc <__adddf3+0x220>
    c598:	008007c4 	movi	r2,31
    c59c:	11003c16 	blt	r2,r4,c690 <__adddf3+0x5e4>
    c5a0:	00800804 	movi	r2,32
    c5a4:	1105c83a 	sub	r2,r2,r4
    c5a8:	488e983a 	sll	r7,r9,r2
    c5ac:	310ad83a 	srl	r5,r6,r4
    c5b0:	3084983a 	sll	r2,r6,r2
    c5b4:	4912d83a 	srl	r9,r9,r4
    c5b8:	394ab03a 	or	r5,r7,r5
    c5bc:	1004c03a 	cmpne	r2,r2,zero
    c5c0:	288ab03a 	or	r5,r5,r2
    c5c4:	003f5306 	br	c314 <__adddf3+0x268>
    c5c8:	4448b03a 	or	r4,r8,r17
    c5cc:	20003e26 	beq	r4,zero,c6c8 <__adddf3+0x61c>
    c5d0:	00c6303a 	nor	r3,zero,r3
    c5d4:	18003a1e 	bne	r3,zero,c6c0 <__adddf3+0x614>
    c5d8:	3463c83a 	sub	r17,r6,r17
    c5dc:	4a07c83a 	sub	r3,r9,r8
    c5e0:	344d803a 	cmpltu	r6,r6,r17
    c5e4:	1991c83a 	sub	r8,r3,r6
    c5e8:	1021883a 	mov	r16,r2
    c5ec:	3825883a 	mov	r18,r7
    c5f0:	003f0a06 	br	c21c <__adddf3+0x170>
    c5f4:	2023883a 	mov	r17,r4
    c5f8:	003f0d06 	br	c230 <__adddf3+0x184>
    c5fc:	0081ffc4 	movi	r2,2047
    c600:	80bf3f1e 	bne	r16,r2,c300 <__adddf3+0x254>
    c604:	003ec806 	br	c128 <__adddf3+0x7c>
    c608:	0005883a 	mov	r2,zero
    c60c:	003fb106 	br	c4d4 <__adddf3+0x428>
    c610:	0007883a 	mov	r3,zero
    c614:	003fbc06 	br	c508 <__adddf3+0x45c>
    c618:	4444b03a 	or	r2,r8,r17
    c61c:	8000871e 	bne	r16,zero,c83c <__adddf3+0x790>
    c620:	1000ba26 	beq	r2,zero,c90c <__adddf3+0x860>
    c624:	4984b03a 	or	r2,r9,r6
    c628:	103ebf26 	beq	r2,zero,c128 <__adddf3+0x7c>
    c62c:	8985883a 	add	r2,r17,r6
    c630:	4247883a 	add	r3,r8,r9
    c634:	1451803a 	cmpltu	r8,r2,r17
    c638:	40d1883a 	add	r8,r8,r3
    c63c:	40c0202c 	andhi	r3,r8,128
    c640:	1023883a 	mov	r17,r2
    c644:	183f1a26 	beq	r3,zero,c2b0 <__adddf3+0x204>
    c648:	00bfe034 	movhi	r2,65408
    c64c:	10bfffc4 	addi	r2,r2,-1
    c650:	2021883a 	mov	r16,r4
    c654:	4090703a 	and	r8,r8,r2
    c658:	003eb306 	br	c128 <__adddf3+0x7c>
    c65c:	4444b03a 	or	r2,r8,r17
    c660:	8000291e 	bne	r16,zero,c708 <__adddf3+0x65c>
    c664:	10004b1e 	bne	r2,zero,c794 <__adddf3+0x6e8>
    c668:	4990b03a 	or	r8,r9,r6
    c66c:	40008b26 	beq	r8,zero,c89c <__adddf3+0x7f0>
    c670:	4811883a 	mov	r8,r9
    c674:	3023883a 	mov	r17,r6
    c678:	3825883a 	mov	r18,r7
    c67c:	003eaa06 	br	c128 <__adddf3+0x7c>
    c680:	1021883a 	mov	r16,r2
    c684:	0011883a 	mov	r8,zero
    c688:	0005883a 	mov	r2,zero
    c68c:	003f0f06 	br	c2cc <__adddf3+0x220>
    c690:	217ff804 	addi	r5,r4,-32
    c694:	00800804 	movi	r2,32
    c698:	494ad83a 	srl	r5,r9,r5
    c69c:	20807d26 	beq	r4,r2,c894 <__adddf3+0x7e8>
    c6a0:	00801004 	movi	r2,64
    c6a4:	1109c83a 	sub	r4,r2,r4
    c6a8:	4912983a 	sll	r9,r9,r4
    c6ac:	498cb03a 	or	r6,r9,r6
    c6b0:	300cc03a 	cmpne	r6,r6,zero
    c6b4:	298ab03a 	or	r5,r5,r6
    c6b8:	0013883a 	mov	r9,zero
    c6bc:	003f1506 	br	c314 <__adddf3+0x268>
    c6c0:	0101ffc4 	movi	r4,2047
    c6c4:	113f9a1e 	bne	r2,r4,c530 <__adddf3+0x484>
    c6c8:	4811883a 	mov	r8,r9
    c6cc:	3023883a 	mov	r17,r6
    c6d0:	1021883a 	mov	r16,r2
    c6d4:	3825883a 	mov	r18,r7
    c6d8:	003e9306 	br	c128 <__adddf3+0x7c>
    c6dc:	8000161e 	bne	r16,zero,c738 <__adddf3+0x68c>
    c6e0:	444ab03a 	or	r5,r8,r17
    c6e4:	28005126 	beq	r5,zero,c82c <__adddf3+0x780>
    c6e8:	0108303a 	nor	r4,zero,r4
    c6ec:	20004d1e 	bne	r4,zero,c824 <__adddf3+0x778>
    c6f0:	89a3883a 	add	r17,r17,r6
    c6f4:	4253883a 	add	r9,r8,r9
    c6f8:	898d803a 	cmpltu	r6,r17,r6
    c6fc:	3251883a 	add	r8,r6,r9
    c700:	1021883a 	mov	r16,r2
    c704:	003f0806 	br	c328 <__adddf3+0x27c>
    c708:	1000301e 	bne	r2,zero,c7cc <__adddf3+0x720>
    c70c:	4984b03a 	or	r2,r9,r6
    c710:	10007126 	beq	r2,zero,c8d8 <__adddf3+0x82c>
    c714:	4811883a 	mov	r8,r9
    c718:	3023883a 	mov	r17,r6
    c71c:	3825883a 	mov	r18,r7
    c720:	0401ffc4 	movi	r16,2047
    c724:	003e8006 	br	c128 <__adddf3+0x7c>
    c728:	4462b03a 	or	r17,r8,r17
    c72c:	8822c03a 	cmpne	r17,r17,zero
    c730:	0007883a 	mov	r3,zero
    c734:	003f8b06 	br	c564 <__adddf3+0x4b8>
    c738:	0141ffc4 	movi	r5,2047
    c73c:	11403b26 	beq	r2,r5,c82c <__adddf3+0x780>
    c740:	0109c83a 	sub	r4,zero,r4
    c744:	42002034 	orhi	r8,r8,128
    c748:	01400e04 	movi	r5,56
    c74c:	29006716 	blt	r5,r4,c8ec <__adddf3+0x840>
    c750:	014007c4 	movi	r5,31
    c754:	29007016 	blt	r5,r4,c918 <__adddf3+0x86c>
    c758:	01400804 	movi	r5,32
    c75c:	290bc83a 	sub	r5,r5,r4
    c760:	4154983a 	sll	r10,r8,r5
    c764:	890ed83a 	srl	r7,r17,r4
    c768:	894a983a 	sll	r5,r17,r5
    c76c:	4108d83a 	srl	r4,r8,r4
    c770:	51e2b03a 	or	r17,r10,r7
    c774:	280ac03a 	cmpne	r5,r5,zero
    c778:	8962b03a 	or	r17,r17,r5
    c77c:	89a3883a 	add	r17,r17,r6
    c780:	2253883a 	add	r9,r4,r9
    c784:	898d803a 	cmpltu	r6,r17,r6
    c788:	3251883a 	add	r8,r6,r9
    c78c:	1021883a 	mov	r16,r2
    c790:	003ee506 	br	c328 <__adddf3+0x27c>
    c794:	4984b03a 	or	r2,r9,r6
    c798:	103e6326 	beq	r2,zero,c128 <__adddf3+0x7c>
    c79c:	8987c83a 	sub	r3,r17,r6
    c7a0:	88c9803a 	cmpltu	r4,r17,r3
    c7a4:	4245c83a 	sub	r2,r8,r9
    c7a8:	1105c83a 	sub	r2,r2,r4
    c7ac:	1100202c 	andhi	r4,r2,128
    c7b0:	203ebb26 	beq	r4,zero,c2a0 <__adddf3+0x1f4>
    c7b4:	3463c83a 	sub	r17,r6,r17
    c7b8:	4a07c83a 	sub	r3,r9,r8
    c7bc:	344d803a 	cmpltu	r6,r6,r17
    c7c0:	1991c83a 	sub	r8,r3,r6
    c7c4:	3825883a 	mov	r18,r7
    c7c8:	003e5706 	br	c128 <__adddf3+0x7c>
    c7cc:	4984b03a 	or	r2,r9,r6
    c7d0:	10002e26 	beq	r2,zero,c88c <__adddf3+0x7e0>
    c7d4:	4004d0fa 	srli	r2,r8,3
    c7d8:	8822d0fa 	srli	r17,r17,3
    c7dc:	4010977a 	slli	r8,r8,29
    c7e0:	10c0022c 	andhi	r3,r2,8
    c7e4:	4462b03a 	or	r17,r8,r17
    c7e8:	18000826 	beq	r3,zero,c80c <__adddf3+0x760>
    c7ec:	4808d0fa 	srli	r4,r9,3
    c7f0:	20c0022c 	andhi	r3,r4,8
    c7f4:	1800051e 	bne	r3,zero,c80c <__adddf3+0x760>
    c7f8:	300cd0fa 	srli	r6,r6,3
    c7fc:	4806977a 	slli	r3,r9,29
    c800:	2005883a 	mov	r2,r4
    c804:	3825883a 	mov	r18,r7
    c808:	19a2b03a 	or	r17,r3,r6
    c80c:	8810d77a 	srli	r8,r17,29
    c810:	100490fa 	slli	r2,r2,3
    c814:	882290fa 	slli	r17,r17,3
    c818:	0401ffc4 	movi	r16,2047
    c81c:	4090b03a 	or	r8,r8,r2
    c820:	003e4106 	br	c128 <__adddf3+0x7c>
    c824:	0141ffc4 	movi	r5,2047
    c828:	117fc71e 	bne	r2,r5,c748 <__adddf3+0x69c>
    c82c:	4811883a 	mov	r8,r9
    c830:	3023883a 	mov	r17,r6
    c834:	1021883a 	mov	r16,r2
    c838:	003e3b06 	br	c128 <__adddf3+0x7c>
    c83c:	10002f26 	beq	r2,zero,c8fc <__adddf3+0x850>
    c840:	4984b03a 	or	r2,r9,r6
    c844:	10001126 	beq	r2,zero,c88c <__adddf3+0x7e0>
    c848:	4004d0fa 	srli	r2,r8,3
    c84c:	8822d0fa 	srli	r17,r17,3
    c850:	4010977a 	slli	r8,r8,29
    c854:	10c0022c 	andhi	r3,r2,8
    c858:	4462b03a 	or	r17,r8,r17
    c85c:	183feb26 	beq	r3,zero,c80c <__adddf3+0x760>
    c860:	4808d0fa 	srli	r4,r9,3
    c864:	20c0022c 	andhi	r3,r4,8
    c868:	183fe81e 	bne	r3,zero,c80c <__adddf3+0x760>
    c86c:	300cd0fa 	srli	r6,r6,3
    c870:	4806977a 	slli	r3,r9,29
    c874:	2005883a 	mov	r2,r4
    c878:	19a2b03a 	or	r17,r3,r6
    c87c:	003fe306 	br	c80c <__adddf3+0x760>
    c880:	0011883a 	mov	r8,zero
    c884:	0005883a 	mov	r2,zero
    c888:	003e3f06 	br	c188 <__adddf3+0xdc>
    c88c:	0401ffc4 	movi	r16,2047
    c890:	003e2506 	br	c128 <__adddf3+0x7c>
    c894:	0013883a 	mov	r9,zero
    c898:	003f8406 	br	c6ac <__adddf3+0x600>
    c89c:	0005883a 	mov	r2,zero
    c8a0:	0007883a 	mov	r3,zero
    c8a4:	003e8906 	br	c2cc <__adddf3+0x220>
    c8a8:	197ff804 	addi	r5,r3,-32
    c8ac:	01000804 	movi	r4,32
    c8b0:	414ad83a 	srl	r5,r8,r5
    c8b4:	19002426 	beq	r3,r4,c948 <__adddf3+0x89c>
    c8b8:	01001004 	movi	r4,64
    c8bc:	20c7c83a 	sub	r3,r4,r3
    c8c0:	40c6983a 	sll	r3,r8,r3
    c8c4:	1c46b03a 	or	r3,r3,r17
    c8c8:	1806c03a 	cmpne	r3,r3,zero
    c8cc:	28e2b03a 	or	r17,r5,r3
    c8d0:	0007883a 	mov	r3,zero
    c8d4:	003f2306 	br	c564 <__adddf3+0x4b8>
    c8d8:	0007883a 	mov	r3,zero
    c8dc:	5811883a 	mov	r8,r11
    c8e0:	00bfffc4 	movi	r2,-1
    c8e4:	0401ffc4 	movi	r16,2047
    c8e8:	003e7806 	br	c2cc <__adddf3+0x220>
    c8ec:	4462b03a 	or	r17,r8,r17
    c8f0:	8822c03a 	cmpne	r17,r17,zero
    c8f4:	0009883a 	mov	r4,zero
    c8f8:	003fa006 	br	c77c <__adddf3+0x6d0>
    c8fc:	4811883a 	mov	r8,r9
    c900:	3023883a 	mov	r17,r6
    c904:	0401ffc4 	movi	r16,2047
    c908:	003e0706 	br	c128 <__adddf3+0x7c>
    c90c:	4811883a 	mov	r8,r9
    c910:	3023883a 	mov	r17,r6
    c914:	003e0406 	br	c128 <__adddf3+0x7c>
    c918:	21fff804 	addi	r7,r4,-32
    c91c:	01400804 	movi	r5,32
    c920:	41ced83a 	srl	r7,r8,r7
    c924:	21400a26 	beq	r4,r5,c950 <__adddf3+0x8a4>
    c928:	01401004 	movi	r5,64
    c92c:	2909c83a 	sub	r4,r5,r4
    c930:	4108983a 	sll	r4,r8,r4
    c934:	2448b03a 	or	r4,r4,r17
    c938:	2008c03a 	cmpne	r4,r4,zero
    c93c:	3922b03a 	or	r17,r7,r4
    c940:	0009883a 	mov	r4,zero
    c944:	003f8d06 	br	c77c <__adddf3+0x6d0>
    c948:	0007883a 	mov	r3,zero
    c94c:	003fdd06 	br	c8c4 <__adddf3+0x818>
    c950:	0009883a 	mov	r4,zero
    c954:	003ff706 	br	c934 <__adddf3+0x888>

0000c958 <__divdf3>:
    c958:	defff204 	addi	sp,sp,-56
    c95c:	dd400915 	stw	r21,36(sp)
    c960:	282ad53a 	srli	r21,r5,20
    c964:	dd000815 	stw	r20,32(sp)
    c968:	2828d7fa 	srli	r20,r5,31
    c96c:	dc000415 	stw	r16,16(sp)
    c970:	04000434 	movhi	r16,16
    c974:	df000c15 	stw	fp,48(sp)
    c978:	843fffc4 	addi	r16,r16,-1
    c97c:	dfc00d15 	stw	ra,52(sp)
    c980:	ddc00b15 	stw	r23,44(sp)
    c984:	dd800a15 	stw	r22,40(sp)
    c988:	dcc00715 	stw	r19,28(sp)
    c98c:	dc800615 	stw	r18,24(sp)
    c990:	dc400515 	stw	r17,20(sp)
    c994:	ad41ffcc 	andi	r21,r21,2047
    c998:	2c20703a 	and	r16,r5,r16
    c99c:	a7003fcc 	andi	fp,r20,255
    c9a0:	a8006126 	beq	r21,zero,cb28 <__divdf3+0x1d0>
    c9a4:	0081ffc4 	movi	r2,2047
    c9a8:	2025883a 	mov	r18,r4
    c9ac:	a8803726 	beq	r21,r2,ca8c <__divdf3+0x134>
    c9b0:	80800434 	orhi	r2,r16,16
    c9b4:	100490fa 	slli	r2,r2,3
    c9b8:	2020d77a 	srli	r16,r4,29
    c9bc:	202490fa 	slli	r18,r4,3
    c9c0:	ad7f0044 	addi	r21,r21,-1023
    c9c4:	80a0b03a 	or	r16,r16,r2
    c9c8:	0027883a 	mov	r19,zero
    c9cc:	0013883a 	mov	r9,zero
    c9d0:	3804d53a 	srli	r2,r7,20
    c9d4:	382cd7fa 	srli	r22,r7,31
    c9d8:	04400434 	movhi	r17,16
    c9dc:	8c7fffc4 	addi	r17,r17,-1
    c9e0:	1081ffcc 	andi	r2,r2,2047
    c9e4:	3011883a 	mov	r8,r6
    c9e8:	3c62703a 	and	r17,r7,r17
    c9ec:	b5c03fcc 	andi	r23,r22,255
    c9f0:	10006c26 	beq	r2,zero,cba4 <__divdf3+0x24c>
    c9f4:	00c1ffc4 	movi	r3,2047
    c9f8:	10c06426 	beq	r2,r3,cb8c <__divdf3+0x234>
    c9fc:	88c00434 	orhi	r3,r17,16
    ca00:	180690fa 	slli	r3,r3,3
    ca04:	3022d77a 	srli	r17,r6,29
    ca08:	301090fa 	slli	r8,r6,3
    ca0c:	10bf0044 	addi	r2,r2,-1023
    ca10:	88e2b03a 	or	r17,r17,r3
    ca14:	000f883a 	mov	r7,zero
    ca18:	a58cf03a 	xor	r6,r20,r22
    ca1c:	3cc8b03a 	or	r4,r7,r19
    ca20:	a8abc83a 	sub	r21,r21,r2
    ca24:	008003c4 	movi	r2,15
    ca28:	3007883a 	mov	r3,r6
    ca2c:	34c03fcc 	andi	r19,r6,255
    ca30:	11009036 	bltu	r2,r4,cc74 <__divdf3+0x31c>
    ca34:	200890ba 	slli	r4,r4,2
    ca38:	00800074 	movhi	r2,1
    ca3c:	10b29304 	addi	r2,r2,-13748
    ca40:	2089883a 	add	r4,r4,r2
    ca44:	20800017 	ldw	r2,0(r4)
    ca48:	1000683a 	jmp	r2
    ca4c:	0000cc74 	movhi	zero,817
    ca50:	0000cac4 	movi	zero,811
    ca54:	0000cc64 	muli	zero,zero,817
    ca58:	0000cab8 	rdprs	zero,zero,810
    ca5c:	0000cc64 	muli	zero,zero,817
    ca60:	0000cc38 	rdprs	zero,zero,816
    ca64:	0000cc64 	muli	zero,zero,817
    ca68:	0000cab8 	rdprs	zero,zero,810
    ca6c:	0000cac4 	movi	zero,811
    ca70:	0000cac4 	movi	zero,811
    ca74:	0000cc38 	rdprs	zero,zero,816
    ca78:	0000cab8 	rdprs	zero,zero,810
    ca7c:	0000caa8 	cmpgeui	zero,zero,810
    ca80:	0000caa8 	cmpgeui	zero,zero,810
    ca84:	0000caa8 	cmpgeui	zero,zero,810
    ca88:	0000cf58 	cmpnei	zero,zero,829
    ca8c:	2404b03a 	or	r2,r4,r16
    ca90:	1000661e 	bne	r2,zero,cc2c <__divdf3+0x2d4>
    ca94:	04c00204 	movi	r19,8
    ca98:	0021883a 	mov	r16,zero
    ca9c:	0025883a 	mov	r18,zero
    caa0:	02400084 	movi	r9,2
    caa4:	003fca06 	br	c9d0 <__divdf3+0x78>
    caa8:	8023883a 	mov	r17,r16
    caac:	9011883a 	mov	r8,r18
    cab0:	e02f883a 	mov	r23,fp
    cab4:	480f883a 	mov	r7,r9
    cab8:	00800084 	movi	r2,2
    cabc:	3881311e 	bne	r7,r2,cf84 <__divdf3+0x62c>
    cac0:	b827883a 	mov	r19,r23
    cac4:	98c0004c 	andi	r3,r19,1
    cac8:	0081ffc4 	movi	r2,2047
    cacc:	000b883a 	mov	r5,zero
    cad0:	0025883a 	mov	r18,zero
    cad4:	1004953a 	slli	r2,r2,20
    cad8:	18c03fcc 	andi	r3,r3,255
    cadc:	04400434 	movhi	r17,16
    cae0:	8c7fffc4 	addi	r17,r17,-1
    cae4:	180697fa 	slli	r3,r3,31
    cae8:	2c4a703a 	and	r5,r5,r17
    caec:	288ab03a 	or	r5,r5,r2
    caf0:	28c6b03a 	or	r3,r5,r3
    caf4:	9005883a 	mov	r2,r18
    caf8:	dfc00d17 	ldw	ra,52(sp)
    cafc:	df000c17 	ldw	fp,48(sp)
    cb00:	ddc00b17 	ldw	r23,44(sp)
    cb04:	dd800a17 	ldw	r22,40(sp)
    cb08:	dd400917 	ldw	r21,36(sp)
    cb0c:	dd000817 	ldw	r20,32(sp)
    cb10:	dcc00717 	ldw	r19,28(sp)
    cb14:	dc800617 	ldw	r18,24(sp)
    cb18:	dc400517 	ldw	r17,20(sp)
    cb1c:	dc000417 	ldw	r16,16(sp)
    cb20:	dec00e04 	addi	sp,sp,56
    cb24:	f800283a 	ret
    cb28:	2404b03a 	or	r2,r4,r16
    cb2c:	2027883a 	mov	r19,r4
    cb30:	10003926 	beq	r2,zero,cc18 <__divdf3+0x2c0>
    cb34:	80012e26 	beq	r16,zero,cff0 <__divdf3+0x698>
    cb38:	8009883a 	mov	r4,r16
    cb3c:	d9800315 	stw	r6,12(sp)
    cb40:	d9c00215 	stw	r7,8(sp)
    cb44:	000e6b00 	call	e6b0 <__clzsi2>
    cb48:	d9800317 	ldw	r6,12(sp)
    cb4c:	d9c00217 	ldw	r7,8(sp)
    cb50:	113ffd44 	addi	r4,r2,-11
    cb54:	00c00704 	movi	r3,28
    cb58:	19012116 	blt	r3,r4,cfe0 <__divdf3+0x688>
    cb5c:	00c00744 	movi	r3,29
    cb60:	147ffe04 	addi	r17,r2,-8
    cb64:	1907c83a 	sub	r3,r3,r4
    cb68:	8460983a 	sll	r16,r16,r17
    cb6c:	98c6d83a 	srl	r3,r19,r3
    cb70:	9c64983a 	sll	r18,r19,r17
    cb74:	1c20b03a 	or	r16,r3,r16
    cb78:	1080fcc4 	addi	r2,r2,1011
    cb7c:	00abc83a 	sub	r21,zero,r2
    cb80:	0027883a 	mov	r19,zero
    cb84:	0013883a 	mov	r9,zero
    cb88:	003f9106 	br	c9d0 <__divdf3+0x78>
    cb8c:	3446b03a 	or	r3,r6,r17
    cb90:	18001f1e 	bne	r3,zero,cc10 <__divdf3+0x2b8>
    cb94:	0023883a 	mov	r17,zero
    cb98:	0011883a 	mov	r8,zero
    cb9c:	01c00084 	movi	r7,2
    cba0:	003f9d06 	br	ca18 <__divdf3+0xc0>
    cba4:	3446b03a 	or	r3,r6,r17
    cba8:	18001526 	beq	r3,zero,cc00 <__divdf3+0x2a8>
    cbac:	88011b26 	beq	r17,zero,d01c <__divdf3+0x6c4>
    cbb0:	8809883a 	mov	r4,r17
    cbb4:	d9800315 	stw	r6,12(sp)
    cbb8:	da400115 	stw	r9,4(sp)
    cbbc:	000e6b00 	call	e6b0 <__clzsi2>
    cbc0:	d9800317 	ldw	r6,12(sp)
    cbc4:	da400117 	ldw	r9,4(sp)
    cbc8:	113ffd44 	addi	r4,r2,-11
    cbcc:	00c00704 	movi	r3,28
    cbd0:	19010e16 	blt	r3,r4,d00c <__divdf3+0x6b4>
    cbd4:	00c00744 	movi	r3,29
    cbd8:	123ffe04 	addi	r8,r2,-8
    cbdc:	1907c83a 	sub	r3,r3,r4
    cbe0:	8a22983a 	sll	r17,r17,r8
    cbe4:	30c6d83a 	srl	r3,r6,r3
    cbe8:	3210983a 	sll	r8,r6,r8
    cbec:	1c62b03a 	or	r17,r3,r17
    cbf0:	1080fcc4 	addi	r2,r2,1011
    cbf4:	0085c83a 	sub	r2,zero,r2
    cbf8:	000f883a 	mov	r7,zero
    cbfc:	003f8606 	br	ca18 <__divdf3+0xc0>
    cc00:	0023883a 	mov	r17,zero
    cc04:	0011883a 	mov	r8,zero
    cc08:	01c00044 	movi	r7,1
    cc0c:	003f8206 	br	ca18 <__divdf3+0xc0>
    cc10:	01c000c4 	movi	r7,3
    cc14:	003f8006 	br	ca18 <__divdf3+0xc0>
    cc18:	04c00104 	movi	r19,4
    cc1c:	0021883a 	mov	r16,zero
    cc20:	0025883a 	mov	r18,zero
    cc24:	02400044 	movi	r9,1
    cc28:	003f6906 	br	c9d0 <__divdf3+0x78>
    cc2c:	04c00304 	movi	r19,12
    cc30:	024000c4 	movi	r9,3
    cc34:	003f6606 	br	c9d0 <__divdf3+0x78>
    cc38:	01400434 	movhi	r5,16
    cc3c:	0007883a 	mov	r3,zero
    cc40:	297fffc4 	addi	r5,r5,-1
    cc44:	04bfffc4 	movi	r18,-1
    cc48:	0081ffc4 	movi	r2,2047
    cc4c:	003fa106 	br	cad4 <__divdf3+0x17c>
    cc50:	00c00044 	movi	r3,1
    cc54:	1887c83a 	sub	r3,r3,r2
    cc58:	01000e04 	movi	r4,56
    cc5c:	20c1210e 	bge	r4,r3,d0e4 <__divdf3+0x78c>
    cc60:	98c0004c 	andi	r3,r19,1
    cc64:	0005883a 	mov	r2,zero
    cc68:	000b883a 	mov	r5,zero
    cc6c:	0025883a 	mov	r18,zero
    cc70:	003f9806 	br	cad4 <__divdf3+0x17c>
    cc74:	8c00fd36 	bltu	r17,r16,d06c <__divdf3+0x714>
    cc78:	8440fb26 	beq	r16,r17,d068 <__divdf3+0x710>
    cc7c:	8007883a 	mov	r3,r16
    cc80:	ad7fffc4 	addi	r21,r21,-1
    cc84:	0021883a 	mov	r16,zero
    cc88:	4004d63a 	srli	r2,r8,24
    cc8c:	8822923a 	slli	r17,r17,8
    cc90:	1809883a 	mov	r4,r3
    cc94:	402c923a 	slli	r22,r8,8
    cc98:	88b8b03a 	or	fp,r17,r2
    cc9c:	e028d43a 	srli	r20,fp,16
    cca0:	d8c00015 	stw	r3,0(sp)
    cca4:	e5ffffcc 	andi	r23,fp,65535
    cca8:	a00b883a 	mov	r5,r20
    ccac:	0001ec40 	call	1ec4 <__udivsi3>
    ccb0:	d8c00017 	ldw	r3,0(sp)
    ccb4:	a00b883a 	mov	r5,r20
    ccb8:	d8800315 	stw	r2,12(sp)
    ccbc:	1809883a 	mov	r4,r3
    ccc0:	0001f280 	call	1f28 <__umodsi3>
    ccc4:	d9800317 	ldw	r6,12(sp)
    ccc8:	1006943a 	slli	r3,r2,16
    cccc:	9004d43a 	srli	r2,r18,16
    ccd0:	b9a3383a 	mul	r17,r23,r6
    ccd4:	10c4b03a 	or	r2,r2,r3
    ccd8:	1440062e 	bgeu	r2,r17,ccf4 <__divdf3+0x39c>
    ccdc:	1705883a 	add	r2,r2,fp
    cce0:	30ffffc4 	addi	r3,r6,-1
    cce4:	1700ee36 	bltu	r2,fp,d0a0 <__divdf3+0x748>
    cce8:	1440ed2e 	bgeu	r2,r17,d0a0 <__divdf3+0x748>
    ccec:	31bfff84 	addi	r6,r6,-2
    ccf0:	1705883a 	add	r2,r2,fp
    ccf4:	1463c83a 	sub	r17,r2,r17
    ccf8:	a00b883a 	mov	r5,r20
    ccfc:	8809883a 	mov	r4,r17
    cd00:	d9800315 	stw	r6,12(sp)
    cd04:	0001ec40 	call	1ec4 <__udivsi3>
    cd08:	a00b883a 	mov	r5,r20
    cd0c:	8809883a 	mov	r4,r17
    cd10:	d8800215 	stw	r2,8(sp)
    cd14:	0001f280 	call	1f28 <__umodsi3>
    cd18:	d9c00217 	ldw	r7,8(sp)
    cd1c:	1004943a 	slli	r2,r2,16
    cd20:	94bfffcc 	andi	r18,r18,65535
    cd24:	b9d1383a 	mul	r8,r23,r7
    cd28:	90a4b03a 	or	r18,r18,r2
    cd2c:	d9800317 	ldw	r6,12(sp)
    cd30:	9200062e 	bgeu	r18,r8,cd4c <__divdf3+0x3f4>
    cd34:	9725883a 	add	r18,r18,fp
    cd38:	38bfffc4 	addi	r2,r7,-1
    cd3c:	9700d636 	bltu	r18,fp,d098 <__divdf3+0x740>
    cd40:	9200d52e 	bgeu	r18,r8,d098 <__divdf3+0x740>
    cd44:	39ffff84 	addi	r7,r7,-2
    cd48:	9725883a 	add	r18,r18,fp
    cd4c:	3004943a 	slli	r2,r6,16
    cd50:	b012d43a 	srli	r9,r22,16
    cd54:	b1bfffcc 	andi	r6,r22,65535
    cd58:	11e2b03a 	or	r17,r2,r7
    cd5c:	8806d43a 	srli	r3,r17,16
    cd60:	893fffcc 	andi	r4,r17,65535
    cd64:	218b383a 	mul	r5,r4,r6
    cd68:	30c5383a 	mul	r2,r6,r3
    cd6c:	2249383a 	mul	r4,r4,r9
    cd70:	280ed43a 	srli	r7,r5,16
    cd74:	9225c83a 	sub	r18,r18,r8
    cd78:	2089883a 	add	r4,r4,r2
    cd7c:	3909883a 	add	r4,r7,r4
    cd80:	1a47383a 	mul	r3,r3,r9
    cd84:	2080022e 	bgeu	r4,r2,cd90 <__divdf3+0x438>
    cd88:	00800074 	movhi	r2,1
    cd8c:	1887883a 	add	r3,r3,r2
    cd90:	2004d43a 	srli	r2,r4,16
    cd94:	2008943a 	slli	r4,r4,16
    cd98:	297fffcc 	andi	r5,r5,65535
    cd9c:	10c7883a 	add	r3,r2,r3
    cda0:	2149883a 	add	r4,r4,r5
    cda4:	90c0a536 	bltu	r18,r3,d03c <__divdf3+0x6e4>
    cda8:	90c0bf26 	beq	r18,r3,d0a8 <__divdf3+0x750>
    cdac:	90c7c83a 	sub	r3,r18,r3
    cdb0:	810fc83a 	sub	r7,r16,r4
    cdb4:	81e5803a 	cmpltu	r18,r16,r7
    cdb8:	1ca5c83a 	sub	r18,r3,r18
    cdbc:	e480c126 	beq	fp,r18,d0c4 <__divdf3+0x76c>
    cdc0:	a00b883a 	mov	r5,r20
    cdc4:	9009883a 	mov	r4,r18
    cdc8:	d9800315 	stw	r6,12(sp)
    cdcc:	d9c00215 	stw	r7,8(sp)
    cdd0:	da400115 	stw	r9,4(sp)
    cdd4:	0001ec40 	call	1ec4 <__udivsi3>
    cdd8:	a00b883a 	mov	r5,r20
    cddc:	9009883a 	mov	r4,r18
    cde0:	d8800015 	stw	r2,0(sp)
    cde4:	0001f280 	call	1f28 <__umodsi3>
    cde8:	d9c00217 	ldw	r7,8(sp)
    cdec:	da000017 	ldw	r8,0(sp)
    cdf0:	1006943a 	slli	r3,r2,16
    cdf4:	3804d43a 	srli	r2,r7,16
    cdf8:	ba21383a 	mul	r16,r23,r8
    cdfc:	d9800317 	ldw	r6,12(sp)
    ce00:	10c4b03a 	or	r2,r2,r3
    ce04:	da400117 	ldw	r9,4(sp)
    ce08:	1400062e 	bgeu	r2,r16,ce24 <__divdf3+0x4cc>
    ce0c:	1705883a 	add	r2,r2,fp
    ce10:	40ffffc4 	addi	r3,r8,-1
    ce14:	1700ad36 	bltu	r2,fp,d0cc <__divdf3+0x774>
    ce18:	1400ac2e 	bgeu	r2,r16,d0cc <__divdf3+0x774>
    ce1c:	423fff84 	addi	r8,r8,-2
    ce20:	1705883a 	add	r2,r2,fp
    ce24:	1421c83a 	sub	r16,r2,r16
    ce28:	a00b883a 	mov	r5,r20
    ce2c:	8009883a 	mov	r4,r16
    ce30:	d9800315 	stw	r6,12(sp)
    ce34:	d9c00215 	stw	r7,8(sp)
    ce38:	da000015 	stw	r8,0(sp)
    ce3c:	da400115 	stw	r9,4(sp)
    ce40:	0001ec40 	call	1ec4 <__udivsi3>
    ce44:	8009883a 	mov	r4,r16
    ce48:	a00b883a 	mov	r5,r20
    ce4c:	1025883a 	mov	r18,r2
    ce50:	0001f280 	call	1f28 <__umodsi3>
    ce54:	d9c00217 	ldw	r7,8(sp)
    ce58:	1004943a 	slli	r2,r2,16
    ce5c:	bcaf383a 	mul	r23,r23,r18
    ce60:	393fffcc 	andi	r4,r7,65535
    ce64:	2088b03a 	or	r4,r4,r2
    ce68:	d9800317 	ldw	r6,12(sp)
    ce6c:	da000017 	ldw	r8,0(sp)
    ce70:	da400117 	ldw	r9,4(sp)
    ce74:	25c0062e 	bgeu	r4,r23,ce90 <__divdf3+0x538>
    ce78:	2709883a 	add	r4,r4,fp
    ce7c:	90bfffc4 	addi	r2,r18,-1
    ce80:	27009436 	bltu	r4,fp,d0d4 <__divdf3+0x77c>
    ce84:	25c0932e 	bgeu	r4,r23,d0d4 <__divdf3+0x77c>
    ce88:	94bfff84 	addi	r18,r18,-2
    ce8c:	2709883a 	add	r4,r4,fp
    ce90:	4004943a 	slli	r2,r8,16
    ce94:	25efc83a 	sub	r23,r4,r23
    ce98:	1490b03a 	or	r8,r2,r18
    ce9c:	4008d43a 	srli	r4,r8,16
    cea0:	40ffffcc 	andi	r3,r8,65535
    cea4:	30c5383a 	mul	r2,r6,r3
    cea8:	1a47383a 	mul	r3,r3,r9
    ceac:	310d383a 	mul	r6,r6,r4
    ceb0:	100ad43a 	srli	r5,r2,16
    ceb4:	4913383a 	mul	r9,r9,r4
    ceb8:	1987883a 	add	r3,r3,r6
    cebc:	28c7883a 	add	r3,r5,r3
    cec0:	1980022e 	bgeu	r3,r6,cecc <__divdf3+0x574>
    cec4:	01000074 	movhi	r4,1
    cec8:	4913883a 	add	r9,r9,r4
    cecc:	1808d43a 	srli	r4,r3,16
    ced0:	1806943a 	slli	r3,r3,16
    ced4:	10bfffcc 	andi	r2,r2,65535
    ced8:	2253883a 	add	r9,r4,r9
    cedc:	1887883a 	add	r3,r3,r2
    cee0:	ba403836 	bltu	r23,r9,cfc4 <__divdf3+0x66c>
    cee4:	ba403626 	beq	r23,r9,cfc0 <__divdf3+0x668>
    cee8:	42000054 	ori	r8,r8,1
    ceec:	a880ffc4 	addi	r2,r21,1023
    cef0:	00bf570e 	bge	zero,r2,cc50 <__divdf3+0x2f8>
    cef4:	40c001cc 	andi	r3,r8,7
    cef8:	18000726 	beq	r3,zero,cf18 <__divdf3+0x5c0>
    cefc:	40c003cc 	andi	r3,r8,15
    cf00:	01000104 	movi	r4,4
    cf04:	19000426 	beq	r3,r4,cf18 <__divdf3+0x5c0>
    cf08:	4107883a 	add	r3,r8,r4
    cf0c:	1a11803a 	cmpltu	r8,r3,r8
    cf10:	8a23883a 	add	r17,r17,r8
    cf14:	1811883a 	mov	r8,r3
    cf18:	88c0402c 	andhi	r3,r17,256
    cf1c:	18000426 	beq	r3,zero,cf30 <__divdf3+0x5d8>
    cf20:	00ffc034 	movhi	r3,65280
    cf24:	18ffffc4 	addi	r3,r3,-1
    cf28:	a8810004 	addi	r2,r21,1024
    cf2c:	88e2703a 	and	r17,r17,r3
    cf30:	00c1ff84 	movi	r3,2046
    cf34:	18bee316 	blt	r3,r2,cac4 <__divdf3+0x16c>
    cf38:	8824977a 	slli	r18,r17,29
    cf3c:	4010d0fa 	srli	r8,r8,3
    cf40:	8822927a 	slli	r17,r17,9
    cf44:	1081ffcc 	andi	r2,r2,2047
    cf48:	9224b03a 	or	r18,r18,r8
    cf4c:	880ad33a 	srli	r5,r17,12
    cf50:	98c0004c 	andi	r3,r19,1
    cf54:	003edf06 	br	cad4 <__divdf3+0x17c>
    cf58:	8080022c 	andhi	r2,r16,8
    cf5c:	10001226 	beq	r2,zero,cfa8 <__divdf3+0x650>
    cf60:	8880022c 	andhi	r2,r17,8
    cf64:	1000101e 	bne	r2,zero,cfa8 <__divdf3+0x650>
    cf68:	00800434 	movhi	r2,16
    cf6c:	89400234 	orhi	r5,r17,8
    cf70:	10bfffc4 	addi	r2,r2,-1
    cf74:	b007883a 	mov	r3,r22
    cf78:	288a703a 	and	r5,r5,r2
    cf7c:	4025883a 	mov	r18,r8
    cf80:	003f3106 	br	cc48 <__divdf3+0x2f0>
    cf84:	008000c4 	movi	r2,3
    cf88:	3880a626 	beq	r7,r2,d224 <__divdf3+0x8cc>
    cf8c:	00800044 	movi	r2,1
    cf90:	3880521e 	bne	r7,r2,d0dc <__divdf3+0x784>
    cf94:	b807883a 	mov	r3,r23
    cf98:	0005883a 	mov	r2,zero
    cf9c:	000b883a 	mov	r5,zero
    cfa0:	0025883a 	mov	r18,zero
    cfa4:	003ecb06 	br	cad4 <__divdf3+0x17c>
    cfa8:	00800434 	movhi	r2,16
    cfac:	81400234 	orhi	r5,r16,8
    cfb0:	10bfffc4 	addi	r2,r2,-1
    cfb4:	a007883a 	mov	r3,r20
    cfb8:	288a703a 	and	r5,r5,r2
    cfbc:	003f2206 	br	cc48 <__divdf3+0x2f0>
    cfc0:	183fca26 	beq	r3,zero,ceec <__divdf3+0x594>
    cfc4:	e5ef883a 	add	r23,fp,r23
    cfc8:	40bfffc4 	addi	r2,r8,-1
    cfcc:	bf00392e 	bgeu	r23,fp,d0b4 <__divdf3+0x75c>
    cfd0:	1011883a 	mov	r8,r2
    cfd4:	ba7fc41e 	bne	r23,r9,cee8 <__divdf3+0x590>
    cfd8:	b0ffc31e 	bne	r22,r3,cee8 <__divdf3+0x590>
    cfdc:	003fc306 	br	ceec <__divdf3+0x594>
    cfe0:	143ff604 	addi	r16,r2,-40
    cfe4:	9c20983a 	sll	r16,r19,r16
    cfe8:	0025883a 	mov	r18,zero
    cfec:	003ee206 	br	cb78 <__divdf3+0x220>
    cff0:	d9800315 	stw	r6,12(sp)
    cff4:	d9c00215 	stw	r7,8(sp)
    cff8:	000e6b00 	call	e6b0 <__clzsi2>
    cffc:	10800804 	addi	r2,r2,32
    d000:	d9c00217 	ldw	r7,8(sp)
    d004:	d9800317 	ldw	r6,12(sp)
    d008:	003ed106 	br	cb50 <__divdf3+0x1f8>
    d00c:	147ff604 	addi	r17,r2,-40
    d010:	3462983a 	sll	r17,r6,r17
    d014:	0011883a 	mov	r8,zero
    d018:	003ef506 	br	cbf0 <__divdf3+0x298>
    d01c:	3009883a 	mov	r4,r6
    d020:	d9800315 	stw	r6,12(sp)
    d024:	da400115 	stw	r9,4(sp)
    d028:	000e6b00 	call	e6b0 <__clzsi2>
    d02c:	10800804 	addi	r2,r2,32
    d030:	da400117 	ldw	r9,4(sp)
    d034:	d9800317 	ldw	r6,12(sp)
    d038:	003ee306 	br	cbc8 <__divdf3+0x270>
    d03c:	85a1883a 	add	r16,r16,r22
    d040:	8585803a 	cmpltu	r2,r16,r22
    d044:	1705883a 	add	r2,r2,fp
    d048:	14a5883a 	add	r18,r2,r18
    d04c:	88bfffc4 	addi	r2,r17,-1
    d050:	e4800c2e 	bgeu	fp,r18,d084 <__divdf3+0x72c>
    d054:	90c03e36 	bltu	r18,r3,d150 <__divdf3+0x7f8>
    d058:	1c806926 	beq	r3,r18,d200 <__divdf3+0x8a8>
    d05c:	90c7c83a 	sub	r3,r18,r3
    d060:	1023883a 	mov	r17,r2
    d064:	003f5206 	br	cdb0 <__divdf3+0x458>
    d068:	923f0436 	bltu	r18,r8,cc7c <__divdf3+0x324>
    d06c:	800897fa 	slli	r4,r16,31
    d070:	9004d07a 	srli	r2,r18,1
    d074:	8006d07a 	srli	r3,r16,1
    d078:	902097fa 	slli	r16,r18,31
    d07c:	20a4b03a 	or	r18,r4,r2
    d080:	003f0106 	br	cc88 <__divdf3+0x330>
    d084:	e4bff51e 	bne	fp,r18,d05c <__divdf3+0x704>
    d088:	85bff22e 	bgeu	r16,r22,d054 <__divdf3+0x6fc>
    d08c:	e0c7c83a 	sub	r3,fp,r3
    d090:	1023883a 	mov	r17,r2
    d094:	003f4606 	br	cdb0 <__divdf3+0x458>
    d098:	100f883a 	mov	r7,r2
    d09c:	003f2b06 	br	cd4c <__divdf3+0x3f4>
    d0a0:	180d883a 	mov	r6,r3
    d0a4:	003f1306 	br	ccf4 <__divdf3+0x39c>
    d0a8:	813fe436 	bltu	r16,r4,d03c <__divdf3+0x6e4>
    d0ac:	0007883a 	mov	r3,zero
    d0b0:	003f3f06 	br	cdb0 <__divdf3+0x458>
    d0b4:	ba402c36 	bltu	r23,r9,d168 <__divdf3+0x810>
    d0b8:	4dc05426 	beq	r9,r23,d20c <__divdf3+0x8b4>
    d0bc:	1011883a 	mov	r8,r2
    d0c0:	003f8906 	br	cee8 <__divdf3+0x590>
    d0c4:	023fffc4 	movi	r8,-1
    d0c8:	003f8806 	br	ceec <__divdf3+0x594>
    d0cc:	1811883a 	mov	r8,r3
    d0d0:	003f5406 	br	ce24 <__divdf3+0x4cc>
    d0d4:	1025883a 	mov	r18,r2
    d0d8:	003f6d06 	br	ce90 <__divdf3+0x538>
    d0dc:	b827883a 	mov	r19,r23
    d0e0:	003f8206 	br	ceec <__divdf3+0x594>
    d0e4:	010007c4 	movi	r4,31
    d0e8:	20c02616 	blt	r4,r3,d184 <__divdf3+0x82c>
    d0ec:	00800804 	movi	r2,32
    d0f0:	10c5c83a 	sub	r2,r2,r3
    d0f4:	888a983a 	sll	r5,r17,r2
    d0f8:	40c8d83a 	srl	r4,r8,r3
    d0fc:	4084983a 	sll	r2,r8,r2
    d100:	88e2d83a 	srl	r17,r17,r3
    d104:	2906b03a 	or	r3,r5,r4
    d108:	1004c03a 	cmpne	r2,r2,zero
    d10c:	1886b03a 	or	r3,r3,r2
    d110:	188001cc 	andi	r2,r3,7
    d114:	10000726 	beq	r2,zero,d134 <__divdf3+0x7dc>
    d118:	188003cc 	andi	r2,r3,15
    d11c:	01000104 	movi	r4,4
    d120:	11000426 	beq	r2,r4,d134 <__divdf3+0x7dc>
    d124:	1805883a 	mov	r2,r3
    d128:	10c00104 	addi	r3,r2,4
    d12c:	1885803a 	cmpltu	r2,r3,r2
    d130:	88a3883a 	add	r17,r17,r2
    d134:	8880202c 	andhi	r2,r17,128
    d138:	10002726 	beq	r2,zero,d1d8 <__divdf3+0x880>
    d13c:	98c0004c 	andi	r3,r19,1
    d140:	00800044 	movi	r2,1
    d144:	000b883a 	mov	r5,zero
    d148:	0025883a 	mov	r18,zero
    d14c:	003e6106 	br	cad4 <__divdf3+0x17c>
    d150:	85a1883a 	add	r16,r16,r22
    d154:	8585803a 	cmpltu	r2,r16,r22
    d158:	1705883a 	add	r2,r2,fp
    d15c:	14a5883a 	add	r18,r2,r18
    d160:	8c7fff84 	addi	r17,r17,-2
    d164:	003f1106 	br	cdac <__divdf3+0x454>
    d168:	b589883a 	add	r4,r22,r22
    d16c:	25ad803a 	cmpltu	r22,r4,r22
    d170:	b739883a 	add	fp,r22,fp
    d174:	40bfff84 	addi	r2,r8,-2
    d178:	bf2f883a 	add	r23,r23,fp
    d17c:	202d883a 	mov	r22,r4
    d180:	003f9306 	br	cfd0 <__divdf3+0x678>
    d184:	013ff844 	movi	r4,-31
    d188:	2085c83a 	sub	r2,r4,r2
    d18c:	8888d83a 	srl	r4,r17,r2
    d190:	00800804 	movi	r2,32
    d194:	18802126 	beq	r3,r2,d21c <__divdf3+0x8c4>
    d198:	00801004 	movi	r2,64
    d19c:	10c5c83a 	sub	r2,r2,r3
    d1a0:	8884983a 	sll	r2,r17,r2
    d1a4:	1204b03a 	or	r2,r2,r8
    d1a8:	1004c03a 	cmpne	r2,r2,zero
    d1ac:	2084b03a 	or	r2,r4,r2
    d1b0:	144001cc 	andi	r17,r2,7
    d1b4:	88000d1e 	bne	r17,zero,d1ec <__divdf3+0x894>
    d1b8:	000b883a 	mov	r5,zero
    d1bc:	1024d0fa 	srli	r18,r2,3
    d1c0:	98c0004c 	andi	r3,r19,1
    d1c4:	0005883a 	mov	r2,zero
    d1c8:	9464b03a 	or	r18,r18,r17
    d1cc:	003e4106 	br	cad4 <__divdf3+0x17c>
    d1d0:	1007883a 	mov	r3,r2
    d1d4:	0023883a 	mov	r17,zero
    d1d8:	880a927a 	slli	r5,r17,9
    d1dc:	1805883a 	mov	r2,r3
    d1e0:	8822977a 	slli	r17,r17,29
    d1e4:	280ad33a 	srli	r5,r5,12
    d1e8:	003ff406 	br	d1bc <__divdf3+0x864>
    d1ec:	10c003cc 	andi	r3,r2,15
    d1f0:	01000104 	movi	r4,4
    d1f4:	193ff626 	beq	r3,r4,d1d0 <__divdf3+0x878>
    d1f8:	0023883a 	mov	r17,zero
    d1fc:	003fca06 	br	d128 <__divdf3+0x7d0>
    d200:	813fd336 	bltu	r16,r4,d150 <__divdf3+0x7f8>
    d204:	1023883a 	mov	r17,r2
    d208:	003fa806 	br	d0ac <__divdf3+0x754>
    d20c:	b0ffd636 	bltu	r22,r3,d168 <__divdf3+0x810>
    d210:	1011883a 	mov	r8,r2
    d214:	b0ff341e 	bne	r22,r3,cee8 <__divdf3+0x590>
    d218:	003f3406 	br	ceec <__divdf3+0x594>
    d21c:	0005883a 	mov	r2,zero
    d220:	003fe006 	br	d1a4 <__divdf3+0x84c>
    d224:	00800434 	movhi	r2,16
    d228:	89400234 	orhi	r5,r17,8
    d22c:	10bfffc4 	addi	r2,r2,-1
    d230:	b807883a 	mov	r3,r23
    d234:	288a703a 	and	r5,r5,r2
    d238:	4025883a 	mov	r18,r8
    d23c:	003e8206 	br	cc48 <__divdf3+0x2f0>

0000d240 <__eqdf2>:
    d240:	2804d53a 	srli	r2,r5,20
    d244:	3806d53a 	srli	r3,r7,20
    d248:	02000434 	movhi	r8,16
    d24c:	423fffc4 	addi	r8,r8,-1
    d250:	1081ffcc 	andi	r2,r2,2047
    d254:	0281ffc4 	movi	r10,2047
    d258:	2a12703a 	and	r9,r5,r8
    d25c:	18c1ffcc 	andi	r3,r3,2047
    d260:	3a10703a 	and	r8,r7,r8
    d264:	280ad7fa 	srli	r5,r5,31
    d268:	380ed7fa 	srli	r7,r7,31
    d26c:	12801026 	beq	r2,r10,d2b0 <__eqdf2+0x70>
    d270:	0281ffc4 	movi	r10,2047
    d274:	1a800a26 	beq	r3,r10,d2a0 <__eqdf2+0x60>
    d278:	10c00226 	beq	r2,r3,d284 <__eqdf2+0x44>
    d27c:	00800044 	movi	r2,1
    d280:	f800283a 	ret
    d284:	4a3ffd1e 	bne	r9,r8,d27c <__eqdf2+0x3c>
    d288:	21bffc1e 	bne	r4,r6,d27c <__eqdf2+0x3c>
    d28c:	29c00c26 	beq	r5,r7,d2c0 <__eqdf2+0x80>
    d290:	103ffa1e 	bne	r2,zero,d27c <__eqdf2+0x3c>
    d294:	2244b03a 	or	r2,r4,r9
    d298:	1004c03a 	cmpne	r2,r2,zero
    d29c:	f800283a 	ret
    d2a0:	3214b03a 	or	r10,r6,r8
    d2a4:	503ff426 	beq	r10,zero,d278 <__eqdf2+0x38>
    d2a8:	00800044 	movi	r2,1
    d2ac:	f800283a 	ret
    d2b0:	2254b03a 	or	r10,r4,r9
    d2b4:	503fee26 	beq	r10,zero,d270 <__eqdf2+0x30>
    d2b8:	00800044 	movi	r2,1
    d2bc:	f800283a 	ret
    d2c0:	0005883a 	mov	r2,zero
    d2c4:	f800283a 	ret

0000d2c8 <__gedf2>:
    d2c8:	2804d53a 	srli	r2,r5,20
    d2cc:	3806d53a 	srli	r3,r7,20
    d2d0:	02000434 	movhi	r8,16
    d2d4:	423fffc4 	addi	r8,r8,-1
    d2d8:	1081ffcc 	andi	r2,r2,2047
    d2dc:	0241ffc4 	movi	r9,2047
    d2e0:	2a14703a 	and	r10,r5,r8
    d2e4:	18c1ffcc 	andi	r3,r3,2047
    d2e8:	3a10703a 	and	r8,r7,r8
    d2ec:	280ad7fa 	srli	r5,r5,31
    d2f0:	380ed7fa 	srli	r7,r7,31
    d2f4:	12401d26 	beq	r2,r9,d36c <__gedf2+0xa4>
    d2f8:	0241ffc4 	movi	r9,2047
    d2fc:	1a401226 	beq	r3,r9,d348 <__gedf2+0x80>
    d300:	1000081e 	bne	r2,zero,d324 <__gedf2+0x5c>
    d304:	2296b03a 	or	r11,r4,r10
    d308:	5813003a 	cmpeq	r9,r11,zero
    d30c:	1800091e 	bne	r3,zero,d334 <__gedf2+0x6c>
    d310:	3218b03a 	or	r12,r6,r8
    d314:	6000071e 	bne	r12,zero,d334 <__gedf2+0x6c>
    d318:	0005883a 	mov	r2,zero
    d31c:	5800101e 	bne	r11,zero,d360 <__gedf2+0x98>
    d320:	f800283a 	ret
    d324:	18000c1e 	bne	r3,zero,d358 <__gedf2+0x90>
    d328:	3212b03a 	or	r9,r6,r8
    d32c:	48000c26 	beq	r9,zero,d360 <__gedf2+0x98>
    d330:	0013883a 	mov	r9,zero
    d334:	39c03fcc 	andi	r7,r7,255
    d338:	48000826 	beq	r9,zero,d35c <__gedf2+0x94>
    d33c:	38000926 	beq	r7,zero,d364 <__gedf2+0x9c>
    d340:	00800044 	movi	r2,1
    d344:	f800283a 	ret
    d348:	3212b03a 	or	r9,r6,r8
    d34c:	483fec26 	beq	r9,zero,d300 <__gedf2+0x38>
    d350:	00bfff84 	movi	r2,-2
    d354:	f800283a 	ret
    d358:	39c03fcc 	andi	r7,r7,255
    d35c:	29c00626 	beq	r5,r7,d378 <__gedf2+0xb0>
    d360:	283ff726 	beq	r5,zero,d340 <__gedf2+0x78>
    d364:	00bfffc4 	movi	r2,-1
    d368:	f800283a 	ret
    d36c:	2292b03a 	or	r9,r4,r10
    d370:	483fe126 	beq	r9,zero,d2f8 <__gedf2+0x30>
    d374:	003ff606 	br	d350 <__gedf2+0x88>
    d378:	18bff916 	blt	r3,r2,d360 <__gedf2+0x98>
    d37c:	10c00316 	blt	r2,r3,d38c <__gedf2+0xc4>
    d380:	42bff736 	bltu	r8,r10,d360 <__gedf2+0x98>
    d384:	52000326 	beq	r10,r8,d394 <__gedf2+0xcc>
    d388:	5200042e 	bgeu	r10,r8,d39c <__gedf2+0xd4>
    d38c:	283fec1e 	bne	r5,zero,d340 <__gedf2+0x78>
    d390:	003ff406 	br	d364 <__gedf2+0x9c>
    d394:	313ff236 	bltu	r6,r4,d360 <__gedf2+0x98>
    d398:	21bffc36 	bltu	r4,r6,d38c <__gedf2+0xc4>
    d39c:	0005883a 	mov	r2,zero
    d3a0:	f800283a 	ret

0000d3a4 <__ledf2>:
    d3a4:	2804d53a 	srli	r2,r5,20
    d3a8:	3810d53a 	srli	r8,r7,20
    d3ac:	00c00434 	movhi	r3,16
    d3b0:	18ffffc4 	addi	r3,r3,-1
    d3b4:	1081ffcc 	andi	r2,r2,2047
    d3b8:	0241ffc4 	movi	r9,2047
    d3bc:	28d4703a 	and	r10,r5,r3
    d3c0:	4201ffcc 	andi	r8,r8,2047
    d3c4:	38c6703a 	and	r3,r7,r3
    d3c8:	280ad7fa 	srli	r5,r5,31
    d3cc:	380ed7fa 	srli	r7,r7,31
    d3d0:	12401f26 	beq	r2,r9,d450 <__ledf2+0xac>
    d3d4:	0241ffc4 	movi	r9,2047
    d3d8:	42401426 	beq	r8,r9,d42c <__ledf2+0x88>
    d3dc:	1000091e 	bne	r2,zero,d404 <__ledf2+0x60>
    d3e0:	2296b03a 	or	r11,r4,r10
    d3e4:	5813003a 	cmpeq	r9,r11,zero
    d3e8:	29403fcc 	andi	r5,r5,255
    d3ec:	40000a1e 	bne	r8,zero,d418 <__ledf2+0x74>
    d3f0:	30d8b03a 	or	r12,r6,r3
    d3f4:	6000081e 	bne	r12,zero,d418 <__ledf2+0x74>
    d3f8:	0005883a 	mov	r2,zero
    d3fc:	5800111e 	bne	r11,zero,d444 <__ledf2+0xa0>
    d400:	f800283a 	ret
    d404:	29403fcc 	andi	r5,r5,255
    d408:	40000c1e 	bne	r8,zero,d43c <__ledf2+0x98>
    d40c:	30d2b03a 	or	r9,r6,r3
    d410:	48000c26 	beq	r9,zero,d444 <__ledf2+0xa0>
    d414:	0013883a 	mov	r9,zero
    d418:	39c03fcc 	andi	r7,r7,255
    d41c:	48000826 	beq	r9,zero,d440 <__ledf2+0x9c>
    d420:	38001126 	beq	r7,zero,d468 <__ledf2+0xc4>
    d424:	00800044 	movi	r2,1
    d428:	f800283a 	ret
    d42c:	30d2b03a 	or	r9,r6,r3
    d430:	483fea26 	beq	r9,zero,d3dc <__ledf2+0x38>
    d434:	00800084 	movi	r2,2
    d438:	f800283a 	ret
    d43c:	39c03fcc 	andi	r7,r7,255
    d440:	39400726 	beq	r7,r5,d460 <__ledf2+0xbc>
    d444:	2800081e 	bne	r5,zero,d468 <__ledf2+0xc4>
    d448:	00800044 	movi	r2,1
    d44c:	f800283a 	ret
    d450:	2292b03a 	or	r9,r4,r10
    d454:	483fdf26 	beq	r9,zero,d3d4 <__ledf2+0x30>
    d458:	00800084 	movi	r2,2
    d45c:	f800283a 	ret
    d460:	4080030e 	bge	r8,r2,d470 <__ledf2+0xcc>
    d464:	383fef26 	beq	r7,zero,d424 <__ledf2+0x80>
    d468:	00bfffc4 	movi	r2,-1
    d46c:	f800283a 	ret
    d470:	123feb16 	blt	r2,r8,d420 <__ledf2+0x7c>
    d474:	1abff336 	bltu	r3,r10,d444 <__ledf2+0xa0>
    d478:	50c00326 	beq	r10,r3,d488 <__ledf2+0xe4>
    d47c:	50c0042e 	bgeu	r10,r3,d490 <__ledf2+0xec>
    d480:	283fe81e 	bne	r5,zero,d424 <__ledf2+0x80>
    d484:	003ff806 	br	d468 <__ledf2+0xc4>
    d488:	313fee36 	bltu	r6,r4,d444 <__ledf2+0xa0>
    d48c:	21bffc36 	bltu	r4,r6,d480 <__ledf2+0xdc>
    d490:	0005883a 	mov	r2,zero
    d494:	f800283a 	ret

0000d498 <__muldf3>:
    d498:	defff304 	addi	sp,sp,-52
    d49c:	2804d53a 	srli	r2,r5,20
    d4a0:	dd800915 	stw	r22,36(sp)
    d4a4:	282cd7fa 	srli	r22,r5,31
    d4a8:	dc000315 	stw	r16,12(sp)
    d4ac:	04000434 	movhi	r16,16
    d4b0:	dd400815 	stw	r21,32(sp)
    d4b4:	dc800515 	stw	r18,20(sp)
    d4b8:	843fffc4 	addi	r16,r16,-1
    d4bc:	dfc00c15 	stw	ra,48(sp)
    d4c0:	df000b15 	stw	fp,44(sp)
    d4c4:	ddc00a15 	stw	r23,40(sp)
    d4c8:	dd000715 	stw	r20,28(sp)
    d4cc:	dcc00615 	stw	r19,24(sp)
    d4d0:	dc400415 	stw	r17,16(sp)
    d4d4:	1481ffcc 	andi	r18,r2,2047
    d4d8:	2c20703a 	and	r16,r5,r16
    d4dc:	b02b883a 	mov	r21,r22
    d4e0:	b2403fcc 	andi	r9,r22,255
    d4e4:	90006026 	beq	r18,zero,d668 <__muldf3+0x1d0>
    d4e8:	0081ffc4 	movi	r2,2047
    d4ec:	2029883a 	mov	r20,r4
    d4f0:	90803626 	beq	r18,r2,d5cc <__muldf3+0x134>
    d4f4:	80800434 	orhi	r2,r16,16
    d4f8:	100490fa 	slli	r2,r2,3
    d4fc:	2020d77a 	srli	r16,r4,29
    d500:	202890fa 	slli	r20,r4,3
    d504:	94bf0044 	addi	r18,r18,-1023
    d508:	80a0b03a 	or	r16,r16,r2
    d50c:	0027883a 	mov	r19,zero
    d510:	0039883a 	mov	fp,zero
    d514:	3804d53a 	srli	r2,r7,20
    d518:	382ed7fa 	srli	r23,r7,31
    d51c:	04400434 	movhi	r17,16
    d520:	8c7fffc4 	addi	r17,r17,-1
    d524:	1081ffcc 	andi	r2,r2,2047
    d528:	3011883a 	mov	r8,r6
    d52c:	3c62703a 	and	r17,r7,r17
    d530:	ba803fcc 	andi	r10,r23,255
    d534:	10006d26 	beq	r2,zero,d6ec <__muldf3+0x254>
    d538:	00c1ffc4 	movi	r3,2047
    d53c:	10c06526 	beq	r2,r3,d6d4 <__muldf3+0x23c>
    d540:	88c00434 	orhi	r3,r17,16
    d544:	180690fa 	slli	r3,r3,3
    d548:	3022d77a 	srli	r17,r6,29
    d54c:	301090fa 	slli	r8,r6,3
    d550:	10bf0044 	addi	r2,r2,-1023
    d554:	88e2b03a 	or	r17,r17,r3
    d558:	000b883a 	mov	r5,zero
    d55c:	9085883a 	add	r2,r18,r2
    d560:	2cc8b03a 	or	r4,r5,r19
    d564:	00c003c4 	movi	r3,15
    d568:	bdacf03a 	xor	r22,r23,r22
    d56c:	12c00044 	addi	r11,r2,1
    d570:	19009936 	bltu	r3,r4,d7d8 <__muldf3+0x340>
    d574:	200890ba 	slli	r4,r4,2
    d578:	00c00074 	movhi	r3,1
    d57c:	18f56304 	addi	r3,r3,-10868
    d580:	20c9883a 	add	r4,r4,r3
    d584:	20c00017 	ldw	r3,0(r4)
    d588:	1800683a 	jmp	r3
    d58c:	0000d7d8 	cmpnei	zero,zero,863
    d590:	0000d5ec 	andhi	zero,zero,855
    d594:	0000d5ec 	andhi	zero,zero,855
    d598:	0000d5e8 	cmpgeui	zero,zero,855
    d59c:	0000d7b4 	movhi	zero,862
    d5a0:	0000d7b4 	movhi	zero,862
    d5a4:	0000d79c 	xori	zero,zero,862
    d5a8:	0000d5e8 	cmpgeui	zero,zero,855
    d5ac:	0000d7b4 	movhi	zero,862
    d5b0:	0000d79c 	xori	zero,zero,862
    d5b4:	0000d7b4 	movhi	zero,862
    d5b8:	0000d5e8 	cmpgeui	zero,zero,855
    d5bc:	0000d7c4 	movi	zero,863
    d5c0:	0000d7c4 	movi	zero,863
    d5c4:	0000d7c4 	movi	zero,863
    d5c8:	0000d9e0 	cmpeqi	zero,zero,871
    d5cc:	2404b03a 	or	r2,r4,r16
    d5d0:	10006f1e 	bne	r2,zero,d790 <__muldf3+0x2f8>
    d5d4:	04c00204 	movi	r19,8
    d5d8:	0021883a 	mov	r16,zero
    d5dc:	0029883a 	mov	r20,zero
    d5e0:	07000084 	movi	fp,2
    d5e4:	003fcb06 	br	d514 <__muldf3+0x7c>
    d5e8:	502d883a 	mov	r22,r10
    d5ec:	00800084 	movi	r2,2
    d5f0:	28805726 	beq	r5,r2,d750 <__muldf3+0x2b8>
    d5f4:	008000c4 	movi	r2,3
    d5f8:	28816626 	beq	r5,r2,db94 <__muldf3+0x6fc>
    d5fc:	00800044 	movi	r2,1
    d600:	2881411e 	bne	r5,r2,db08 <__muldf3+0x670>
    d604:	b02b883a 	mov	r21,r22
    d608:	0005883a 	mov	r2,zero
    d60c:	000b883a 	mov	r5,zero
    d610:	0029883a 	mov	r20,zero
    d614:	1004953a 	slli	r2,r2,20
    d618:	a8c03fcc 	andi	r3,r21,255
    d61c:	04400434 	movhi	r17,16
    d620:	8c7fffc4 	addi	r17,r17,-1
    d624:	180697fa 	slli	r3,r3,31
    d628:	2c4a703a 	and	r5,r5,r17
    d62c:	288ab03a 	or	r5,r5,r2
    d630:	28c6b03a 	or	r3,r5,r3
    d634:	a005883a 	mov	r2,r20
    d638:	dfc00c17 	ldw	ra,48(sp)
    d63c:	df000b17 	ldw	fp,44(sp)
    d640:	ddc00a17 	ldw	r23,40(sp)
    d644:	dd800917 	ldw	r22,36(sp)
    d648:	dd400817 	ldw	r21,32(sp)
    d64c:	dd000717 	ldw	r20,28(sp)
    d650:	dcc00617 	ldw	r19,24(sp)
    d654:	dc800517 	ldw	r18,20(sp)
    d658:	dc400417 	ldw	r17,16(sp)
    d65c:	dc000317 	ldw	r16,12(sp)
    d660:	dec00d04 	addi	sp,sp,52
    d664:	f800283a 	ret
    d668:	2404b03a 	or	r2,r4,r16
    d66c:	2027883a 	mov	r19,r4
    d670:	10004226 	beq	r2,zero,d77c <__muldf3+0x2e4>
    d674:	8000fc26 	beq	r16,zero,da68 <__muldf3+0x5d0>
    d678:	8009883a 	mov	r4,r16
    d67c:	d9800215 	stw	r6,8(sp)
    d680:	d9c00015 	stw	r7,0(sp)
    d684:	da400115 	stw	r9,4(sp)
    d688:	000e6b00 	call	e6b0 <__clzsi2>
    d68c:	d9800217 	ldw	r6,8(sp)
    d690:	d9c00017 	ldw	r7,0(sp)
    d694:	da400117 	ldw	r9,4(sp)
    d698:	113ffd44 	addi	r4,r2,-11
    d69c:	00c00704 	movi	r3,28
    d6a0:	1900ed16 	blt	r3,r4,da58 <__muldf3+0x5c0>
    d6a4:	00c00744 	movi	r3,29
    d6a8:	147ffe04 	addi	r17,r2,-8
    d6ac:	1907c83a 	sub	r3,r3,r4
    d6b0:	8460983a 	sll	r16,r16,r17
    d6b4:	98c6d83a 	srl	r3,r19,r3
    d6b8:	9c68983a 	sll	r20,r19,r17
    d6bc:	1c20b03a 	or	r16,r3,r16
    d6c0:	1080fcc4 	addi	r2,r2,1011
    d6c4:	00a5c83a 	sub	r18,zero,r2
    d6c8:	0027883a 	mov	r19,zero
    d6cc:	0039883a 	mov	fp,zero
    d6d0:	003f9006 	br	d514 <__muldf3+0x7c>
    d6d4:	3446b03a 	or	r3,r6,r17
    d6d8:	1800261e 	bne	r3,zero,d774 <__muldf3+0x2dc>
    d6dc:	0023883a 	mov	r17,zero
    d6e0:	0011883a 	mov	r8,zero
    d6e4:	01400084 	movi	r5,2
    d6e8:	003f9c06 	br	d55c <__muldf3+0xc4>
    d6ec:	3446b03a 	or	r3,r6,r17
    d6f0:	18001c26 	beq	r3,zero,d764 <__muldf3+0x2cc>
    d6f4:	8800ce26 	beq	r17,zero,da30 <__muldf3+0x598>
    d6f8:	8809883a 	mov	r4,r17
    d6fc:	d9800215 	stw	r6,8(sp)
    d700:	da400115 	stw	r9,4(sp)
    d704:	da800015 	stw	r10,0(sp)
    d708:	000e6b00 	call	e6b0 <__clzsi2>
    d70c:	d9800217 	ldw	r6,8(sp)
    d710:	da400117 	ldw	r9,4(sp)
    d714:	da800017 	ldw	r10,0(sp)
    d718:	113ffd44 	addi	r4,r2,-11
    d71c:	00c00704 	movi	r3,28
    d720:	1900bf16 	blt	r3,r4,da20 <__muldf3+0x588>
    d724:	00c00744 	movi	r3,29
    d728:	123ffe04 	addi	r8,r2,-8
    d72c:	1907c83a 	sub	r3,r3,r4
    d730:	8a22983a 	sll	r17,r17,r8
    d734:	30c6d83a 	srl	r3,r6,r3
    d738:	3210983a 	sll	r8,r6,r8
    d73c:	1c62b03a 	or	r17,r3,r17
    d740:	1080fcc4 	addi	r2,r2,1011
    d744:	0085c83a 	sub	r2,zero,r2
    d748:	000b883a 	mov	r5,zero
    d74c:	003f8306 	br	d55c <__muldf3+0xc4>
    d750:	b02b883a 	mov	r21,r22
    d754:	0081ffc4 	movi	r2,2047
    d758:	000b883a 	mov	r5,zero
    d75c:	0029883a 	mov	r20,zero
    d760:	003fac06 	br	d614 <__muldf3+0x17c>
    d764:	0023883a 	mov	r17,zero
    d768:	0011883a 	mov	r8,zero
    d76c:	01400044 	movi	r5,1
    d770:	003f7a06 	br	d55c <__muldf3+0xc4>
    d774:	014000c4 	movi	r5,3
    d778:	003f7806 	br	d55c <__muldf3+0xc4>
    d77c:	04c00104 	movi	r19,4
    d780:	0021883a 	mov	r16,zero
    d784:	0029883a 	mov	r20,zero
    d788:	07000044 	movi	fp,1
    d78c:	003f6106 	br	d514 <__muldf3+0x7c>
    d790:	04c00304 	movi	r19,12
    d794:	070000c4 	movi	fp,3
    d798:	003f5e06 	br	d514 <__muldf3+0x7c>
    d79c:	01400434 	movhi	r5,16
    d7a0:	002b883a 	mov	r21,zero
    d7a4:	297fffc4 	addi	r5,r5,-1
    d7a8:	053fffc4 	movi	r20,-1
    d7ac:	0081ffc4 	movi	r2,2047
    d7b0:	003f9806 	br	d614 <__muldf3+0x17c>
    d7b4:	8023883a 	mov	r17,r16
    d7b8:	a011883a 	mov	r8,r20
    d7bc:	e00b883a 	mov	r5,fp
    d7c0:	003f8a06 	br	d5ec <__muldf3+0x154>
    d7c4:	8023883a 	mov	r17,r16
    d7c8:	a011883a 	mov	r8,r20
    d7cc:	482d883a 	mov	r22,r9
    d7d0:	e00b883a 	mov	r5,fp
    d7d4:	003f8506 	br	d5ec <__muldf3+0x154>
    d7d8:	a00ad43a 	srli	r5,r20,16
    d7dc:	401ad43a 	srli	r13,r8,16
    d7e0:	a53fffcc 	andi	r20,r20,65535
    d7e4:	423fffcc 	andi	r8,r8,65535
    d7e8:	4519383a 	mul	r12,r8,r20
    d7ec:	4147383a 	mul	r3,r8,r5
    d7f0:	6d09383a 	mul	r4,r13,r20
    d7f4:	600cd43a 	srli	r6,r12,16
    d7f8:	2b5d383a 	mul	r14,r5,r13
    d7fc:	20c9883a 	add	r4,r4,r3
    d800:	310d883a 	add	r6,r6,r4
    d804:	30c0022e 	bgeu	r6,r3,d810 <__muldf3+0x378>
    d808:	00c00074 	movhi	r3,1
    d80c:	70dd883a 	add	r14,r14,r3
    d810:	8826d43a 	srli	r19,r17,16
    d814:	8bffffcc 	andi	r15,r17,65535
    d818:	7d23383a 	mul	r17,r15,r20
    d81c:	7949383a 	mul	r4,r15,r5
    d820:	9d29383a 	mul	r20,r19,r20
    d824:	8814d43a 	srli	r10,r17,16
    d828:	3012943a 	slli	r9,r6,16
    d82c:	a129883a 	add	r20,r20,r4
    d830:	633fffcc 	andi	r12,r12,65535
    d834:	5515883a 	add	r10,r10,r20
    d838:	3006d43a 	srli	r3,r6,16
    d83c:	4b13883a 	add	r9,r9,r12
    d840:	2ccb383a 	mul	r5,r5,r19
    d844:	5100022e 	bgeu	r10,r4,d850 <__muldf3+0x3b8>
    d848:	01000074 	movhi	r4,1
    d84c:	290b883a 	add	r5,r5,r4
    d850:	802ad43a 	srli	r21,r16,16
    d854:	843fffcc 	andi	r16,r16,65535
    d858:	440d383a 	mul	r6,r8,r16
    d85c:	4565383a 	mul	r18,r8,r21
    d860:	8349383a 	mul	r4,r16,r13
    d864:	500e943a 	slli	r7,r10,16
    d868:	3010d43a 	srli	r8,r6,16
    d86c:	5028d43a 	srli	r20,r10,16
    d870:	2489883a 	add	r4,r4,r18
    d874:	8abfffcc 	andi	r10,r17,65535
    d878:	3a95883a 	add	r10,r7,r10
    d87c:	4119883a 	add	r12,r8,r4
    d880:	a169883a 	add	r20,r20,r5
    d884:	1a87883a 	add	r3,r3,r10
    d888:	6d5b383a 	mul	r13,r13,r21
    d88c:	6480022e 	bgeu	r12,r18,d898 <__muldf3+0x400>
    d890:	01000074 	movhi	r4,1
    d894:	691b883a 	add	r13,r13,r4
    d898:	7c25383a 	mul	r18,r15,r16
    d89c:	7d4b383a 	mul	r5,r15,r21
    d8a0:	84cf383a 	mul	r7,r16,r19
    d8a4:	901ed43a 	srli	r15,r18,16
    d8a8:	6008d43a 	srli	r4,r12,16
    d8ac:	6010943a 	slli	r8,r12,16
    d8b0:	394f883a 	add	r7,r7,r5
    d8b4:	333fffcc 	andi	r12,r6,65535
    d8b8:	79df883a 	add	r15,r15,r7
    d8bc:	235b883a 	add	r13,r4,r13
    d8c0:	9d63383a 	mul	r17,r19,r21
    d8c4:	4309883a 	add	r4,r8,r12
    d8c8:	7940022e 	bgeu	r15,r5,d8d4 <__muldf3+0x43c>
    d8cc:	01400074 	movhi	r5,1
    d8d0:	8963883a 	add	r17,r17,r5
    d8d4:	780a943a 	slli	r5,r15,16
    d8d8:	91bfffcc 	andi	r6,r18,65535
    d8dc:	70c7883a 	add	r3,r14,r3
    d8e0:	298d883a 	add	r6,r5,r6
    d8e4:	1a8f803a 	cmpltu	r7,r3,r10
    d8e8:	350b883a 	add	r5,r6,r20
    d8ec:	20c7883a 	add	r3,r4,r3
    d8f0:	3955883a 	add	r10,r7,r5
    d8f4:	1909803a 	cmpltu	r4,r3,r4
    d8f8:	6a91883a 	add	r8,r13,r10
    d8fc:	780cd43a 	srli	r6,r15,16
    d900:	2219883a 	add	r12,r4,r8
    d904:	2d0b803a 	cmpltu	r5,r5,r20
    d908:	51cf803a 	cmpltu	r7,r10,r7
    d90c:	29ceb03a 	or	r7,r5,r7
    d910:	4351803a 	cmpltu	r8,r8,r13
    d914:	610b803a 	cmpltu	r5,r12,r4
    d918:	4148b03a 	or	r4,r8,r5
    d91c:	398f883a 	add	r7,r7,r6
    d920:	3909883a 	add	r4,r7,r4
    d924:	1810927a 	slli	r8,r3,9
    d928:	2449883a 	add	r4,r4,r17
    d92c:	2008927a 	slli	r4,r4,9
    d930:	6022d5fa 	srli	r17,r12,23
    d934:	1806d5fa 	srli	r3,r3,23
    d938:	4252b03a 	or	r9,r8,r9
    d93c:	600a927a 	slli	r5,r12,9
    d940:	4810c03a 	cmpne	r8,r9,zero
    d944:	2462b03a 	or	r17,r4,r17
    d948:	40c6b03a 	or	r3,r8,r3
    d94c:	8900402c 	andhi	r4,r17,256
    d950:	1950b03a 	or	r8,r3,r5
    d954:	20000726 	beq	r4,zero,d974 <__muldf3+0x4dc>
    d958:	4006d07a 	srli	r3,r8,1
    d95c:	880497fa 	slli	r2,r17,31
    d960:	4200004c 	andi	r8,r8,1
    d964:	8822d07a 	srli	r17,r17,1
    d968:	1a10b03a 	or	r8,r3,r8
    d96c:	1210b03a 	or	r8,r2,r8
    d970:	5805883a 	mov	r2,r11
    d974:	1140ffc4 	addi	r5,r2,1023
    d978:	0140440e 	bge	zero,r5,da8c <__muldf3+0x5f4>
    d97c:	40c001cc 	andi	r3,r8,7
    d980:	18000726 	beq	r3,zero,d9a0 <__muldf3+0x508>
    d984:	40c003cc 	andi	r3,r8,15
    d988:	01000104 	movi	r4,4
    d98c:	19000426 	beq	r3,r4,d9a0 <__muldf3+0x508>
    d990:	4107883a 	add	r3,r8,r4
    d994:	1a11803a 	cmpltu	r8,r3,r8
    d998:	8a23883a 	add	r17,r17,r8
    d99c:	1811883a 	mov	r8,r3
    d9a0:	88c0402c 	andhi	r3,r17,256
    d9a4:	18000426 	beq	r3,zero,d9b8 <__muldf3+0x520>
    d9a8:	11410004 	addi	r5,r2,1024
    d9ac:	00bfc034 	movhi	r2,65280
    d9b0:	10bfffc4 	addi	r2,r2,-1
    d9b4:	88a2703a 	and	r17,r17,r2
    d9b8:	0081ff84 	movi	r2,2046
    d9bc:	117f6416 	blt	r2,r5,d750 <__muldf3+0x2b8>
    d9c0:	8828977a 	slli	r20,r17,29
    d9c4:	4010d0fa 	srli	r8,r8,3
    d9c8:	8822927a 	slli	r17,r17,9
    d9cc:	2881ffcc 	andi	r2,r5,2047
    d9d0:	a228b03a 	or	r20,r20,r8
    d9d4:	880ad33a 	srli	r5,r17,12
    d9d8:	b02b883a 	mov	r21,r22
    d9dc:	003f0d06 	br	d614 <__muldf3+0x17c>
    d9e0:	8080022c 	andhi	r2,r16,8
    d9e4:	10000926 	beq	r2,zero,da0c <__muldf3+0x574>
    d9e8:	8880022c 	andhi	r2,r17,8
    d9ec:	1000071e 	bne	r2,zero,da0c <__muldf3+0x574>
    d9f0:	00800434 	movhi	r2,16
    d9f4:	89400234 	orhi	r5,r17,8
    d9f8:	10bfffc4 	addi	r2,r2,-1
    d9fc:	b82b883a 	mov	r21,r23
    da00:	288a703a 	and	r5,r5,r2
    da04:	4029883a 	mov	r20,r8
    da08:	003f6806 	br	d7ac <__muldf3+0x314>
    da0c:	00800434 	movhi	r2,16
    da10:	81400234 	orhi	r5,r16,8
    da14:	10bfffc4 	addi	r2,r2,-1
    da18:	288a703a 	and	r5,r5,r2
    da1c:	003f6306 	br	d7ac <__muldf3+0x314>
    da20:	147ff604 	addi	r17,r2,-40
    da24:	3462983a 	sll	r17,r6,r17
    da28:	0011883a 	mov	r8,zero
    da2c:	003f4406 	br	d740 <__muldf3+0x2a8>
    da30:	3009883a 	mov	r4,r6
    da34:	d9800215 	stw	r6,8(sp)
    da38:	da400115 	stw	r9,4(sp)
    da3c:	da800015 	stw	r10,0(sp)
    da40:	000e6b00 	call	e6b0 <__clzsi2>
    da44:	10800804 	addi	r2,r2,32
    da48:	da800017 	ldw	r10,0(sp)
    da4c:	da400117 	ldw	r9,4(sp)
    da50:	d9800217 	ldw	r6,8(sp)
    da54:	003f3006 	br	d718 <__muldf3+0x280>
    da58:	143ff604 	addi	r16,r2,-40
    da5c:	9c20983a 	sll	r16,r19,r16
    da60:	0029883a 	mov	r20,zero
    da64:	003f1606 	br	d6c0 <__muldf3+0x228>
    da68:	d9800215 	stw	r6,8(sp)
    da6c:	d9c00015 	stw	r7,0(sp)
    da70:	da400115 	stw	r9,4(sp)
    da74:	000e6b00 	call	e6b0 <__clzsi2>
    da78:	10800804 	addi	r2,r2,32
    da7c:	da400117 	ldw	r9,4(sp)
    da80:	d9c00017 	ldw	r7,0(sp)
    da84:	d9800217 	ldw	r6,8(sp)
    da88:	003f0306 	br	d698 <__muldf3+0x200>
    da8c:	00c00044 	movi	r3,1
    da90:	1947c83a 	sub	r3,r3,r5
    da94:	00800e04 	movi	r2,56
    da98:	10feda16 	blt	r2,r3,d604 <__muldf3+0x16c>
    da9c:	008007c4 	movi	r2,31
    daa0:	10c01b16 	blt	r2,r3,db10 <__muldf3+0x678>
    daa4:	00800804 	movi	r2,32
    daa8:	10c5c83a 	sub	r2,r2,r3
    daac:	888a983a 	sll	r5,r17,r2
    dab0:	40c8d83a 	srl	r4,r8,r3
    dab4:	4084983a 	sll	r2,r8,r2
    dab8:	88e2d83a 	srl	r17,r17,r3
    dabc:	2906b03a 	or	r3,r5,r4
    dac0:	1004c03a 	cmpne	r2,r2,zero
    dac4:	1886b03a 	or	r3,r3,r2
    dac8:	188001cc 	andi	r2,r3,7
    dacc:	10000726 	beq	r2,zero,daec <__muldf3+0x654>
    dad0:	188003cc 	andi	r2,r3,15
    dad4:	01000104 	movi	r4,4
    dad8:	11000426 	beq	r2,r4,daec <__muldf3+0x654>
    dadc:	1805883a 	mov	r2,r3
    dae0:	10c00104 	addi	r3,r2,4
    dae4:	1885803a 	cmpltu	r2,r3,r2
    dae8:	88a3883a 	add	r17,r17,r2
    daec:	8880202c 	andhi	r2,r17,128
    daf0:	10001c26 	beq	r2,zero,db64 <__muldf3+0x6cc>
    daf4:	b02b883a 	mov	r21,r22
    daf8:	00800044 	movi	r2,1
    dafc:	000b883a 	mov	r5,zero
    db00:	0029883a 	mov	r20,zero
    db04:	003ec306 	br	d614 <__muldf3+0x17c>
    db08:	5805883a 	mov	r2,r11
    db0c:	003f9906 	br	d974 <__muldf3+0x4dc>
    db10:	00bff844 	movi	r2,-31
    db14:	1145c83a 	sub	r2,r2,r5
    db18:	8888d83a 	srl	r4,r17,r2
    db1c:	00800804 	movi	r2,32
    db20:	18801a26 	beq	r3,r2,db8c <__muldf3+0x6f4>
    db24:	00801004 	movi	r2,64
    db28:	10c5c83a 	sub	r2,r2,r3
    db2c:	8884983a 	sll	r2,r17,r2
    db30:	1204b03a 	or	r2,r2,r8
    db34:	1004c03a 	cmpne	r2,r2,zero
    db38:	2084b03a 	or	r2,r4,r2
    db3c:	144001cc 	andi	r17,r2,7
    db40:	88000d1e 	bne	r17,zero,db78 <__muldf3+0x6e0>
    db44:	000b883a 	mov	r5,zero
    db48:	1028d0fa 	srli	r20,r2,3
    db4c:	b02b883a 	mov	r21,r22
    db50:	0005883a 	mov	r2,zero
    db54:	a468b03a 	or	r20,r20,r17
    db58:	003eae06 	br	d614 <__muldf3+0x17c>
    db5c:	1007883a 	mov	r3,r2
    db60:	0023883a 	mov	r17,zero
    db64:	880a927a 	slli	r5,r17,9
    db68:	1805883a 	mov	r2,r3
    db6c:	8822977a 	slli	r17,r17,29
    db70:	280ad33a 	srli	r5,r5,12
    db74:	003ff406 	br	db48 <__muldf3+0x6b0>
    db78:	10c003cc 	andi	r3,r2,15
    db7c:	01000104 	movi	r4,4
    db80:	193ff626 	beq	r3,r4,db5c <__muldf3+0x6c4>
    db84:	0023883a 	mov	r17,zero
    db88:	003fd506 	br	dae0 <__muldf3+0x648>
    db8c:	0005883a 	mov	r2,zero
    db90:	003fe706 	br	db30 <__muldf3+0x698>
    db94:	00800434 	movhi	r2,16
    db98:	89400234 	orhi	r5,r17,8
    db9c:	10bfffc4 	addi	r2,r2,-1
    dba0:	b02b883a 	mov	r21,r22
    dba4:	288a703a 	and	r5,r5,r2
    dba8:	4029883a 	mov	r20,r8
    dbac:	003eff06 	br	d7ac <__muldf3+0x314>

0000dbb0 <__subdf3>:
    dbb0:	02000434 	movhi	r8,16
    dbb4:	423fffc4 	addi	r8,r8,-1
    dbb8:	defffb04 	addi	sp,sp,-20
    dbbc:	2a14703a 	and	r10,r5,r8
    dbc0:	3812d53a 	srli	r9,r7,20
    dbc4:	3a10703a 	and	r8,r7,r8
    dbc8:	2006d77a 	srli	r3,r4,29
    dbcc:	3004d77a 	srli	r2,r6,29
    dbd0:	dc000015 	stw	r16,0(sp)
    dbd4:	501490fa 	slli	r10,r10,3
    dbd8:	2820d53a 	srli	r16,r5,20
    dbdc:	401090fa 	slli	r8,r8,3
    dbe0:	dc800215 	stw	r18,8(sp)
    dbe4:	dc400115 	stw	r17,4(sp)
    dbe8:	dfc00415 	stw	ra,16(sp)
    dbec:	202290fa 	slli	r17,r4,3
    dbf0:	dcc00315 	stw	r19,12(sp)
    dbf4:	4a41ffcc 	andi	r9,r9,2047
    dbf8:	0101ffc4 	movi	r4,2047
    dbfc:	2824d7fa 	srli	r18,r5,31
    dc00:	8401ffcc 	andi	r16,r16,2047
    dc04:	50c6b03a 	or	r3,r10,r3
    dc08:	380ed7fa 	srli	r7,r7,31
    dc0c:	408ab03a 	or	r5,r8,r2
    dc10:	300c90fa 	slli	r6,r6,3
    dc14:	49009626 	beq	r9,r4,de70 <__subdf3+0x2c0>
    dc18:	39c0005c 	xori	r7,r7,1
    dc1c:	8245c83a 	sub	r2,r16,r9
    dc20:	3c807426 	beq	r7,r18,ddf4 <__subdf3+0x244>
    dc24:	0080af0e 	bge	zero,r2,dee4 <__subdf3+0x334>
    dc28:	48002a1e 	bne	r9,zero,dcd4 <__subdf3+0x124>
    dc2c:	2988b03a 	or	r4,r5,r6
    dc30:	20009a1e 	bne	r4,zero,de9c <__subdf3+0x2ec>
    dc34:	888001cc 	andi	r2,r17,7
    dc38:	10000726 	beq	r2,zero,dc58 <__subdf3+0xa8>
    dc3c:	888003cc 	andi	r2,r17,15
    dc40:	01000104 	movi	r4,4
    dc44:	11000426 	beq	r2,r4,dc58 <__subdf3+0xa8>
    dc48:	890b883a 	add	r5,r17,r4
    dc4c:	2c63803a 	cmpltu	r17,r5,r17
    dc50:	1c47883a 	add	r3,r3,r17
    dc54:	2823883a 	mov	r17,r5
    dc58:	1880202c 	andhi	r2,r3,128
    dc5c:	10005926 	beq	r2,zero,ddc4 <__subdf3+0x214>
    dc60:	84000044 	addi	r16,r16,1
    dc64:	0081ffc4 	movi	r2,2047
    dc68:	8080be26 	beq	r16,r2,df64 <__subdf3+0x3b4>
    dc6c:	017fe034 	movhi	r5,65408
    dc70:	297fffc4 	addi	r5,r5,-1
    dc74:	1946703a 	and	r3,r3,r5
    dc78:	1804977a 	slli	r2,r3,29
    dc7c:	1806927a 	slli	r3,r3,9
    dc80:	8822d0fa 	srli	r17,r17,3
    dc84:	8401ffcc 	andi	r16,r16,2047
    dc88:	180ad33a 	srli	r5,r3,12
    dc8c:	9100004c 	andi	r4,r18,1
    dc90:	1444b03a 	or	r2,r2,r17
    dc94:	80c1ffcc 	andi	r3,r16,2047
    dc98:	1820953a 	slli	r16,r3,20
    dc9c:	20c03fcc 	andi	r3,r4,255
    dca0:	180897fa 	slli	r4,r3,31
    dca4:	00c00434 	movhi	r3,16
    dca8:	18ffffc4 	addi	r3,r3,-1
    dcac:	28c6703a 	and	r3,r5,r3
    dcb0:	1c06b03a 	or	r3,r3,r16
    dcb4:	1906b03a 	or	r3,r3,r4
    dcb8:	dfc00417 	ldw	ra,16(sp)
    dcbc:	dcc00317 	ldw	r19,12(sp)
    dcc0:	dc800217 	ldw	r18,8(sp)
    dcc4:	dc400117 	ldw	r17,4(sp)
    dcc8:	dc000017 	ldw	r16,0(sp)
    dccc:	dec00504 	addi	sp,sp,20
    dcd0:	f800283a 	ret
    dcd4:	0101ffc4 	movi	r4,2047
    dcd8:	813fd626 	beq	r16,r4,dc34 <__subdf3+0x84>
    dcdc:	29402034 	orhi	r5,r5,128
    dce0:	01000e04 	movi	r4,56
    dce4:	2080a316 	blt	r4,r2,df74 <__subdf3+0x3c4>
    dce8:	010007c4 	movi	r4,31
    dcec:	2080c616 	blt	r4,r2,e008 <__subdf3+0x458>
    dcf0:	01000804 	movi	r4,32
    dcf4:	2089c83a 	sub	r4,r4,r2
    dcf8:	2910983a 	sll	r8,r5,r4
    dcfc:	308ed83a 	srl	r7,r6,r2
    dd00:	3108983a 	sll	r4,r6,r4
    dd04:	2884d83a 	srl	r2,r5,r2
    dd08:	41ccb03a 	or	r6,r8,r7
    dd0c:	2008c03a 	cmpne	r4,r4,zero
    dd10:	310cb03a 	or	r6,r6,r4
    dd14:	898dc83a 	sub	r6,r17,r6
    dd18:	89a3803a 	cmpltu	r17,r17,r6
    dd1c:	1887c83a 	sub	r3,r3,r2
    dd20:	1c47c83a 	sub	r3,r3,r17
    dd24:	3023883a 	mov	r17,r6
    dd28:	1880202c 	andhi	r2,r3,128
    dd2c:	10002326 	beq	r2,zero,ddbc <__subdf3+0x20c>
    dd30:	04c02034 	movhi	r19,128
    dd34:	9cffffc4 	addi	r19,r19,-1
    dd38:	1ce6703a 	and	r19,r3,r19
    dd3c:	98007a26 	beq	r19,zero,df28 <__subdf3+0x378>
    dd40:	9809883a 	mov	r4,r19
    dd44:	000e6b00 	call	e6b0 <__clzsi2>
    dd48:	113ffe04 	addi	r4,r2,-8
    dd4c:	00c007c4 	movi	r3,31
    dd50:	19007b16 	blt	r3,r4,df40 <__subdf3+0x390>
    dd54:	00800804 	movi	r2,32
    dd58:	1105c83a 	sub	r2,r2,r4
    dd5c:	8884d83a 	srl	r2,r17,r2
    dd60:	9906983a 	sll	r3,r19,r4
    dd64:	8922983a 	sll	r17,r17,r4
    dd68:	10c4b03a 	or	r2,r2,r3
    dd6c:	24007816 	blt	r4,r16,df50 <__subdf3+0x3a0>
    dd70:	2421c83a 	sub	r16,r4,r16
    dd74:	80c00044 	addi	r3,r16,1
    dd78:	010007c4 	movi	r4,31
    dd7c:	20c09516 	blt	r4,r3,dfd4 <__subdf3+0x424>
    dd80:	01400804 	movi	r5,32
    dd84:	28cbc83a 	sub	r5,r5,r3
    dd88:	88c8d83a 	srl	r4,r17,r3
    dd8c:	8962983a 	sll	r17,r17,r5
    dd90:	114a983a 	sll	r5,r2,r5
    dd94:	10c6d83a 	srl	r3,r2,r3
    dd98:	8804c03a 	cmpne	r2,r17,zero
    dd9c:	290ab03a 	or	r5,r5,r4
    dda0:	28a2b03a 	or	r17,r5,r2
    dda4:	0021883a 	mov	r16,zero
    dda8:	003fa206 	br	dc34 <__subdf3+0x84>
    ddac:	2090b03a 	or	r8,r4,r2
    ddb0:	40018e26 	beq	r8,zero,e3ec <__subdf3+0x83c>
    ddb4:	1007883a 	mov	r3,r2
    ddb8:	2023883a 	mov	r17,r4
    ddbc:	888001cc 	andi	r2,r17,7
    ddc0:	103f9e1e 	bne	r2,zero,dc3c <__subdf3+0x8c>
    ddc4:	1804977a 	slli	r2,r3,29
    ddc8:	8822d0fa 	srli	r17,r17,3
    ddcc:	1810d0fa 	srli	r8,r3,3
    ddd0:	9100004c 	andi	r4,r18,1
    ddd4:	1444b03a 	or	r2,r2,r17
    ddd8:	00c1ffc4 	movi	r3,2047
    dddc:	80c02826 	beq	r16,r3,de80 <__subdf3+0x2d0>
    dde0:	01400434 	movhi	r5,16
    dde4:	297fffc4 	addi	r5,r5,-1
    dde8:	80e0703a 	and	r16,r16,r3
    ddec:	414a703a 	and	r5,r8,r5
    ddf0:	003fa806 	br	dc94 <__subdf3+0xe4>
    ddf4:	0080630e 	bge	zero,r2,df84 <__subdf3+0x3d4>
    ddf8:	48003026 	beq	r9,zero,debc <__subdf3+0x30c>
    ddfc:	0101ffc4 	movi	r4,2047
    de00:	813f8c26 	beq	r16,r4,dc34 <__subdf3+0x84>
    de04:	29402034 	orhi	r5,r5,128
    de08:	01000e04 	movi	r4,56
    de0c:	2080a90e 	bge	r4,r2,e0b4 <__subdf3+0x504>
    de10:	298cb03a 	or	r6,r5,r6
    de14:	3012c03a 	cmpne	r9,r6,zero
    de18:	0005883a 	mov	r2,zero
    de1c:	4c53883a 	add	r9,r9,r17
    de20:	4c63803a 	cmpltu	r17,r9,r17
    de24:	10c7883a 	add	r3,r2,r3
    de28:	88c7883a 	add	r3,r17,r3
    de2c:	4823883a 	mov	r17,r9
    de30:	1880202c 	andhi	r2,r3,128
    de34:	1000d026 	beq	r2,zero,e178 <__subdf3+0x5c8>
    de38:	84000044 	addi	r16,r16,1
    de3c:	0081ffc4 	movi	r2,2047
    de40:	8080fe26 	beq	r16,r2,e23c <__subdf3+0x68c>
    de44:	00bfe034 	movhi	r2,65408
    de48:	10bfffc4 	addi	r2,r2,-1
    de4c:	1886703a 	and	r3,r3,r2
    de50:	880ad07a 	srli	r5,r17,1
    de54:	180497fa 	slli	r2,r3,31
    de58:	8900004c 	andi	r4,r17,1
    de5c:	2922b03a 	or	r17,r5,r4
    de60:	1806d07a 	srli	r3,r3,1
    de64:	1462b03a 	or	r17,r2,r17
    de68:	3825883a 	mov	r18,r7
    de6c:	003f7106 	br	dc34 <__subdf3+0x84>
    de70:	2984b03a 	or	r2,r5,r6
    de74:	103f6826 	beq	r2,zero,dc18 <__subdf3+0x68>
    de78:	39c03fcc 	andi	r7,r7,255
    de7c:	003f6706 	br	dc1c <__subdf3+0x6c>
    de80:	4086b03a 	or	r3,r8,r2
    de84:	18015226 	beq	r3,zero,e3d0 <__subdf3+0x820>
    de88:	00c00434 	movhi	r3,16
    de8c:	41400234 	orhi	r5,r8,8
    de90:	18ffffc4 	addi	r3,r3,-1
    de94:	28ca703a 	and	r5,r5,r3
    de98:	003f7e06 	br	dc94 <__subdf3+0xe4>
    de9c:	10bfffc4 	addi	r2,r2,-1
    dea0:	1000491e 	bne	r2,zero,dfc8 <__subdf3+0x418>
    dea4:	898fc83a 	sub	r7,r17,r6
    dea8:	89e3803a 	cmpltu	r17,r17,r7
    deac:	1947c83a 	sub	r3,r3,r5
    deb0:	1c47c83a 	sub	r3,r3,r17
    deb4:	3823883a 	mov	r17,r7
    deb8:	003f9b06 	br	dd28 <__subdf3+0x178>
    debc:	2988b03a 	or	r4,r5,r6
    dec0:	203f5c26 	beq	r4,zero,dc34 <__subdf3+0x84>
    dec4:	10bfffc4 	addi	r2,r2,-1
    dec8:	1000931e 	bne	r2,zero,e118 <__subdf3+0x568>
    decc:	898d883a 	add	r6,r17,r6
    ded0:	3463803a 	cmpltu	r17,r6,r17
    ded4:	1947883a 	add	r3,r3,r5
    ded8:	88c7883a 	add	r3,r17,r3
    dedc:	3023883a 	mov	r17,r6
    dee0:	003fd306 	br	de30 <__subdf3+0x280>
    dee4:	1000541e 	bne	r2,zero,e038 <__subdf3+0x488>
    dee8:	80800044 	addi	r2,r16,1
    deec:	1081ffcc 	andi	r2,r2,2047
    def0:	01000044 	movi	r4,1
    def4:	2080a20e 	bge	r4,r2,e180 <__subdf3+0x5d0>
    def8:	8989c83a 	sub	r4,r17,r6
    defc:	8905803a 	cmpltu	r2,r17,r4
    df00:	1967c83a 	sub	r19,r3,r5
    df04:	98a7c83a 	sub	r19,r19,r2
    df08:	9880202c 	andhi	r2,r19,128
    df0c:	10006326 	beq	r2,zero,e09c <__subdf3+0x4ec>
    df10:	3463c83a 	sub	r17,r6,r17
    df14:	28c7c83a 	sub	r3,r5,r3
    df18:	344d803a 	cmpltu	r6,r6,r17
    df1c:	19a7c83a 	sub	r19,r3,r6
    df20:	3825883a 	mov	r18,r7
    df24:	983f861e 	bne	r19,zero,dd40 <__subdf3+0x190>
    df28:	8809883a 	mov	r4,r17
    df2c:	000e6b00 	call	e6b0 <__clzsi2>
    df30:	10800804 	addi	r2,r2,32
    df34:	113ffe04 	addi	r4,r2,-8
    df38:	00c007c4 	movi	r3,31
    df3c:	193f850e 	bge	r3,r4,dd54 <__subdf3+0x1a4>
    df40:	10bff604 	addi	r2,r2,-40
    df44:	8884983a 	sll	r2,r17,r2
    df48:	0023883a 	mov	r17,zero
    df4c:	243f880e 	bge	r4,r16,dd70 <__subdf3+0x1c0>
    df50:	00ffe034 	movhi	r3,65408
    df54:	18ffffc4 	addi	r3,r3,-1
    df58:	8121c83a 	sub	r16,r16,r4
    df5c:	10c6703a 	and	r3,r2,r3
    df60:	003f3406 	br	dc34 <__subdf3+0x84>
    df64:	9100004c 	andi	r4,r18,1
    df68:	000b883a 	mov	r5,zero
    df6c:	0005883a 	mov	r2,zero
    df70:	003f4806 	br	dc94 <__subdf3+0xe4>
    df74:	298cb03a 	or	r6,r5,r6
    df78:	300cc03a 	cmpne	r6,r6,zero
    df7c:	0005883a 	mov	r2,zero
    df80:	003f6406 	br	dd14 <__subdf3+0x164>
    df84:	10009a1e 	bne	r2,zero,e1f0 <__subdf3+0x640>
    df88:	82400044 	addi	r9,r16,1
    df8c:	4881ffcc 	andi	r2,r9,2047
    df90:	02800044 	movi	r10,1
    df94:	5080670e 	bge	r10,r2,e134 <__subdf3+0x584>
    df98:	0081ffc4 	movi	r2,2047
    df9c:	4880af26 	beq	r9,r2,e25c <__subdf3+0x6ac>
    dfa0:	898d883a 	add	r6,r17,r6
    dfa4:	1945883a 	add	r2,r3,r5
    dfa8:	3447803a 	cmpltu	r3,r6,r17
    dfac:	1887883a 	add	r3,r3,r2
    dfb0:	182297fa 	slli	r17,r3,31
    dfb4:	300cd07a 	srli	r6,r6,1
    dfb8:	1806d07a 	srli	r3,r3,1
    dfbc:	4821883a 	mov	r16,r9
    dfc0:	89a2b03a 	or	r17,r17,r6
    dfc4:	003f1b06 	br	dc34 <__subdf3+0x84>
    dfc8:	0101ffc4 	movi	r4,2047
    dfcc:	813f441e 	bne	r16,r4,dce0 <__subdf3+0x130>
    dfd0:	003f1806 	br	dc34 <__subdf3+0x84>
    dfd4:	843ff844 	addi	r16,r16,-31
    dfd8:	01400804 	movi	r5,32
    dfdc:	1408d83a 	srl	r4,r2,r16
    dfe0:	19405026 	beq	r3,r5,e124 <__subdf3+0x574>
    dfe4:	01401004 	movi	r5,64
    dfe8:	28c7c83a 	sub	r3,r5,r3
    dfec:	10c4983a 	sll	r2,r2,r3
    dff0:	88a2b03a 	or	r17,r17,r2
    dff4:	8822c03a 	cmpne	r17,r17,zero
    dff8:	2462b03a 	or	r17,r4,r17
    dffc:	0007883a 	mov	r3,zero
    e000:	0021883a 	mov	r16,zero
    e004:	003f6d06 	br	ddbc <__subdf3+0x20c>
    e008:	11fff804 	addi	r7,r2,-32
    e00c:	01000804 	movi	r4,32
    e010:	29ced83a 	srl	r7,r5,r7
    e014:	11004526 	beq	r2,r4,e12c <__subdf3+0x57c>
    e018:	01001004 	movi	r4,64
    e01c:	2089c83a 	sub	r4,r4,r2
    e020:	2904983a 	sll	r2,r5,r4
    e024:	118cb03a 	or	r6,r2,r6
    e028:	300cc03a 	cmpne	r6,r6,zero
    e02c:	398cb03a 	or	r6,r7,r6
    e030:	0005883a 	mov	r2,zero
    e034:	003f3706 	br	dd14 <__subdf3+0x164>
    e038:	80002a26 	beq	r16,zero,e0e4 <__subdf3+0x534>
    e03c:	0101ffc4 	movi	r4,2047
    e040:	49006626 	beq	r9,r4,e1dc <__subdf3+0x62c>
    e044:	0085c83a 	sub	r2,zero,r2
    e048:	18c02034 	orhi	r3,r3,128
    e04c:	01000e04 	movi	r4,56
    e050:	20807e16 	blt	r4,r2,e24c <__subdf3+0x69c>
    e054:	010007c4 	movi	r4,31
    e058:	2080e716 	blt	r4,r2,e3f8 <__subdf3+0x848>
    e05c:	01000804 	movi	r4,32
    e060:	2089c83a 	sub	r4,r4,r2
    e064:	1914983a 	sll	r10,r3,r4
    e068:	8890d83a 	srl	r8,r17,r2
    e06c:	8908983a 	sll	r4,r17,r4
    e070:	1884d83a 	srl	r2,r3,r2
    e074:	5222b03a 	or	r17,r10,r8
    e078:	2006c03a 	cmpne	r3,r4,zero
    e07c:	88e2b03a 	or	r17,r17,r3
    e080:	3463c83a 	sub	r17,r6,r17
    e084:	2885c83a 	sub	r2,r5,r2
    e088:	344d803a 	cmpltu	r6,r6,r17
    e08c:	1187c83a 	sub	r3,r2,r6
    e090:	4821883a 	mov	r16,r9
    e094:	3825883a 	mov	r18,r7
    e098:	003f2306 	br	dd28 <__subdf3+0x178>
    e09c:	24d0b03a 	or	r8,r4,r19
    e0a0:	40001b1e 	bne	r8,zero,e110 <__subdf3+0x560>
    e0a4:	0005883a 	mov	r2,zero
    e0a8:	0009883a 	mov	r4,zero
    e0ac:	0021883a 	mov	r16,zero
    e0b0:	003f4906 	br	ddd8 <__subdf3+0x228>
    e0b4:	010007c4 	movi	r4,31
    e0b8:	20803a16 	blt	r4,r2,e1a4 <__subdf3+0x5f4>
    e0bc:	01000804 	movi	r4,32
    e0c0:	2089c83a 	sub	r4,r4,r2
    e0c4:	2912983a 	sll	r9,r5,r4
    e0c8:	3090d83a 	srl	r8,r6,r2
    e0cc:	3108983a 	sll	r4,r6,r4
    e0d0:	2884d83a 	srl	r2,r5,r2
    e0d4:	4a12b03a 	or	r9,r9,r8
    e0d8:	2008c03a 	cmpne	r4,r4,zero
    e0dc:	4912b03a 	or	r9,r9,r4
    e0e0:	003f4e06 	br	de1c <__subdf3+0x26c>
    e0e4:	1c48b03a 	or	r4,r3,r17
    e0e8:	20003c26 	beq	r4,zero,e1dc <__subdf3+0x62c>
    e0ec:	0084303a 	nor	r2,zero,r2
    e0f0:	1000381e 	bne	r2,zero,e1d4 <__subdf3+0x624>
    e0f4:	3463c83a 	sub	r17,r6,r17
    e0f8:	28c5c83a 	sub	r2,r5,r3
    e0fc:	344d803a 	cmpltu	r6,r6,r17
    e100:	1187c83a 	sub	r3,r2,r6
    e104:	4821883a 	mov	r16,r9
    e108:	3825883a 	mov	r18,r7
    e10c:	003f0606 	br	dd28 <__subdf3+0x178>
    e110:	2023883a 	mov	r17,r4
    e114:	003f0906 	br	dd3c <__subdf3+0x18c>
    e118:	0101ffc4 	movi	r4,2047
    e11c:	813f3a1e 	bne	r16,r4,de08 <__subdf3+0x258>
    e120:	003ec406 	br	dc34 <__subdf3+0x84>
    e124:	0005883a 	mov	r2,zero
    e128:	003fb106 	br	dff0 <__subdf3+0x440>
    e12c:	0005883a 	mov	r2,zero
    e130:	003fbc06 	br	e024 <__subdf3+0x474>
    e134:	1c44b03a 	or	r2,r3,r17
    e138:	80008e1e 	bne	r16,zero,e374 <__subdf3+0x7c4>
    e13c:	1000c826 	beq	r2,zero,e460 <__subdf3+0x8b0>
    e140:	2984b03a 	or	r2,r5,r6
    e144:	103ebb26 	beq	r2,zero,dc34 <__subdf3+0x84>
    e148:	8989883a 	add	r4,r17,r6
    e14c:	1945883a 	add	r2,r3,r5
    e150:	2447803a 	cmpltu	r3,r4,r17
    e154:	1887883a 	add	r3,r3,r2
    e158:	1880202c 	andhi	r2,r3,128
    e15c:	2023883a 	mov	r17,r4
    e160:	103f1626 	beq	r2,zero,ddbc <__subdf3+0x20c>
    e164:	00bfe034 	movhi	r2,65408
    e168:	10bfffc4 	addi	r2,r2,-1
    e16c:	5021883a 	mov	r16,r10
    e170:	1886703a 	and	r3,r3,r2
    e174:	003eaf06 	br	dc34 <__subdf3+0x84>
    e178:	3825883a 	mov	r18,r7
    e17c:	003f0f06 	br	ddbc <__subdf3+0x20c>
    e180:	1c44b03a 	or	r2,r3,r17
    e184:	8000251e 	bne	r16,zero,e21c <__subdf3+0x66c>
    e188:	1000661e 	bne	r2,zero,e324 <__subdf3+0x774>
    e18c:	2990b03a 	or	r8,r5,r6
    e190:	40009626 	beq	r8,zero,e3ec <__subdf3+0x83c>
    e194:	2807883a 	mov	r3,r5
    e198:	3023883a 	mov	r17,r6
    e19c:	3825883a 	mov	r18,r7
    e1a0:	003ea406 	br	dc34 <__subdf3+0x84>
    e1a4:	127ff804 	addi	r9,r2,-32
    e1a8:	01000804 	movi	r4,32
    e1ac:	2a52d83a 	srl	r9,r5,r9
    e1b0:	11008c26 	beq	r2,r4,e3e4 <__subdf3+0x834>
    e1b4:	01001004 	movi	r4,64
    e1b8:	2085c83a 	sub	r2,r4,r2
    e1bc:	2884983a 	sll	r2,r5,r2
    e1c0:	118cb03a 	or	r6,r2,r6
    e1c4:	300cc03a 	cmpne	r6,r6,zero
    e1c8:	4992b03a 	or	r9,r9,r6
    e1cc:	0005883a 	mov	r2,zero
    e1d0:	003f1206 	br	de1c <__subdf3+0x26c>
    e1d4:	0101ffc4 	movi	r4,2047
    e1d8:	493f9c1e 	bne	r9,r4,e04c <__subdf3+0x49c>
    e1dc:	2807883a 	mov	r3,r5
    e1e0:	3023883a 	mov	r17,r6
    e1e4:	4821883a 	mov	r16,r9
    e1e8:	3825883a 	mov	r18,r7
    e1ec:	003e9106 	br	dc34 <__subdf3+0x84>
    e1f0:	80001f1e 	bne	r16,zero,e270 <__subdf3+0x6c0>
    e1f4:	1c48b03a 	or	r4,r3,r17
    e1f8:	20005a26 	beq	r4,zero,e364 <__subdf3+0x7b4>
    e1fc:	0084303a 	nor	r2,zero,r2
    e200:	1000561e 	bne	r2,zero,e35c <__subdf3+0x7ac>
    e204:	89a3883a 	add	r17,r17,r6
    e208:	1945883a 	add	r2,r3,r5
    e20c:	898d803a 	cmpltu	r6,r17,r6
    e210:	3087883a 	add	r3,r6,r2
    e214:	4821883a 	mov	r16,r9
    e218:	003f0506 	br	de30 <__subdf3+0x280>
    e21c:	10002b1e 	bne	r2,zero,e2cc <__subdf3+0x71c>
    e220:	2984b03a 	or	r2,r5,r6
    e224:	10008026 	beq	r2,zero,e428 <__subdf3+0x878>
    e228:	2807883a 	mov	r3,r5
    e22c:	3023883a 	mov	r17,r6
    e230:	3825883a 	mov	r18,r7
    e234:	0401ffc4 	movi	r16,2047
    e238:	003e7e06 	br	dc34 <__subdf3+0x84>
    e23c:	3809883a 	mov	r4,r7
    e240:	0011883a 	mov	r8,zero
    e244:	0005883a 	mov	r2,zero
    e248:	003ee306 	br	ddd8 <__subdf3+0x228>
    e24c:	1c62b03a 	or	r17,r3,r17
    e250:	8822c03a 	cmpne	r17,r17,zero
    e254:	0005883a 	mov	r2,zero
    e258:	003f8906 	br	e080 <__subdf3+0x4d0>
    e25c:	3809883a 	mov	r4,r7
    e260:	4821883a 	mov	r16,r9
    e264:	0011883a 	mov	r8,zero
    e268:	0005883a 	mov	r2,zero
    e26c:	003eda06 	br	ddd8 <__subdf3+0x228>
    e270:	0101ffc4 	movi	r4,2047
    e274:	49003b26 	beq	r9,r4,e364 <__subdf3+0x7b4>
    e278:	0085c83a 	sub	r2,zero,r2
    e27c:	18c02034 	orhi	r3,r3,128
    e280:	01000e04 	movi	r4,56
    e284:	20806e16 	blt	r4,r2,e440 <__subdf3+0x890>
    e288:	010007c4 	movi	r4,31
    e28c:	20807716 	blt	r4,r2,e46c <__subdf3+0x8bc>
    e290:	01000804 	movi	r4,32
    e294:	2089c83a 	sub	r4,r4,r2
    e298:	1914983a 	sll	r10,r3,r4
    e29c:	8890d83a 	srl	r8,r17,r2
    e2a0:	8908983a 	sll	r4,r17,r4
    e2a4:	1884d83a 	srl	r2,r3,r2
    e2a8:	5222b03a 	or	r17,r10,r8
    e2ac:	2006c03a 	cmpne	r3,r4,zero
    e2b0:	88e2b03a 	or	r17,r17,r3
    e2b4:	89a3883a 	add	r17,r17,r6
    e2b8:	1145883a 	add	r2,r2,r5
    e2bc:	898d803a 	cmpltu	r6,r17,r6
    e2c0:	3087883a 	add	r3,r6,r2
    e2c4:	4821883a 	mov	r16,r9
    e2c8:	003ed906 	br	de30 <__subdf3+0x280>
    e2cc:	2984b03a 	or	r2,r5,r6
    e2d0:	10004226 	beq	r2,zero,e3dc <__subdf3+0x82c>
    e2d4:	1808d0fa 	srli	r4,r3,3
    e2d8:	8822d0fa 	srli	r17,r17,3
    e2dc:	1806977a 	slli	r3,r3,29
    e2e0:	2080022c 	andhi	r2,r4,8
    e2e4:	1c62b03a 	or	r17,r3,r17
    e2e8:	10000826 	beq	r2,zero,e30c <__subdf3+0x75c>
    e2ec:	2812d0fa 	srli	r9,r5,3
    e2f0:	4880022c 	andhi	r2,r9,8
    e2f4:	1000051e 	bne	r2,zero,e30c <__subdf3+0x75c>
    e2f8:	300cd0fa 	srli	r6,r6,3
    e2fc:	2804977a 	slli	r2,r5,29
    e300:	4809883a 	mov	r4,r9
    e304:	3825883a 	mov	r18,r7
    e308:	11a2b03a 	or	r17,r2,r6
    e30c:	8806d77a 	srli	r3,r17,29
    e310:	200890fa 	slli	r4,r4,3
    e314:	882290fa 	slli	r17,r17,3
    e318:	0401ffc4 	movi	r16,2047
    e31c:	1906b03a 	or	r3,r3,r4
    e320:	003e4406 	br	dc34 <__subdf3+0x84>
    e324:	2984b03a 	or	r2,r5,r6
    e328:	103e4226 	beq	r2,zero,dc34 <__subdf3+0x84>
    e32c:	8989c83a 	sub	r4,r17,r6
    e330:	8911803a 	cmpltu	r8,r17,r4
    e334:	1945c83a 	sub	r2,r3,r5
    e338:	1205c83a 	sub	r2,r2,r8
    e33c:	1200202c 	andhi	r8,r2,128
    e340:	403e9a26 	beq	r8,zero,ddac <__subdf3+0x1fc>
    e344:	3463c83a 	sub	r17,r6,r17
    e348:	28c5c83a 	sub	r2,r5,r3
    e34c:	344d803a 	cmpltu	r6,r6,r17
    e350:	1187c83a 	sub	r3,r2,r6
    e354:	3825883a 	mov	r18,r7
    e358:	003e3606 	br	dc34 <__subdf3+0x84>
    e35c:	0101ffc4 	movi	r4,2047
    e360:	493fc71e 	bne	r9,r4,e280 <__subdf3+0x6d0>
    e364:	2807883a 	mov	r3,r5
    e368:	3023883a 	mov	r17,r6
    e36c:	4821883a 	mov	r16,r9
    e370:	003e3006 	br	dc34 <__subdf3+0x84>
    e374:	10003626 	beq	r2,zero,e450 <__subdf3+0x8a0>
    e378:	2984b03a 	or	r2,r5,r6
    e37c:	10001726 	beq	r2,zero,e3dc <__subdf3+0x82c>
    e380:	1808d0fa 	srli	r4,r3,3
    e384:	8822d0fa 	srli	r17,r17,3
    e388:	1806977a 	slli	r3,r3,29
    e38c:	2080022c 	andhi	r2,r4,8
    e390:	1c62b03a 	or	r17,r3,r17
    e394:	10000726 	beq	r2,zero,e3b4 <__subdf3+0x804>
    e398:	2812d0fa 	srli	r9,r5,3
    e39c:	4880022c 	andhi	r2,r9,8
    e3a0:	1000041e 	bne	r2,zero,e3b4 <__subdf3+0x804>
    e3a4:	300cd0fa 	srli	r6,r6,3
    e3a8:	2804977a 	slli	r2,r5,29
    e3ac:	4809883a 	mov	r4,r9
    e3b0:	11a2b03a 	or	r17,r2,r6
    e3b4:	8806d77a 	srli	r3,r17,29
    e3b8:	200890fa 	slli	r4,r4,3
    e3bc:	882290fa 	slli	r17,r17,3
    e3c0:	3825883a 	mov	r18,r7
    e3c4:	1906b03a 	or	r3,r3,r4
    e3c8:	0401ffc4 	movi	r16,2047
    e3cc:	003e1906 	br	dc34 <__subdf3+0x84>
    e3d0:	000b883a 	mov	r5,zero
    e3d4:	0005883a 	mov	r2,zero
    e3d8:	003e2e06 	br	dc94 <__subdf3+0xe4>
    e3dc:	0401ffc4 	movi	r16,2047
    e3e0:	003e1406 	br	dc34 <__subdf3+0x84>
    e3e4:	0005883a 	mov	r2,zero
    e3e8:	003f7506 	br	e1c0 <__subdf3+0x610>
    e3ec:	0005883a 	mov	r2,zero
    e3f0:	0009883a 	mov	r4,zero
    e3f4:	003e7806 	br	ddd8 <__subdf3+0x228>
    e3f8:	123ff804 	addi	r8,r2,-32
    e3fc:	01000804 	movi	r4,32
    e400:	1a10d83a 	srl	r8,r3,r8
    e404:	11002526 	beq	r2,r4,e49c <__subdf3+0x8ec>
    e408:	01001004 	movi	r4,64
    e40c:	2085c83a 	sub	r2,r4,r2
    e410:	1884983a 	sll	r2,r3,r2
    e414:	1444b03a 	or	r2,r2,r17
    e418:	1004c03a 	cmpne	r2,r2,zero
    e41c:	40a2b03a 	or	r17,r8,r2
    e420:	0005883a 	mov	r2,zero
    e424:	003f1606 	br	e080 <__subdf3+0x4d0>
    e428:	02000434 	movhi	r8,16
    e42c:	0009883a 	mov	r4,zero
    e430:	423fffc4 	addi	r8,r8,-1
    e434:	00bfffc4 	movi	r2,-1
    e438:	0401ffc4 	movi	r16,2047
    e43c:	003e6606 	br	ddd8 <__subdf3+0x228>
    e440:	1c62b03a 	or	r17,r3,r17
    e444:	8822c03a 	cmpne	r17,r17,zero
    e448:	0005883a 	mov	r2,zero
    e44c:	003f9906 	br	e2b4 <__subdf3+0x704>
    e450:	2807883a 	mov	r3,r5
    e454:	3023883a 	mov	r17,r6
    e458:	0401ffc4 	movi	r16,2047
    e45c:	003df506 	br	dc34 <__subdf3+0x84>
    e460:	2807883a 	mov	r3,r5
    e464:	3023883a 	mov	r17,r6
    e468:	003df206 	br	dc34 <__subdf3+0x84>
    e46c:	123ff804 	addi	r8,r2,-32
    e470:	01000804 	movi	r4,32
    e474:	1a10d83a 	srl	r8,r3,r8
    e478:	11000a26 	beq	r2,r4,e4a4 <__subdf3+0x8f4>
    e47c:	01001004 	movi	r4,64
    e480:	2085c83a 	sub	r2,r4,r2
    e484:	1884983a 	sll	r2,r3,r2
    e488:	1444b03a 	or	r2,r2,r17
    e48c:	1004c03a 	cmpne	r2,r2,zero
    e490:	40a2b03a 	or	r17,r8,r2
    e494:	0005883a 	mov	r2,zero
    e498:	003f8606 	br	e2b4 <__subdf3+0x704>
    e49c:	0005883a 	mov	r2,zero
    e4a0:	003fdc06 	br	e414 <__subdf3+0x864>
    e4a4:	0005883a 	mov	r2,zero
    e4a8:	003ff706 	br	e488 <__subdf3+0x8d8>

0000e4ac <__fixdfsi>:
    e4ac:	280cd53a 	srli	r6,r5,20
    e4b0:	00c00434 	movhi	r3,16
    e4b4:	18ffffc4 	addi	r3,r3,-1
    e4b8:	3181ffcc 	andi	r6,r6,2047
    e4bc:	01c0ff84 	movi	r7,1022
    e4c0:	28c6703a 	and	r3,r5,r3
    e4c4:	280ad7fa 	srli	r5,r5,31
    e4c8:	3980120e 	bge	r7,r6,e514 <__fixdfsi+0x68>
    e4cc:	00810744 	movi	r2,1053
    e4d0:	11800c16 	blt	r2,r6,e504 <__fixdfsi+0x58>
    e4d4:	00810cc4 	movi	r2,1075
    e4d8:	1185c83a 	sub	r2,r2,r6
    e4dc:	01c007c4 	movi	r7,31
    e4e0:	18c00434 	orhi	r3,r3,16
    e4e4:	38800d16 	blt	r7,r2,e51c <__fixdfsi+0x70>
    e4e8:	31befb44 	addi	r6,r6,-1043
    e4ec:	2084d83a 	srl	r2,r4,r2
    e4f0:	1986983a 	sll	r3,r3,r6
    e4f4:	1884b03a 	or	r2,r3,r2
    e4f8:	28000726 	beq	r5,zero,e518 <__fixdfsi+0x6c>
    e4fc:	0085c83a 	sub	r2,zero,r2
    e500:	f800283a 	ret
    e504:	00a00034 	movhi	r2,32768
    e508:	10bfffc4 	addi	r2,r2,-1
    e50c:	2885883a 	add	r2,r5,r2
    e510:	f800283a 	ret
    e514:	0005883a 	mov	r2,zero
    e518:	f800283a 	ret
    e51c:	008104c4 	movi	r2,1043
    e520:	1185c83a 	sub	r2,r2,r6
    e524:	1884d83a 	srl	r2,r3,r2
    e528:	003ff306 	br	e4f8 <__fixdfsi+0x4c>

0000e52c <__floatsidf>:
    e52c:	defffd04 	addi	sp,sp,-12
    e530:	dfc00215 	stw	ra,8(sp)
    e534:	dc400115 	stw	r17,4(sp)
    e538:	dc000015 	stw	r16,0(sp)
    e53c:	20002b26 	beq	r4,zero,e5ec <__floatsidf+0xc0>
    e540:	2023883a 	mov	r17,r4
    e544:	2020d7fa 	srli	r16,r4,31
    e548:	20002d16 	blt	r4,zero,e600 <__floatsidf+0xd4>
    e54c:	8809883a 	mov	r4,r17
    e550:	000e6b00 	call	e6b0 <__clzsi2>
    e554:	01410784 	movi	r5,1054
    e558:	288bc83a 	sub	r5,r5,r2
    e55c:	01010cc4 	movi	r4,1075
    e560:	2149c83a 	sub	r4,r4,r5
    e564:	00c007c4 	movi	r3,31
    e568:	1900160e 	bge	r3,r4,e5c4 <__floatsidf+0x98>
    e56c:	00c104c4 	movi	r3,1043
    e570:	1947c83a 	sub	r3,r3,r5
    e574:	88c6983a 	sll	r3,r17,r3
    e578:	00800434 	movhi	r2,16
    e57c:	10bfffc4 	addi	r2,r2,-1
    e580:	1886703a 	and	r3,r3,r2
    e584:	2941ffcc 	andi	r5,r5,2047
    e588:	800d883a 	mov	r6,r16
    e58c:	0005883a 	mov	r2,zero
    e590:	280a953a 	slli	r5,r5,20
    e594:	31803fcc 	andi	r6,r6,255
    e598:	01000434 	movhi	r4,16
    e59c:	300c97fa 	slli	r6,r6,31
    e5a0:	213fffc4 	addi	r4,r4,-1
    e5a4:	1906703a 	and	r3,r3,r4
    e5a8:	1946b03a 	or	r3,r3,r5
    e5ac:	1986b03a 	or	r3,r3,r6
    e5b0:	dfc00217 	ldw	ra,8(sp)
    e5b4:	dc400117 	ldw	r17,4(sp)
    e5b8:	dc000017 	ldw	r16,0(sp)
    e5bc:	dec00304 	addi	sp,sp,12
    e5c0:	f800283a 	ret
    e5c4:	00c002c4 	movi	r3,11
    e5c8:	1887c83a 	sub	r3,r3,r2
    e5cc:	88c6d83a 	srl	r3,r17,r3
    e5d0:	8904983a 	sll	r2,r17,r4
    e5d4:	01000434 	movhi	r4,16
    e5d8:	213fffc4 	addi	r4,r4,-1
    e5dc:	2941ffcc 	andi	r5,r5,2047
    e5e0:	1906703a 	and	r3,r3,r4
    e5e4:	800d883a 	mov	r6,r16
    e5e8:	003fe906 	br	e590 <__floatsidf+0x64>
    e5ec:	000d883a 	mov	r6,zero
    e5f0:	000b883a 	mov	r5,zero
    e5f4:	0007883a 	mov	r3,zero
    e5f8:	0005883a 	mov	r2,zero
    e5fc:	003fe406 	br	e590 <__floatsidf+0x64>
    e600:	0123c83a 	sub	r17,zero,r4
    e604:	003fd106 	br	e54c <__floatsidf+0x20>

0000e608 <__floatunsidf>:
    e608:	defffe04 	addi	sp,sp,-8
    e60c:	dc000015 	stw	r16,0(sp)
    e610:	dfc00115 	stw	ra,4(sp)
    e614:	2021883a 	mov	r16,r4
    e618:	20002226 	beq	r4,zero,e6a4 <__floatunsidf+0x9c>
    e61c:	000e6b00 	call	e6b0 <__clzsi2>
    e620:	01010784 	movi	r4,1054
    e624:	2089c83a 	sub	r4,r4,r2
    e628:	01810cc4 	movi	r6,1075
    e62c:	310dc83a 	sub	r6,r6,r4
    e630:	00c007c4 	movi	r3,31
    e634:	1980120e 	bge	r3,r6,e680 <__floatunsidf+0x78>
    e638:	00c104c4 	movi	r3,1043
    e63c:	1907c83a 	sub	r3,r3,r4
    e640:	80ca983a 	sll	r5,r16,r3
    e644:	00800434 	movhi	r2,16
    e648:	10bfffc4 	addi	r2,r2,-1
    e64c:	2101ffcc 	andi	r4,r4,2047
    e650:	0021883a 	mov	r16,zero
    e654:	288a703a 	and	r5,r5,r2
    e658:	2008953a 	slli	r4,r4,20
    e65c:	00c00434 	movhi	r3,16
    e660:	18ffffc4 	addi	r3,r3,-1
    e664:	28c6703a 	and	r3,r5,r3
    e668:	8005883a 	mov	r2,r16
    e66c:	1906b03a 	or	r3,r3,r4
    e670:	dfc00117 	ldw	ra,4(sp)
    e674:	dc000017 	ldw	r16,0(sp)
    e678:	dec00204 	addi	sp,sp,8
    e67c:	f800283a 	ret
    e680:	00c002c4 	movi	r3,11
    e684:	188bc83a 	sub	r5,r3,r2
    e688:	814ad83a 	srl	r5,r16,r5
    e68c:	00c00434 	movhi	r3,16
    e690:	18ffffc4 	addi	r3,r3,-1
    e694:	81a0983a 	sll	r16,r16,r6
    e698:	2101ffcc 	andi	r4,r4,2047
    e69c:	28ca703a 	and	r5,r5,r3
    e6a0:	003fed06 	br	e658 <__floatunsidf+0x50>
    e6a4:	0009883a 	mov	r4,zero
    e6a8:	000b883a 	mov	r5,zero
    e6ac:	003fea06 	br	e658 <__floatunsidf+0x50>

0000e6b0 <__clzsi2>:
    e6b0:	00bfffd4 	movui	r2,65535
    e6b4:	11000536 	bltu	r2,r4,e6cc <__clzsi2+0x1c>
    e6b8:	00803fc4 	movi	r2,255
    e6bc:	11000f36 	bltu	r2,r4,e6fc <__clzsi2+0x4c>
    e6c0:	00800804 	movi	r2,32
    e6c4:	0007883a 	mov	r3,zero
    e6c8:	00000506 	br	e6e0 <__clzsi2+0x30>
    e6cc:	00804034 	movhi	r2,256
    e6d0:	10bfffc4 	addi	r2,r2,-1
    e6d4:	11000c2e 	bgeu	r2,r4,e708 <__clzsi2+0x58>
    e6d8:	00800204 	movi	r2,8
    e6dc:	00c00604 	movi	r3,24
    e6e0:	20c8d83a 	srl	r4,r4,r3
    e6e4:	00c00074 	movhi	r3,1
    e6e8:	18c5f304 	addi	r3,r3,6092
    e6ec:	1909883a 	add	r4,r3,r4
    e6f0:	20c00003 	ldbu	r3,0(r4)
    e6f4:	10c5c83a 	sub	r2,r2,r3
    e6f8:	f800283a 	ret
    e6fc:	00800604 	movi	r2,24
    e700:	00c00204 	movi	r3,8
    e704:	003ff606 	br	e6e0 <__clzsi2+0x30>
    e708:	00800404 	movi	r2,16
    e70c:	1007883a 	mov	r3,r2
    e710:	003ff306 	br	e6e0 <__clzsi2+0x30>

0000e714 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    e714:	defffe04 	addi	sp,sp,-8
    e718:	dfc00115 	stw	ra,4(sp)
    e71c:	df000015 	stw	fp,0(sp)
    e720:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    e724:	d0a00b17 	ldw	r2,-32724(gp)
    e728:	10000326 	beq	r2,zero,e738 <alt_get_errno+0x24>
    e72c:	d0a00b17 	ldw	r2,-32724(gp)
    e730:	103ee83a 	callr	r2
    e734:	00000106 	br	e73c <alt_get_errno+0x28>
    e738:	d0a72404 	addi	r2,gp,-25456
}
    e73c:	e037883a 	mov	sp,fp
    e740:	dfc00117 	ldw	ra,4(sp)
    e744:	df000017 	ldw	fp,0(sp)
    e748:	dec00204 	addi	sp,sp,8
    e74c:	f800283a 	ret

0000e750 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    e750:	defffb04 	addi	sp,sp,-20
    e754:	dfc00415 	stw	ra,16(sp)
    e758:	df000315 	stw	fp,12(sp)
    e75c:	df000304 	addi	fp,sp,12
    e760:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    e764:	e0bfff17 	ldw	r2,-4(fp)
    e768:	10000616 	blt	r2,zero,e784 <close+0x34>
    e76c:	e0bfff17 	ldw	r2,-4(fp)
    e770:	10c00324 	muli	r3,r2,12
    e774:	00800074 	movhi	r2,1
    e778:	1088b104 	addi	r2,r2,8900
    e77c:	1885883a 	add	r2,r3,r2
    e780:	00000106 	br	e788 <close+0x38>
    e784:	0005883a 	mov	r2,zero
    e788:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
    e78c:	e0bffd17 	ldw	r2,-12(fp)
    e790:	10001926 	beq	r2,zero,e7f8 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    e794:	e0bffd17 	ldw	r2,-12(fp)
    e798:	10800017 	ldw	r2,0(r2)
    e79c:	10800417 	ldw	r2,16(r2)
    e7a0:	10000626 	beq	r2,zero,e7bc <close+0x6c>
    e7a4:	e0bffd17 	ldw	r2,-12(fp)
    e7a8:	10800017 	ldw	r2,0(r2)
    e7ac:	10800417 	ldw	r2,16(r2)
    e7b0:	e13ffd17 	ldw	r4,-12(fp)
    e7b4:	103ee83a 	callr	r2
    e7b8:	00000106 	br	e7c0 <close+0x70>
    e7bc:	0005883a 	mov	r2,zero
    e7c0:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    e7c4:	e13fff17 	ldw	r4,-4(fp)
    e7c8:	000ee100 	call	ee10 <alt_release_fd>
    if (rval < 0)
    e7cc:	e0bffe17 	ldw	r2,-8(fp)
    e7d0:	1000070e 	bge	r2,zero,e7f0 <close+0xa0>
    {
      ALT_ERRNO = -rval;
    e7d4:	000e7140 	call	e714 <alt_get_errno>
    e7d8:	1007883a 	mov	r3,r2
    e7dc:	e0bffe17 	ldw	r2,-8(fp)
    e7e0:	0085c83a 	sub	r2,zero,r2
    e7e4:	18800015 	stw	r2,0(r3)
      return -1;
    e7e8:	00bfffc4 	movi	r2,-1
    e7ec:	00000706 	br	e80c <close+0xbc>
    }
    return 0;
    e7f0:	0005883a 	mov	r2,zero
    e7f4:	00000506 	br	e80c <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    e7f8:	000e7140 	call	e714 <alt_get_errno>
    e7fc:	1007883a 	mov	r3,r2
    e800:	00801444 	movi	r2,81
    e804:	18800015 	stw	r2,0(r3)
    return -1;
    e808:	00bfffc4 	movi	r2,-1
  }
}
    e80c:	e037883a 	mov	sp,fp
    e810:	dfc00117 	ldw	ra,4(sp)
    e814:	df000017 	ldw	fp,0(sp)
    e818:	dec00204 	addi	sp,sp,8
    e81c:	f800283a 	ret

0000e820 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    e820:	defffc04 	addi	sp,sp,-16
    e824:	df000315 	stw	fp,12(sp)
    e828:	df000304 	addi	fp,sp,12
    e82c:	e13ffd15 	stw	r4,-12(fp)
    e830:	e17ffe15 	stw	r5,-8(fp)
    e834:	e1bfff15 	stw	r6,-4(fp)
  return len;
    e838:	e0bfff17 	ldw	r2,-4(fp)
}
    e83c:	e037883a 	mov	sp,fp
    e840:	df000017 	ldw	fp,0(sp)
    e844:	dec00104 	addi	sp,sp,4
    e848:	f800283a 	ret

0000e84c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    e84c:	defffe04 	addi	sp,sp,-8
    e850:	dfc00115 	stw	ra,4(sp)
    e854:	df000015 	stw	fp,0(sp)
    e858:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    e85c:	d0a00b17 	ldw	r2,-32724(gp)
    e860:	10000326 	beq	r2,zero,e870 <alt_get_errno+0x24>
    e864:	d0a00b17 	ldw	r2,-32724(gp)
    e868:	103ee83a 	callr	r2
    e86c:	00000106 	br	e874 <alt_get_errno+0x28>
    e870:	d0a72404 	addi	r2,gp,-25456
}
    e874:	e037883a 	mov	sp,fp
    e878:	dfc00117 	ldw	ra,4(sp)
    e87c:	df000017 	ldw	fp,0(sp)
    e880:	dec00204 	addi	sp,sp,8
    e884:	f800283a 	ret

0000e888 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
    e888:	defffb04 	addi	sp,sp,-20
    e88c:	dfc00415 	stw	ra,16(sp)
    e890:	df000315 	stw	fp,12(sp)
    e894:	df000304 	addi	fp,sp,12
    e898:	e13ffe15 	stw	r4,-8(fp)
    e89c:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    e8a0:	e0bffe17 	ldw	r2,-8(fp)
    e8a4:	10000616 	blt	r2,zero,e8c0 <fstat+0x38>
    e8a8:	e0bffe17 	ldw	r2,-8(fp)
    e8ac:	10c00324 	muli	r3,r2,12
    e8b0:	00800074 	movhi	r2,1
    e8b4:	1088b104 	addi	r2,r2,8900
    e8b8:	1885883a 	add	r2,r3,r2
    e8bc:	00000106 	br	e8c4 <fstat+0x3c>
    e8c0:	0005883a 	mov	r2,zero
    e8c4:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
    e8c8:	e0bffd17 	ldw	r2,-12(fp)
    e8cc:	10001026 	beq	r2,zero,e910 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
    e8d0:	e0bffd17 	ldw	r2,-12(fp)
    e8d4:	10800017 	ldw	r2,0(r2)
    e8d8:	10800817 	ldw	r2,32(r2)
    e8dc:	10000726 	beq	r2,zero,e8fc <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
    e8e0:	e0bffd17 	ldw	r2,-12(fp)
    e8e4:	10800017 	ldw	r2,0(r2)
    e8e8:	10800817 	ldw	r2,32(r2)
    e8ec:	e17fff17 	ldw	r5,-4(fp)
    e8f0:	e13ffd17 	ldw	r4,-12(fp)
    e8f4:	103ee83a 	callr	r2
    e8f8:	00000a06 	br	e924 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
    e8fc:	e0bfff17 	ldw	r2,-4(fp)
    e900:	00c80004 	movi	r3,8192
    e904:	10c00115 	stw	r3,4(r2)
      return 0;
    e908:	0005883a 	mov	r2,zero
    e90c:	00000506 	br	e924 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    e910:	000e84c0 	call	e84c <alt_get_errno>
    e914:	1007883a 	mov	r3,r2
    e918:	00801444 	movi	r2,81
    e91c:	18800015 	stw	r2,0(r3)
    return -1;
    e920:	00bfffc4 	movi	r2,-1
  }
}
    e924:	e037883a 	mov	sp,fp
    e928:	dfc00117 	ldw	ra,4(sp)
    e92c:	df000017 	ldw	fp,0(sp)
    e930:	dec00204 	addi	sp,sp,8
    e934:	f800283a 	ret

0000e938 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    e938:	defffe04 	addi	sp,sp,-8
    e93c:	dfc00115 	stw	ra,4(sp)
    e940:	df000015 	stw	fp,0(sp)
    e944:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    e948:	d0a00b17 	ldw	r2,-32724(gp)
    e94c:	10000326 	beq	r2,zero,e95c <alt_get_errno+0x24>
    e950:	d0a00b17 	ldw	r2,-32724(gp)
    e954:	103ee83a 	callr	r2
    e958:	00000106 	br	e960 <alt_get_errno+0x28>
    e95c:	d0a72404 	addi	r2,gp,-25456
}
    e960:	e037883a 	mov	sp,fp
    e964:	dfc00117 	ldw	ra,4(sp)
    e968:	df000017 	ldw	fp,0(sp)
    e96c:	dec00204 	addi	sp,sp,8
    e970:	f800283a 	ret

0000e974 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
    e974:	deffed04 	addi	sp,sp,-76
    e978:	dfc01215 	stw	ra,72(sp)
    e97c:	df001115 	stw	fp,68(sp)
    e980:	df001104 	addi	fp,sp,68
    e984:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    e988:	e0bfff17 	ldw	r2,-4(fp)
    e98c:	10000616 	blt	r2,zero,e9a8 <isatty+0x34>
    e990:	e0bfff17 	ldw	r2,-4(fp)
    e994:	10c00324 	muli	r3,r2,12
    e998:	00800074 	movhi	r2,1
    e99c:	1088b104 	addi	r2,r2,8900
    e9a0:	1885883a 	add	r2,r3,r2
    e9a4:	00000106 	br	e9ac <isatty+0x38>
    e9a8:	0005883a 	mov	r2,zero
    e9ac:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
    e9b0:	e0bfef17 	ldw	r2,-68(fp)
    e9b4:	10000e26 	beq	r2,zero,e9f0 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    e9b8:	e0bfef17 	ldw	r2,-68(fp)
    e9bc:	10800017 	ldw	r2,0(r2)
    e9c0:	10800817 	ldw	r2,32(r2)
    e9c4:	1000021e 	bne	r2,zero,e9d0 <isatty+0x5c>
    {
      return 1;
    e9c8:	00800044 	movi	r2,1
    e9cc:	00000d06 	br	ea04 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
    e9d0:	e0bff004 	addi	r2,fp,-64
    e9d4:	100b883a 	mov	r5,r2
    e9d8:	e13fff17 	ldw	r4,-4(fp)
    e9dc:	000e8880 	call	e888 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    e9e0:	e0bff117 	ldw	r2,-60(fp)
    e9e4:	10880020 	cmpeqi	r2,r2,8192
    e9e8:	10803fcc 	andi	r2,r2,255
    e9ec:	00000506 	br	ea04 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    e9f0:	000e9380 	call	e938 <alt_get_errno>
    e9f4:	1007883a 	mov	r3,r2
    e9f8:	00801444 	movi	r2,81
    e9fc:	18800015 	stw	r2,0(r3)
    return 0;
    ea00:	0005883a 	mov	r2,zero
  }
}
    ea04:	e037883a 	mov	sp,fp
    ea08:	dfc00117 	ldw	ra,4(sp)
    ea0c:	df000017 	ldw	fp,0(sp)
    ea10:	dec00204 	addi	sp,sp,8
    ea14:	f800283a 	ret

0000ea18 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    ea18:	defffc04 	addi	sp,sp,-16
    ea1c:	df000315 	stw	fp,12(sp)
    ea20:	df000304 	addi	fp,sp,12
    ea24:	e13ffd15 	stw	r4,-12(fp)
    ea28:	e17ffe15 	stw	r5,-8(fp)
    ea2c:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    ea30:	e0fffe17 	ldw	r3,-8(fp)
    ea34:	e0bffd17 	ldw	r2,-12(fp)
    ea38:	18800c26 	beq	r3,r2,ea6c <alt_load_section+0x54>
  {
    while( to != end )
    ea3c:	00000806 	br	ea60 <alt_load_section+0x48>
    {
      *to++ = *from++;
    ea40:	e0bffe17 	ldw	r2,-8(fp)
    ea44:	10c00104 	addi	r3,r2,4
    ea48:	e0fffe15 	stw	r3,-8(fp)
    ea4c:	e0fffd17 	ldw	r3,-12(fp)
    ea50:	19000104 	addi	r4,r3,4
    ea54:	e13ffd15 	stw	r4,-12(fp)
    ea58:	18c00017 	ldw	r3,0(r3)
    ea5c:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    ea60:	e0fffe17 	ldw	r3,-8(fp)
    ea64:	e0bfff17 	ldw	r2,-4(fp)
    ea68:	18bff51e 	bne	r3,r2,ea40 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
    ea6c:	0001883a 	nop
    ea70:	e037883a 	mov	sp,fp
    ea74:	df000017 	ldw	fp,0(sp)
    ea78:	dec00104 	addi	sp,sp,4
    ea7c:	f800283a 	ret

0000ea80 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    ea80:	defffe04 	addi	sp,sp,-8
    ea84:	dfc00115 	stw	ra,4(sp)
    ea88:	df000015 	stw	fp,0(sp)
    ea8c:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    ea90:	01800074 	movhi	r6,1
    ea94:	318d3904 	addi	r6,r6,13540
    ea98:	01400074 	movhi	r5,1
    ea9c:	29463e04 	addi	r5,r5,6392
    eaa0:	01000074 	movhi	r4,1
    eaa4:	210d3904 	addi	r4,r4,13540
    eaa8:	000ea180 	call	ea18 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    eaac:	01800034 	movhi	r6,0
    eab0:	31809104 	addi	r6,r6,580
    eab4:	01400034 	movhi	r5,0
    eab8:	29400804 	addi	r5,r5,32
    eabc:	01000034 	movhi	r4,0
    eac0:	21000804 	addi	r4,r4,32
    eac4:	000ea180 	call	ea18 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    eac8:	01800074 	movhi	r6,1
    eacc:	31863e04 	addi	r6,r6,6392
    ead0:	01400074 	movhi	r5,1
    ead4:	29445504 	addi	r5,r5,4436
    ead8:	01000074 	movhi	r4,1
    eadc:	21045504 	addi	r4,r4,4436
    eae0:	000ea180 	call	ea18 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    eae4:	00100680 	call	10068 <alt_dcache_flush_all>
  alt_icache_flush_all();
    eae8:	00102280 	call	10228 <alt_icache_flush_all>
}
    eaec:	0001883a 	nop
    eaf0:	e037883a 	mov	sp,fp
    eaf4:	dfc00117 	ldw	ra,4(sp)
    eaf8:	df000017 	ldw	fp,0(sp)
    eafc:	dec00204 	addi	sp,sp,8
    eb00:	f800283a 	ret

0000eb04 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    eb04:	defffe04 	addi	sp,sp,-8
    eb08:	dfc00115 	stw	ra,4(sp)
    eb0c:	df000015 	stw	fp,0(sp)
    eb10:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    eb14:	d0a00b17 	ldw	r2,-32724(gp)
    eb18:	10000326 	beq	r2,zero,eb28 <alt_get_errno+0x24>
    eb1c:	d0a00b17 	ldw	r2,-32724(gp)
    eb20:	103ee83a 	callr	r2
    eb24:	00000106 	br	eb2c <alt_get_errno+0x28>
    eb28:	d0a72404 	addi	r2,gp,-25456
}
    eb2c:	e037883a 	mov	sp,fp
    eb30:	dfc00117 	ldw	ra,4(sp)
    eb34:	df000017 	ldw	fp,0(sp)
    eb38:	dec00204 	addi	sp,sp,8
    eb3c:	f800283a 	ret

0000eb40 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
    eb40:	defff904 	addi	sp,sp,-28
    eb44:	dfc00615 	stw	ra,24(sp)
    eb48:	df000515 	stw	fp,20(sp)
    eb4c:	df000504 	addi	fp,sp,20
    eb50:	e13ffd15 	stw	r4,-12(fp)
    eb54:	e17ffe15 	stw	r5,-8(fp)
    eb58:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
    eb5c:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    eb60:	e0bffd17 	ldw	r2,-12(fp)
    eb64:	10000616 	blt	r2,zero,eb80 <lseek+0x40>
    eb68:	e0bffd17 	ldw	r2,-12(fp)
    eb6c:	10c00324 	muli	r3,r2,12
    eb70:	00800074 	movhi	r2,1
    eb74:	1088b104 	addi	r2,r2,8900
    eb78:	1885883a 	add	r2,r3,r2
    eb7c:	00000106 	br	eb84 <lseek+0x44>
    eb80:	0005883a 	mov	r2,zero
    eb84:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
    eb88:	e0bffc17 	ldw	r2,-16(fp)
    eb8c:	10001026 	beq	r2,zero,ebd0 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
    eb90:	e0bffc17 	ldw	r2,-16(fp)
    eb94:	10800017 	ldw	r2,0(r2)
    eb98:	10800717 	ldw	r2,28(r2)
    eb9c:	10000926 	beq	r2,zero,ebc4 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
    eba0:	e0bffc17 	ldw	r2,-16(fp)
    eba4:	10800017 	ldw	r2,0(r2)
    eba8:	10800717 	ldw	r2,28(r2)
    ebac:	e1bfff17 	ldw	r6,-4(fp)
    ebb0:	e17ffe17 	ldw	r5,-8(fp)
    ebb4:	e13ffc17 	ldw	r4,-16(fp)
    ebb8:	103ee83a 	callr	r2
    ebbc:	e0bffb15 	stw	r2,-20(fp)
    ebc0:	00000506 	br	ebd8 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
    ebc4:	00bfde84 	movi	r2,-134
    ebc8:	e0bffb15 	stw	r2,-20(fp)
    ebcc:	00000206 	br	ebd8 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
    ebd0:	00bfebc4 	movi	r2,-81
    ebd4:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
    ebd8:	e0bffb17 	ldw	r2,-20(fp)
    ebdc:	1000070e 	bge	r2,zero,ebfc <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
    ebe0:	000eb040 	call	eb04 <alt_get_errno>
    ebe4:	1007883a 	mov	r3,r2
    ebe8:	e0bffb17 	ldw	r2,-20(fp)
    ebec:	0085c83a 	sub	r2,zero,r2
    ebf0:	18800015 	stw	r2,0(r3)
    rc = -1;
    ebf4:	00bfffc4 	movi	r2,-1
    ebf8:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
    ebfc:	e0bffb17 	ldw	r2,-20(fp)
}
    ec00:	e037883a 	mov	sp,fp
    ec04:	dfc00117 	ldw	ra,4(sp)
    ec08:	df000017 	ldw	fp,0(sp)
    ec0c:	dec00204 	addi	sp,sp,8
    ec10:	f800283a 	ret

0000ec14 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    ec14:	defffd04 	addi	sp,sp,-12
    ec18:	dfc00215 	stw	ra,8(sp)
    ec1c:	df000115 	stw	fp,4(sp)
    ec20:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    ec24:	0009883a 	mov	r4,zero
    ec28:	000f0bc0 	call	f0bc <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
    ec2c:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    ec30:	000f0f40 	call	f0f4 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    ec34:	01800074 	movhi	r6,1
    ec38:	31863604 	addi	r6,r6,6360
    ec3c:	01400074 	movhi	r5,1
    ec40:	29463604 	addi	r5,r5,6360
    ec44:	01000074 	movhi	r4,1
    ec48:	21063604 	addi	r4,r4,6360
    ec4c:	00105c00 	call	105c0 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    ec50:	00101680 	call	10168 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    ec54:	01000074 	movhi	r4,1
    ec58:	21007204 	addi	r4,r4,456
    ec5c:	0010dc00 	call	10dc0 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    ec60:	d0a72817 	ldw	r2,-25440(gp)
    ec64:	d0e72917 	ldw	r3,-25436(gp)
    ec68:	d1272a17 	ldw	r4,-25432(gp)
    ec6c:	200d883a 	mov	r6,r4
    ec70:	180b883a 	mov	r5,r3
    ec74:	1009883a 	mov	r4,r2
    ec78:	0000fbc0 	call	fbc <main>
    ec7c:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    ec80:	01000044 	movi	r4,1
    ec84:	000e7500 	call	e750 <close>
  exit (result);
    ec88:	e13fff17 	ldw	r4,-4(fp)
    ec8c:	0010dd40 	call	10dd4 <exit>

0000ec90 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
    ec90:	defffe04 	addi	sp,sp,-8
    ec94:	df000115 	stw	fp,4(sp)
    ec98:	df000104 	addi	fp,sp,4
    ec9c:	e13fff15 	stw	r4,-4(fp)
}
    eca0:	0001883a 	nop
    eca4:	e037883a 	mov	sp,fp
    eca8:	df000017 	ldw	fp,0(sp)
    ecac:	dec00104 	addi	sp,sp,4
    ecb0:	f800283a 	ret

0000ecb4 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
    ecb4:	defffe04 	addi	sp,sp,-8
    ecb8:	df000115 	stw	fp,4(sp)
    ecbc:	df000104 	addi	fp,sp,4
    ecc0:	e13fff15 	stw	r4,-4(fp)
}
    ecc4:	0001883a 	nop
    ecc8:	e037883a 	mov	sp,fp
    eccc:	df000017 	ldw	fp,0(sp)
    ecd0:	dec00104 	addi	sp,sp,4
    ecd4:	f800283a 	ret

0000ecd8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    ecd8:	defffe04 	addi	sp,sp,-8
    ecdc:	dfc00115 	stw	ra,4(sp)
    ece0:	df000015 	stw	fp,0(sp)
    ece4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    ece8:	d0a00b17 	ldw	r2,-32724(gp)
    ecec:	10000326 	beq	r2,zero,ecfc <alt_get_errno+0x24>
    ecf0:	d0a00b17 	ldw	r2,-32724(gp)
    ecf4:	103ee83a 	callr	r2
    ecf8:	00000106 	br	ed00 <alt_get_errno+0x28>
    ecfc:	d0a72404 	addi	r2,gp,-25456
}
    ed00:	e037883a 	mov	sp,fp
    ed04:	dfc00117 	ldw	ra,4(sp)
    ed08:	df000017 	ldw	fp,0(sp)
    ed0c:	dec00204 	addi	sp,sp,8
    ed10:	f800283a 	ret

0000ed14 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
    ed14:	defff904 	addi	sp,sp,-28
    ed18:	dfc00615 	stw	ra,24(sp)
    ed1c:	df000515 	stw	fp,20(sp)
    ed20:	df000504 	addi	fp,sp,20
    ed24:	e13ffd15 	stw	r4,-12(fp)
    ed28:	e17ffe15 	stw	r5,-8(fp)
    ed2c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    ed30:	e0bffd17 	ldw	r2,-12(fp)
    ed34:	10000616 	blt	r2,zero,ed50 <read+0x3c>
    ed38:	e0bffd17 	ldw	r2,-12(fp)
    ed3c:	10c00324 	muli	r3,r2,12
    ed40:	00800074 	movhi	r2,1
    ed44:	1088b104 	addi	r2,r2,8900
    ed48:	1885883a 	add	r2,r3,r2
    ed4c:	00000106 	br	ed54 <read+0x40>
    ed50:	0005883a 	mov	r2,zero
    ed54:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    ed58:	e0bffb17 	ldw	r2,-20(fp)
    ed5c:	10002226 	beq	r2,zero,ede8 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    ed60:	e0bffb17 	ldw	r2,-20(fp)
    ed64:	10800217 	ldw	r2,8(r2)
    ed68:	108000cc 	andi	r2,r2,3
    ed6c:	10800060 	cmpeqi	r2,r2,1
    ed70:	1000181e 	bne	r2,zero,edd4 <read+0xc0>
        (fd->dev->read))
    ed74:	e0bffb17 	ldw	r2,-20(fp)
    ed78:	10800017 	ldw	r2,0(r2)
    ed7c:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    ed80:	10001426 	beq	r2,zero,edd4 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
    ed84:	e0bffb17 	ldw	r2,-20(fp)
    ed88:	10800017 	ldw	r2,0(r2)
    ed8c:	10800517 	ldw	r2,20(r2)
    ed90:	e0ffff17 	ldw	r3,-4(fp)
    ed94:	180d883a 	mov	r6,r3
    ed98:	e17ffe17 	ldw	r5,-8(fp)
    ed9c:	e13ffb17 	ldw	r4,-20(fp)
    eda0:	103ee83a 	callr	r2
    eda4:	e0bffc15 	stw	r2,-16(fp)
    eda8:	e0bffc17 	ldw	r2,-16(fp)
    edac:	1000070e 	bge	r2,zero,edcc <read+0xb8>
        {
          ALT_ERRNO = -rval;
    edb0:	000ecd80 	call	ecd8 <alt_get_errno>
    edb4:	1007883a 	mov	r3,r2
    edb8:	e0bffc17 	ldw	r2,-16(fp)
    edbc:	0085c83a 	sub	r2,zero,r2
    edc0:	18800015 	stw	r2,0(r3)
          return -1;
    edc4:	00bfffc4 	movi	r2,-1
    edc8:	00000c06 	br	edfc <read+0xe8>
        }
        return rval;
    edcc:	e0bffc17 	ldw	r2,-16(fp)
    edd0:	00000a06 	br	edfc <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
    edd4:	000ecd80 	call	ecd8 <alt_get_errno>
    edd8:	1007883a 	mov	r3,r2
    eddc:	00800344 	movi	r2,13
    ede0:	18800015 	stw	r2,0(r3)
    ede4:	00000406 	br	edf8 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
    ede8:	000ecd80 	call	ecd8 <alt_get_errno>
    edec:	1007883a 	mov	r3,r2
    edf0:	00801444 	movi	r2,81
    edf4:	18800015 	stw	r2,0(r3)
  }
  return -1;
    edf8:	00bfffc4 	movi	r2,-1
}
    edfc:	e037883a 	mov	sp,fp
    ee00:	dfc00117 	ldw	ra,4(sp)
    ee04:	df000017 	ldw	fp,0(sp)
    ee08:	dec00204 	addi	sp,sp,8
    ee0c:	f800283a 	ret

0000ee10 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    ee10:	defffe04 	addi	sp,sp,-8
    ee14:	df000115 	stw	fp,4(sp)
    ee18:	df000104 	addi	fp,sp,4
    ee1c:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
    ee20:	e0bfff17 	ldw	r2,-4(fp)
    ee24:	108000d0 	cmplti	r2,r2,3
    ee28:	10000d1e 	bne	r2,zero,ee60 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
    ee2c:	00800074 	movhi	r2,1
    ee30:	1088b104 	addi	r2,r2,8900
    ee34:	e0ffff17 	ldw	r3,-4(fp)
    ee38:	18c00324 	muli	r3,r3,12
    ee3c:	10c5883a 	add	r2,r2,r3
    ee40:	10800204 	addi	r2,r2,8
    ee44:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    ee48:	00800074 	movhi	r2,1
    ee4c:	1088b104 	addi	r2,r2,8900
    ee50:	e0ffff17 	ldw	r3,-4(fp)
    ee54:	18c00324 	muli	r3,r3,12
    ee58:	10c5883a 	add	r2,r2,r3
    ee5c:	10000015 	stw	zero,0(r2)
  }
}
    ee60:	0001883a 	nop
    ee64:	e037883a 	mov	sp,fp
    ee68:	df000017 	ldw	fp,0(sp)
    ee6c:	dec00104 	addi	sp,sp,4
    ee70:	f800283a 	ret

0000ee74 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
    ee74:	defff904 	addi	sp,sp,-28
    ee78:	df000615 	stw	fp,24(sp)
    ee7c:	df000604 	addi	fp,sp,24
    ee80:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    ee84:	0005303a 	rdctl	r2,status
    ee88:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    ee8c:	e0fffe17 	ldw	r3,-8(fp)
    ee90:	00bfff84 	movi	r2,-2
    ee94:	1884703a 	and	r2,r3,r2
    ee98:	1001703a 	wrctl	status,r2
  
  return context;
    ee9c:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
    eea0:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    eea4:	d0a00c17 	ldw	r2,-32720(gp)
    eea8:	10c000c4 	addi	r3,r2,3
    eeac:	00bfff04 	movi	r2,-4
    eeb0:	1884703a 	and	r2,r3,r2
    eeb4:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    eeb8:	d0e00c17 	ldw	r3,-32720(gp)
    eebc:	e0bfff17 	ldw	r2,-4(fp)
    eec0:	1887883a 	add	r3,r3,r2
    eec4:	00804034 	movhi	r2,256
    eec8:	10800004 	addi	r2,r2,0
    eecc:	10c0062e 	bgeu	r2,r3,eee8 <sbrk+0x74>
    eed0:	e0bffb17 	ldw	r2,-20(fp)
    eed4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    eed8:	e0bffa17 	ldw	r2,-24(fp)
    eedc:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
    eee0:	00bfffc4 	movi	r2,-1
    eee4:	00000b06 	br	ef14 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
    eee8:	d0a00c17 	ldw	r2,-32720(gp)
    eeec:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
    eef0:	d0e00c17 	ldw	r3,-32720(gp)
    eef4:	e0bfff17 	ldw	r2,-4(fp)
    eef8:	1885883a 	add	r2,r3,r2
    eefc:	d0a00c15 	stw	r2,-32720(gp)
    ef00:	e0bffb17 	ldw	r2,-20(fp)
    ef04:	e0bffc15 	stw	r2,-16(fp)
    ef08:	e0bffc17 	ldw	r2,-16(fp)
    ef0c:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
    ef10:	e0bffd17 	ldw	r2,-12(fp)
} 
    ef14:	e037883a 	mov	sp,fp
    ef18:	df000017 	ldw	fp,0(sp)
    ef1c:	dec00104 	addi	sp,sp,4
    ef20:	f800283a 	ret

0000ef24 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
    ef24:	defffd04 	addi	sp,sp,-12
    ef28:	dfc00215 	stw	ra,8(sp)
    ef2c:	df000115 	stw	fp,4(sp)
    ef30:	df000104 	addi	fp,sp,4
    ef34:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
    ef38:	e13fff17 	ldw	r4,-4(fp)
    ef3c:	000ff100 	call	ff10 <alt_busy_sleep>
}
    ef40:	e037883a 	mov	sp,fp
    ef44:	dfc00117 	ldw	ra,4(sp)
    ef48:	df000017 	ldw	fp,0(sp)
    ef4c:	dec00204 	addi	sp,sp,8
    ef50:	f800283a 	ret

0000ef54 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    ef54:	defffe04 	addi	sp,sp,-8
    ef58:	dfc00115 	stw	ra,4(sp)
    ef5c:	df000015 	stw	fp,0(sp)
    ef60:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    ef64:	d0a00b17 	ldw	r2,-32724(gp)
    ef68:	10000326 	beq	r2,zero,ef78 <alt_get_errno+0x24>
    ef6c:	d0a00b17 	ldw	r2,-32724(gp)
    ef70:	103ee83a 	callr	r2
    ef74:	00000106 	br	ef7c <alt_get_errno+0x28>
    ef78:	d0a72404 	addi	r2,gp,-25456
}
    ef7c:	e037883a 	mov	sp,fp
    ef80:	dfc00117 	ldw	ra,4(sp)
    ef84:	df000017 	ldw	fp,0(sp)
    ef88:	dec00204 	addi	sp,sp,8
    ef8c:	f800283a 	ret

0000ef90 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    ef90:	defff904 	addi	sp,sp,-28
    ef94:	dfc00615 	stw	ra,24(sp)
    ef98:	df000515 	stw	fp,20(sp)
    ef9c:	df000504 	addi	fp,sp,20
    efa0:	e13ffd15 	stw	r4,-12(fp)
    efa4:	e17ffe15 	stw	r5,-8(fp)
    efa8:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    efac:	e0bffd17 	ldw	r2,-12(fp)
    efb0:	10000616 	blt	r2,zero,efcc <write+0x3c>
    efb4:	e0bffd17 	ldw	r2,-12(fp)
    efb8:	10c00324 	muli	r3,r2,12
    efbc:	00800074 	movhi	r2,1
    efc0:	1088b104 	addi	r2,r2,8900
    efc4:	1885883a 	add	r2,r3,r2
    efc8:	00000106 	br	efd0 <write+0x40>
    efcc:	0005883a 	mov	r2,zero
    efd0:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    efd4:	e0bffb17 	ldw	r2,-20(fp)
    efd8:	10002126 	beq	r2,zero,f060 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    efdc:	e0bffb17 	ldw	r2,-20(fp)
    efe0:	10800217 	ldw	r2,8(r2)
    efe4:	108000cc 	andi	r2,r2,3
    efe8:	10001826 	beq	r2,zero,f04c <write+0xbc>
    efec:	e0bffb17 	ldw	r2,-20(fp)
    eff0:	10800017 	ldw	r2,0(r2)
    eff4:	10800617 	ldw	r2,24(r2)
    eff8:	10001426 	beq	r2,zero,f04c <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    effc:	e0bffb17 	ldw	r2,-20(fp)
    f000:	10800017 	ldw	r2,0(r2)
    f004:	10800617 	ldw	r2,24(r2)
    f008:	e0ffff17 	ldw	r3,-4(fp)
    f00c:	180d883a 	mov	r6,r3
    f010:	e17ffe17 	ldw	r5,-8(fp)
    f014:	e13ffb17 	ldw	r4,-20(fp)
    f018:	103ee83a 	callr	r2
    f01c:	e0bffc15 	stw	r2,-16(fp)
    f020:	e0bffc17 	ldw	r2,-16(fp)
    f024:	1000070e 	bge	r2,zero,f044 <write+0xb4>
      {
        ALT_ERRNO = -rval;
    f028:	000ef540 	call	ef54 <alt_get_errno>
    f02c:	1007883a 	mov	r3,r2
    f030:	e0bffc17 	ldw	r2,-16(fp)
    f034:	0085c83a 	sub	r2,zero,r2
    f038:	18800015 	stw	r2,0(r3)
        return -1;
    f03c:	00bfffc4 	movi	r2,-1
    f040:	00000c06 	br	f074 <write+0xe4>
      }
      return rval;
    f044:	e0bffc17 	ldw	r2,-16(fp)
    f048:	00000a06 	br	f074 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
    f04c:	000ef540 	call	ef54 <alt_get_errno>
    f050:	1007883a 	mov	r3,r2
    f054:	00800344 	movi	r2,13
    f058:	18800015 	stw	r2,0(r3)
    f05c:	00000406 	br	f070 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    f060:	000ef540 	call	ef54 <alt_get_errno>
    f064:	1007883a 	mov	r3,r2
    f068:	00801444 	movi	r2,81
    f06c:	18800015 	stw	r2,0(r3)
  }
  return -1;
    f070:	00bfffc4 	movi	r2,-1
}
    f074:	e037883a 	mov	sp,fp
    f078:	dfc00117 	ldw	ra,4(sp)
    f07c:	df000017 	ldw	fp,0(sp)
    f080:	dec00204 	addi	sp,sp,8
    f084:	f800283a 	ret

0000f088 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    f088:	defffd04 	addi	sp,sp,-12
    f08c:	dfc00215 	stw	ra,8(sp)
    f090:	df000115 	stw	fp,4(sp)
    f094:	df000104 	addi	fp,sp,4
    f098:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    f09c:	d1600804 	addi	r5,gp,-32736
    f0a0:	e13fff17 	ldw	r4,-4(fp)
    f0a4:	00100c40 	call	100c4 <alt_dev_llist_insert>
}
    f0a8:	e037883a 	mov	sp,fp
    f0ac:	dfc00117 	ldw	ra,4(sp)
    f0b0:	df000017 	ldw	fp,0(sp)
    f0b4:	dec00204 	addi	sp,sp,8
    f0b8:	f800283a 	ret

0000f0bc <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    f0bc:	defffd04 	addi	sp,sp,-12
    f0c0:	dfc00215 	stw	ra,8(sp)
    f0c4:	df000115 	stw	fp,4(sp)
    f0c8:	df000104 	addi	fp,sp,4
    f0cc:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
    f0d0:	0010a340 	call	10a34 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    f0d4:	00800044 	movi	r2,1
    f0d8:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    f0dc:	0001883a 	nop
    f0e0:	e037883a 	mov	sp,fp
    f0e4:	dfc00117 	ldw	ra,4(sp)
    f0e8:	df000017 	ldw	fp,0(sp)
    f0ec:	dec00204 	addi	sp,sp,8
    f0f0:	f800283a 	ret

0000f0f4 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    f0f4:	defffe04 	addi	sp,sp,-8
    f0f8:	dfc00115 	stw	ra,4(sp)
    f0fc:	df000015 	stw	fp,0(sp)
    f100:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( PROFILETIMER, ProfileTimer);
    f104:	00804034 	movhi	r2,256
    f108:	10840004 	addi	r2,r2,4096
    f10c:	d0a72b15 	stw	r2,-25428(gp)
    f110:	0080bef4 	movhi	r2,763
    f114:	10bc2004 	addi	r2,r2,-3968
    f118:	d0a72c15 	stw	r2,-25424(gp)
    ALTERA_AVALON_TIMER_INIT ( SYSTIMER, Systimer);
    f11c:	01c0fa04 	movi	r7,1000
    f120:	01800104 	movi	r6,4
    f124:	000b883a 	mov	r5,zero
    f128:	01004034 	movhi	r4,256
    f12c:	21040804 	addi	r4,r4,4128
    f130:	000fc500 	call	fc50 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
    f134:	000d883a 	mov	r6,zero
    f138:	000b883a 	mov	r5,zero
    f13c:	01000074 	movhi	r4,1
    f140:	21091b04 	addi	r4,r4,9324
    f144:	000f2d40 	call	f2d4 <altera_avalon_jtag_uart_init>
    f148:	01000074 	movhi	r4,1
    f14c:	21091104 	addi	r4,r4,9284
    f150:	000f0880 	call	f088 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
    f154:	0001883a 	nop
}
    f158:	0001883a 	nop
    f15c:	e037883a 	mov	sp,fp
    f160:	dfc00117 	ldw	ra,4(sp)
    f164:	df000017 	ldw	fp,0(sp)
    f168:	dec00204 	addi	sp,sp,8
    f16c:	f800283a 	ret

0000f170 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    f170:	defffa04 	addi	sp,sp,-24
    f174:	dfc00515 	stw	ra,20(sp)
    f178:	df000415 	stw	fp,16(sp)
    f17c:	df000404 	addi	fp,sp,16
    f180:	e13ffd15 	stw	r4,-12(fp)
    f184:	e17ffe15 	stw	r5,-8(fp)
    f188:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    f18c:	e0bffd17 	ldw	r2,-12(fp)
    f190:	10800017 	ldw	r2,0(r2)
    f194:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    f198:	e0bffc17 	ldw	r2,-16(fp)
    f19c:	10c00a04 	addi	r3,r2,40
    f1a0:	e0bffd17 	ldw	r2,-12(fp)
    f1a4:	10800217 	ldw	r2,8(r2)
    f1a8:	100f883a 	mov	r7,r2
    f1ac:	e1bfff17 	ldw	r6,-4(fp)
    f1b0:	e17ffe17 	ldw	r5,-8(fp)
    f1b4:	1809883a 	mov	r4,r3
    f1b8:	000f7980 	call	f798 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    f1bc:	e037883a 	mov	sp,fp
    f1c0:	dfc00117 	ldw	ra,4(sp)
    f1c4:	df000017 	ldw	fp,0(sp)
    f1c8:	dec00204 	addi	sp,sp,8
    f1cc:	f800283a 	ret

0000f1d0 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    f1d0:	defffa04 	addi	sp,sp,-24
    f1d4:	dfc00515 	stw	ra,20(sp)
    f1d8:	df000415 	stw	fp,16(sp)
    f1dc:	df000404 	addi	fp,sp,16
    f1e0:	e13ffd15 	stw	r4,-12(fp)
    f1e4:	e17ffe15 	stw	r5,-8(fp)
    f1e8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    f1ec:	e0bffd17 	ldw	r2,-12(fp)
    f1f0:	10800017 	ldw	r2,0(r2)
    f1f4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    f1f8:	e0bffc17 	ldw	r2,-16(fp)
    f1fc:	10c00a04 	addi	r3,r2,40
    f200:	e0bffd17 	ldw	r2,-12(fp)
    f204:	10800217 	ldw	r2,8(r2)
    f208:	100f883a 	mov	r7,r2
    f20c:	e1bfff17 	ldw	r6,-4(fp)
    f210:	e17ffe17 	ldw	r5,-8(fp)
    f214:	1809883a 	mov	r4,r3
    f218:	000f9b40 	call	f9b4 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    f21c:	e037883a 	mov	sp,fp
    f220:	dfc00117 	ldw	ra,4(sp)
    f224:	df000017 	ldw	fp,0(sp)
    f228:	dec00204 	addi	sp,sp,8
    f22c:	f800283a 	ret

0000f230 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
    f230:	defffc04 	addi	sp,sp,-16
    f234:	dfc00315 	stw	ra,12(sp)
    f238:	df000215 	stw	fp,8(sp)
    f23c:	df000204 	addi	fp,sp,8
    f240:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    f244:	e0bfff17 	ldw	r2,-4(fp)
    f248:	10800017 	ldw	r2,0(r2)
    f24c:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
    f250:	e0bffe17 	ldw	r2,-8(fp)
    f254:	10c00a04 	addi	r3,r2,40
    f258:	e0bfff17 	ldw	r2,-4(fp)
    f25c:	10800217 	ldw	r2,8(r2)
    f260:	100b883a 	mov	r5,r2
    f264:	1809883a 	mov	r4,r3
    f268:	000f6400 	call	f640 <altera_avalon_jtag_uart_close>
}
    f26c:	e037883a 	mov	sp,fp
    f270:	dfc00117 	ldw	ra,4(sp)
    f274:	df000017 	ldw	fp,0(sp)
    f278:	dec00204 	addi	sp,sp,8
    f27c:	f800283a 	ret

0000f280 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
    f280:	defffa04 	addi	sp,sp,-24
    f284:	dfc00515 	stw	ra,20(sp)
    f288:	df000415 	stw	fp,16(sp)
    f28c:	df000404 	addi	fp,sp,16
    f290:	e13ffd15 	stw	r4,-12(fp)
    f294:	e17ffe15 	stw	r5,-8(fp)
    f298:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
    f29c:	e0bffd17 	ldw	r2,-12(fp)
    f2a0:	10800017 	ldw	r2,0(r2)
    f2a4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
    f2a8:	e0bffc17 	ldw	r2,-16(fp)
    f2ac:	10800a04 	addi	r2,r2,40
    f2b0:	e1bfff17 	ldw	r6,-4(fp)
    f2b4:	e17ffe17 	ldw	r5,-8(fp)
    f2b8:	1009883a 	mov	r4,r2
    f2bc:	000f6a80 	call	f6a8 <altera_avalon_jtag_uart_ioctl>
}
    f2c0:	e037883a 	mov	sp,fp
    f2c4:	dfc00117 	ldw	ra,4(sp)
    f2c8:	df000017 	ldw	fp,0(sp)
    f2cc:	dec00204 	addi	sp,sp,8
    f2d0:	f800283a 	ret

0000f2d4 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
    f2d4:	defffa04 	addi	sp,sp,-24
    f2d8:	dfc00515 	stw	ra,20(sp)
    f2dc:	df000415 	stw	fp,16(sp)
    f2e0:	df000404 	addi	fp,sp,16
    f2e4:	e13ffd15 	stw	r4,-12(fp)
    f2e8:	e17ffe15 	stw	r5,-8(fp)
    f2ec:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    f2f0:	e0bffd17 	ldw	r2,-12(fp)
    f2f4:	00c00044 	movi	r3,1
    f2f8:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
    f2fc:	e0bffd17 	ldw	r2,-12(fp)
    f300:	10800017 	ldw	r2,0(r2)
    f304:	10800104 	addi	r2,r2,4
    f308:	1007883a 	mov	r3,r2
    f30c:	e0bffd17 	ldw	r2,-12(fp)
    f310:	10800817 	ldw	r2,32(r2)
    f314:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
    f318:	e0bffe17 	ldw	r2,-8(fp)
    f31c:	e0ffff17 	ldw	r3,-4(fp)
    f320:	d8000015 	stw	zero,0(sp)
    f324:	e1fffd17 	ldw	r7,-12(fp)
    f328:	01800074 	movhi	r6,1
    f32c:	31bce504 	addi	r6,r6,-3180
    f330:	180b883a 	mov	r5,r3
    f334:	1009883a 	mov	r4,r2
    f338:	001025c0 	call	1025c <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
    f33c:	e0bffd17 	ldw	r2,-12(fp)
    f340:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
    f344:	e0bffd17 	ldw	r2,-12(fp)
    f348:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    f34c:	d0e72e17 	ldw	r3,-25416(gp)
    f350:	e1fffd17 	ldw	r7,-12(fp)
    f354:	01800074 	movhi	r6,1
    f358:	31bd6804 	addi	r6,r6,-2656
    f35c:	180b883a 	mov	r5,r3
    f360:	1009883a 	mov	r4,r2
    f364:	000fde40 	call	fde4 <alt_alarm_start>
    f368:	1000040e 	bge	r2,zero,f37c <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
    f36c:	e0fffd17 	ldw	r3,-12(fp)
    f370:	00a00034 	movhi	r2,32768
    f374:	10bfffc4 	addi	r2,r2,-1
    f378:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
    f37c:	0001883a 	nop
    f380:	e037883a 	mov	sp,fp
    f384:	dfc00117 	ldw	ra,4(sp)
    f388:	df000017 	ldw	fp,0(sp)
    f38c:	dec00204 	addi	sp,sp,8
    f390:	f800283a 	ret

0000f394 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
    f394:	defff804 	addi	sp,sp,-32
    f398:	df000715 	stw	fp,28(sp)
    f39c:	df000704 	addi	fp,sp,28
    f3a0:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
    f3a4:	e0bfff17 	ldw	r2,-4(fp)
    f3a8:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
    f3ac:	e0bffb17 	ldw	r2,-20(fp)
    f3b0:	10800017 	ldw	r2,0(r2)
    f3b4:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    f3b8:	e0bffc17 	ldw	r2,-16(fp)
    f3bc:	10800104 	addi	r2,r2,4
    f3c0:	10800037 	ldwio	r2,0(r2)
    f3c4:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
    f3c8:	e0bffd17 	ldw	r2,-12(fp)
    f3cc:	1080c00c 	andi	r2,r2,768
    f3d0:	10006d26 	beq	r2,zero,f588 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
    f3d4:	e0bffd17 	ldw	r2,-12(fp)
    f3d8:	1080400c 	andi	r2,r2,256
    f3dc:	10003526 	beq	r2,zero,f4b4 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
    f3e0:	00800074 	movhi	r2,1
    f3e4:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    f3e8:	e0bffb17 	ldw	r2,-20(fp)
    f3ec:	10800a17 	ldw	r2,40(r2)
    f3f0:	10800044 	addi	r2,r2,1
    f3f4:	1081ffcc 	andi	r2,r2,2047
    f3f8:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
    f3fc:	e0bffb17 	ldw	r2,-20(fp)
    f400:	10c00b17 	ldw	r3,44(r2)
    f404:	e0bffe17 	ldw	r2,-8(fp)
    f408:	18801526 	beq	r3,r2,f460 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    f40c:	e0bffc17 	ldw	r2,-16(fp)
    f410:	10800037 	ldwio	r2,0(r2)
    f414:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
    f418:	e0bff917 	ldw	r2,-28(fp)
    f41c:	10a0000c 	andi	r2,r2,32768
    f420:	10001126 	beq	r2,zero,f468 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    f424:	e0bffb17 	ldw	r2,-20(fp)
    f428:	10800a17 	ldw	r2,40(r2)
    f42c:	e0fff917 	ldw	r3,-28(fp)
    f430:	1809883a 	mov	r4,r3
    f434:	e0fffb17 	ldw	r3,-20(fp)
    f438:	1885883a 	add	r2,r3,r2
    f43c:	10800e04 	addi	r2,r2,56
    f440:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    f444:	e0bffb17 	ldw	r2,-20(fp)
    f448:	10800a17 	ldw	r2,40(r2)
    f44c:	10800044 	addi	r2,r2,1
    f450:	10c1ffcc 	andi	r3,r2,2047
    f454:	e0bffb17 	ldw	r2,-20(fp)
    f458:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
    f45c:	003fe206 	br	f3e8 <altera_avalon_jtag_uart_irq+0x54>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
    f460:	0001883a 	nop
    f464:	00000106 	br	f46c <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
    f468:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
    f46c:	e0bff917 	ldw	r2,-28(fp)
    f470:	10bfffec 	andhi	r2,r2,65535
    f474:	10000f26 	beq	r2,zero,f4b4 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    f478:	e0bffb17 	ldw	r2,-20(fp)
    f47c:	10c00817 	ldw	r3,32(r2)
    f480:	00bfff84 	movi	r2,-2
    f484:	1886703a 	and	r3,r3,r2
    f488:	e0bffb17 	ldw	r2,-20(fp)
    f48c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
    f490:	e0bffc17 	ldw	r2,-16(fp)
    f494:	10800104 	addi	r2,r2,4
    f498:	1007883a 	mov	r3,r2
    f49c:	e0bffb17 	ldw	r2,-20(fp)
    f4a0:	10800817 	ldw	r2,32(r2)
    f4a4:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    f4a8:	e0bffc17 	ldw	r2,-16(fp)
    f4ac:	10800104 	addi	r2,r2,4
    f4b0:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    f4b4:	e0bffd17 	ldw	r2,-12(fp)
    f4b8:	1080800c 	andi	r2,r2,512
    f4bc:	103fbe26 	beq	r2,zero,f3b8 <altera_avalon_jtag_uart_irq+0x24>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
    f4c0:	e0bffd17 	ldw	r2,-12(fp)
    f4c4:	1004d43a 	srli	r2,r2,16
    f4c8:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
    f4cc:	00001406 	br	f520 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
    f4d0:	e0bffc17 	ldw	r2,-16(fp)
    f4d4:	e0fffb17 	ldw	r3,-20(fp)
    f4d8:	18c00d17 	ldw	r3,52(r3)
    f4dc:	e13ffb17 	ldw	r4,-20(fp)
    f4e0:	20c7883a 	add	r3,r4,r3
    f4e4:	18c20e04 	addi	r3,r3,2104
    f4e8:	18c00003 	ldbu	r3,0(r3)
    f4ec:	18c03fcc 	andi	r3,r3,255
    f4f0:	18c0201c 	xori	r3,r3,128
    f4f4:	18ffe004 	addi	r3,r3,-128
    f4f8:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    f4fc:	e0bffb17 	ldw	r2,-20(fp)
    f500:	10800d17 	ldw	r2,52(r2)
    f504:	10800044 	addi	r2,r2,1
    f508:	10c1ffcc 	andi	r3,r2,2047
    f50c:	e0bffb17 	ldw	r2,-20(fp)
    f510:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
    f514:	e0bffa17 	ldw	r2,-24(fp)
    f518:	10bfffc4 	addi	r2,r2,-1
    f51c:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
    f520:	e0bffa17 	ldw	r2,-24(fp)
    f524:	10000526 	beq	r2,zero,f53c <altera_avalon_jtag_uart_irq+0x1a8>
    f528:	e0bffb17 	ldw	r2,-20(fp)
    f52c:	10c00d17 	ldw	r3,52(r2)
    f530:	e0bffb17 	ldw	r2,-20(fp)
    f534:	10800c17 	ldw	r2,48(r2)
    f538:	18bfe51e 	bne	r3,r2,f4d0 <altera_avalon_jtag_uart_irq+0x13c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
    f53c:	e0bffa17 	ldw	r2,-24(fp)
    f540:	103f9d26 	beq	r2,zero,f3b8 <altera_avalon_jtag_uart_irq+0x24>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    f544:	e0bffb17 	ldw	r2,-20(fp)
    f548:	10c00817 	ldw	r3,32(r2)
    f54c:	00bfff44 	movi	r2,-3
    f550:	1886703a 	and	r3,r3,r2
    f554:	e0bffb17 	ldw	r2,-20(fp)
    f558:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    f55c:	e0bffb17 	ldw	r2,-20(fp)
    f560:	10800017 	ldw	r2,0(r2)
    f564:	10800104 	addi	r2,r2,4
    f568:	1007883a 	mov	r3,r2
    f56c:	e0bffb17 	ldw	r2,-20(fp)
    f570:	10800817 	ldw	r2,32(r2)
    f574:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    f578:	e0bffc17 	ldw	r2,-16(fp)
    f57c:	10800104 	addi	r2,r2,4
    f580:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
    f584:	003f8c06 	br	f3b8 <altera_avalon_jtag_uart_irq+0x24>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
    f588:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
    f58c:	0001883a 	nop
    f590:	e037883a 	mov	sp,fp
    f594:	df000017 	ldw	fp,0(sp)
    f598:	dec00104 	addi	sp,sp,4
    f59c:	f800283a 	ret

0000f5a0 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
    f5a0:	defff804 	addi	sp,sp,-32
    f5a4:	df000715 	stw	fp,28(sp)
    f5a8:	df000704 	addi	fp,sp,28
    f5ac:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
    f5b0:	e0bffb17 	ldw	r2,-20(fp)
    f5b4:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
    f5b8:	e0bff917 	ldw	r2,-28(fp)
    f5bc:	10800017 	ldw	r2,0(r2)
    f5c0:	10800104 	addi	r2,r2,4
    f5c4:	10800037 	ldwio	r2,0(r2)
    f5c8:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
    f5cc:	e0bffa17 	ldw	r2,-24(fp)
    f5d0:	1081000c 	andi	r2,r2,1024
    f5d4:	10000b26 	beq	r2,zero,f604 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
    f5d8:	e0bff917 	ldw	r2,-28(fp)
    f5dc:	10800017 	ldw	r2,0(r2)
    f5e0:	10800104 	addi	r2,r2,4
    f5e4:	1007883a 	mov	r3,r2
    f5e8:	e0bff917 	ldw	r2,-28(fp)
    f5ec:	10800817 	ldw	r2,32(r2)
    f5f0:	10810014 	ori	r2,r2,1024
    f5f4:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
    f5f8:	e0bff917 	ldw	r2,-28(fp)
    f5fc:	10000915 	stw	zero,36(r2)
    f600:	00000a06 	br	f62c <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
    f604:	e0bff917 	ldw	r2,-28(fp)
    f608:	10c00917 	ldw	r3,36(r2)
    f60c:	00a00034 	movhi	r2,32768
    f610:	10bfff04 	addi	r2,r2,-4
    f614:	10c00536 	bltu	r2,r3,f62c <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
    f618:	e0bff917 	ldw	r2,-28(fp)
    f61c:	10800917 	ldw	r2,36(r2)
    f620:	10c00044 	addi	r3,r2,1
    f624:	e0bff917 	ldw	r2,-28(fp)
    f628:	10c00915 	stw	r3,36(r2)
    f62c:	d0a72e17 	ldw	r2,-25416(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
    f630:	e037883a 	mov	sp,fp
    f634:	df000017 	ldw	fp,0(sp)
    f638:	dec00104 	addi	sp,sp,4
    f63c:	f800283a 	ret

0000f640 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
    f640:	defffd04 	addi	sp,sp,-12
    f644:	df000215 	stw	fp,8(sp)
    f648:	df000204 	addi	fp,sp,8
    f64c:	e13ffe15 	stw	r4,-8(fp)
    f650:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    f654:	00000506 	br	f66c <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
    f658:	e0bfff17 	ldw	r2,-4(fp)
    f65c:	1090000c 	andi	r2,r2,16384
    f660:	10000226 	beq	r2,zero,f66c <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
    f664:	00bffd44 	movi	r2,-11
    f668:	00000b06 	br	f698 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    f66c:	e0bffe17 	ldw	r2,-8(fp)
    f670:	10c00d17 	ldw	r3,52(r2)
    f674:	e0bffe17 	ldw	r2,-8(fp)
    f678:	10800c17 	ldw	r2,48(r2)
    f67c:	18800526 	beq	r3,r2,f694 <altera_avalon_jtag_uart_close+0x54>
    f680:	e0bffe17 	ldw	r2,-8(fp)
    f684:	10c00917 	ldw	r3,36(r2)
    f688:	e0bffe17 	ldw	r2,-8(fp)
    f68c:	10800117 	ldw	r2,4(r2)
    f690:	18bff136 	bltu	r3,r2,f658 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
    f694:	0005883a 	mov	r2,zero
}
    f698:	e037883a 	mov	sp,fp
    f69c:	df000017 	ldw	fp,0(sp)
    f6a0:	dec00104 	addi	sp,sp,4
    f6a4:	f800283a 	ret

0000f6a8 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
    f6a8:	defffa04 	addi	sp,sp,-24
    f6ac:	df000515 	stw	fp,20(sp)
    f6b0:	df000504 	addi	fp,sp,20
    f6b4:	e13ffd15 	stw	r4,-12(fp)
    f6b8:	e17ffe15 	stw	r5,-8(fp)
    f6bc:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
    f6c0:	00bff9c4 	movi	r2,-25
    f6c4:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
    f6c8:	e0bffe17 	ldw	r2,-8(fp)
    f6cc:	10da8060 	cmpeqi	r3,r2,27137
    f6d0:	1800031e 	bne	r3,zero,f6e0 <altera_avalon_jtag_uart_ioctl+0x38>
    f6d4:	109a80a0 	cmpeqi	r2,r2,27138
    f6d8:	1000181e 	bne	r2,zero,f73c <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
    f6dc:	00002906 	br	f784 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
    f6e0:	e0bffd17 	ldw	r2,-12(fp)
    f6e4:	10c00117 	ldw	r3,4(r2)
    f6e8:	00a00034 	movhi	r2,32768
    f6ec:	10bfffc4 	addi	r2,r2,-1
    f6f0:	18802126 	beq	r3,r2,f778 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
    f6f4:	e0bfff17 	ldw	r2,-4(fp)
    f6f8:	10800017 	ldw	r2,0(r2)
    f6fc:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
    f700:	e0bffc17 	ldw	r2,-16(fp)
    f704:	10800090 	cmplti	r2,r2,2
    f708:	1000061e 	bne	r2,zero,f724 <altera_avalon_jtag_uart_ioctl+0x7c>
    f70c:	e0fffc17 	ldw	r3,-16(fp)
    f710:	00a00034 	movhi	r2,32768
    f714:	10bfffc4 	addi	r2,r2,-1
    f718:	18800226 	beq	r3,r2,f724 <altera_avalon_jtag_uart_ioctl+0x7c>
    f71c:	e0bffc17 	ldw	r2,-16(fp)
    f720:	00000206 	br	f72c <altera_avalon_jtag_uart_ioctl+0x84>
    f724:	00a00034 	movhi	r2,32768
    f728:	10bfff84 	addi	r2,r2,-2
    f72c:	e0fffd17 	ldw	r3,-12(fp)
    f730:	18800115 	stw	r2,4(r3)
      rc = 0;
    f734:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
    f738:	00000f06 	br	f778 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
    f73c:	e0bffd17 	ldw	r2,-12(fp)
    f740:	10c00117 	ldw	r3,4(r2)
    f744:	00a00034 	movhi	r2,32768
    f748:	10bfffc4 	addi	r2,r2,-1
    f74c:	18800c26 	beq	r3,r2,f780 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
    f750:	e0bffd17 	ldw	r2,-12(fp)
    f754:	10c00917 	ldw	r3,36(r2)
    f758:	e0bffd17 	ldw	r2,-12(fp)
    f75c:	10800117 	ldw	r2,4(r2)
    f760:	1885803a 	cmpltu	r2,r3,r2
    f764:	10c03fcc 	andi	r3,r2,255
    f768:	e0bfff17 	ldw	r2,-4(fp)
    f76c:	10c00015 	stw	r3,0(r2)
      rc = 0;
    f770:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
    f774:	00000206 	br	f780 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
    f778:	0001883a 	nop
    f77c:	00000106 	br	f784 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
    f780:	0001883a 	nop

  default:
    break;
  }

  return rc;
    f784:	e0bffb17 	ldw	r2,-20(fp)
}
    f788:	e037883a 	mov	sp,fp
    f78c:	df000017 	ldw	fp,0(sp)
    f790:	dec00104 	addi	sp,sp,4
    f794:	f800283a 	ret

0000f798 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
    f798:	defff304 	addi	sp,sp,-52
    f79c:	dfc00c15 	stw	ra,48(sp)
    f7a0:	df000b15 	stw	fp,44(sp)
    f7a4:	df000b04 	addi	fp,sp,44
    f7a8:	e13ffc15 	stw	r4,-16(fp)
    f7ac:	e17ffd15 	stw	r5,-12(fp)
    f7b0:	e1bffe15 	stw	r6,-8(fp)
    f7b4:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
    f7b8:	e0bffd17 	ldw	r2,-12(fp)
    f7bc:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    f7c0:	00004706 	br	f8e0 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
    f7c4:	e0bffc17 	ldw	r2,-16(fp)
    f7c8:	10800a17 	ldw	r2,40(r2)
    f7cc:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
    f7d0:	e0bffc17 	ldw	r2,-16(fp)
    f7d4:	10800b17 	ldw	r2,44(r2)
    f7d8:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
    f7dc:	e0fff717 	ldw	r3,-36(fp)
    f7e0:	e0bff817 	ldw	r2,-32(fp)
    f7e4:	18800536 	bltu	r3,r2,f7fc <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
    f7e8:	e0fff717 	ldw	r3,-36(fp)
    f7ec:	e0bff817 	ldw	r2,-32(fp)
    f7f0:	1885c83a 	sub	r2,r3,r2
    f7f4:	e0bff615 	stw	r2,-40(fp)
    f7f8:	00000406 	br	f80c <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
    f7fc:	00c20004 	movi	r3,2048
    f800:	e0bff817 	ldw	r2,-32(fp)
    f804:	1885c83a 	sub	r2,r3,r2
    f808:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
    f80c:	e0bff617 	ldw	r2,-40(fp)
    f810:	10001e26 	beq	r2,zero,f88c <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
    f814:	e0fffe17 	ldw	r3,-8(fp)
    f818:	e0bff617 	ldw	r2,-40(fp)
    f81c:	1880022e 	bgeu	r3,r2,f828 <altera_avalon_jtag_uart_read+0x90>
        n = space;
    f820:	e0bffe17 	ldw	r2,-8(fp)
    f824:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
    f828:	e0bffc17 	ldw	r2,-16(fp)
    f82c:	10c00e04 	addi	r3,r2,56
    f830:	e0bff817 	ldw	r2,-32(fp)
    f834:	1885883a 	add	r2,r3,r2
    f838:	e1bff617 	ldw	r6,-40(fp)
    f83c:	100b883a 	mov	r5,r2
    f840:	e13ff517 	ldw	r4,-44(fp)
    f844:	0007ac80 	call	7ac8 <memcpy>
      ptr   += n;
    f848:	e0fff517 	ldw	r3,-44(fp)
    f84c:	e0bff617 	ldw	r2,-40(fp)
    f850:	1885883a 	add	r2,r3,r2
    f854:	e0bff515 	stw	r2,-44(fp)
      space -= n;
    f858:	e0fffe17 	ldw	r3,-8(fp)
    f85c:	e0bff617 	ldw	r2,-40(fp)
    f860:	1885c83a 	sub	r2,r3,r2
    f864:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    f868:	e0fff817 	ldw	r3,-32(fp)
    f86c:	e0bff617 	ldw	r2,-40(fp)
    f870:	1885883a 	add	r2,r3,r2
    f874:	10c1ffcc 	andi	r3,r2,2047
    f878:	e0bffc17 	ldw	r2,-16(fp)
    f87c:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
    f880:	e0bffe17 	ldw	r2,-8(fp)
    f884:	00bfcf16 	blt	zero,r2,f7c4 <altera_avalon_jtag_uart_read+0x2c>
    f888:	00000106 	br	f890 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
    f88c:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
    f890:	e0fff517 	ldw	r3,-44(fp)
    f894:	e0bffd17 	ldw	r2,-12(fp)
    f898:	1880141e 	bne	r3,r2,f8ec <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
    f89c:	e0bfff17 	ldw	r2,-4(fp)
    f8a0:	1090000c 	andi	r2,r2,16384
    f8a4:	1000131e 	bne	r2,zero,f8f4 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
    f8a8:	0001883a 	nop
    f8ac:	e0bffc17 	ldw	r2,-16(fp)
    f8b0:	10c00a17 	ldw	r3,40(r2)
    f8b4:	e0bff717 	ldw	r2,-36(fp)
    f8b8:	1880051e 	bne	r3,r2,f8d0 <altera_avalon_jtag_uart_read+0x138>
    f8bc:	e0bffc17 	ldw	r2,-16(fp)
    f8c0:	10c00917 	ldw	r3,36(r2)
    f8c4:	e0bffc17 	ldw	r2,-16(fp)
    f8c8:	10800117 	ldw	r2,4(r2)
    f8cc:	18bff736 	bltu	r3,r2,f8ac <altera_avalon_jtag_uart_read+0x114>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
    f8d0:	e0bffc17 	ldw	r2,-16(fp)
    f8d4:	10c00a17 	ldw	r3,40(r2)
    f8d8:	e0bff717 	ldw	r2,-36(fp)
    f8dc:	18800726 	beq	r3,r2,f8fc <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    f8e0:	e0bffe17 	ldw	r2,-8(fp)
    f8e4:	00bfb716 	blt	zero,r2,f7c4 <altera_avalon_jtag_uart_read+0x2c>
    f8e8:	00000506 	br	f900 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
    f8ec:	0001883a 	nop
    f8f0:	00000306 	br	f900 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
    f8f4:	0001883a 	nop
    f8f8:	00000106 	br	f900 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
    f8fc:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
    f900:	e0fff517 	ldw	r3,-44(fp)
    f904:	e0bffd17 	ldw	r2,-12(fp)
    f908:	18801826 	beq	r3,r2,f96c <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    f90c:	0005303a 	rdctl	r2,status
    f910:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f914:	e0fffb17 	ldw	r3,-20(fp)
    f918:	00bfff84 	movi	r2,-2
    f91c:	1884703a 	and	r2,r3,r2
    f920:	1001703a 	wrctl	status,r2
  
  return context;
    f924:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    f928:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    f92c:	e0bffc17 	ldw	r2,-16(fp)
    f930:	10800817 	ldw	r2,32(r2)
    f934:	10c00054 	ori	r3,r2,1
    f938:	e0bffc17 	ldw	r2,-16(fp)
    f93c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    f940:	e0bffc17 	ldw	r2,-16(fp)
    f944:	10800017 	ldw	r2,0(r2)
    f948:	10800104 	addi	r2,r2,4
    f94c:	1007883a 	mov	r3,r2
    f950:	e0bffc17 	ldw	r2,-16(fp)
    f954:	10800817 	ldw	r2,32(r2)
    f958:	18800035 	stwio	r2,0(r3)
    f95c:	e0bffa17 	ldw	r2,-24(fp)
    f960:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    f964:	e0bff917 	ldw	r2,-28(fp)
    f968:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    f96c:	e0fff517 	ldw	r3,-44(fp)
    f970:	e0bffd17 	ldw	r2,-12(fp)
    f974:	18800426 	beq	r3,r2,f988 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
    f978:	e0fff517 	ldw	r3,-44(fp)
    f97c:	e0bffd17 	ldw	r2,-12(fp)
    f980:	1885c83a 	sub	r2,r3,r2
    f984:	00000606 	br	f9a0 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
    f988:	e0bfff17 	ldw	r2,-4(fp)
    f98c:	1090000c 	andi	r2,r2,16384
    f990:	10000226 	beq	r2,zero,f99c <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
    f994:	00bffd44 	movi	r2,-11
    f998:	00000106 	br	f9a0 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
    f99c:	00bffec4 	movi	r2,-5
}
    f9a0:	e037883a 	mov	sp,fp
    f9a4:	dfc00117 	ldw	ra,4(sp)
    f9a8:	df000017 	ldw	fp,0(sp)
    f9ac:	dec00204 	addi	sp,sp,8
    f9b0:	f800283a 	ret

0000f9b4 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    f9b4:	defff304 	addi	sp,sp,-52
    f9b8:	dfc00c15 	stw	ra,48(sp)
    f9bc:	df000b15 	stw	fp,44(sp)
    f9c0:	df000b04 	addi	fp,sp,44
    f9c4:	e13ffc15 	stw	r4,-16(fp)
    f9c8:	e17ffd15 	stw	r5,-12(fp)
    f9cc:	e1bffe15 	stw	r6,-8(fp)
    f9d0:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
    f9d4:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
    f9d8:	e0bffd17 	ldw	r2,-12(fp)
    f9dc:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    f9e0:	00003706 	br	fac0 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
    f9e4:	e0bffc17 	ldw	r2,-16(fp)
    f9e8:	10800c17 	ldw	r2,48(r2)
    f9ec:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
    f9f0:	e0bffc17 	ldw	r2,-16(fp)
    f9f4:	10800d17 	ldw	r2,52(r2)
    f9f8:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
    f9fc:	e0fff917 	ldw	r3,-28(fp)
    fa00:	e0bff517 	ldw	r2,-44(fp)
    fa04:	1880062e 	bgeu	r3,r2,fa20 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
    fa08:	e0fff517 	ldw	r3,-44(fp)
    fa0c:	e0bff917 	ldw	r2,-28(fp)
    fa10:	1885c83a 	sub	r2,r3,r2
    fa14:	10bfffc4 	addi	r2,r2,-1
    fa18:	e0bff615 	stw	r2,-40(fp)
    fa1c:	00000b06 	br	fa4c <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
    fa20:	e0bff517 	ldw	r2,-44(fp)
    fa24:	10000526 	beq	r2,zero,fa3c <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
    fa28:	00c20004 	movi	r3,2048
    fa2c:	e0bff917 	ldw	r2,-28(fp)
    fa30:	1885c83a 	sub	r2,r3,r2
    fa34:	e0bff615 	stw	r2,-40(fp)
    fa38:	00000406 	br	fa4c <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
    fa3c:	00c1ffc4 	movi	r3,2047
    fa40:	e0bff917 	ldw	r2,-28(fp)
    fa44:	1885c83a 	sub	r2,r3,r2
    fa48:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
    fa4c:	e0bff617 	ldw	r2,-40(fp)
    fa50:	10001e26 	beq	r2,zero,facc <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
    fa54:	e0fffe17 	ldw	r3,-8(fp)
    fa58:	e0bff617 	ldw	r2,-40(fp)
    fa5c:	1880022e 	bgeu	r3,r2,fa68 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
    fa60:	e0bffe17 	ldw	r2,-8(fp)
    fa64:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
    fa68:	e0bffc17 	ldw	r2,-16(fp)
    fa6c:	10c20e04 	addi	r3,r2,2104
    fa70:	e0bff917 	ldw	r2,-28(fp)
    fa74:	1885883a 	add	r2,r3,r2
    fa78:	e1bff617 	ldw	r6,-40(fp)
    fa7c:	e17ffd17 	ldw	r5,-12(fp)
    fa80:	1009883a 	mov	r4,r2
    fa84:	0007ac80 	call	7ac8 <memcpy>
      ptr   += n;
    fa88:	e0fffd17 	ldw	r3,-12(fp)
    fa8c:	e0bff617 	ldw	r2,-40(fp)
    fa90:	1885883a 	add	r2,r3,r2
    fa94:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
    fa98:	e0fffe17 	ldw	r3,-8(fp)
    fa9c:	e0bff617 	ldw	r2,-40(fp)
    faa0:	1885c83a 	sub	r2,r3,r2
    faa4:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    faa8:	e0fff917 	ldw	r3,-28(fp)
    faac:	e0bff617 	ldw	r2,-40(fp)
    fab0:	1885883a 	add	r2,r3,r2
    fab4:	10c1ffcc 	andi	r3,r2,2047
    fab8:	e0bffc17 	ldw	r2,-16(fp)
    fabc:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    fac0:	e0bffe17 	ldw	r2,-8(fp)
    fac4:	00bfc716 	blt	zero,r2,f9e4 <altera_avalon_jtag_uart_write+0x30>
    fac8:	00000106 	br	fad0 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
    facc:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    fad0:	0005303a 	rdctl	r2,status
    fad4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    fad8:	e0fffb17 	ldw	r3,-20(fp)
    fadc:	00bfff84 	movi	r2,-2
    fae0:	1884703a 	and	r2,r3,r2
    fae4:	1001703a 	wrctl	status,r2
  
  return context;
    fae8:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    faec:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    faf0:	e0bffc17 	ldw	r2,-16(fp)
    faf4:	10800817 	ldw	r2,32(r2)
    faf8:	10c00094 	ori	r3,r2,2
    fafc:	e0bffc17 	ldw	r2,-16(fp)
    fb00:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    fb04:	e0bffc17 	ldw	r2,-16(fp)
    fb08:	10800017 	ldw	r2,0(r2)
    fb0c:	10800104 	addi	r2,r2,4
    fb10:	1007883a 	mov	r3,r2
    fb14:	e0bffc17 	ldw	r2,-16(fp)
    fb18:	10800817 	ldw	r2,32(r2)
    fb1c:	18800035 	stwio	r2,0(r3)
    fb20:	e0bffa17 	ldw	r2,-24(fp)
    fb24:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    fb28:	e0bff817 	ldw	r2,-32(fp)
    fb2c:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    fb30:	e0bffe17 	ldw	r2,-8(fp)
    fb34:	0080100e 	bge	zero,r2,fb78 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
    fb38:	e0bfff17 	ldw	r2,-4(fp)
    fb3c:	1090000c 	andi	r2,r2,16384
    fb40:	1000101e 	bne	r2,zero,fb84 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
    fb44:	0001883a 	nop
    fb48:	e0bffc17 	ldw	r2,-16(fp)
    fb4c:	10c00d17 	ldw	r3,52(r2)
    fb50:	e0bff517 	ldw	r2,-44(fp)
    fb54:	1880051e 	bne	r3,r2,fb6c <altera_avalon_jtag_uart_write+0x1b8>
    fb58:	e0bffc17 	ldw	r2,-16(fp)
    fb5c:	10c00917 	ldw	r3,36(r2)
    fb60:	e0bffc17 	ldw	r2,-16(fp)
    fb64:	10800117 	ldw	r2,4(r2)
    fb68:	18bff736 	bltu	r3,r2,fb48 <altera_avalon_jtag_uart_write+0x194>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
    fb6c:	e0bffc17 	ldw	r2,-16(fp)
    fb70:	10800917 	ldw	r2,36(r2)
    fb74:	1000051e 	bne	r2,zero,fb8c <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
    fb78:	e0bffe17 	ldw	r2,-8(fp)
    fb7c:	00bfd016 	blt	zero,r2,fac0 <altera_avalon_jtag_uart_write+0x10c>
    fb80:	00000306 	br	fb90 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
    fb84:	0001883a 	nop
    fb88:	00000106 	br	fb90 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
    fb8c:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    fb90:	e0fffd17 	ldw	r3,-12(fp)
    fb94:	e0bff717 	ldw	r2,-36(fp)
    fb98:	18800426 	beq	r3,r2,fbac <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
    fb9c:	e0fffd17 	ldw	r3,-12(fp)
    fba0:	e0bff717 	ldw	r2,-36(fp)
    fba4:	1885c83a 	sub	r2,r3,r2
    fba8:	00000606 	br	fbc4 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
    fbac:	e0bfff17 	ldw	r2,-4(fp)
    fbb0:	1090000c 	andi	r2,r2,16384
    fbb4:	10000226 	beq	r2,zero,fbc0 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
    fbb8:	00bffd44 	movi	r2,-11
    fbbc:	00000106 	br	fbc4 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
    fbc0:	00bffec4 	movi	r2,-5
}
    fbc4:	e037883a 	mov	sp,fp
    fbc8:	dfc00117 	ldw	ra,4(sp)
    fbcc:	df000017 	ldw	fp,0(sp)
    fbd0:	dec00204 	addi	sp,sp,8
    fbd4:	f800283a 	ret

0000fbd8 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
    fbd8:	defffa04 	addi	sp,sp,-24
    fbdc:	dfc00515 	stw	ra,20(sp)
    fbe0:	df000415 	stw	fp,16(sp)
    fbe4:	df000404 	addi	fp,sp,16
    fbe8:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
    fbec:	0007883a 	mov	r3,zero
    fbf0:	e0bfff17 	ldw	r2,-4(fp)
    fbf4:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
    fbf8:	e0bfff17 	ldw	r2,-4(fp)
    fbfc:	10800104 	addi	r2,r2,4
    fc00:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    fc04:	0005303a 	rdctl	r2,status
    fc08:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    fc0c:	e0fffd17 	ldw	r3,-12(fp)
    fc10:	00bfff84 	movi	r2,-2
    fc14:	1884703a 	and	r2,r3,r2
    fc18:	1001703a 	wrctl	status,r2
  
  return context;
    fc1c:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
    fc20:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
    fc24:	001092c0 	call	1092c <alt_tick>
    fc28:	e0bffc17 	ldw	r2,-16(fp)
    fc2c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    fc30:	e0bffe17 	ldw	r2,-8(fp)
    fc34:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
    fc38:	0001883a 	nop
    fc3c:	e037883a 	mov	sp,fp
    fc40:	dfc00117 	ldw	ra,4(sp)
    fc44:	df000017 	ldw	fp,0(sp)
    fc48:	dec00204 	addi	sp,sp,8
    fc4c:	f800283a 	ret

0000fc50 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
    fc50:	defff804 	addi	sp,sp,-32
    fc54:	dfc00715 	stw	ra,28(sp)
    fc58:	df000615 	stw	fp,24(sp)
    fc5c:	df000604 	addi	fp,sp,24
    fc60:	e13ffc15 	stw	r4,-16(fp)
    fc64:	e17ffd15 	stw	r5,-12(fp)
    fc68:	e1bffe15 	stw	r6,-8(fp)
    fc6c:	e1ffff15 	stw	r7,-4(fp)
    fc70:	e0bfff17 	ldw	r2,-4(fp)
    fc74:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
    fc78:	d0a72e17 	ldw	r2,-25416(gp)
    fc7c:	1000021e 	bne	r2,zero,fc88 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
    fc80:	e0bffb17 	ldw	r2,-20(fp)
    fc84:	d0a72e15 	stw	r2,-25416(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
    fc88:	e0bffc17 	ldw	r2,-16(fp)
    fc8c:	10800104 	addi	r2,r2,4
    fc90:	00c001c4 	movi	r3,7
    fc94:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
    fc98:	d8000015 	stw	zero,0(sp)
    fc9c:	e1fffc17 	ldw	r7,-16(fp)
    fca0:	01800074 	movhi	r6,1
    fca4:	31bef604 	addi	r6,r6,-1064
    fca8:	e17ffe17 	ldw	r5,-8(fp)
    fcac:	e13ffd17 	ldw	r4,-12(fp)
    fcb0:	001025c0 	call	1025c <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
    fcb4:	0001883a 	nop
    fcb8:	e037883a 	mov	sp,fp
    fcbc:	dfc00117 	ldw	ra,4(sp)
    fcc0:	df000017 	ldw	fp,0(sp)
    fcc4:	dec00204 	addi	sp,sp,8
    fcc8:	f800283a 	ret

0000fccc <alt_timestamp_start>:
 * The return value of this function is 0 upon sucess and -1 if in timestamp
 * device has not been registered. 
 */

int alt_timestamp_start(void)
{
    fccc:	defffe04 	addi	sp,sp,-8
    fcd0:	df000115 	stw	fp,4(sp)
    fcd4:	df000104 	addi	fp,sp,4
  void* base = altera_avalon_timer_ts_base;
    fcd8:	d0a72b17 	ldw	r2,-25428(gp)
    fcdc:	e0bfff15 	stw	r2,-4(fp)

  if (!altera_avalon_timer_ts_freq)
    fce0:	d0a72c17 	ldw	r2,-25424(gp)
    fce4:	1000021e 	bne	r2,zero,fcf0 <alt_timestamp_start+0x24>
  {
    return -1;
    fce8:	00bfffc4 	movi	r2,-1
    fcec:	00001106 	br	fd34 <alt_timestamp_start+0x68>
        IOWR_ALTERA_AVALON_TIMER_PERIOD_1 (base, 0xFFFF);;
        IOWR_ALTERA_AVALON_TIMER_PERIOD_2 (base, 0xFFFF);
        IOWR_ALTERA_AVALON_TIMER_PERIOD_3 (base, 0xFFFF);
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base, ALTERA_AVALON_TIMER_CONTROL_START_MSK);
    } else {
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base,ALTERA_AVALON_TIMER_CONTROL_STOP_MSK);
    fcf0:	e0bfff17 	ldw	r2,-4(fp)
    fcf4:	10800104 	addi	r2,r2,4
    fcf8:	00c00204 	movi	r3,8
    fcfc:	10c00035 	stwio	r3,0(r2)
        IOWR_ALTERA_AVALON_TIMER_PERIODL (base, 0xFFFF);
    fd00:	e0bfff17 	ldw	r2,-4(fp)
    fd04:	10800204 	addi	r2,r2,8
    fd08:	00ffffd4 	movui	r3,65535
    fd0c:	10c00035 	stwio	r3,0(r2)
        IOWR_ALTERA_AVALON_TIMER_PERIODH (base, 0xFFFF);
    fd10:	e0bfff17 	ldw	r2,-4(fp)
    fd14:	10800304 	addi	r2,r2,12
    fd18:	00ffffd4 	movui	r3,65535
    fd1c:	10c00035 	stwio	r3,0(r2)
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base, ALTERA_AVALON_TIMER_CONTROL_START_MSK); 
    fd20:	e0bfff17 	ldw	r2,-4(fp)
    fd24:	10800104 	addi	r2,r2,4
    fd28:	00c00104 	movi	r3,4
    fd2c:	10c00035 	stwio	r3,0(r2)
    } 
  }
  return 0;
    fd30:	0005883a 	mov	r2,zero
}
    fd34:	e037883a 	mov	sp,fp
    fd38:	df000017 	ldw	fp,0(sp)
    fd3c:	dec00104 	addi	sp,sp,4
    fd40:	f800283a 	ret

0000fd44 <alt_timestamp>:
 * The returned timestamp counts up from the last time the period register
 * was reset. 
 */

alt_timestamp_type alt_timestamp(void)
{
    fd44:	defffc04 	addi	sp,sp,-16
    fd48:	df000315 	stw	fp,12(sp)
    fd4c:	df000304 	addi	fp,sp,12

  void* base = altera_avalon_timer_ts_base;
    fd50:	d0a72b17 	ldw	r2,-25428(gp)
    fd54:	e0bffd15 	stw	r2,-12(fp)

  if (!altera_avalon_timer_ts_freq)
    fd58:	d0a72c17 	ldw	r2,-25424(gp)
    fd5c:	1000021e 	bne	r2,zero,fd68 <alt_timestamp+0x24>
  {
#if (ALT_TIMESTAMP_COUNTER_SIZE == 64)
        return 0xFFFFFFFFFFFFFFFFULL;
#else
        return 0xFFFFFFFF;
    fd60:	00bfffc4 	movi	r2,-1
    fd64:	00001306 	br	fdb4 <alt_timestamp+0x70>
        alt_timestamp_type snap_2 = IORD_ALTERA_AVALON_TIMER_SNAP_2(base) & ALTERA_AVALON_TIMER_SNAP_2_MSK;
        alt_timestamp_type snap_3 = IORD_ALTERA_AVALON_TIMER_SNAP_3(base) & ALTERA_AVALON_TIMER_SNAP_3_MSK;
        
        return (0xFFFFFFFFFFFFFFFFULL - ( (snap_3 << 48) | (snap_2 << 32) | (snap_1 << 16) | (snap_0) ));
#else
        IOWR_ALTERA_AVALON_TIMER_SNAPL (base, 0);
    fd68:	e0bffd17 	ldw	r2,-12(fp)
    fd6c:	10800404 	addi	r2,r2,16
    fd70:	0007883a 	mov	r3,zero
    fd74:	10c00035 	stwio	r3,0(r2)
        alt_timestamp_type lower = IORD_ALTERA_AVALON_TIMER_SNAPL(base) & ALTERA_AVALON_TIMER_SNAPL_MSK;
    fd78:	e0bffd17 	ldw	r2,-12(fp)
    fd7c:	10800404 	addi	r2,r2,16
    fd80:	10800037 	ldwio	r2,0(r2)
    fd84:	10bfffcc 	andi	r2,r2,65535
    fd88:	e0bffe15 	stw	r2,-8(fp)
        alt_timestamp_type upper = IORD_ALTERA_AVALON_TIMER_SNAPH(base) & ALTERA_AVALON_TIMER_SNAPH_MSK;
    fd8c:	e0bffd17 	ldw	r2,-12(fp)
    fd90:	10800504 	addi	r2,r2,20
    fd94:	10800037 	ldwio	r2,0(r2)
    fd98:	10bfffcc 	andi	r2,r2,65535
    fd9c:	e0bfff15 	stw	r2,-4(fp)
        
        return (0xFFFFFFFF - ((upper << 16) | lower)); 
    fda0:	e0bfff17 	ldw	r2,-4(fp)
    fda4:	1006943a 	slli	r3,r2,16
    fda8:	e0bffe17 	ldw	r2,-8(fp)
    fdac:	1884b03a 	or	r2,r3,r2
    fdb0:	0084303a 	nor	r2,zero,r2
#endif
  }
}
    fdb4:	e037883a 	mov	sp,fp
    fdb8:	df000017 	ldw	fp,0(sp)
    fdbc:	dec00104 	addi	sp,sp,4
    fdc0:	f800283a 	ret

0000fdc4 <alt_timestamp_freq>:
 * Return the number of timestamp ticks per second. This will be 0 if no
 * timestamp device has been registered.
 */

alt_u32 alt_timestamp_freq(void)
{
    fdc4:	deffff04 	addi	sp,sp,-4
    fdc8:	df000015 	stw	fp,0(sp)
    fdcc:	d839883a 	mov	fp,sp
  return altera_avalon_timer_ts_freq;
    fdd0:	d0a72c17 	ldw	r2,-25424(gp)
}
    fdd4:	e037883a 	mov	sp,fp
    fdd8:	df000017 	ldw	fp,0(sp)
    fddc:	dec00104 	addi	sp,sp,4
    fde0:	f800283a 	ret

0000fde4 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
    fde4:	defff504 	addi	sp,sp,-44
    fde8:	df000a15 	stw	fp,40(sp)
    fdec:	df000a04 	addi	fp,sp,40
    fdf0:	e13ffc15 	stw	r4,-16(fp)
    fdf4:	e17ffd15 	stw	r5,-12(fp)
    fdf8:	e1bffe15 	stw	r6,-8(fp)
    fdfc:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
    fe00:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    fe04:	d0a72e17 	ldw	r2,-25416(gp)
  
  if (alt_ticks_per_second ())
    fe08:	10003c26 	beq	r2,zero,fefc <alt_alarm_start+0x118>
  {
    if (alarm)
    fe0c:	e0bffc17 	ldw	r2,-16(fp)
    fe10:	10003826 	beq	r2,zero,fef4 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
    fe14:	e0bffc17 	ldw	r2,-16(fp)
    fe18:	e0fffe17 	ldw	r3,-8(fp)
    fe1c:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
    fe20:	e0bffc17 	ldw	r2,-16(fp)
    fe24:	e0ffff17 	ldw	r3,-4(fp)
    fe28:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    fe2c:	0005303a 	rdctl	r2,status
    fe30:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    fe34:	e0fff917 	ldw	r3,-28(fp)
    fe38:	00bfff84 	movi	r2,-2
    fe3c:	1884703a 	and	r2,r3,r2
    fe40:	1001703a 	wrctl	status,r2
  
  return context;
    fe44:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
    fe48:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
    fe4c:	d0a72f17 	ldw	r2,-25412(gp)
      
      current_nticks = alt_nticks();
    fe50:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
    fe54:	e0fffd17 	ldw	r3,-12(fp)
    fe58:	e0bff617 	ldw	r2,-40(fp)
    fe5c:	1885883a 	add	r2,r3,r2
    fe60:	10c00044 	addi	r3,r2,1
    fe64:	e0bffc17 	ldw	r2,-16(fp)
    fe68:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
    fe6c:	e0bffc17 	ldw	r2,-16(fp)
    fe70:	10c00217 	ldw	r3,8(r2)
    fe74:	e0bff617 	ldw	r2,-40(fp)
    fe78:	1880042e 	bgeu	r3,r2,fe8c <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
    fe7c:	e0bffc17 	ldw	r2,-16(fp)
    fe80:	00c00044 	movi	r3,1
    fe84:	10c00405 	stb	r3,16(r2)
    fe88:	00000206 	br	fe94 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
    fe8c:	e0bffc17 	ldw	r2,-16(fp)
    fe90:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
    fe94:	e0bffc17 	ldw	r2,-16(fp)
    fe98:	d0e00e04 	addi	r3,gp,-32712
    fe9c:	e0fffa15 	stw	r3,-24(fp)
    fea0:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    fea4:	e0bffb17 	ldw	r2,-20(fp)
    fea8:	e0fffa17 	ldw	r3,-24(fp)
    feac:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    feb0:	e0bffa17 	ldw	r2,-24(fp)
    feb4:	10c00017 	ldw	r3,0(r2)
    feb8:	e0bffb17 	ldw	r2,-20(fp)
    febc:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    fec0:	e0bffa17 	ldw	r2,-24(fp)
    fec4:	10800017 	ldw	r2,0(r2)
    fec8:	e0fffb17 	ldw	r3,-20(fp)
    fecc:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    fed0:	e0bffa17 	ldw	r2,-24(fp)
    fed4:	e0fffb17 	ldw	r3,-20(fp)
    fed8:	10c00015 	stw	r3,0(r2)
    fedc:	e0bff817 	ldw	r2,-32(fp)
    fee0:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    fee4:	e0bff717 	ldw	r2,-36(fp)
    fee8:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
    feec:	0005883a 	mov	r2,zero
    fef0:	00000306 	br	ff00 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
    fef4:	00bffa84 	movi	r2,-22
    fef8:	00000106 	br	ff00 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
    fefc:	00bfde84 	movi	r2,-134
  }
}
    ff00:	e037883a 	mov	sp,fp
    ff04:	df000017 	ldw	fp,0(sp)
    ff08:	dec00104 	addi	sp,sp,4
    ff0c:	f800283a 	ret

0000ff10 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
    ff10:	defffa04 	addi	sp,sp,-24
    ff14:	dfc00515 	stw	ra,20(sp)
    ff18:	df000415 	stw	fp,16(sp)
    ff1c:	df000404 	addi	fp,sp,16
    ff20:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
    ff24:	008000c4 	movi	r2,3
    ff28:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
    ff2c:	e0fffd17 	ldw	r3,-12(fp)
    ff30:	008003f4 	movhi	r2,15
    ff34:	10909004 	addi	r2,r2,16960
    ff38:	1885383a 	mul	r2,r3,r2
    ff3c:	100b883a 	mov	r5,r2
    ff40:	0100bef4 	movhi	r4,763
    ff44:	213c2004 	addi	r4,r4,-3968
    ff48:	0001ec40 	call	1ec4 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
    ff4c:	100b883a 	mov	r5,r2
    ff50:	01200034 	movhi	r4,32768
    ff54:	213fffc4 	addi	r4,r4,-1
    ff58:	0001ec40 	call	1ec4 <__udivsi3>
    ff5c:	100b883a 	mov	r5,r2
    ff60:	e13fff17 	ldw	r4,-4(fp)
    ff64:	0001ec40 	call	1ec4 <__udivsi3>
    ff68:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
    ff6c:	e0bffe17 	ldw	r2,-8(fp)
    ff70:	10002a26 	beq	r2,zero,1001c <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
    ff74:	e03ffc15 	stw	zero,-16(fp)
    ff78:	00001706 	br	ffd8 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    ff7c:	00a00034 	movhi	r2,32768
    ff80:	10bfffc4 	addi	r2,r2,-1
    ff84:	10bfffc4 	addi	r2,r2,-1
    ff88:	103ffe1e 	bne	r2,zero,ff84 <alt_busy_sleep+0x74>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
    ff8c:	e0fffd17 	ldw	r3,-12(fp)
    ff90:	008003f4 	movhi	r2,15
    ff94:	10909004 	addi	r2,r2,16960
    ff98:	1885383a 	mul	r2,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
    ff9c:	100b883a 	mov	r5,r2
    ffa0:	0100bef4 	movhi	r4,763
    ffa4:	213c2004 	addi	r4,r4,-3968
    ffa8:	0001ec40 	call	1ec4 <__udivsi3>
    ffac:	100b883a 	mov	r5,r2
    ffb0:	01200034 	movhi	r4,32768
    ffb4:	213fffc4 	addi	r4,r4,-1
    ffb8:	0001ec40 	call	1ec4 <__udivsi3>
    ffbc:	1007883a 	mov	r3,r2
    ffc0:	e0bfff17 	ldw	r2,-4(fp)
    ffc4:	10c5c83a 	sub	r2,r2,r3
    ffc8:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
    ffcc:	e0bffc17 	ldw	r2,-16(fp)
    ffd0:	10800044 	addi	r2,r2,1
    ffd4:	e0bffc15 	stw	r2,-16(fp)
    ffd8:	e0fffc17 	ldw	r3,-16(fp)
    ffdc:	e0bffe17 	ldw	r2,-8(fp)
    ffe0:	18bfe616 	blt	r3,r2,ff7c <alt_busy_sleep+0x6c>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
    ffe4:	e0fffd17 	ldw	r3,-12(fp)
    ffe8:	008003f4 	movhi	r2,15
    ffec:	10909004 	addi	r2,r2,16960
    fff0:	1885383a 	mul	r2,r3,r2
    fff4:	100b883a 	mov	r5,r2
    fff8:	0100bef4 	movhi	r4,763
    fffc:	213c2004 	addi	r4,r4,-3968
   10000:	0001ec40 	call	1ec4 <__udivsi3>
   10004:	1007883a 	mov	r3,r2
   10008:	e0bfff17 	ldw	r2,-4(fp)
   1000c:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   10010:	10bfffc4 	addi	r2,r2,-1
   10014:	103ffe1e 	bne	r2,zero,10010 <alt_busy_sleep+0x100>
   10018:	00000d06 	br	10050 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   1001c:	e0fffd17 	ldw	r3,-12(fp)
   10020:	008003f4 	movhi	r2,15
   10024:	10909004 	addi	r2,r2,16960
   10028:	1885383a 	mul	r2,r3,r2
   1002c:	100b883a 	mov	r5,r2
   10030:	0100bef4 	movhi	r4,763
   10034:	213c2004 	addi	r4,r4,-3968
   10038:	0001ec40 	call	1ec4 <__udivsi3>
   1003c:	1007883a 	mov	r3,r2
   10040:	e0bfff17 	ldw	r2,-4(fp)
   10044:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   10048:	10bfffc4 	addi	r2,r2,-1
   1004c:	00bffe16 	blt	zero,r2,10048 <alt_busy_sleep+0x138>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
   10050:	0005883a 	mov	r2,zero
}
   10054:	e037883a 	mov	sp,fp
   10058:	dfc00117 	ldw	ra,4(sp)
   1005c:	df000017 	ldw	fp,0(sp)
   10060:	dec00204 	addi	sp,sp,8
   10064:	f800283a 	ret

00010068 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   10068:	deffff04 	addi	sp,sp,-4
   1006c:	df000015 	stw	fp,0(sp)
   10070:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   10074:	0001883a 	nop
   10078:	e037883a 	mov	sp,fp
   1007c:	df000017 	ldw	fp,0(sp)
   10080:	dec00104 	addi	sp,sp,4
   10084:	f800283a 	ret

00010088 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   10088:	defffe04 	addi	sp,sp,-8
   1008c:	dfc00115 	stw	ra,4(sp)
   10090:	df000015 	stw	fp,0(sp)
   10094:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   10098:	d0a00b17 	ldw	r2,-32724(gp)
   1009c:	10000326 	beq	r2,zero,100ac <alt_get_errno+0x24>
   100a0:	d0a00b17 	ldw	r2,-32724(gp)
   100a4:	103ee83a 	callr	r2
   100a8:	00000106 	br	100b0 <alt_get_errno+0x28>
   100ac:	d0a72404 	addi	r2,gp,-25456
}
   100b0:	e037883a 	mov	sp,fp
   100b4:	dfc00117 	ldw	ra,4(sp)
   100b8:	df000017 	ldw	fp,0(sp)
   100bc:	dec00204 	addi	sp,sp,8
   100c0:	f800283a 	ret

000100c4 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   100c4:	defffa04 	addi	sp,sp,-24
   100c8:	dfc00515 	stw	ra,20(sp)
   100cc:	df000415 	stw	fp,16(sp)
   100d0:	df000404 	addi	fp,sp,16
   100d4:	e13ffe15 	stw	r4,-8(fp)
   100d8:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   100dc:	e0bffe17 	ldw	r2,-8(fp)
   100e0:	10000326 	beq	r2,zero,100f0 <alt_dev_llist_insert+0x2c>
   100e4:	e0bffe17 	ldw	r2,-8(fp)
   100e8:	10800217 	ldw	r2,8(r2)
   100ec:	1000061e 	bne	r2,zero,10108 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   100f0:	00100880 	call	10088 <alt_get_errno>
   100f4:	1007883a 	mov	r3,r2
   100f8:	00800584 	movi	r2,22
   100fc:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   10100:	00bffa84 	movi	r2,-22
   10104:	00001306 	br	10154 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   10108:	e0bffe17 	ldw	r2,-8(fp)
   1010c:	e0ffff17 	ldw	r3,-4(fp)
   10110:	e0fffc15 	stw	r3,-16(fp)
   10114:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   10118:	e0bffd17 	ldw	r2,-12(fp)
   1011c:	e0fffc17 	ldw	r3,-16(fp)
   10120:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   10124:	e0bffc17 	ldw	r2,-16(fp)
   10128:	10c00017 	ldw	r3,0(r2)
   1012c:	e0bffd17 	ldw	r2,-12(fp)
   10130:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   10134:	e0bffc17 	ldw	r2,-16(fp)
   10138:	10800017 	ldw	r2,0(r2)
   1013c:	e0fffd17 	ldw	r3,-12(fp)
   10140:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   10144:	e0bffc17 	ldw	r2,-16(fp)
   10148:	e0fffd17 	ldw	r3,-12(fp)
   1014c:	10c00015 	stw	r3,0(r2)

  return 0;  
   10150:	0005883a 	mov	r2,zero
}
   10154:	e037883a 	mov	sp,fp
   10158:	dfc00117 	ldw	ra,4(sp)
   1015c:	df000017 	ldw	fp,0(sp)
   10160:	dec00204 	addi	sp,sp,8
   10164:	f800283a 	ret

00010168 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   10168:	defffd04 	addi	sp,sp,-12
   1016c:	dfc00215 	stw	ra,8(sp)
   10170:	df000115 	stw	fp,4(sp)
   10174:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   10178:	00800074 	movhi	r2,1
   1017c:	10845404 	addi	r2,r2,4432
   10180:	e0bfff15 	stw	r2,-4(fp)
   10184:	00000606 	br	101a0 <_do_ctors+0x38>
        (*ctor) (); 
   10188:	e0bfff17 	ldw	r2,-4(fp)
   1018c:	10800017 	ldw	r2,0(r2)
   10190:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   10194:	e0bfff17 	ldw	r2,-4(fp)
   10198:	10bfff04 	addi	r2,r2,-4
   1019c:	e0bfff15 	stw	r2,-4(fp)
   101a0:	e0ffff17 	ldw	r3,-4(fp)
   101a4:	00800074 	movhi	r2,1
   101a8:	10845504 	addi	r2,r2,4436
   101ac:	18bff62e 	bgeu	r3,r2,10188 <_do_ctors+0x20>
        (*ctor) (); 
}
   101b0:	0001883a 	nop
   101b4:	e037883a 	mov	sp,fp
   101b8:	dfc00117 	ldw	ra,4(sp)
   101bc:	df000017 	ldw	fp,0(sp)
   101c0:	dec00204 	addi	sp,sp,8
   101c4:	f800283a 	ret

000101c8 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   101c8:	defffd04 	addi	sp,sp,-12
   101cc:	dfc00215 	stw	ra,8(sp)
   101d0:	df000115 	stw	fp,4(sp)
   101d4:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   101d8:	00800074 	movhi	r2,1
   101dc:	10845404 	addi	r2,r2,4432
   101e0:	e0bfff15 	stw	r2,-4(fp)
   101e4:	00000606 	br	10200 <_do_dtors+0x38>
        (*dtor) (); 
   101e8:	e0bfff17 	ldw	r2,-4(fp)
   101ec:	10800017 	ldw	r2,0(r2)
   101f0:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   101f4:	e0bfff17 	ldw	r2,-4(fp)
   101f8:	10bfff04 	addi	r2,r2,-4
   101fc:	e0bfff15 	stw	r2,-4(fp)
   10200:	e0ffff17 	ldw	r3,-4(fp)
   10204:	00800074 	movhi	r2,1
   10208:	10845504 	addi	r2,r2,4436
   1020c:	18bff62e 	bgeu	r3,r2,101e8 <_do_dtors+0x20>
        (*dtor) (); 
}
   10210:	0001883a 	nop
   10214:	e037883a 	mov	sp,fp
   10218:	dfc00117 	ldw	ra,4(sp)
   1021c:	df000017 	ldw	fp,0(sp)
   10220:	dec00204 	addi	sp,sp,8
   10224:	f800283a 	ret

00010228 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   10228:	defffe04 	addi	sp,sp,-8
   1022c:	dfc00115 	stw	ra,4(sp)
   10230:	df000015 	stw	fp,0(sp)
   10234:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   10238:	01440004 	movi	r5,4096
   1023c:	0009883a 	mov	r4,zero
   10240:	0010c940 	call	10c94 <alt_icache_flush>
#endif
}
   10244:	0001883a 	nop
   10248:	e037883a 	mov	sp,fp
   1024c:	dfc00117 	ldw	ra,4(sp)
   10250:	df000017 	ldw	fp,0(sp)
   10254:	dec00204 	addi	sp,sp,8
   10258:	f800283a 	ret

0001025c <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   1025c:	defff904 	addi	sp,sp,-28
   10260:	dfc00615 	stw	ra,24(sp)
   10264:	df000515 	stw	fp,20(sp)
   10268:	df000504 	addi	fp,sp,20
   1026c:	e13ffc15 	stw	r4,-16(fp)
   10270:	e17ffd15 	stw	r5,-12(fp)
   10274:	e1bffe15 	stw	r6,-8(fp)
   10278:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   1027c:	e0800217 	ldw	r2,8(fp)
   10280:	d8800015 	stw	r2,0(sp)
   10284:	e1ffff17 	ldw	r7,-4(fp)
   10288:	e1bffe17 	ldw	r6,-8(fp)
   1028c:	e17ffd17 	ldw	r5,-12(fp)
   10290:	e13ffc17 	ldw	r4,-16(fp)
   10294:	001040c0 	call	1040c <alt_iic_isr_register>
}  
   10298:	e037883a 	mov	sp,fp
   1029c:	dfc00117 	ldw	ra,4(sp)
   102a0:	df000017 	ldw	fp,0(sp)
   102a4:	dec00204 	addi	sp,sp,8
   102a8:	f800283a 	ret

000102ac <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   102ac:	defff904 	addi	sp,sp,-28
   102b0:	df000615 	stw	fp,24(sp)
   102b4:	df000604 	addi	fp,sp,24
   102b8:	e13ffe15 	stw	r4,-8(fp)
   102bc:	e17fff15 	stw	r5,-4(fp)
   102c0:	e0bfff17 	ldw	r2,-4(fp)
   102c4:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   102c8:	0005303a 	rdctl	r2,status
   102cc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   102d0:	e0fffb17 	ldw	r3,-20(fp)
   102d4:	00bfff84 	movi	r2,-2
   102d8:	1884703a 	and	r2,r3,r2
   102dc:	1001703a 	wrctl	status,r2
  
  return context;
   102e0:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   102e4:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   102e8:	00c00044 	movi	r3,1
   102ec:	e0bffa17 	ldw	r2,-24(fp)
   102f0:	1884983a 	sll	r2,r3,r2
   102f4:	1007883a 	mov	r3,r2
   102f8:	d0a72d17 	ldw	r2,-25420(gp)
   102fc:	1884b03a 	or	r2,r3,r2
   10300:	d0a72d15 	stw	r2,-25420(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   10304:	d0a72d17 	ldw	r2,-25420(gp)
   10308:	100170fa 	wrctl	ienable,r2
   1030c:	e0bffc17 	ldw	r2,-16(fp)
   10310:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10314:	e0bffd17 	ldw	r2,-12(fp)
   10318:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   1031c:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
   10320:	0001883a 	nop
}
   10324:	e037883a 	mov	sp,fp
   10328:	df000017 	ldw	fp,0(sp)
   1032c:	dec00104 	addi	sp,sp,4
   10330:	f800283a 	ret

00010334 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   10334:	defff904 	addi	sp,sp,-28
   10338:	df000615 	stw	fp,24(sp)
   1033c:	df000604 	addi	fp,sp,24
   10340:	e13ffe15 	stw	r4,-8(fp)
   10344:	e17fff15 	stw	r5,-4(fp)
   10348:	e0bfff17 	ldw	r2,-4(fp)
   1034c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10350:	0005303a 	rdctl	r2,status
   10354:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10358:	e0fffb17 	ldw	r3,-20(fp)
   1035c:	00bfff84 	movi	r2,-2
   10360:	1884703a 	and	r2,r3,r2
   10364:	1001703a 	wrctl	status,r2
  
  return context;
   10368:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   1036c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   10370:	00c00044 	movi	r3,1
   10374:	e0bffa17 	ldw	r2,-24(fp)
   10378:	1884983a 	sll	r2,r3,r2
   1037c:	0084303a 	nor	r2,zero,r2
   10380:	1007883a 	mov	r3,r2
   10384:	d0a72d17 	ldw	r2,-25420(gp)
   10388:	1884703a 	and	r2,r3,r2
   1038c:	d0a72d15 	stw	r2,-25420(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   10390:	d0a72d17 	ldw	r2,-25420(gp)
   10394:	100170fa 	wrctl	ienable,r2
   10398:	e0bffc17 	ldw	r2,-16(fp)
   1039c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   103a0:	e0bffd17 	ldw	r2,-12(fp)
   103a4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   103a8:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
   103ac:	0001883a 	nop
}
   103b0:	e037883a 	mov	sp,fp
   103b4:	df000017 	ldw	fp,0(sp)
   103b8:	dec00104 	addi	sp,sp,4
   103bc:	f800283a 	ret

000103c0 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   103c0:	defffc04 	addi	sp,sp,-16
   103c4:	df000315 	stw	fp,12(sp)
   103c8:	df000304 	addi	fp,sp,12
   103cc:	e13ffe15 	stw	r4,-8(fp)
   103d0:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   103d4:	000530fa 	rdctl	r2,ienable
   103d8:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   103dc:	00c00044 	movi	r3,1
   103e0:	e0bfff17 	ldw	r2,-4(fp)
   103e4:	1884983a 	sll	r2,r3,r2
   103e8:	1007883a 	mov	r3,r2
   103ec:	e0bffd17 	ldw	r2,-12(fp)
   103f0:	1884703a 	and	r2,r3,r2
   103f4:	1004c03a 	cmpne	r2,r2,zero
   103f8:	10803fcc 	andi	r2,r2,255
}
   103fc:	e037883a 	mov	sp,fp
   10400:	df000017 	ldw	fp,0(sp)
   10404:	dec00104 	addi	sp,sp,4
   10408:	f800283a 	ret

0001040c <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   1040c:	defff504 	addi	sp,sp,-44
   10410:	dfc00a15 	stw	ra,40(sp)
   10414:	df000915 	stw	fp,36(sp)
   10418:	df000904 	addi	fp,sp,36
   1041c:	e13ffc15 	stw	r4,-16(fp)
   10420:	e17ffd15 	stw	r5,-12(fp)
   10424:	e1bffe15 	stw	r6,-8(fp)
   10428:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   1042c:	00bffa84 	movi	r2,-22
   10430:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   10434:	e0bffd17 	ldw	r2,-12(fp)
   10438:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   1043c:	e0bff817 	ldw	r2,-32(fp)
   10440:	10800808 	cmpgei	r2,r2,32
   10444:	1000271e 	bne	r2,zero,104e4 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10448:	0005303a 	rdctl	r2,status
   1044c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10450:	e0fffb17 	ldw	r3,-20(fp)
   10454:	00bfff84 	movi	r2,-2
   10458:	1884703a 	and	r2,r3,r2
   1045c:	1001703a 	wrctl	status,r2
  
  return context;
   10460:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   10464:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
   10468:	00800074 	movhi	r2,1
   1046c:	10946404 	addi	r2,r2,20880
   10470:	e0fff817 	ldw	r3,-32(fp)
   10474:	180690fa 	slli	r3,r3,3
   10478:	10c5883a 	add	r2,r2,r3
   1047c:	e0fffe17 	ldw	r3,-8(fp)
   10480:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   10484:	00800074 	movhi	r2,1
   10488:	10946404 	addi	r2,r2,20880
   1048c:	e0fff817 	ldw	r3,-32(fp)
   10490:	180690fa 	slli	r3,r3,3
   10494:	10c5883a 	add	r2,r2,r3
   10498:	10800104 	addi	r2,r2,4
   1049c:	e0ffff17 	ldw	r3,-4(fp)
   104a0:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   104a4:	e0bffe17 	ldw	r2,-8(fp)
   104a8:	10000526 	beq	r2,zero,104c0 <alt_iic_isr_register+0xb4>
   104ac:	e0bff817 	ldw	r2,-32(fp)
   104b0:	100b883a 	mov	r5,r2
   104b4:	e13ffc17 	ldw	r4,-16(fp)
   104b8:	00102ac0 	call	102ac <alt_ic_irq_enable>
   104bc:	00000406 	br	104d0 <alt_iic_isr_register+0xc4>
   104c0:	e0bff817 	ldw	r2,-32(fp)
   104c4:	100b883a 	mov	r5,r2
   104c8:	e13ffc17 	ldw	r4,-16(fp)
   104cc:	00103340 	call	10334 <alt_ic_irq_disable>
   104d0:	e0bff715 	stw	r2,-36(fp)
   104d4:	e0bffa17 	ldw	r2,-24(fp)
   104d8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   104dc:	e0bff917 	ldw	r2,-28(fp)
   104e0:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   104e4:	e0bff717 	ldw	r2,-36(fp)
}
   104e8:	e037883a 	mov	sp,fp
   104ec:	dfc00117 	ldw	ra,4(sp)
   104f0:	df000017 	ldw	fp,0(sp)
   104f4:	dec00204 	addi	sp,sp,8
   104f8:	f800283a 	ret

000104fc <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   104fc:	defff904 	addi	sp,sp,-28
   10500:	dfc00615 	stw	ra,24(sp)
   10504:	df000515 	stw	fp,20(sp)
   10508:	df000504 	addi	fp,sp,20
   1050c:	e13ffc15 	stw	r4,-16(fp)
   10510:	e17ffd15 	stw	r5,-12(fp)
   10514:	e1bffe15 	stw	r6,-8(fp)
   10518:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   1051c:	e1bfff17 	ldw	r6,-4(fp)
   10520:	e17ffe17 	ldw	r5,-8(fp)
   10524:	e13ffd17 	ldw	r4,-12(fp)
   10528:	001073c0 	call	1073c <open>
   1052c:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   10530:	e0bffb17 	ldw	r2,-20(fp)
   10534:	10001c16 	blt	r2,zero,105a8 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
   10538:	00800074 	movhi	r2,1
   1053c:	1088b104 	addi	r2,r2,8900
   10540:	e0fffb17 	ldw	r3,-20(fp)
   10544:	18c00324 	muli	r3,r3,12
   10548:	10c5883a 	add	r2,r2,r3
   1054c:	10c00017 	ldw	r3,0(r2)
   10550:	e0bffc17 	ldw	r2,-16(fp)
   10554:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   10558:	00800074 	movhi	r2,1
   1055c:	1088b104 	addi	r2,r2,8900
   10560:	e0fffb17 	ldw	r3,-20(fp)
   10564:	18c00324 	muli	r3,r3,12
   10568:	10c5883a 	add	r2,r2,r3
   1056c:	10800104 	addi	r2,r2,4
   10570:	10c00017 	ldw	r3,0(r2)
   10574:	e0bffc17 	ldw	r2,-16(fp)
   10578:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   1057c:	00800074 	movhi	r2,1
   10580:	1088b104 	addi	r2,r2,8900
   10584:	e0fffb17 	ldw	r3,-20(fp)
   10588:	18c00324 	muli	r3,r3,12
   1058c:	10c5883a 	add	r2,r2,r3
   10590:	10800204 	addi	r2,r2,8
   10594:	10c00017 	ldw	r3,0(r2)
   10598:	e0bffc17 	ldw	r2,-16(fp)
   1059c:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   105a0:	e13ffb17 	ldw	r4,-20(fp)
   105a4:	000ee100 	call	ee10 <alt_release_fd>
  }
} 
   105a8:	0001883a 	nop
   105ac:	e037883a 	mov	sp,fp
   105b0:	dfc00117 	ldw	ra,4(sp)
   105b4:	df000017 	ldw	fp,0(sp)
   105b8:	dec00204 	addi	sp,sp,8
   105bc:	f800283a 	ret

000105c0 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   105c0:	defffb04 	addi	sp,sp,-20
   105c4:	dfc00415 	stw	ra,16(sp)
   105c8:	df000315 	stw	fp,12(sp)
   105cc:	df000304 	addi	fp,sp,12
   105d0:	e13ffd15 	stw	r4,-12(fp)
   105d4:	e17ffe15 	stw	r5,-8(fp)
   105d8:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   105dc:	01c07fc4 	movi	r7,511
   105e0:	01800044 	movi	r6,1
   105e4:	e17ffd17 	ldw	r5,-12(fp)
   105e8:	01000074 	movhi	r4,1
   105ec:	2108b404 	addi	r4,r4,8912
   105f0:	00104fc0 	call	104fc <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   105f4:	01c07fc4 	movi	r7,511
   105f8:	000d883a 	mov	r6,zero
   105fc:	e17ffe17 	ldw	r5,-8(fp)
   10600:	01000074 	movhi	r4,1
   10604:	2108b104 	addi	r4,r4,8900
   10608:	00104fc0 	call	104fc <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   1060c:	01c07fc4 	movi	r7,511
   10610:	01800044 	movi	r6,1
   10614:	e17fff17 	ldw	r5,-4(fp)
   10618:	01000074 	movhi	r4,1
   1061c:	2108b704 	addi	r4,r4,8924
   10620:	00104fc0 	call	104fc <alt_open_fd>
}  
   10624:	0001883a 	nop
   10628:	e037883a 	mov	sp,fp
   1062c:	dfc00117 	ldw	ra,4(sp)
   10630:	df000017 	ldw	fp,0(sp)
   10634:	dec00204 	addi	sp,sp,8
   10638:	f800283a 	ret

0001063c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1063c:	defffe04 	addi	sp,sp,-8
   10640:	dfc00115 	stw	ra,4(sp)
   10644:	df000015 	stw	fp,0(sp)
   10648:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1064c:	d0a00b17 	ldw	r2,-32724(gp)
   10650:	10000326 	beq	r2,zero,10660 <alt_get_errno+0x24>
   10654:	d0a00b17 	ldw	r2,-32724(gp)
   10658:	103ee83a 	callr	r2
   1065c:	00000106 	br	10664 <alt_get_errno+0x28>
   10660:	d0a72404 	addi	r2,gp,-25456
}
   10664:	e037883a 	mov	sp,fp
   10668:	dfc00117 	ldw	ra,4(sp)
   1066c:	df000017 	ldw	fp,0(sp)
   10670:	dec00204 	addi	sp,sp,8
   10674:	f800283a 	ret

00010678 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   10678:	defffd04 	addi	sp,sp,-12
   1067c:	df000215 	stw	fp,8(sp)
   10680:	df000204 	addi	fp,sp,8
   10684:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   10688:	e0bfff17 	ldw	r2,-4(fp)
   1068c:	10800217 	ldw	r2,8(r2)
   10690:	10d00034 	orhi	r3,r2,16384
   10694:	e0bfff17 	ldw	r2,-4(fp)
   10698:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   1069c:	e03ffe15 	stw	zero,-8(fp)
   106a0:	00001d06 	br	10718 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   106a4:	00800074 	movhi	r2,1
   106a8:	1088b104 	addi	r2,r2,8900
   106ac:	e0fffe17 	ldw	r3,-8(fp)
   106b0:	18c00324 	muli	r3,r3,12
   106b4:	10c5883a 	add	r2,r2,r3
   106b8:	10c00017 	ldw	r3,0(r2)
   106bc:	e0bfff17 	ldw	r2,-4(fp)
   106c0:	10800017 	ldw	r2,0(r2)
   106c4:	1880111e 	bne	r3,r2,1070c <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   106c8:	00800074 	movhi	r2,1
   106cc:	1088b104 	addi	r2,r2,8900
   106d0:	e0fffe17 	ldw	r3,-8(fp)
   106d4:	18c00324 	muli	r3,r3,12
   106d8:	10c5883a 	add	r2,r2,r3
   106dc:	10800204 	addi	r2,r2,8
   106e0:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   106e4:	1000090e 	bge	r2,zero,1070c <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   106e8:	e0bffe17 	ldw	r2,-8(fp)
   106ec:	10c00324 	muli	r3,r2,12
   106f0:	00800074 	movhi	r2,1
   106f4:	1088b104 	addi	r2,r2,8900
   106f8:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   106fc:	e0bfff17 	ldw	r2,-4(fp)
   10700:	18800226 	beq	r3,r2,1070c <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   10704:	00bffcc4 	movi	r2,-13
   10708:	00000806 	br	1072c <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   1070c:	e0bffe17 	ldw	r2,-8(fp)
   10710:	10800044 	addi	r2,r2,1
   10714:	e0bffe15 	stw	r2,-8(fp)
   10718:	d0a00a17 	ldw	r2,-32728(gp)
   1071c:	1007883a 	mov	r3,r2
   10720:	e0bffe17 	ldw	r2,-8(fp)
   10724:	18bfdf2e 	bgeu	r3,r2,106a4 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   10728:	0005883a 	mov	r2,zero
}
   1072c:	e037883a 	mov	sp,fp
   10730:	df000017 	ldw	fp,0(sp)
   10734:	dec00104 	addi	sp,sp,4
   10738:	f800283a 	ret

0001073c <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   1073c:	defff604 	addi	sp,sp,-40
   10740:	dfc00915 	stw	ra,36(sp)
   10744:	df000815 	stw	fp,32(sp)
   10748:	df000804 	addi	fp,sp,32
   1074c:	e13ffd15 	stw	r4,-12(fp)
   10750:	e17ffe15 	stw	r5,-8(fp)
   10754:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   10758:	00bfffc4 	movi	r2,-1
   1075c:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   10760:	00bffb44 	movi	r2,-19
   10764:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   10768:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   1076c:	d1600804 	addi	r5,gp,-32736
   10770:	e13ffd17 	ldw	r4,-12(fp)
   10774:	0010a580 	call	10a58 <alt_find_dev>
   10778:	e0bff815 	stw	r2,-32(fp)
   1077c:	e0bff817 	ldw	r2,-32(fp)
   10780:	1000051e 	bne	r2,zero,10798 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   10784:	e13ffd17 	ldw	r4,-12(fp)
   10788:	0010ae80 	call	10ae8 <alt_find_file>
   1078c:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   10790:	00800044 	movi	r2,1
   10794:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   10798:	e0bff817 	ldw	r2,-32(fp)
   1079c:	10002926 	beq	r2,zero,10844 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
   107a0:	e13ff817 	ldw	r4,-32(fp)
   107a4:	0010bf00 	call	10bf0 <alt_get_fd>
   107a8:	e0bff915 	stw	r2,-28(fp)
   107ac:	e0bff917 	ldw	r2,-28(fp)
   107b0:	1000030e 	bge	r2,zero,107c0 <open+0x84>
    {
      status = index;
   107b4:	e0bff917 	ldw	r2,-28(fp)
   107b8:	e0bffa15 	stw	r2,-24(fp)
   107bc:	00002306 	br	1084c <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
   107c0:	e0bff917 	ldw	r2,-28(fp)
   107c4:	10c00324 	muli	r3,r2,12
   107c8:	00800074 	movhi	r2,1
   107cc:	1088b104 	addi	r2,r2,8900
   107d0:	1885883a 	add	r2,r3,r2
   107d4:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   107d8:	e0fffe17 	ldw	r3,-8(fp)
   107dc:	00900034 	movhi	r2,16384
   107e0:	10bfffc4 	addi	r2,r2,-1
   107e4:	1886703a 	and	r3,r3,r2
   107e8:	e0bffc17 	ldw	r2,-16(fp)
   107ec:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   107f0:	e0bffb17 	ldw	r2,-20(fp)
   107f4:	1000051e 	bne	r2,zero,1080c <open+0xd0>
   107f8:	e13ffc17 	ldw	r4,-16(fp)
   107fc:	00106780 	call	10678 <alt_file_locked>
   10800:	e0bffa15 	stw	r2,-24(fp)
   10804:	e0bffa17 	ldw	r2,-24(fp)
   10808:	10001016 	blt	r2,zero,1084c <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   1080c:	e0bff817 	ldw	r2,-32(fp)
   10810:	10800317 	ldw	r2,12(r2)
   10814:	10000826 	beq	r2,zero,10838 <open+0xfc>
   10818:	e0bff817 	ldw	r2,-32(fp)
   1081c:	10800317 	ldw	r2,12(r2)
   10820:	e1ffff17 	ldw	r7,-4(fp)
   10824:	e1bffe17 	ldw	r6,-8(fp)
   10828:	e17ffd17 	ldw	r5,-12(fp)
   1082c:	e13ffc17 	ldw	r4,-16(fp)
   10830:	103ee83a 	callr	r2
   10834:	00000106 	br	1083c <open+0x100>
   10838:	0005883a 	mov	r2,zero
   1083c:	e0bffa15 	stw	r2,-24(fp)
   10840:	00000206 	br	1084c <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
   10844:	00bffb44 	movi	r2,-19
   10848:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   1084c:	e0bffa17 	ldw	r2,-24(fp)
   10850:	1000090e 	bge	r2,zero,10878 <open+0x13c>
  {
    alt_release_fd (index);  
   10854:	e13ff917 	ldw	r4,-28(fp)
   10858:	000ee100 	call	ee10 <alt_release_fd>
    ALT_ERRNO = -status;
   1085c:	001063c0 	call	1063c <alt_get_errno>
   10860:	1007883a 	mov	r3,r2
   10864:	e0bffa17 	ldw	r2,-24(fp)
   10868:	0085c83a 	sub	r2,zero,r2
   1086c:	18800015 	stw	r2,0(r3)
    return -1;
   10870:	00bfffc4 	movi	r2,-1
   10874:	00000106 	br	1087c <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
   10878:	e0bff917 	ldw	r2,-28(fp)
}
   1087c:	e037883a 	mov	sp,fp
   10880:	dfc00117 	ldw	ra,4(sp)
   10884:	df000017 	ldw	fp,0(sp)
   10888:	dec00204 	addi	sp,sp,8
   1088c:	f800283a 	ret

00010890 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   10890:	defffa04 	addi	sp,sp,-24
   10894:	df000515 	stw	fp,20(sp)
   10898:	df000504 	addi	fp,sp,20
   1089c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   108a0:	0005303a 	rdctl	r2,status
   108a4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   108a8:	e0fffc17 	ldw	r3,-16(fp)
   108ac:	00bfff84 	movi	r2,-2
   108b0:	1884703a 	and	r2,r3,r2
   108b4:	1001703a 	wrctl	status,r2
  
  return context;
   108b8:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   108bc:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   108c0:	e0bfff17 	ldw	r2,-4(fp)
   108c4:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   108c8:	e0bffd17 	ldw	r2,-12(fp)
   108cc:	10800017 	ldw	r2,0(r2)
   108d0:	e0fffd17 	ldw	r3,-12(fp)
   108d4:	18c00117 	ldw	r3,4(r3)
   108d8:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   108dc:	e0bffd17 	ldw	r2,-12(fp)
   108e0:	10800117 	ldw	r2,4(r2)
   108e4:	e0fffd17 	ldw	r3,-12(fp)
   108e8:	18c00017 	ldw	r3,0(r3)
   108ec:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   108f0:	e0bffd17 	ldw	r2,-12(fp)
   108f4:	e0fffd17 	ldw	r3,-12(fp)
   108f8:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   108fc:	e0bffd17 	ldw	r2,-12(fp)
   10900:	e0fffd17 	ldw	r3,-12(fp)
   10904:	10c00015 	stw	r3,0(r2)
   10908:	e0bffb17 	ldw	r2,-20(fp)
   1090c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10910:	e0bffe17 	ldw	r2,-8(fp)
   10914:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   10918:	0001883a 	nop
   1091c:	e037883a 	mov	sp,fp
   10920:	df000017 	ldw	fp,0(sp)
   10924:	dec00104 	addi	sp,sp,4
   10928:	f800283a 	ret

0001092c <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   1092c:	defffb04 	addi	sp,sp,-20
   10930:	dfc00415 	stw	ra,16(sp)
   10934:	df000315 	stw	fp,12(sp)
   10938:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   1093c:	d0a00e17 	ldw	r2,-32712(gp)
   10940:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   10944:	d0a72f17 	ldw	r2,-25412(gp)
   10948:	10800044 	addi	r2,r2,1
   1094c:	d0a72f15 	stw	r2,-25412(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   10950:	00002e06 	br	10a0c <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   10954:	e0bffd17 	ldw	r2,-12(fp)
   10958:	10800017 	ldw	r2,0(r2)
   1095c:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   10960:	e0bffd17 	ldw	r2,-12(fp)
   10964:	10800403 	ldbu	r2,16(r2)
   10968:	10803fcc 	andi	r2,r2,255
   1096c:	10000426 	beq	r2,zero,10980 <alt_tick+0x54>
   10970:	d0a72f17 	ldw	r2,-25412(gp)
   10974:	1000021e 	bne	r2,zero,10980 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   10978:	e0bffd17 	ldw	r2,-12(fp)
   1097c:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   10980:	e0bffd17 	ldw	r2,-12(fp)
   10984:	10800217 	ldw	r2,8(r2)
   10988:	d0e72f17 	ldw	r3,-25412(gp)
   1098c:	18801d36 	bltu	r3,r2,10a04 <alt_tick+0xd8>
   10990:	e0bffd17 	ldw	r2,-12(fp)
   10994:	10800403 	ldbu	r2,16(r2)
   10998:	10803fcc 	andi	r2,r2,255
   1099c:	1000191e 	bne	r2,zero,10a04 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   109a0:	e0bffd17 	ldw	r2,-12(fp)
   109a4:	10800317 	ldw	r2,12(r2)
   109a8:	e0fffd17 	ldw	r3,-12(fp)
   109ac:	18c00517 	ldw	r3,20(r3)
   109b0:	1809883a 	mov	r4,r3
   109b4:	103ee83a 	callr	r2
   109b8:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   109bc:	e0bfff17 	ldw	r2,-4(fp)
   109c0:	1000031e 	bne	r2,zero,109d0 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   109c4:	e13ffd17 	ldw	r4,-12(fp)
   109c8:	00108900 	call	10890 <alt_alarm_stop>
   109cc:	00000d06 	br	10a04 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   109d0:	e0bffd17 	ldw	r2,-12(fp)
   109d4:	10c00217 	ldw	r3,8(r2)
   109d8:	e0bfff17 	ldw	r2,-4(fp)
   109dc:	1887883a 	add	r3,r3,r2
   109e0:	e0bffd17 	ldw	r2,-12(fp)
   109e4:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   109e8:	e0bffd17 	ldw	r2,-12(fp)
   109ec:	10c00217 	ldw	r3,8(r2)
   109f0:	d0a72f17 	ldw	r2,-25412(gp)
   109f4:	1880032e 	bgeu	r3,r2,10a04 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   109f8:	e0bffd17 	ldw	r2,-12(fp)
   109fc:	00c00044 	movi	r3,1
   10a00:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   10a04:	e0bffe17 	ldw	r2,-8(fp)
   10a08:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   10a0c:	e0fffd17 	ldw	r3,-12(fp)
   10a10:	d0a00e04 	addi	r2,gp,-32712
   10a14:	18bfcf1e 	bne	r3,r2,10954 <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   10a18:	0001883a 	nop
}
   10a1c:	0001883a 	nop
   10a20:	e037883a 	mov	sp,fp
   10a24:	dfc00117 	ldw	ra,4(sp)
   10a28:	df000017 	ldw	fp,0(sp)
   10a2c:	dec00204 	addi	sp,sp,8
   10a30:	f800283a 	ret

00010a34 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   10a34:	deffff04 	addi	sp,sp,-4
   10a38:	df000015 	stw	fp,0(sp)
   10a3c:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   10a40:	000170fa 	wrctl	ienable,zero
}
   10a44:	0001883a 	nop
   10a48:	e037883a 	mov	sp,fp
   10a4c:	df000017 	ldw	fp,0(sp)
   10a50:	dec00104 	addi	sp,sp,4
   10a54:	f800283a 	ret

00010a58 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   10a58:	defffa04 	addi	sp,sp,-24
   10a5c:	dfc00515 	stw	ra,20(sp)
   10a60:	df000415 	stw	fp,16(sp)
   10a64:	df000404 	addi	fp,sp,16
   10a68:	e13ffe15 	stw	r4,-8(fp)
   10a6c:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   10a70:	e0bfff17 	ldw	r2,-4(fp)
   10a74:	10800017 	ldw	r2,0(r2)
   10a78:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   10a7c:	e13ffe17 	ldw	r4,-8(fp)
   10a80:	00029480 	call	2948 <strlen>
   10a84:	10800044 	addi	r2,r2,1
   10a88:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   10a8c:	00000d06 	br	10ac4 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   10a90:	e0bffc17 	ldw	r2,-16(fp)
   10a94:	10800217 	ldw	r2,8(r2)
   10a98:	e0fffd17 	ldw	r3,-12(fp)
   10a9c:	180d883a 	mov	r6,r3
   10aa0:	e17ffe17 	ldw	r5,-8(fp)
   10aa4:	1009883a 	mov	r4,r2
   10aa8:	0010e0c0 	call	10e0c <memcmp>
   10aac:	1000021e 	bne	r2,zero,10ab8 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   10ab0:	e0bffc17 	ldw	r2,-16(fp)
   10ab4:	00000706 	br	10ad4 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   10ab8:	e0bffc17 	ldw	r2,-16(fp)
   10abc:	10800017 	ldw	r2,0(r2)
   10ac0:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   10ac4:	e0fffc17 	ldw	r3,-16(fp)
   10ac8:	e0bfff17 	ldw	r2,-4(fp)
   10acc:	18bff01e 	bne	r3,r2,10a90 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   10ad0:	0005883a 	mov	r2,zero
}
   10ad4:	e037883a 	mov	sp,fp
   10ad8:	dfc00117 	ldw	ra,4(sp)
   10adc:	df000017 	ldw	fp,0(sp)
   10ae0:	dec00204 	addi	sp,sp,8
   10ae4:	f800283a 	ret

00010ae8 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   10ae8:	defffb04 	addi	sp,sp,-20
   10aec:	dfc00415 	stw	ra,16(sp)
   10af0:	df000315 	stw	fp,12(sp)
   10af4:	df000304 	addi	fp,sp,12
   10af8:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   10afc:	d0a00617 	ldw	r2,-32744(gp)
   10b00:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   10b04:	00003106 	br	10bcc <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   10b08:	e0bffd17 	ldw	r2,-12(fp)
   10b0c:	10800217 	ldw	r2,8(r2)
   10b10:	1009883a 	mov	r4,r2
   10b14:	00029480 	call	2948 <strlen>
   10b18:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   10b1c:	e0bffd17 	ldw	r2,-12(fp)
   10b20:	10c00217 	ldw	r3,8(r2)
   10b24:	e0bffe17 	ldw	r2,-8(fp)
   10b28:	10bfffc4 	addi	r2,r2,-1
   10b2c:	1885883a 	add	r2,r3,r2
   10b30:	10800003 	ldbu	r2,0(r2)
   10b34:	10803fcc 	andi	r2,r2,255
   10b38:	1080201c 	xori	r2,r2,128
   10b3c:	10bfe004 	addi	r2,r2,-128
   10b40:	10800bd8 	cmpnei	r2,r2,47
   10b44:	1000031e 	bne	r2,zero,10b54 <alt_find_file+0x6c>
    {
      len -= 1;
   10b48:	e0bffe17 	ldw	r2,-8(fp)
   10b4c:	10bfffc4 	addi	r2,r2,-1
   10b50:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   10b54:	e0bffe17 	ldw	r2,-8(fp)
   10b58:	e0ffff17 	ldw	r3,-4(fp)
   10b5c:	1885883a 	add	r2,r3,r2
   10b60:	10800003 	ldbu	r2,0(r2)
   10b64:	10803fcc 	andi	r2,r2,255
   10b68:	1080201c 	xori	r2,r2,128
   10b6c:	10bfe004 	addi	r2,r2,-128
   10b70:	10800be0 	cmpeqi	r2,r2,47
   10b74:	1000081e 	bne	r2,zero,10b98 <alt_find_file+0xb0>
   10b78:	e0bffe17 	ldw	r2,-8(fp)
   10b7c:	e0ffff17 	ldw	r3,-4(fp)
   10b80:	1885883a 	add	r2,r3,r2
   10b84:	10800003 	ldbu	r2,0(r2)
   10b88:	10803fcc 	andi	r2,r2,255
   10b8c:	1080201c 	xori	r2,r2,128
   10b90:	10bfe004 	addi	r2,r2,-128
   10b94:	10000a1e 	bne	r2,zero,10bc0 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   10b98:	e0bffd17 	ldw	r2,-12(fp)
   10b9c:	10800217 	ldw	r2,8(r2)
   10ba0:	e0fffe17 	ldw	r3,-8(fp)
   10ba4:	180d883a 	mov	r6,r3
   10ba8:	e17fff17 	ldw	r5,-4(fp)
   10bac:	1009883a 	mov	r4,r2
   10bb0:	0010e0c0 	call	10e0c <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   10bb4:	1000021e 	bne	r2,zero,10bc0 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   10bb8:	e0bffd17 	ldw	r2,-12(fp)
   10bbc:	00000706 	br	10bdc <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   10bc0:	e0bffd17 	ldw	r2,-12(fp)
   10bc4:	10800017 	ldw	r2,0(r2)
   10bc8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   10bcc:	e0fffd17 	ldw	r3,-12(fp)
   10bd0:	d0a00604 	addi	r2,gp,-32744
   10bd4:	18bfcc1e 	bne	r3,r2,10b08 <alt_find_file+0x20>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   10bd8:	0005883a 	mov	r2,zero
}
   10bdc:	e037883a 	mov	sp,fp
   10be0:	dfc00117 	ldw	ra,4(sp)
   10be4:	df000017 	ldw	fp,0(sp)
   10be8:	dec00204 	addi	sp,sp,8
   10bec:	f800283a 	ret

00010bf0 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   10bf0:	defffc04 	addi	sp,sp,-16
   10bf4:	df000315 	stw	fp,12(sp)
   10bf8:	df000304 	addi	fp,sp,12
   10bfc:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   10c00:	00bffa04 	movi	r2,-24
   10c04:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   10c08:	e03ffd15 	stw	zero,-12(fp)
   10c0c:	00001906 	br	10c74 <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
   10c10:	00800074 	movhi	r2,1
   10c14:	1088b104 	addi	r2,r2,8900
   10c18:	e0fffd17 	ldw	r3,-12(fp)
   10c1c:	18c00324 	muli	r3,r3,12
   10c20:	10c5883a 	add	r2,r2,r3
   10c24:	10800017 	ldw	r2,0(r2)
   10c28:	10000f1e 	bne	r2,zero,10c68 <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
   10c2c:	00800074 	movhi	r2,1
   10c30:	1088b104 	addi	r2,r2,8900
   10c34:	e0fffd17 	ldw	r3,-12(fp)
   10c38:	18c00324 	muli	r3,r3,12
   10c3c:	10c5883a 	add	r2,r2,r3
   10c40:	e0ffff17 	ldw	r3,-4(fp)
   10c44:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   10c48:	d0e00a17 	ldw	r3,-32728(gp)
   10c4c:	e0bffd17 	ldw	r2,-12(fp)
   10c50:	1880020e 	bge	r3,r2,10c5c <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
   10c54:	e0bffd17 	ldw	r2,-12(fp)
   10c58:	d0a00a15 	stw	r2,-32728(gp)
      }
      rc = i;
   10c5c:	e0bffd17 	ldw	r2,-12(fp)
   10c60:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
   10c64:	00000606 	br	10c80 <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   10c68:	e0bffd17 	ldw	r2,-12(fp)
   10c6c:	10800044 	addi	r2,r2,1
   10c70:	e0bffd15 	stw	r2,-12(fp)
   10c74:	e0bffd17 	ldw	r2,-12(fp)
   10c78:	10800810 	cmplti	r2,r2,32
   10c7c:	103fe41e 	bne	r2,zero,10c10 <alt_get_fd+0x20>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   10c80:	e0bffe17 	ldw	r2,-8(fp)
}
   10c84:	e037883a 	mov	sp,fp
   10c88:	df000017 	ldw	fp,0(sp)
   10c8c:	dec00104 	addi	sp,sp,4
   10c90:	f800283a 	ret

00010c94 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   10c94:	defffb04 	addi	sp,sp,-20
   10c98:	df000415 	stw	fp,16(sp)
   10c9c:	df000404 	addi	fp,sp,16
   10ca0:	e13ffe15 	stw	r4,-8(fp)
   10ca4:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   10ca8:	e0bfff17 	ldw	r2,-4(fp)
   10cac:	10840070 	cmpltui	r2,r2,4097
   10cb0:	1000021e 	bne	r2,zero,10cbc <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
   10cb4:	00840004 	movi	r2,4096
   10cb8:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
   10cbc:	e0fffe17 	ldw	r3,-8(fp)
   10cc0:	e0bfff17 	ldw	r2,-4(fp)
   10cc4:	1885883a 	add	r2,r3,r2
   10cc8:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   10ccc:	e0bffe17 	ldw	r2,-8(fp)
   10cd0:	e0bffc15 	stw	r2,-16(fp)
   10cd4:	00000506 	br	10cec <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   10cd8:	e0bffc17 	ldw	r2,-16(fp)
   10cdc:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   10ce0:	e0bffc17 	ldw	r2,-16(fp)
   10ce4:	10800804 	addi	r2,r2,32
   10ce8:	e0bffc15 	stw	r2,-16(fp)
   10cec:	e0fffc17 	ldw	r3,-16(fp)
   10cf0:	e0bffd17 	ldw	r2,-12(fp)
   10cf4:	18bff836 	bltu	r3,r2,10cd8 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   10cf8:	e0bffe17 	ldw	r2,-8(fp)
   10cfc:	108007cc 	andi	r2,r2,31
   10d00:	10000226 	beq	r2,zero,10d0c <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   10d04:	e0bffc17 	ldw	r2,-16(fp)
   10d08:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   10d0c:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   10d10:	0001883a 	nop
   10d14:	e037883a 	mov	sp,fp
   10d18:	df000017 	ldw	fp,0(sp)
   10d1c:	dec00104 	addi	sp,sp,4
   10d20:	f800283a 	ret

00010d24 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   10d24:	defffe04 	addi	sp,sp,-8
   10d28:	df000115 	stw	fp,4(sp)
   10d2c:	df000104 	addi	fp,sp,4
   10d30:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   10d34:	e0bfff17 	ldw	r2,-4(fp)
   10d38:	10bffe84 	addi	r2,r2,-6
   10d3c:	10c00428 	cmpgeui	r3,r2,16
   10d40:	18001a1e 	bne	r3,zero,10dac <alt_exception_cause_generated_bad_addr+0x88>
   10d44:	100690ba 	slli	r3,r2,2
   10d48:	00800074 	movhi	r2,1
   10d4c:	10835704 	addi	r2,r2,3420
   10d50:	1885883a 	add	r2,r3,r2
   10d54:	10800017 	ldw	r2,0(r2)
   10d58:	1000683a 	jmp	r2
   10d5c:	00010d9c 	xori	zero,zero,1078
   10d60:	00010d9c 	xori	zero,zero,1078
   10d64:	00010dac 	andhi	zero,zero,1078
   10d68:	00010dac 	andhi	zero,zero,1078
   10d6c:	00010dac 	andhi	zero,zero,1078
   10d70:	00010d9c 	xori	zero,zero,1078
   10d74:	00010da4 	muli	zero,zero,1078
   10d78:	00010dac 	andhi	zero,zero,1078
   10d7c:	00010d9c 	xori	zero,zero,1078
   10d80:	00010d9c 	xori	zero,zero,1078
   10d84:	00010dac 	andhi	zero,zero,1078
   10d88:	00010d9c 	xori	zero,zero,1078
   10d8c:	00010da4 	muli	zero,zero,1078
   10d90:	00010dac 	andhi	zero,zero,1078
   10d94:	00010dac 	andhi	zero,zero,1078
   10d98:	00010d9c 	xori	zero,zero,1078
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   10d9c:	00800044 	movi	r2,1
   10da0:	00000306 	br	10db0 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   10da4:	0005883a 	mov	r2,zero
   10da8:	00000106 	br	10db0 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   10dac:	0005883a 	mov	r2,zero
  }
}
   10db0:	e037883a 	mov	sp,fp
   10db4:	df000017 	ldw	fp,0(sp)
   10db8:	dec00104 	addi	sp,sp,4
   10dbc:	f800283a 	ret

00010dc0 <atexit>:
   10dc0:	200b883a 	mov	r5,r4
   10dc4:	000f883a 	mov	r7,zero
   10dc8:	000d883a 	mov	r6,zero
   10dcc:	0009883a 	mov	r4,zero
   10dd0:	0010e881 	jmpi	10e88 <__register_exitproc>

00010dd4 <exit>:
   10dd4:	defffe04 	addi	sp,sp,-8
   10dd8:	000b883a 	mov	r5,zero
   10ddc:	dc000015 	stw	r16,0(sp)
   10de0:	dfc00115 	stw	ra,4(sp)
   10de4:	2021883a 	mov	r16,r4
   10de8:	0010fa00 	call	10fa0 <__call_exitprocs>
   10dec:	00800074 	movhi	r2,1
   10df0:	108d2b04 	addi	r2,r2,13484
   10df4:	11000017 	ldw	r4,0(r2)
   10df8:	20800f17 	ldw	r2,60(r4)
   10dfc:	10000126 	beq	r2,zero,10e04 <exit+0x30>
   10e00:	103ee83a 	callr	r2
   10e04:	8009883a 	mov	r4,r16
   10e08:	00111200 	call	11120 <_exit>

00010e0c <memcmp>:
   10e0c:	01c000c4 	movi	r7,3
   10e10:	3980192e 	bgeu	r7,r6,10e78 <memcmp+0x6c>
   10e14:	2144b03a 	or	r2,r4,r5
   10e18:	11c4703a 	and	r2,r2,r7
   10e1c:	10000f26 	beq	r2,zero,10e5c <memcmp+0x50>
   10e20:	20800003 	ldbu	r2,0(r4)
   10e24:	28c00003 	ldbu	r3,0(r5)
   10e28:	10c0151e 	bne	r2,r3,10e80 <memcmp+0x74>
   10e2c:	31bfff84 	addi	r6,r6,-2
   10e30:	01ffffc4 	movi	r7,-1
   10e34:	00000406 	br	10e48 <memcmp+0x3c>
   10e38:	20800003 	ldbu	r2,0(r4)
   10e3c:	28c00003 	ldbu	r3,0(r5)
   10e40:	31bfffc4 	addi	r6,r6,-1
   10e44:	10c00e1e 	bne	r2,r3,10e80 <memcmp+0x74>
   10e48:	21000044 	addi	r4,r4,1
   10e4c:	29400044 	addi	r5,r5,1
   10e50:	31fff91e 	bne	r6,r7,10e38 <memcmp+0x2c>
   10e54:	0005883a 	mov	r2,zero
   10e58:	f800283a 	ret
   10e5c:	20c00017 	ldw	r3,0(r4)
   10e60:	28800017 	ldw	r2,0(r5)
   10e64:	18bfee1e 	bne	r3,r2,10e20 <memcmp+0x14>
   10e68:	31bfff04 	addi	r6,r6,-4
   10e6c:	21000104 	addi	r4,r4,4
   10e70:	29400104 	addi	r5,r5,4
   10e74:	39bff936 	bltu	r7,r6,10e5c <memcmp+0x50>
   10e78:	303fe91e 	bne	r6,zero,10e20 <memcmp+0x14>
   10e7c:	003ff506 	br	10e54 <memcmp+0x48>
   10e80:	10c5c83a 	sub	r2,r2,r3
   10e84:	f800283a 	ret

00010e88 <__register_exitproc>:
   10e88:	defffa04 	addi	sp,sp,-24
   10e8c:	dc000315 	stw	r16,12(sp)
   10e90:	04000074 	movhi	r16,1
   10e94:	840d2b04 	addi	r16,r16,13484
   10e98:	80c00017 	ldw	r3,0(r16)
   10e9c:	dc400415 	stw	r17,16(sp)
   10ea0:	dfc00515 	stw	ra,20(sp)
   10ea4:	18805217 	ldw	r2,328(r3)
   10ea8:	2023883a 	mov	r17,r4
   10eac:	10003726 	beq	r2,zero,10f8c <__register_exitproc+0x104>
   10eb0:	10c00117 	ldw	r3,4(r2)
   10eb4:	010007c4 	movi	r4,31
   10eb8:	20c00e16 	blt	r4,r3,10ef4 <__register_exitproc+0x6c>
   10ebc:	1a000044 	addi	r8,r3,1
   10ec0:	8800221e 	bne	r17,zero,10f4c <__register_exitproc+0xc4>
   10ec4:	18c00084 	addi	r3,r3,2
   10ec8:	18c7883a 	add	r3,r3,r3
   10ecc:	18c7883a 	add	r3,r3,r3
   10ed0:	12000115 	stw	r8,4(r2)
   10ed4:	10c7883a 	add	r3,r2,r3
   10ed8:	19400015 	stw	r5,0(r3)
   10edc:	0005883a 	mov	r2,zero
   10ee0:	dfc00517 	ldw	ra,20(sp)
   10ee4:	dc400417 	ldw	r17,16(sp)
   10ee8:	dc000317 	ldw	r16,12(sp)
   10eec:	dec00604 	addi	sp,sp,24
   10ef0:	f800283a 	ret
   10ef4:	00800034 	movhi	r2,0
   10ef8:	1087e004 	addi	r2,r2,8064
   10efc:	10002626 	beq	r2,zero,10f98 <__register_exitproc+0x110>
   10f00:	01006404 	movi	r4,400
   10f04:	d9400015 	stw	r5,0(sp)
   10f08:	d9800115 	stw	r6,4(sp)
   10f0c:	d9c00215 	stw	r7,8(sp)
   10f10:	0001f800 	call	1f80 <malloc>
   10f14:	d9400017 	ldw	r5,0(sp)
   10f18:	d9800117 	ldw	r6,4(sp)
   10f1c:	d9c00217 	ldw	r7,8(sp)
   10f20:	10001d26 	beq	r2,zero,10f98 <__register_exitproc+0x110>
   10f24:	81000017 	ldw	r4,0(r16)
   10f28:	10000115 	stw	zero,4(r2)
   10f2c:	02000044 	movi	r8,1
   10f30:	22405217 	ldw	r9,328(r4)
   10f34:	0007883a 	mov	r3,zero
   10f38:	12400015 	stw	r9,0(r2)
   10f3c:	20805215 	stw	r2,328(r4)
   10f40:	10006215 	stw	zero,392(r2)
   10f44:	10006315 	stw	zero,396(r2)
   10f48:	883fde26 	beq	r17,zero,10ec4 <__register_exitproc+0x3c>
   10f4c:	18c9883a 	add	r4,r3,r3
   10f50:	2109883a 	add	r4,r4,r4
   10f54:	1109883a 	add	r4,r2,r4
   10f58:	21802215 	stw	r6,136(r4)
   10f5c:	01800044 	movi	r6,1
   10f60:	12406217 	ldw	r9,392(r2)
   10f64:	30cc983a 	sll	r6,r6,r3
   10f68:	4992b03a 	or	r9,r9,r6
   10f6c:	12406215 	stw	r9,392(r2)
   10f70:	21c04215 	stw	r7,264(r4)
   10f74:	01000084 	movi	r4,2
   10f78:	893fd21e 	bne	r17,r4,10ec4 <__register_exitproc+0x3c>
   10f7c:	11006317 	ldw	r4,396(r2)
   10f80:	218cb03a 	or	r6,r4,r6
   10f84:	11806315 	stw	r6,396(r2)
   10f88:	003fce06 	br	10ec4 <__register_exitproc+0x3c>
   10f8c:	18805304 	addi	r2,r3,332
   10f90:	18805215 	stw	r2,328(r3)
   10f94:	003fc606 	br	10eb0 <__register_exitproc+0x28>
   10f98:	00bfffc4 	movi	r2,-1
   10f9c:	003fd006 	br	10ee0 <__register_exitproc+0x58>

00010fa0 <__call_exitprocs>:
   10fa0:	defff504 	addi	sp,sp,-44
   10fa4:	df000915 	stw	fp,36(sp)
   10fa8:	dd400615 	stw	r21,24(sp)
   10fac:	dc800315 	stw	r18,12(sp)
   10fb0:	dfc00a15 	stw	ra,40(sp)
   10fb4:	ddc00815 	stw	r23,32(sp)
   10fb8:	dd800715 	stw	r22,28(sp)
   10fbc:	dd000515 	stw	r20,20(sp)
   10fc0:	dcc00415 	stw	r19,16(sp)
   10fc4:	dc400215 	stw	r17,8(sp)
   10fc8:	dc000115 	stw	r16,4(sp)
   10fcc:	d9000015 	stw	r4,0(sp)
   10fd0:	2839883a 	mov	fp,r5
   10fd4:	04800044 	movi	r18,1
   10fd8:	057fffc4 	movi	r21,-1
   10fdc:	00800074 	movhi	r2,1
   10fe0:	108d2b04 	addi	r2,r2,13484
   10fe4:	12000017 	ldw	r8,0(r2)
   10fe8:	45005217 	ldw	r20,328(r8)
   10fec:	44c05204 	addi	r19,r8,328
   10ff0:	a0001c26 	beq	r20,zero,11064 <__call_exitprocs+0xc4>
   10ff4:	a0800117 	ldw	r2,4(r20)
   10ff8:	15ffffc4 	addi	r23,r2,-1
   10ffc:	b8000d16 	blt	r23,zero,11034 <__call_exitprocs+0x94>
   11000:	14000044 	addi	r16,r2,1
   11004:	8421883a 	add	r16,r16,r16
   11008:	8421883a 	add	r16,r16,r16
   1100c:	84402004 	addi	r17,r16,128
   11010:	a463883a 	add	r17,r20,r17
   11014:	a421883a 	add	r16,r20,r16
   11018:	e0001e26 	beq	fp,zero,11094 <__call_exitprocs+0xf4>
   1101c:	80804017 	ldw	r2,256(r16)
   11020:	e0801c26 	beq	fp,r2,11094 <__call_exitprocs+0xf4>
   11024:	bdffffc4 	addi	r23,r23,-1
   11028:	843fff04 	addi	r16,r16,-4
   1102c:	8c7fff04 	addi	r17,r17,-4
   11030:	bd7ff91e 	bne	r23,r21,11018 <__call_exitprocs+0x78>
   11034:	00800034 	movhi	r2,0
   11038:	1087e504 	addi	r2,r2,8084
   1103c:	10000926 	beq	r2,zero,11064 <__call_exitprocs+0xc4>
   11040:	a0800117 	ldw	r2,4(r20)
   11044:	1000301e 	bne	r2,zero,11108 <__call_exitprocs+0x168>
   11048:	a0800017 	ldw	r2,0(r20)
   1104c:	10003226 	beq	r2,zero,11118 <__call_exitprocs+0x178>
   11050:	a009883a 	mov	r4,r20
   11054:	98800015 	stw	r2,0(r19)
   11058:	0001f940 	call	1f94 <free>
   1105c:	9d000017 	ldw	r20,0(r19)
   11060:	a03fe41e 	bne	r20,zero,10ff4 <__call_exitprocs+0x54>
   11064:	dfc00a17 	ldw	ra,40(sp)
   11068:	df000917 	ldw	fp,36(sp)
   1106c:	ddc00817 	ldw	r23,32(sp)
   11070:	dd800717 	ldw	r22,28(sp)
   11074:	dd400617 	ldw	r21,24(sp)
   11078:	dd000517 	ldw	r20,20(sp)
   1107c:	dcc00417 	ldw	r19,16(sp)
   11080:	dc800317 	ldw	r18,12(sp)
   11084:	dc400217 	ldw	r17,8(sp)
   11088:	dc000117 	ldw	r16,4(sp)
   1108c:	dec00b04 	addi	sp,sp,44
   11090:	f800283a 	ret
   11094:	a0800117 	ldw	r2,4(r20)
   11098:	80c00017 	ldw	r3,0(r16)
   1109c:	10bfffc4 	addi	r2,r2,-1
   110a0:	15c01426 	beq	r2,r23,110f4 <__call_exitprocs+0x154>
   110a4:	80000015 	stw	zero,0(r16)
   110a8:	183fde26 	beq	r3,zero,11024 <__call_exitprocs+0x84>
   110ac:	95c8983a 	sll	r4,r18,r23
   110b0:	a0806217 	ldw	r2,392(r20)
   110b4:	a5800117 	ldw	r22,4(r20)
   110b8:	2084703a 	and	r2,r4,r2
   110bc:	10000b26 	beq	r2,zero,110ec <__call_exitprocs+0x14c>
   110c0:	a0806317 	ldw	r2,396(r20)
   110c4:	2088703a 	and	r4,r4,r2
   110c8:	20000c1e 	bne	r4,zero,110fc <__call_exitprocs+0x15c>
   110cc:	89400017 	ldw	r5,0(r17)
   110d0:	d9000017 	ldw	r4,0(sp)
   110d4:	183ee83a 	callr	r3
   110d8:	a0800117 	ldw	r2,4(r20)
   110dc:	15bfbf1e 	bne	r2,r22,10fdc <__call_exitprocs+0x3c>
   110e0:	98800017 	ldw	r2,0(r19)
   110e4:	153fcf26 	beq	r2,r20,11024 <__call_exitprocs+0x84>
   110e8:	003fbc06 	br	10fdc <__call_exitprocs+0x3c>
   110ec:	183ee83a 	callr	r3
   110f0:	003ff906 	br	110d8 <__call_exitprocs+0x138>
   110f4:	a5c00115 	stw	r23,4(r20)
   110f8:	003feb06 	br	110a8 <__call_exitprocs+0x108>
   110fc:	89000017 	ldw	r4,0(r17)
   11100:	183ee83a 	callr	r3
   11104:	003ff406 	br	110d8 <__call_exitprocs+0x138>
   11108:	a0800017 	ldw	r2,0(r20)
   1110c:	a027883a 	mov	r19,r20
   11110:	1029883a 	mov	r20,r2
   11114:	003fb606 	br	10ff0 <__call_exitprocs+0x50>
   11118:	0005883a 	mov	r2,zero
   1111c:	003ffb06 	br	1110c <__call_exitprocs+0x16c>

00011120 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   11120:	defffd04 	addi	sp,sp,-12
   11124:	df000215 	stw	fp,8(sp)
   11128:	df000204 	addi	fp,sp,8
   1112c:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   11130:	0001883a 	nop
   11134:	e0bfff17 	ldw	r2,-4(fp)
   11138:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   1113c:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   11140:	10000226 	beq	r2,zero,1114c <_exit+0x2c>
    ALT_SIM_FAIL();
   11144:	002af070 	cmpltui	zero,zero,43969
   11148:	00000106 	br	11150 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   1114c:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   11150:	003fff06 	br	11150 <_exit+0x30>
