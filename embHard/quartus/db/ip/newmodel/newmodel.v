// newmodel.v

// Generated using ACDS version 18.1 625

`timescale 1 ps / 1 ps
module newmodel (
		input  wire        clk_clk,                              //                           clk.clk
		output wire        dma_controller_0_conduit_end_d_c_n,   //  dma_controller_0_conduit_end.d_c_n
		output wire        dma_controller_0_conduit_end_wr_n,    //                              .wr_n
		output wire [15:0] dma_controller_0_conduit_end_data,    //                              .data
		inout  wire [31:0] gpio_controller_0_conduit_end_export, // gpio_controller_0_conduit_end.export
		input  wire        reset_reset_n,                        //                         reset.reset_n
		output wire [11:0] sdram_controller_wire_addr,           //         sdram_controller_wire.addr
		output wire [1:0]  sdram_controller_wire_ba,             //                              .ba
		output wire        sdram_controller_wire_cas_n,          //                              .cas_n
		output wire        sdram_controller_wire_cke,            //                              .cke
		output wire        sdram_controller_wire_cs_n,           //                              .cs_n
		inout  wire [15:0] sdram_controller_wire_dq,             //                              .dq
		output wire [1:0]  sdram_controller_wire_dqm,            //                              .dqm
		output wire        sdram_controller_wire_ras_n,          //                              .ras_n
		output wire        sdram_controller_wire_we_n,           //                              .we_n
		output wire        sys_sdram_pll_0_sdram_clk_clk         //     sys_sdram_pll_0_sdram_clk.clk
	);

	wire         sys_sdram_pll_0_sys_clk_clk;                                   // sys_sdram_pll_0:sys_clk_clk -> [CPU:clk, DMA_controller_0:clk_i, GPIO_controller_0:Clk, SDRAM_controller:clk, irq_mapper:clk, jtag_uart_0:clk, mm_interconnect_0:sys_sdram_pll_0_sys_clk_clk, rst_controller:clk, sysid_qsys_0:clock, timer_0:clk]
	wire  [15:0] dma_controller_0_avalon_master_readdata;                       // mm_interconnect_0:DMA_controller_0_avalon_master_readdata -> DMA_controller_0:master_readdata_i
	wire         dma_controller_0_avalon_master_waitrequest;                    // mm_interconnect_0:DMA_controller_0_avalon_master_waitrequest -> DMA_controller_0:master_waitrequest_i
	wire  [31:0] dma_controller_0_avalon_master_address;                        // DMA_controller_0:master_address_o -> mm_interconnect_0:DMA_controller_0_avalon_master_address
	wire         dma_controller_0_avalon_master_read;                           // DMA_controller_0:master_read_o -> mm_interconnect_0:DMA_controller_0_avalon_master_read
	wire  [31:0] cpu_data_master_readdata;                                      // mm_interconnect_0:CPU_data_master_readdata -> CPU:d_readdata
	wire         cpu_data_master_waitrequest;                                   // mm_interconnect_0:CPU_data_master_waitrequest -> CPU:d_waitrequest
	wire         cpu_data_master_debugaccess;                                   // CPU:debug_mem_slave_debugaccess_to_roms -> mm_interconnect_0:CPU_data_master_debugaccess
	wire  [25:0] cpu_data_master_address;                                       // CPU:d_address -> mm_interconnect_0:CPU_data_master_address
	wire   [3:0] cpu_data_master_byteenable;                                    // CPU:d_byteenable -> mm_interconnect_0:CPU_data_master_byteenable
	wire         cpu_data_master_read;                                          // CPU:d_read -> mm_interconnect_0:CPU_data_master_read
	wire         cpu_data_master_readdatavalid;                                 // mm_interconnect_0:CPU_data_master_readdatavalid -> CPU:d_readdatavalid
	wire         cpu_data_master_write;                                         // CPU:d_write -> mm_interconnect_0:CPU_data_master_write
	wire  [31:0] cpu_data_master_writedata;                                     // CPU:d_writedata -> mm_interconnect_0:CPU_data_master_writedata
	wire  [31:0] cpu_instruction_master_readdata;                               // mm_interconnect_0:CPU_instruction_master_readdata -> CPU:i_readdata
	wire         cpu_instruction_master_waitrequest;                            // mm_interconnect_0:CPU_instruction_master_waitrequest -> CPU:i_waitrequest
	wire  [25:0] cpu_instruction_master_address;                                // CPU:i_address -> mm_interconnect_0:CPU_instruction_master_address
	wire         cpu_instruction_master_read;                                   // CPU:i_read -> mm_interconnect_0:CPU_instruction_master_read
	wire         cpu_instruction_master_readdatavalid;                          // mm_interconnect_0:CPU_instruction_master_readdatavalid -> CPU:i_readdatavalid
	wire         mm_interconnect_0_sdram_controller_s1_chipselect;              // mm_interconnect_0:SDRAM_controller_s1_chipselect -> SDRAM_controller:az_cs
	wire  [15:0] mm_interconnect_0_sdram_controller_s1_readdata;                // SDRAM_controller:za_data -> mm_interconnect_0:SDRAM_controller_s1_readdata
	wire         mm_interconnect_0_sdram_controller_s1_waitrequest;             // SDRAM_controller:za_waitrequest -> mm_interconnect_0:SDRAM_controller_s1_waitrequest
	wire  [22:0] mm_interconnect_0_sdram_controller_s1_address;                 // mm_interconnect_0:SDRAM_controller_s1_address -> SDRAM_controller:az_addr
	wire         mm_interconnect_0_sdram_controller_s1_read;                    // mm_interconnect_0:SDRAM_controller_s1_read -> SDRAM_controller:az_rd_n
	wire   [1:0] mm_interconnect_0_sdram_controller_s1_byteenable;              // mm_interconnect_0:SDRAM_controller_s1_byteenable -> SDRAM_controller:az_be_n
	wire         mm_interconnect_0_sdram_controller_s1_readdatavalid;           // SDRAM_controller:za_valid -> mm_interconnect_0:SDRAM_controller_s1_readdatavalid
	wire         mm_interconnect_0_sdram_controller_s1_write;                   // mm_interconnect_0:SDRAM_controller_s1_write -> SDRAM_controller:az_wr_n
	wire  [15:0] mm_interconnect_0_sdram_controller_s1_writedata;               // mm_interconnect_0:SDRAM_controller_s1_writedata -> SDRAM_controller:az_data
	wire  [31:0] mm_interconnect_0_cpu_debug_mem_slave_readdata;                // CPU:debug_mem_slave_readdata -> mm_interconnect_0:CPU_debug_mem_slave_readdata
	wire         mm_interconnect_0_cpu_debug_mem_slave_waitrequest;             // CPU:debug_mem_slave_waitrequest -> mm_interconnect_0:CPU_debug_mem_slave_waitrequest
	wire         mm_interconnect_0_cpu_debug_mem_slave_debugaccess;             // mm_interconnect_0:CPU_debug_mem_slave_debugaccess -> CPU:debug_mem_slave_debugaccess
	wire   [8:0] mm_interconnect_0_cpu_debug_mem_slave_address;                 // mm_interconnect_0:CPU_debug_mem_slave_address -> CPU:debug_mem_slave_address
	wire         mm_interconnect_0_cpu_debug_mem_slave_read;                    // mm_interconnect_0:CPU_debug_mem_slave_read -> CPU:debug_mem_slave_read
	wire   [3:0] mm_interconnect_0_cpu_debug_mem_slave_byteenable;              // mm_interconnect_0:CPU_debug_mem_slave_byteenable -> CPU:debug_mem_slave_byteenable
	wire         mm_interconnect_0_cpu_debug_mem_slave_write;                   // mm_interconnect_0:CPU_debug_mem_slave_write -> CPU:debug_mem_slave_write
	wire  [31:0] mm_interconnect_0_cpu_debug_mem_slave_writedata;               // mm_interconnect_0:CPU_debug_mem_slave_writedata -> CPU:debug_mem_slave_writedata
	wire         mm_interconnect_0_jtag_uart_0_avalon_jtag_slave_chipselect;    // mm_interconnect_0:jtag_uart_0_avalon_jtag_slave_chipselect -> jtag_uart_0:av_chipselect
	wire  [31:0] mm_interconnect_0_jtag_uart_0_avalon_jtag_slave_readdata;      // jtag_uart_0:av_readdata -> mm_interconnect_0:jtag_uart_0_avalon_jtag_slave_readdata
	wire         mm_interconnect_0_jtag_uart_0_avalon_jtag_slave_waitrequest;   // jtag_uart_0:av_waitrequest -> mm_interconnect_0:jtag_uart_0_avalon_jtag_slave_waitrequest
	wire   [0:0] mm_interconnect_0_jtag_uart_0_avalon_jtag_slave_address;       // mm_interconnect_0:jtag_uart_0_avalon_jtag_slave_address -> jtag_uart_0:av_address
	wire         mm_interconnect_0_jtag_uart_0_avalon_jtag_slave_read;          // mm_interconnect_0:jtag_uart_0_avalon_jtag_slave_read -> jtag_uart_0:av_read_n
	wire         mm_interconnect_0_jtag_uart_0_avalon_jtag_slave_write;         // mm_interconnect_0:jtag_uart_0_avalon_jtag_slave_write -> jtag_uart_0:av_write_n
	wire  [31:0] mm_interconnect_0_jtag_uart_0_avalon_jtag_slave_writedata;     // mm_interconnect_0:jtag_uart_0_avalon_jtag_slave_writedata -> jtag_uart_0:av_writedata
	wire         mm_interconnect_0_dma_controller_0_avalon_slave_0_chipselect;  // mm_interconnect_0:DMA_controller_0_avalon_slave_0_chipselect -> DMA_controller_0:avalon_cs_i
	wire  [31:0] mm_interconnect_0_dma_controller_0_avalon_slave_0_readdata;    // DMA_controller_0:avalon_read_data_o -> mm_interconnect_0:DMA_controller_0_avalon_slave_0_readdata
	wire         mm_interconnect_0_dma_controller_0_avalon_slave_0_waitrequest; // DMA_controller_0:avalon_waitrequest_o -> mm_interconnect_0:DMA_controller_0_avalon_slave_0_waitrequest
	wire   [2:0] mm_interconnect_0_dma_controller_0_avalon_slave_0_address;     // mm_interconnect_0:DMA_controller_0_avalon_slave_0_address -> DMA_controller_0:avalon_address_i
	wire         mm_interconnect_0_dma_controller_0_avalon_slave_0_read;        // mm_interconnect_0:DMA_controller_0_avalon_slave_0_read -> DMA_controller_0:avalon_rd_i
	wire         mm_interconnect_0_dma_controller_0_avalon_slave_0_write;       // mm_interconnect_0:DMA_controller_0_avalon_slave_0_write -> DMA_controller_0:avalon_wr_i
	wire  [31:0] mm_interconnect_0_dma_controller_0_avalon_slave_0_writedata;   // mm_interconnect_0:DMA_controller_0_avalon_slave_0_writedata -> DMA_controller_0:avalon_write_data_i
	wire         mm_interconnect_0_gpio_controller_0_avalon_slave_0_chipselect; // mm_interconnect_0:GPIO_controller_0_avalon_slave_0_chipselect -> GPIO_controller_0:ChipSelect
	wire  [31:0] mm_interconnect_0_gpio_controller_0_avalon_slave_0_readdata;   // GPIO_controller_0:ReadData -> mm_interconnect_0:GPIO_controller_0_avalon_slave_0_readdata
	wire   [2:0] mm_interconnect_0_gpio_controller_0_avalon_slave_0_address;    // mm_interconnect_0:GPIO_controller_0_avalon_slave_0_address -> GPIO_controller_0:Address
	wire         mm_interconnect_0_gpio_controller_0_avalon_slave_0_read;       // mm_interconnect_0:GPIO_controller_0_avalon_slave_0_read -> GPIO_controller_0:Read
	wire         mm_interconnect_0_gpio_controller_0_avalon_slave_0_write;      // mm_interconnect_0:GPIO_controller_0_avalon_slave_0_write -> GPIO_controller_0:Write
	wire  [31:0] mm_interconnect_0_gpio_controller_0_avalon_slave_0_writedata;  // mm_interconnect_0:GPIO_controller_0_avalon_slave_0_writedata -> GPIO_controller_0:WriteData
	wire  [31:0] mm_interconnect_0_sysid_qsys_0_control_slave_readdata;         // sysid_qsys_0:readdata -> mm_interconnect_0:sysid_qsys_0_control_slave_readdata
	wire   [0:0] mm_interconnect_0_sysid_qsys_0_control_slave_address;          // mm_interconnect_0:sysid_qsys_0_control_slave_address -> sysid_qsys_0:address
	wire         mm_interconnect_0_timer_0_s1_chipselect;                       // mm_interconnect_0:timer_0_s1_chipselect -> timer_0:chipselect
	wire  [15:0] mm_interconnect_0_timer_0_s1_readdata;                         // timer_0:readdata -> mm_interconnect_0:timer_0_s1_readdata
	wire   [2:0] mm_interconnect_0_timer_0_s1_address;                          // mm_interconnect_0:timer_0_s1_address -> timer_0:address
	wire         mm_interconnect_0_timer_0_s1_write;                            // mm_interconnect_0:timer_0_s1_write -> timer_0:write_n
	wire  [15:0] mm_interconnect_0_timer_0_s1_writedata;                        // mm_interconnect_0:timer_0_s1_writedata -> timer_0:writedata
	wire         irq_mapper_receiver0_irq;                                      // DMA_controller_0:end_of_transaction_irq_o -> irq_mapper:receiver0_irq
	wire         irq_mapper_receiver1_irq;                                      // jtag_uart_0:av_irq -> irq_mapper:receiver1_irq
	wire         irq_mapper_receiver2_irq;                                      // timer_0:irq -> irq_mapper:receiver2_irq
	wire  [31:0] cpu_irq_irq;                                                   // irq_mapper:sender_irq -> CPU:irq
	wire         rst_controller_reset_out_reset;                                // rst_controller:reset_out -> [CPU:reset_n, DMA_controller_0:reset_i, GPIO_controller_0:nReset, SDRAM_controller:reset_n, irq_mapper:reset, jtag_uart_0:rst_n, mm_interconnect_0:DMA_controller_0_reset_sink_reset_bridge_in_reset_reset, rst_translator:in_reset, sysid_qsys_0:reset_n, timer_0:reset_n]
	wire         rst_controller_reset_out_reset_req;                            // rst_controller:reset_req -> [CPU:reset_req, rst_translator:reset_req_in]
	wire         cpu_debug_reset_request_reset;                                 // CPU:debug_reset_request -> [rst_controller:reset_in1, rst_controller_001:reset_in1]
	wire         rst_controller_001_reset_out_reset;                            // rst_controller_001:reset_out -> sys_sdram_pll_0:ref_reset_reset

	newmodel_CPU cpu (
		.clk                                 (sys_sdram_pll_0_sys_clk_clk),                       //                       clk.clk
		.reset_n                             (~rst_controller_reset_out_reset),                   //                     reset.reset_n
		.reset_req                           (rst_controller_reset_out_reset_req),                //                          .reset_req
		.d_address                           (cpu_data_master_address),                           //               data_master.address
		.d_byteenable                        (cpu_data_master_byteenable),                        //                          .byteenable
		.d_read                              (cpu_data_master_read),                              //                          .read
		.d_readdata                          (cpu_data_master_readdata),                          //                          .readdata
		.d_waitrequest                       (cpu_data_master_waitrequest),                       //                          .waitrequest
		.d_write                             (cpu_data_master_write),                             //                          .write
		.d_writedata                         (cpu_data_master_writedata),                         //                          .writedata
		.d_readdatavalid                     (cpu_data_master_readdatavalid),                     //                          .readdatavalid
		.debug_mem_slave_debugaccess_to_roms (cpu_data_master_debugaccess),                       //                          .debugaccess
		.i_address                           (cpu_instruction_master_address),                    //        instruction_master.address
		.i_read                              (cpu_instruction_master_read),                       //                          .read
		.i_readdata                          (cpu_instruction_master_readdata),                   //                          .readdata
		.i_waitrequest                       (cpu_instruction_master_waitrequest),                //                          .waitrequest
		.i_readdatavalid                     (cpu_instruction_master_readdatavalid),              //                          .readdatavalid
		.irq                                 (cpu_irq_irq),                                       //                       irq.irq
		.debug_reset_request                 (cpu_debug_reset_request_reset),                     //       debug_reset_request.reset
		.debug_mem_slave_address             (mm_interconnect_0_cpu_debug_mem_slave_address),     //           debug_mem_slave.address
		.debug_mem_slave_byteenable          (mm_interconnect_0_cpu_debug_mem_slave_byteenable),  //                          .byteenable
		.debug_mem_slave_debugaccess         (mm_interconnect_0_cpu_debug_mem_slave_debugaccess), //                          .debugaccess
		.debug_mem_slave_read                (mm_interconnect_0_cpu_debug_mem_slave_read),        //                          .read
		.debug_mem_slave_readdata            (mm_interconnect_0_cpu_debug_mem_slave_readdata),    //                          .readdata
		.debug_mem_slave_waitrequest         (mm_interconnect_0_cpu_debug_mem_slave_waitrequest), //                          .waitrequest
		.debug_mem_slave_write               (mm_interconnect_0_cpu_debug_mem_slave_write),       //                          .write
		.debug_mem_slave_writedata           (mm_interconnect_0_cpu_debug_mem_slave_writedata),   //                          .writedata
		.dummy_ci_port                       ()                                                   // custom_instruction_master.readra
	);

	DMA_LCD_ctrl #(
		.SIZEOFINT16BYTE (2),
		.SIZEOFINT16     (16),
		.SIZEOFINT32     (32),
		.SIZEOFAVALONADD (3)
	) dma_controller_0 (
		.avalon_cs_i              (mm_interconnect_0_dma_controller_0_avalon_slave_0_chipselect),  //   avalon_slave_0.chipselect
		.avalon_wr_i              (mm_interconnect_0_dma_controller_0_avalon_slave_0_write),       //                 .write
		.avalon_rd_i              (mm_interconnect_0_dma_controller_0_avalon_slave_0_read),        //                 .read
		.avalon_read_data_o       (mm_interconnect_0_dma_controller_0_avalon_slave_0_readdata),    //                 .readdata
		.avalon_address_i         (mm_interconnect_0_dma_controller_0_avalon_slave_0_address),     //                 .address
		.avalon_waitrequest_o     (mm_interconnect_0_dma_controller_0_avalon_slave_0_waitrequest), //                 .waitrequest
		.avalon_write_data_i      (mm_interconnect_0_dma_controller_0_avalon_slave_0_writedata),   //                 .writedata
		.clk_i                    (sys_sdram_pll_0_sys_clk_clk),                                   //       clock_sink.clk
		.LCD_D_C_n_o              (dma_controller_0_conduit_end_d_c_n),                            //      conduit_end.d_c_n
		.LCD_WR_n_o               (dma_controller_0_conduit_end_wr_n),                             //                 .wr_n
		.LCD_data_o               (dma_controller_0_conduit_end_data),                             //                 .data
		.reset_i                  (rst_controller_reset_out_reset),                                //       reset_sink.reset
		.master_address_o         (dma_controller_0_avalon_master_address),                        //    avalon_master.address
		.master_read_o            (dma_controller_0_avalon_master_read),                           //                 .read
		.master_readdata_i        (dma_controller_0_avalon_master_readdata),                       //                 .readdata
		.master_waitrequest_i     (dma_controller_0_avalon_master_waitrequest),                    //                 .waitrequest
		.end_of_transaction_irq_o (irq_mapper_receiver0_irq)                                       // interrupt_sender.irq
	);

	ParallelPort gpio_controller_0 (
		.Clk        (sys_sdram_pll_0_sys_clk_clk),                                   //          clock.clk
		.Address    (mm_interconnect_0_gpio_controller_0_avalon_slave_0_address),    // avalon_slave_0.address
		.ChipSelect (mm_interconnect_0_gpio_controller_0_avalon_slave_0_chipselect), //               .chipselect
		.Read       (mm_interconnect_0_gpio_controller_0_avalon_slave_0_read),       //               .read
		.Write      (mm_interconnect_0_gpio_controller_0_avalon_slave_0_write),      //               .write
		.ReadData   (mm_interconnect_0_gpio_controller_0_avalon_slave_0_readdata),   //               .readdata
		.WriteData  (mm_interconnect_0_gpio_controller_0_avalon_slave_0_writedata),  //               .writedata
		.ParPort    (gpio_controller_0_conduit_end_export),                          //    conduit_end.export
		.nReset     (~rst_controller_reset_out_reset)                                //     reset_sink.reset_n
	);

	newmodel_SDRAM_controller sdram_controller (
		.clk            (sys_sdram_pll_0_sys_clk_clk),                         //   clk.clk
		.reset_n        (~rst_controller_reset_out_reset),                     // reset.reset_n
		.az_addr        (mm_interconnect_0_sdram_controller_s1_address),       //    s1.address
		.az_be_n        (~mm_interconnect_0_sdram_controller_s1_byteenable),   //      .byteenable_n
		.az_cs          (mm_interconnect_0_sdram_controller_s1_chipselect),    //      .chipselect
		.az_data        (mm_interconnect_0_sdram_controller_s1_writedata),     //      .writedata
		.az_rd_n        (~mm_interconnect_0_sdram_controller_s1_read),         //      .read_n
		.az_wr_n        (~mm_interconnect_0_sdram_controller_s1_write),        //      .write_n
		.za_data        (mm_interconnect_0_sdram_controller_s1_readdata),      //      .readdata
		.za_valid       (mm_interconnect_0_sdram_controller_s1_readdatavalid), //      .readdatavalid
		.za_waitrequest (mm_interconnect_0_sdram_controller_s1_waitrequest),   //      .waitrequest
		.zs_addr        (sdram_controller_wire_addr),                          //  wire.export
		.zs_ba          (sdram_controller_wire_ba),                            //      .export
		.zs_cas_n       (sdram_controller_wire_cas_n),                         //      .export
		.zs_cke         (sdram_controller_wire_cke),                           //      .export
		.zs_cs_n        (sdram_controller_wire_cs_n),                          //      .export
		.zs_dq          (sdram_controller_wire_dq),                            //      .export
		.zs_dqm         (sdram_controller_wire_dqm),                           //      .export
		.zs_ras_n       (sdram_controller_wire_ras_n),                         //      .export
		.zs_we_n        (sdram_controller_wire_we_n)                           //      .export
	);

	newmodel_jtag_uart_0 jtag_uart_0 (
		.clk            (sys_sdram_pll_0_sys_clk_clk),                                 //               clk.clk
		.rst_n          (~rst_controller_reset_out_reset),                             //             reset.reset_n
		.av_chipselect  (mm_interconnect_0_jtag_uart_0_avalon_jtag_slave_chipselect),  // avalon_jtag_slave.chipselect
		.av_address     (mm_interconnect_0_jtag_uart_0_avalon_jtag_slave_address),     //                  .address
		.av_read_n      (~mm_interconnect_0_jtag_uart_0_avalon_jtag_slave_read),       //                  .read_n
		.av_readdata    (mm_interconnect_0_jtag_uart_0_avalon_jtag_slave_readdata),    //                  .readdata
		.av_write_n     (~mm_interconnect_0_jtag_uart_0_avalon_jtag_slave_write),      //                  .write_n
		.av_writedata   (mm_interconnect_0_jtag_uart_0_avalon_jtag_slave_writedata),   //                  .writedata
		.av_waitrequest (mm_interconnect_0_jtag_uart_0_avalon_jtag_slave_waitrequest), //                  .waitrequest
		.av_irq         (irq_mapper_receiver1_irq)                                     //               irq.irq
	);

	newmodel_sys_sdram_pll_0 sys_sdram_pll_0 (
		.ref_clk_clk        (clk_clk),                            //      ref_clk.clk
		.ref_reset_reset    (rst_controller_001_reset_out_reset), //    ref_reset.reset
		.sys_clk_clk        (sys_sdram_pll_0_sys_clk_clk),        //      sys_clk.clk
		.sdram_clk_clk      (sys_sdram_pll_0_sdram_clk_clk),      //    sdram_clk.clk
		.reset_source_reset ()                                    // reset_source.reset
	);

	newmodel_sysid_qsys_0 sysid_qsys_0 (
		.clock    (sys_sdram_pll_0_sys_clk_clk),                           //           clk.clk
		.reset_n  (~rst_controller_reset_out_reset),                       //         reset.reset_n
		.readdata (mm_interconnect_0_sysid_qsys_0_control_slave_readdata), // control_slave.readdata
		.address  (mm_interconnect_0_sysid_qsys_0_control_slave_address)   //              .address
	);

	newmodel_timer_0 timer_0 (
		.clk        (sys_sdram_pll_0_sys_clk_clk),             //   clk.clk
		.reset_n    (~rst_controller_reset_out_reset),         // reset.reset_n
		.address    (mm_interconnect_0_timer_0_s1_address),    //    s1.address
		.writedata  (mm_interconnect_0_timer_0_s1_writedata),  //      .writedata
		.readdata   (mm_interconnect_0_timer_0_s1_readdata),   //      .readdata
		.chipselect (mm_interconnect_0_timer_0_s1_chipselect), //      .chipselect
		.write_n    (~mm_interconnect_0_timer_0_s1_write),     //      .write_n
		.irq        (irq_mapper_receiver2_irq)                 //   irq.irq
	);

	newmodel_mm_interconnect_0 mm_interconnect_0 (
		.sys_sdram_pll_0_sys_clk_clk                             (sys_sdram_pll_0_sys_clk_clk),                                   //                           sys_sdram_pll_0_sys_clk.clk
		.DMA_controller_0_reset_sink_reset_bridge_in_reset_reset (rst_controller_reset_out_reset),                                // DMA_controller_0_reset_sink_reset_bridge_in_reset.reset
		.CPU_data_master_address                                 (cpu_data_master_address),                                       //                                   CPU_data_master.address
		.CPU_data_master_waitrequest                             (cpu_data_master_waitrequest),                                   //                                                  .waitrequest
		.CPU_data_master_byteenable                              (cpu_data_master_byteenable),                                    //                                                  .byteenable
		.CPU_data_master_read                                    (cpu_data_master_read),                                          //                                                  .read
		.CPU_data_master_readdata                                (cpu_data_master_readdata),                                      //                                                  .readdata
		.CPU_data_master_readdatavalid                           (cpu_data_master_readdatavalid),                                 //                                                  .readdatavalid
		.CPU_data_master_write                                   (cpu_data_master_write),                                         //                                                  .write
		.CPU_data_master_writedata                               (cpu_data_master_writedata),                                     //                                                  .writedata
		.CPU_data_master_debugaccess                             (cpu_data_master_debugaccess),                                   //                                                  .debugaccess
		.CPU_instruction_master_address                          (cpu_instruction_master_address),                                //                            CPU_instruction_master.address
		.CPU_instruction_master_waitrequest                      (cpu_instruction_master_waitrequest),                            //                                                  .waitrequest
		.CPU_instruction_master_read                             (cpu_instruction_master_read),                                   //                                                  .read
		.CPU_instruction_master_readdata                         (cpu_instruction_master_readdata),                               //                                                  .readdata
		.CPU_instruction_master_readdatavalid                    (cpu_instruction_master_readdatavalid),                          //                                                  .readdatavalid
		.DMA_controller_0_avalon_master_address                  (dma_controller_0_avalon_master_address),                        //                    DMA_controller_0_avalon_master.address
		.DMA_controller_0_avalon_master_waitrequest              (dma_controller_0_avalon_master_waitrequest),                    //                                                  .waitrequest
		.DMA_controller_0_avalon_master_read                     (dma_controller_0_avalon_master_read),                           //                                                  .read
		.DMA_controller_0_avalon_master_readdata                 (dma_controller_0_avalon_master_readdata),                       //                                                  .readdata
		.CPU_debug_mem_slave_address                             (mm_interconnect_0_cpu_debug_mem_slave_address),                 //                               CPU_debug_mem_slave.address
		.CPU_debug_mem_slave_write                               (mm_interconnect_0_cpu_debug_mem_slave_write),                   //                                                  .write
		.CPU_debug_mem_slave_read                                (mm_interconnect_0_cpu_debug_mem_slave_read),                    //                                                  .read
		.CPU_debug_mem_slave_readdata                            (mm_interconnect_0_cpu_debug_mem_slave_readdata),                //                                                  .readdata
		.CPU_debug_mem_slave_writedata                           (mm_interconnect_0_cpu_debug_mem_slave_writedata),               //                                                  .writedata
		.CPU_debug_mem_slave_byteenable                          (mm_interconnect_0_cpu_debug_mem_slave_byteenable),              //                                                  .byteenable
		.CPU_debug_mem_slave_waitrequest                         (mm_interconnect_0_cpu_debug_mem_slave_waitrequest),             //                                                  .waitrequest
		.CPU_debug_mem_slave_debugaccess                         (mm_interconnect_0_cpu_debug_mem_slave_debugaccess),             //                                                  .debugaccess
		.DMA_controller_0_avalon_slave_0_address                 (mm_interconnect_0_dma_controller_0_avalon_slave_0_address),     //                   DMA_controller_0_avalon_slave_0.address
		.DMA_controller_0_avalon_slave_0_write                   (mm_interconnect_0_dma_controller_0_avalon_slave_0_write),       //                                                  .write
		.DMA_controller_0_avalon_slave_0_read                    (mm_interconnect_0_dma_controller_0_avalon_slave_0_read),        //                                                  .read
		.DMA_controller_0_avalon_slave_0_readdata                (mm_interconnect_0_dma_controller_0_avalon_slave_0_readdata),    //                                                  .readdata
		.DMA_controller_0_avalon_slave_0_writedata               (mm_interconnect_0_dma_controller_0_avalon_slave_0_writedata),   //                                                  .writedata
		.DMA_controller_0_avalon_slave_0_waitrequest             (mm_interconnect_0_dma_controller_0_avalon_slave_0_waitrequest), //                                                  .waitrequest
		.DMA_controller_0_avalon_slave_0_chipselect              (mm_interconnect_0_dma_controller_0_avalon_slave_0_chipselect),  //                                                  .chipselect
		.GPIO_controller_0_avalon_slave_0_address                (mm_interconnect_0_gpio_controller_0_avalon_slave_0_address),    //                  GPIO_controller_0_avalon_slave_0.address
		.GPIO_controller_0_avalon_slave_0_write                  (mm_interconnect_0_gpio_controller_0_avalon_slave_0_write),      //                                                  .write
		.GPIO_controller_0_avalon_slave_0_read                   (mm_interconnect_0_gpio_controller_0_avalon_slave_0_read),       //                                                  .read
		.GPIO_controller_0_avalon_slave_0_readdata               (mm_interconnect_0_gpio_controller_0_avalon_slave_0_readdata),   //                                                  .readdata
		.GPIO_controller_0_avalon_slave_0_writedata              (mm_interconnect_0_gpio_controller_0_avalon_slave_0_writedata),  //                                                  .writedata
		.GPIO_controller_0_avalon_slave_0_chipselect             (mm_interconnect_0_gpio_controller_0_avalon_slave_0_chipselect), //                                                  .chipselect
		.jtag_uart_0_avalon_jtag_slave_address                   (mm_interconnect_0_jtag_uart_0_avalon_jtag_slave_address),       //                     jtag_uart_0_avalon_jtag_slave.address
		.jtag_uart_0_avalon_jtag_slave_write                     (mm_interconnect_0_jtag_uart_0_avalon_jtag_slave_write),         //                                                  .write
		.jtag_uart_0_avalon_jtag_slave_read                      (mm_interconnect_0_jtag_uart_0_avalon_jtag_slave_read),          //                                                  .read
		.jtag_uart_0_avalon_jtag_slave_readdata                  (mm_interconnect_0_jtag_uart_0_avalon_jtag_slave_readdata),      //                                                  .readdata
		.jtag_uart_0_avalon_jtag_slave_writedata                 (mm_interconnect_0_jtag_uart_0_avalon_jtag_slave_writedata),     //                                                  .writedata
		.jtag_uart_0_avalon_jtag_slave_waitrequest               (mm_interconnect_0_jtag_uart_0_avalon_jtag_slave_waitrequest),   //                                                  .waitrequest
		.jtag_uart_0_avalon_jtag_slave_chipselect                (mm_interconnect_0_jtag_uart_0_avalon_jtag_slave_chipselect),    //                                                  .chipselect
		.SDRAM_controller_s1_address                             (mm_interconnect_0_sdram_controller_s1_address),                 //                               SDRAM_controller_s1.address
		.SDRAM_controller_s1_write                               (mm_interconnect_0_sdram_controller_s1_write),                   //                                                  .write
		.SDRAM_controller_s1_read                                (mm_interconnect_0_sdram_controller_s1_read),                    //                                                  .read
		.SDRAM_controller_s1_readdata                            (mm_interconnect_0_sdram_controller_s1_readdata),                //                                                  .readdata
		.SDRAM_controller_s1_writedata                           (mm_interconnect_0_sdram_controller_s1_writedata),               //                                                  .writedata
		.SDRAM_controller_s1_byteenable                          (mm_interconnect_0_sdram_controller_s1_byteenable),              //                                                  .byteenable
		.SDRAM_controller_s1_readdatavalid                       (mm_interconnect_0_sdram_controller_s1_readdatavalid),           //                                                  .readdatavalid
		.SDRAM_controller_s1_waitrequest                         (mm_interconnect_0_sdram_controller_s1_waitrequest),             //                                                  .waitrequest
		.SDRAM_controller_s1_chipselect                          (mm_interconnect_0_sdram_controller_s1_chipselect),              //                                                  .chipselect
		.sysid_qsys_0_control_slave_address                      (mm_interconnect_0_sysid_qsys_0_control_slave_address),          //                        sysid_qsys_0_control_slave.address
		.sysid_qsys_0_control_slave_readdata                     (mm_interconnect_0_sysid_qsys_0_control_slave_readdata),         //                                                  .readdata
		.timer_0_s1_address                                      (mm_interconnect_0_timer_0_s1_address),                          //                                        timer_0_s1.address
		.timer_0_s1_write                                        (mm_interconnect_0_timer_0_s1_write),                            //                                                  .write
		.timer_0_s1_readdata                                     (mm_interconnect_0_timer_0_s1_readdata),                         //                                                  .readdata
		.timer_0_s1_writedata                                    (mm_interconnect_0_timer_0_s1_writedata),                        //                                                  .writedata
		.timer_0_s1_chipselect                                   (mm_interconnect_0_timer_0_s1_chipselect)                        //                                                  .chipselect
	);

	newmodel_irq_mapper irq_mapper (
		.clk           (sys_sdram_pll_0_sys_clk_clk),    //       clk.clk
		.reset         (rst_controller_reset_out_reset), // clk_reset.reset
		.receiver0_irq (irq_mapper_receiver0_irq),       // receiver0.irq
		.receiver1_irq (irq_mapper_receiver1_irq),       // receiver1.irq
		.receiver2_irq (irq_mapper_receiver2_irq),       // receiver2.irq
		.sender_irq    (cpu_irq_irq)                     //    sender.irq
	);

	altera_reset_controller #(
		.NUM_RESET_INPUTS          (2),
		.OUTPUT_RESET_SYNC_EDGES   ("deassert"),
		.SYNC_DEPTH                (2),
		.RESET_REQUEST_PRESENT     (1),
		.RESET_REQ_WAIT_TIME       (1),
		.MIN_RST_ASSERTION_TIME    (3),
		.RESET_REQ_EARLY_DSRT_TIME (1),
		.USE_RESET_REQUEST_IN0     (0),
		.USE_RESET_REQUEST_IN1     (0),
		.USE_RESET_REQUEST_IN2     (0),
		.USE_RESET_REQUEST_IN3     (0),
		.USE_RESET_REQUEST_IN4     (0),
		.USE_RESET_REQUEST_IN5     (0),
		.USE_RESET_REQUEST_IN6     (0),
		.USE_RESET_REQUEST_IN7     (0),
		.USE_RESET_REQUEST_IN8     (0),
		.USE_RESET_REQUEST_IN9     (0),
		.USE_RESET_REQUEST_IN10    (0),
		.USE_RESET_REQUEST_IN11    (0),
		.USE_RESET_REQUEST_IN12    (0),
		.USE_RESET_REQUEST_IN13    (0),
		.USE_RESET_REQUEST_IN14    (0),
		.USE_RESET_REQUEST_IN15    (0),
		.ADAPT_RESET_REQUEST       (0)
	) rst_controller (
		.reset_in0      (~reset_reset_n),                     // reset_in0.reset
		.reset_in1      (cpu_debug_reset_request_reset),      // reset_in1.reset
		.clk            (sys_sdram_pll_0_sys_clk_clk),        //       clk.clk
		.reset_out      (rst_controller_reset_out_reset),     // reset_out.reset
		.reset_req      (rst_controller_reset_out_reset_req), //          .reset_req
		.reset_req_in0  (1'b0),                               // (terminated)
		.reset_req_in1  (1'b0),                               // (terminated)
		.reset_in2      (1'b0),                               // (terminated)
		.reset_req_in2  (1'b0),                               // (terminated)
		.reset_in3      (1'b0),                               // (terminated)
		.reset_req_in3  (1'b0),                               // (terminated)
		.reset_in4      (1'b0),                               // (terminated)
		.reset_req_in4  (1'b0),                               // (terminated)
		.reset_in5      (1'b0),                               // (terminated)
		.reset_req_in5  (1'b0),                               // (terminated)
		.reset_in6      (1'b0),                               // (terminated)
		.reset_req_in6  (1'b0),                               // (terminated)
		.reset_in7      (1'b0),                               // (terminated)
		.reset_req_in7  (1'b0),                               // (terminated)
		.reset_in8      (1'b0),                               // (terminated)
		.reset_req_in8  (1'b0),                               // (terminated)
		.reset_in9      (1'b0),                               // (terminated)
		.reset_req_in9  (1'b0),                               // (terminated)
		.reset_in10     (1'b0),                               // (terminated)
		.reset_req_in10 (1'b0),                               // (terminated)
		.reset_in11     (1'b0),                               // (terminated)
		.reset_req_in11 (1'b0),                               // (terminated)
		.reset_in12     (1'b0),                               // (terminated)
		.reset_req_in12 (1'b0),                               // (terminated)
		.reset_in13     (1'b0),                               // (terminated)
		.reset_req_in13 (1'b0),                               // (terminated)
		.reset_in14     (1'b0),                               // (terminated)
		.reset_req_in14 (1'b0),                               // (terminated)
		.reset_in15     (1'b0),                               // (terminated)
		.reset_req_in15 (1'b0)                                // (terminated)
	);

	altera_reset_controller #(
		.NUM_RESET_INPUTS          (2),
		.OUTPUT_RESET_SYNC_EDGES   ("deassert"),
		.SYNC_DEPTH                (2),
		.RESET_REQUEST_PRESENT     (0),
		.RESET_REQ_WAIT_TIME       (1),
		.MIN_RST_ASSERTION_TIME    (3),
		.RESET_REQ_EARLY_DSRT_TIME (1),
		.USE_RESET_REQUEST_IN0     (0),
		.USE_RESET_REQUEST_IN1     (0),
		.USE_RESET_REQUEST_IN2     (0),
		.USE_RESET_REQUEST_IN3     (0),
		.USE_RESET_REQUEST_IN4     (0),
		.USE_RESET_REQUEST_IN5     (0),
		.USE_RESET_REQUEST_IN6     (0),
		.USE_RESET_REQUEST_IN7     (0),
		.USE_RESET_REQUEST_IN8     (0),
		.USE_RESET_REQUEST_IN9     (0),
		.USE_RESET_REQUEST_IN10    (0),
		.USE_RESET_REQUEST_IN11    (0),
		.USE_RESET_REQUEST_IN12    (0),
		.USE_RESET_REQUEST_IN13    (0),
		.USE_RESET_REQUEST_IN14    (0),
		.USE_RESET_REQUEST_IN15    (0),
		.ADAPT_RESET_REQUEST       (0)
	) rst_controller_001 (
		.reset_in0      (~reset_reset_n),                     // reset_in0.reset
		.reset_in1      (cpu_debug_reset_request_reset),      // reset_in1.reset
		.clk            (clk_clk),                            //       clk.clk
		.reset_out      (rst_controller_001_reset_out_reset), // reset_out.reset
		.reset_req      (),                                   // (terminated)
		.reset_req_in0  (1'b0),                               // (terminated)
		.reset_req_in1  (1'b0),                               // (terminated)
		.reset_in2      (1'b0),                               // (terminated)
		.reset_req_in2  (1'b0),                               // (terminated)
		.reset_in3      (1'b0),                               // (terminated)
		.reset_req_in3  (1'b0),                               // (terminated)
		.reset_in4      (1'b0),                               // (terminated)
		.reset_req_in4  (1'b0),                               // (terminated)
		.reset_in5      (1'b0),                               // (terminated)
		.reset_req_in5  (1'b0),                               // (terminated)
		.reset_in6      (1'b0),                               // (terminated)
		.reset_req_in6  (1'b0),                               // (terminated)
		.reset_in7      (1'b0),                               // (terminated)
		.reset_req_in7  (1'b0),                               // (terminated)
		.reset_in8      (1'b0),                               // (terminated)
		.reset_req_in8  (1'b0),                               // (terminated)
		.reset_in9      (1'b0),                               // (terminated)
		.reset_req_in9  (1'b0),                               // (terminated)
		.reset_in10     (1'b0),                               // (terminated)
		.reset_req_in10 (1'b0),                               // (terminated)
		.reset_in11     (1'b0),                               // (terminated)
		.reset_req_in11 (1'b0),                               // (terminated)
		.reset_in12     (1'b0),                               // (terminated)
		.reset_req_in12 (1'b0),                               // (terminated)
		.reset_in13     (1'b0),                               // (terminated)
		.reset_req_in13 (1'b0),                               // (terminated)
		.reset_in14     (1'b0),                               // (terminated)
		.reset_req_in14 (1'b0),                               // (terminated)
		.reset_in15     (1'b0),                               // (terminated)
		.reset_req_in15 (1'b0)                                // (terminated)
	);

endmodule
